
FH_HybridControlBoard_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd28  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0810bfc8  0810bfc8  0000cfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810c0b4  0810c0b4  0000d0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810c0b8  0810c0b8  0000d0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  10000000  0810c0bc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RAM_D3       00000208  1000006c  0810c128  0000e06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004e80  10000274  0810c330  0000e274  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100050f4  0810c330  0000f0f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e274  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021572  00000000  00000000  0000e2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004757  00000000  00000000  0002f814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c70  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000159f  00000000  00000000  00035be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000405df  00000000  00000000  0003717f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023752  00000000  00000000  0007775e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a7e7c  00000000  00000000  0009aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000093  00000000  00000000  00242d2c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007b08  00000000  00000000  00242dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a7  00000000  00000000  0024a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000274 	.word	0x10000274
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810bfb0 	.word	0x0810bfb0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000278 	.word	0x10000278
 81002dc:	0810bfb0 	.word	0x0810bfb0

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	@ (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	@ (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	@ (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	@ (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100316:	4b29      	ldr	r3, [pc, #164]	@ (81003bc <main+0xac>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810031c:	4a27      	ldr	r2, [pc, #156]	@ (81003bc <main+0xac>)
 810031e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100326:	4b25      	ldr	r3, [pc, #148]	@ (81003bc <main+0xac>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810032c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f002 ff51 	bl	81031dc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f003 f82b 	bl	8103394 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f002 ffac 	bl	81032a0 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b1d      	ldr	r3, [pc, #116]	@ (81003c0 <main+0xb0>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d108      	bne.n	8100368 <main+0x58>
 8100356:	4b1b      	ldr	r3, [pc, #108]	@ (81003c4 <main+0xb4>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810035c:	4a19      	ldr	r2, [pc, #100]	@ (81003c4 <main+0xb4>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100366:	e007      	b.n	8100378 <main+0x68>
 8100368:	4b16      	ldr	r3, [pc, #88]	@ (81003c4 <main+0xb4>)
 810036a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810036e:	4a15      	ldr	r2, [pc, #84]	@ (81003c4 <main+0xb4>)
 8100370:	f043 0301 	orr.w	r3, r3, #1
 8100374:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100378:	f000 fc6c 	bl	8100c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 810037c:	f000 fa74 	bl	8100868 <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC3_Init();
 8100380:	f000 f828 	bl	81003d4 <MX_ADC3_Init>
  MX_FDCAN1_Init();
 8100384:	f000 f8a2 	bl	81004cc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8100388:	f000 f91a 	bl	81005c0 <MX_FDCAN2_Init>
  MX_IWDG2_Init();
 810038c:	f000 f97c 	bl	8100688 <MX_IWDG2_Init>
  MX_SDMMC1_SD_Init();
 8100390:	f000 f9a4 	bl	81006dc <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8100394:	f000 f9d0 	bl	8100738 <MX_SPI1_Init>
  MX_WWDG2_Init();
 8100398:	f000 fa2e 	bl	81007f8 <MX_WWDG2_Init>
  MX_FATFS_Init();
 810039c:	f007 ffa4 	bl	81082e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81003a0:	f008 fa3e 	bl	8108820 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81003a4:	4a08      	ldr	r2, [pc, #32]	@ (81003c8 <main+0xb8>)
 81003a6:	2100      	movs	r1, #0
 81003a8:	4808      	ldr	r0, [pc, #32]	@ (81003cc <main+0xbc>)
 81003aa:	f008 faba 	bl	8108922 <osThreadNew>
 81003ae:	4603      	mov	r3, r0
 81003b0:	4a07      	ldr	r2, [pc, #28]	@ (81003d0 <main+0xc0>)
 81003b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81003b4:	f008 fa7a 	bl	81088ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003b8:	bf00      	nop
 81003ba:	e7fd      	b.n	81003b8 <main+0xa8>
 81003bc:	58024400 	.word	0x58024400
 81003c0:	e000ed00 	.word	0xe000ed00
 81003c4:	58026400 	.word	0x58026400
 81003c8:	0810c050 	.word	0x0810c050
 81003cc:	0810084d 	.word	0x0810084d
 81003d0:	1000055c 	.word	0x1000055c

081003d4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81003d4:	b580      	push	{r7, lr}
 81003d6:	b088      	sub	sp, #32
 81003d8:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_ADC3, RESMGR_FLAGS_ACCESS_NORMAL | \
 81003da:	2300      	movs	r3, #0
 81003dc:	2200      	movs	r2, #0
 81003de:	210a      	movs	r1, #10
 81003e0:	2001      	movs	r0, #1
 81003e2:	f00b fa3f 	bl	810b864 <ResMgr_Request>
 81003e6:	4603      	mov	r3, r0
 81003e8:	2b00      	cmp	r3, #0
 81003ea:	d001      	beq.n	81003f0 <MX_ADC3_Init+0x1c>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_ADC3 */
    Error_Handler();
 81003ec:	f000 fa36 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81003f0:	1d3b      	adds	r3, r7, #4
 81003f2:	2200      	movs	r2, #0
 81003f4:	601a      	str	r2, [r3, #0]
 81003f6:	605a      	str	r2, [r3, #4]
 81003f8:	609a      	str	r2, [r3, #8]
 81003fa:	60da      	str	r2, [r3, #12]
 81003fc:	611a      	str	r2, [r3, #16]
 81003fe:	615a      	str	r2, [r3, #20]
 8100400:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100402:	4b2f      	ldr	r3, [pc, #188]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100404:	4a2f      	ldr	r2, [pc, #188]	@ (81004c4 <MX_ADC3_Init+0xf0>)
 8100406:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8100408:	4b2d      	ldr	r3, [pc, #180]	@ (81004c0 <MX_ADC3_Init+0xec>)
 810040a:	2200      	movs	r2, #0
 810040c:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 810040e:	4b2c      	ldr	r3, [pc, #176]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100410:	2200      	movs	r2, #0
 8100412:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100414:	4b2a      	ldr	r3, [pc, #168]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100416:	2204      	movs	r2, #4
 8100418:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 810041a:	4b29      	ldr	r3, [pc, #164]	@ (81004c0 <MX_ADC3_Init+0xec>)
 810041c:	2200      	movs	r2, #0
 810041e:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100420:	4b27      	ldr	r3, [pc, #156]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100422:	2200      	movs	r2, #0
 8100424:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8100426:	4b26      	ldr	r3, [pc, #152]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100428:	2201      	movs	r2, #1
 810042a:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 810042c:	4b24      	ldr	r3, [pc, #144]	@ (81004c0 <MX_ADC3_Init+0xec>)
 810042e:	2200      	movs	r2, #0
 8100430:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100432:	4b23      	ldr	r3, [pc, #140]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100434:	2200      	movs	r2, #0
 8100436:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100438:	4b21      	ldr	r3, [pc, #132]	@ (81004c0 <MX_ADC3_Init+0xec>)
 810043a:	2200      	movs	r2, #0
 810043c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810043e:	4b20      	ldr	r3, [pc, #128]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100440:	2200      	movs	r2, #0
 8100442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100444:	4b1e      	ldr	r3, [pc, #120]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100446:	2200      	movs	r2, #0
 8100448:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810044a:	4b1d      	ldr	r3, [pc, #116]	@ (81004c0 <MX_ADC3_Init+0xec>)
 810044c:	2200      	movs	r2, #0
 810044e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100450:	4b1b      	ldr	r3, [pc, #108]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100452:	2200      	movs	r2, #0
 8100454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8100458:	4b19      	ldr	r3, [pc, #100]	@ (81004c0 <MX_ADC3_Init+0xec>)
 810045a:	2201      	movs	r2, #1
 810045c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 810045e:	4818      	ldr	r0, [pc, #96]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100460:	f000 fe68 	bl	8101134 <HAL_ADC_Init>
 8100464:	4603      	mov	r3, r0
 8100466:	2b00      	cmp	r3, #0
 8100468:	d001      	beq.n	810046e <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 810046a:	f000 f9f7 	bl	810085c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810046e:	4b14      	ldr	r3, [pc, #80]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100470:	2200      	movs	r2, #0
 8100472:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100474:	4812      	ldr	r0, [pc, #72]	@ (81004c0 <MX_ADC3_Init+0xec>)
 8100476:	f000 fe5d 	bl	8101134 <HAL_ADC_Init>
 810047a:	4603      	mov	r3, r0
 810047c:	2b00      	cmp	r3, #0
 810047e:	d001      	beq.n	8100484 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8100480:	f000 f9ec 	bl	810085c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8100484:	4b10      	ldr	r3, [pc, #64]	@ (81004c8 <MX_ADC3_Init+0xf4>)
 8100486:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100488:	2306      	movs	r3, #6
 810048a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810048c:	2300      	movs	r3, #0
 810048e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100490:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100494:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100496:	2304      	movs	r3, #4
 8100498:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 810049a:	2300      	movs	r3, #0
 810049c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 810049e:	2300      	movs	r3, #0
 81004a0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81004a2:	1d3b      	adds	r3, r7, #4
 81004a4:	4619      	mov	r1, r3
 81004a6:	4806      	ldr	r0, [pc, #24]	@ (81004c0 <MX_ADC3_Init+0xec>)
 81004a8:	f000 ffe6 	bl	8101478 <HAL_ADC_ConfigChannel>
 81004ac:	4603      	mov	r3, r0
 81004ae:	2b00      	cmp	r3, #0
 81004b0:	d001      	beq.n	81004b6 <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 81004b2:	f000 f9d3 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81004b6:	bf00      	nop
 81004b8:	3720      	adds	r7, #32
 81004ba:	46bd      	mov	sp, r7
 81004bc:	bd80      	pop	{r7, pc}
 81004be:	bf00      	nop
 81004c0:	10000290 	.word	0x10000290
 81004c4:	58026000 	.word	0x58026000
 81004c8:	cb840000 	.word	0xcb840000

081004cc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 81004cc:	b580      	push	{r7, lr}
 81004ce:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_FDCAN1, RESMGR_FLAGS_ACCESS_NORMAL | \
 81004d0:	2300      	movs	r3, #0
 81004d2:	2200      	movs	r2, #0
 81004d4:	210a      	movs	r1, #10
 81004d6:	200b      	movs	r0, #11
 81004d8:	f00b f9c4 	bl	810b864 <ResMgr_Request>
 81004dc:	4603      	mov	r3, r0
 81004de:	2b00      	cmp	r3, #0
 81004e0:	d001      	beq.n	81004e6 <MX_FDCAN1_Init+0x1a>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_FDCAN1 */
    Error_Handler();
 81004e2:	f000 f9bb 	bl	810085c <Error_Handler>
    /* USER CODE END RESMGR_UTILITY_FDCAN1 */
  }
  if (ResMgr_Request(RESMGR_ID_FDCAN_CCU, RESMGR_FLAGS_ACCESS_NORMAL | \
 81004e6:	2300      	movs	r3, #0
 81004e8:	2200      	movs	r2, #0
 81004ea:	210a      	movs	r1, #10
 81004ec:	200a      	movs	r0, #10
 81004ee:	f00b f9b9 	bl	810b864 <ResMgr_Request>
 81004f2:	4603      	mov	r3, r0
 81004f4:	2b00      	cmp	r3, #0
 81004f6:	d001      	beq.n	81004fc <MX_FDCAN1_Init+0x30>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_FDCAN_CCU */
    Error_Handler();
 81004f8:	f000 f9b0 	bl	810085c <Error_Handler>
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 81004fc:	4b2e      	ldr	r3, [pc, #184]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 81004fe:	4a2f      	ldr	r2, [pc, #188]	@ (81005bc <MX_FDCAN1_Init+0xf0>)
 8100500:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100502:	4b2d      	ldr	r3, [pc, #180]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100504:	2200      	movs	r2, #0
 8100506:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8100508:	4b2b      	ldr	r3, [pc, #172]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810050a:	2200      	movs	r2, #0
 810050c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 810050e:	4b2a      	ldr	r3, [pc, #168]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100510:	2200      	movs	r2, #0
 8100512:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100514:	4b28      	ldr	r3, [pc, #160]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100516:	2200      	movs	r2, #0
 8100518:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 810051a:	4b27      	ldr	r3, [pc, #156]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810051c:	2200      	movs	r2, #0
 810051e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8100520:	4b25      	ldr	r3, [pc, #148]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100522:	2210      	movs	r2, #16
 8100524:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8100526:	4b24      	ldr	r3, [pc, #144]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100528:	2201      	movs	r2, #1
 810052a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 810052c:	4b22      	ldr	r3, [pc, #136]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810052e:	2202      	movs	r2, #2
 8100530:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8100532:	4b21      	ldr	r3, [pc, #132]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100534:	2202      	movs	r2, #2
 8100536:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8100538:	4b1f      	ldr	r3, [pc, #124]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810053a:	2201      	movs	r2, #1
 810053c:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 810053e:	4b1e      	ldr	r3, [pc, #120]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100540:	2201      	movs	r2, #1
 8100542:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8100544:	4b1c      	ldr	r3, [pc, #112]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100546:	2201      	movs	r2, #1
 8100548:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 810054a:	4b1b      	ldr	r3, [pc, #108]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810054c:	2201      	movs	r2, #1
 810054e:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8100550:	4b19      	ldr	r3, [pc, #100]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100552:	2200      	movs	r2, #0
 8100554:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8100556:	4b18      	ldr	r3, [pc, #96]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100558:	2200      	movs	r2, #0
 810055a:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 810055c:	4b16      	ldr	r3, [pc, #88]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810055e:	2200      	movs	r2, #0
 8100560:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8100562:	4b15      	ldr	r3, [pc, #84]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100564:	2200      	movs	r2, #0
 8100566:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100568:	4b13      	ldr	r3, [pc, #76]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810056a:	2204      	movs	r2, #4
 810056c:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 810056e:	4b12      	ldr	r3, [pc, #72]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100570:	2200      	movs	r2, #0
 8100572:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100574:	4b10      	ldr	r3, [pc, #64]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100576:	2204      	movs	r2, #4
 8100578:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 810057a:	4b0f      	ldr	r3, [pc, #60]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810057c:	2200      	movs	r2, #0
 810057e:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100580:	4b0d      	ldr	r3, [pc, #52]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100582:	2204      	movs	r2, #4
 8100584:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8100586:	4b0c      	ldr	r3, [pc, #48]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100588:	2200      	movs	r2, #0
 810058a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 810058c:	4b0a      	ldr	r3, [pc, #40]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810058e:	2200      	movs	r2, #0
 8100590:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8100592:	4b09      	ldr	r3, [pc, #36]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 8100594:	2200      	movs	r2, #0
 8100596:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100598:	4b07      	ldr	r3, [pc, #28]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 810059a:	2200      	movs	r2, #0
 810059c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 810059e:	4b06      	ldr	r3, [pc, #24]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 81005a0:	2204      	movs	r2, #4
 81005a2:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 81005a4:	4804      	ldr	r0, [pc, #16]	@ (81005b8 <MX_FDCAN1_Init+0xec>)
 81005a6:	f001 fcc7 	bl	8101f38 <HAL_FDCAN_Init>
 81005aa:	4603      	mov	r3, r0
 81005ac:	2b00      	cmp	r3, #0
 81005ae:	d001      	beq.n	81005b4 <MX_FDCAN1_Init+0xe8>
  {
    Error_Handler();
 81005b0:	f000 f954 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 81005b4:	bf00      	nop
 81005b6:	bd80      	pop	{r7, pc}
 81005b8:	100002f4 	.word	0x100002f4
 81005bc:	4000a000 	.word	0x4000a000

081005c0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 81005c0:	b580      	push	{r7, lr}
 81005c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 81005c4:	4b2e      	ldr	r3, [pc, #184]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005c6:	4a2f      	ldr	r2, [pc, #188]	@ (8100684 <MX_FDCAN2_Init+0xc4>)
 81005c8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81005ca:	4b2d      	ldr	r3, [pc, #180]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005cc:	2200      	movs	r2, #0
 81005ce:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 81005d0:	4b2b      	ldr	r3, [pc, #172]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005d2:	2200      	movs	r2, #0
 81005d4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 81005d6:	4b2a      	ldr	r3, [pc, #168]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005d8:	2200      	movs	r2, #0
 81005da:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 81005dc:	4b28      	ldr	r3, [pc, #160]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005de:	2200      	movs	r2, #0
 81005e0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 81005e2:	4b27      	ldr	r3, [pc, #156]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005e4:	2200      	movs	r2, #0
 81005e6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 81005e8:	4b25      	ldr	r3, [pc, #148]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005ea:	2210      	movs	r2, #16
 81005ec:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 81005ee:	4b24      	ldr	r3, [pc, #144]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005f0:	2201      	movs	r2, #1
 81005f2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 81005f4:	4b22      	ldr	r3, [pc, #136]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005f6:	2202      	movs	r2, #2
 81005f8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 81005fa:	4b21      	ldr	r3, [pc, #132]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 81005fc:	2202      	movs	r2, #2
 81005fe:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8100600:	4b1f      	ldr	r3, [pc, #124]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100602:	2201      	movs	r2, #1
 8100604:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100606:	4b1e      	ldr	r3, [pc, #120]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100608:	2201      	movs	r2, #1
 810060a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 810060c:	4b1c      	ldr	r3, [pc, #112]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 810060e:	2201      	movs	r2, #1
 8100610:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8100612:	4b1b      	ldr	r3, [pc, #108]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100614:	2201      	movs	r2, #1
 8100616:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100618:	4b19      	ldr	r3, [pc, #100]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 810061a:	2200      	movs	r2, #0
 810061c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 810061e:	4b18      	ldr	r3, [pc, #96]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100620:	2200      	movs	r2, #0
 8100622:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100624:	4b16      	ldr	r3, [pc, #88]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100626:	2200      	movs	r2, #0
 8100628:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 810062a:	4b15      	ldr	r3, [pc, #84]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 810062c:	2200      	movs	r2, #0
 810062e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100630:	4b13      	ldr	r3, [pc, #76]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100632:	2204      	movs	r2, #4
 8100634:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8100636:	4b12      	ldr	r3, [pc, #72]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100638:	2200      	movs	r2, #0
 810063a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 810063c:	4b10      	ldr	r3, [pc, #64]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 810063e:	2204      	movs	r2, #4
 8100640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8100642:	4b0f      	ldr	r3, [pc, #60]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100644:	2200      	movs	r2, #0
 8100646:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100648:	4b0d      	ldr	r3, [pc, #52]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 810064a:	2204      	movs	r2, #4
 810064c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 810064e:	4b0c      	ldr	r3, [pc, #48]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100650:	2200      	movs	r2, #0
 8100652:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100654:	4b0a      	ldr	r3, [pc, #40]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100656:	2200      	movs	r2, #0
 8100658:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 810065a:	4b09      	ldr	r3, [pc, #36]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 810065c:	2200      	movs	r2, #0
 810065e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100660:	4b07      	ldr	r3, [pc, #28]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100662:	2200      	movs	r2, #0
 8100664:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100666:	4b06      	ldr	r3, [pc, #24]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 8100668:	2204      	movs	r2, #4
 810066a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 810066c:	4804      	ldr	r0, [pc, #16]	@ (8100680 <MX_FDCAN2_Init+0xc0>)
 810066e:	f001 fc63 	bl	8101f38 <HAL_FDCAN_Init>
 8100672:	4603      	mov	r3, r0
 8100674:	2b00      	cmp	r3, #0
 8100676:	d001      	beq.n	810067c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8100678:	f000 f8f0 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 810067c:	bf00      	nop
 810067e:	bd80      	pop	{r7, pc}
 8100680:	10000394 	.word	0x10000394
 8100684:	4000a400 	.word	0x4000a400

08100688 <MX_IWDG2_Init>:
  * @brief IWDG2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG2_Init(void)
{
 8100688:	b580      	push	{r7, lr}
 810068a:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_IWDG2, RESMGR_FLAGS_ACCESS_NORMAL | \
 810068c:	2300      	movs	r3, #0
 810068e:	2200      	movs	r2, #0
 8100690:	2112      	movs	r1, #18
 8100692:	2010      	movs	r0, #16
 8100694:	f00b f8e6 	bl	810b864 <ResMgr_Request>
 8100698:	4603      	mov	r3, r0
 810069a:	2b00      	cmp	r3, #0
 810069c:	d001      	beq.n	81006a2 <MX_IWDG2_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_IWDG2 */
    Error_Handler();
 810069e:	f000 f8dd 	bl	810085c <Error_Handler>
  /* USER CODE END IWDG2_Init 0 */

  /* USER CODE BEGIN IWDG2_Init 1 */

  /* USER CODE END IWDG2_Init 1 */
  hiwdg2.Instance = IWDG2;
 81006a2:	4b0c      	ldr	r3, [pc, #48]	@ (81006d4 <MX_IWDG2_Init+0x4c>)
 81006a4:	4a0c      	ldr	r2, [pc, #48]	@ (81006d8 <MX_IWDG2_Init+0x50>)
 81006a6:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 81006a8:	4b0a      	ldr	r3, [pc, #40]	@ (81006d4 <MX_IWDG2_Init+0x4c>)
 81006aa:	2200      	movs	r2, #0
 81006ac:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 81006ae:	4b09      	ldr	r3, [pc, #36]	@ (81006d4 <MX_IWDG2_Init+0x4c>)
 81006b0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 81006b4:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 81006b6:	4b07      	ldr	r3, [pc, #28]	@ (81006d4 <MX_IWDG2_Init+0x4c>)
 81006b8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 81006bc:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 81006be:	4805      	ldr	r0, [pc, #20]	@ (81006d4 <MX_IWDG2_Init+0x4c>)
 81006c0:	f002 fd9e 	bl	8103200 <HAL_IWDG_Init>
 81006c4:	4603      	mov	r3, r0
 81006c6:	2b00      	cmp	r3, #0
 81006c8:	d001      	beq.n	81006ce <MX_IWDG2_Init+0x46>
  {
    Error_Handler();
 81006ca:	f000 f8c7 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG2_Init 2 */

  /* USER CODE END IWDG2_Init 2 */

}
 81006ce:	bf00      	nop
 81006d0:	bd80      	pop	{r7, pc}
 81006d2:	bf00      	nop
 81006d4:	10000434 	.word	0x10000434
 81006d8:	58004c00 	.word	0x58004c00

081006dc <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 81006dc:	b580      	push	{r7, lr}
 81006de:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_SDMMC1, RESMGR_FLAGS_ACCESS_NORMAL | \
 81006e0:	2300      	movs	r3, #0
 81006e2:	2200      	movs	r2, #0
 81006e4:	210a      	movs	r1, #10
 81006e6:	2013      	movs	r0, #19
 81006e8:	f00b f8bc 	bl	810b864 <ResMgr_Request>
 81006ec:	4603      	mov	r3, r0
 81006ee:	2b00      	cmp	r3, #0
 81006f0:	d001      	beq.n	81006f6 <MX_SDMMC1_SD_Init+0x1a>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_SDMMC1 */
    Error_Handler();
 81006f2:	f000 f8b3 	bl	810085c <Error_Handler>
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 81006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8100730 <MX_SDMMC1_SD_Init+0x54>)
 81006f8:	4a0e      	ldr	r2, [pc, #56]	@ (8100734 <MX_SDMMC1_SD_Init+0x58>)
 81006fa:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 81006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8100730 <MX_SDMMC1_SD_Init+0x54>)
 81006fe:	2200      	movs	r2, #0
 8100700:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100702:	4b0b      	ldr	r3, [pc, #44]	@ (8100730 <MX_SDMMC1_SD_Init+0x54>)
 8100704:	2200      	movs	r2, #0
 8100706:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100708:	4b09      	ldr	r3, [pc, #36]	@ (8100730 <MX_SDMMC1_SD_Init+0x54>)
 810070a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 810070e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100710:	4b07      	ldr	r3, [pc, #28]	@ (8100730 <MX_SDMMC1_SD_Init+0x54>)
 8100712:	2200      	movs	r2, #0
 8100714:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100716:	4b06      	ldr	r3, [pc, #24]	@ (8100730 <MX_SDMMC1_SD_Init+0x54>)
 8100718:	2200      	movs	r2, #0
 810071a:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 810071c:	4804      	ldr	r0, [pc, #16]	@ (8100730 <MX_SDMMC1_SD_Init+0x54>)
 810071e:	f005 fd1b 	bl	8106158 <HAL_SD_Init>
 8100722:	4603      	mov	r3, r0
 8100724:	2b00      	cmp	r3, #0
 8100726:	d001      	beq.n	810072c <MX_SDMMC1_SD_Init+0x50>
  {
    Error_Handler();
 8100728:	f000 f898 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 810072c:	bf00      	nop
 810072e:	bd80      	pop	{r7, pc}
 8100730:	10000444 	.word	0x10000444
 8100734:	52007000 	.word	0x52007000

08100738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8100738:	b580      	push	{r7, lr}
 810073a:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_SPI1, RESMGR_FLAGS_ACCESS_NORMAL | \
 810073c:	2300      	movs	r3, #0
 810073e:	2200      	movs	r2, #0
 8100740:	210a      	movs	r1, #10
 8100742:	2014      	movs	r0, #20
 8100744:	f00b f88e 	bl	810b864 <ResMgr_Request>
 8100748:	4603      	mov	r3, r0
 810074a:	2b00      	cmp	r3, #0
 810074c:	d001      	beq.n	8100752 <MX_SPI1_Init+0x1a>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_SPI1 */
    Error_Handler();
 810074e:	f000 f885 	bl	810085c <Error_Handler>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8100752:	4b27      	ldr	r3, [pc, #156]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 8100754:	4a27      	ldr	r2, [pc, #156]	@ (81007f4 <MX_SPI1_Init+0xbc>)
 8100756:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8100758:	4b25      	ldr	r3, [pc, #148]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 810075a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 810075e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8100760:	4b23      	ldr	r3, [pc, #140]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 8100762:	2200      	movs	r2, #0
 8100764:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8100766:	4b22      	ldr	r3, [pc, #136]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 8100768:	2203      	movs	r2, #3
 810076a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810076c:	4b20      	ldr	r3, [pc, #128]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 810076e:	2200      	movs	r2, #0
 8100770:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100772:	4b1f      	ldr	r3, [pc, #124]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 8100774:	2200      	movs	r2, #0
 8100776:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8100778:	4b1d      	ldr	r3, [pc, #116]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 810077a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 810077e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100780:	4b1b      	ldr	r3, [pc, #108]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 8100782:	2200      	movs	r2, #0
 8100784:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100786:	4b1a      	ldr	r3, [pc, #104]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 8100788:	2200      	movs	r2, #0
 810078a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 810078c:	4b18      	ldr	r3, [pc, #96]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 810078e:	2200      	movs	r2, #0
 8100790:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100792:	4b17      	ldr	r3, [pc, #92]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 8100794:	2200      	movs	r2, #0
 8100796:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8100798:	4b15      	ldr	r3, [pc, #84]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 810079a:	2200      	movs	r2, #0
 810079c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 810079e:	4b14      	ldr	r3, [pc, #80]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81007a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81007a6:	4b12      	ldr	r3, [pc, #72]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007a8:	2200      	movs	r2, #0
 81007aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81007ac:	4b10      	ldr	r3, [pc, #64]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007ae:	2200      	movs	r2, #0
 81007b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007b2:	4b0f      	ldr	r3, [pc, #60]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007b4:	2200      	movs	r2, #0
 81007b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007b8:	4b0d      	ldr	r3, [pc, #52]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007ba:	2200      	movs	r2, #0
 81007bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81007be:	4b0c      	ldr	r3, [pc, #48]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007c0:	2200      	movs	r2, #0
 81007c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81007c4:	4b0a      	ldr	r3, [pc, #40]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007c6:	2200      	movs	r2, #0
 81007c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81007ca:	4b09      	ldr	r3, [pc, #36]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007cc:	2200      	movs	r2, #0
 81007ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81007d0:	4b07      	ldr	r3, [pc, #28]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007d2:	2200      	movs	r2, #0
 81007d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81007d6:	4b06      	ldr	r3, [pc, #24]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007d8:	2200      	movs	r2, #0
 81007da:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81007dc:	4804      	ldr	r0, [pc, #16]	@ (81007f0 <MX_SPI1_Init+0xb8>)
 81007de:	f006 fea5 	bl	810752c <HAL_SPI_Init>
 81007e2:	4603      	mov	r3, r0
 81007e4:	2b00      	cmp	r3, #0
 81007e6:	d001      	beq.n	81007ec <MX_SPI1_Init+0xb4>
  {
    Error_Handler();
 81007e8:	f000 f838 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81007ec:	bf00      	nop
 81007ee:	bd80      	pop	{r7, pc}
 81007f0:	100004c0 	.word	0x100004c0
 81007f4:	40013000 	.word	0x40013000

081007f8 <MX_WWDG2_Init>:
  * @brief WWDG2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG2_Init(void)
{
 81007f8:	b580      	push	{r7, lr}
 81007fa:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_WWDG2, RESMGR_FLAGS_ACCESS_NORMAL | \
 81007fc:	2300      	movs	r3, #0
 81007fe:	2200      	movs	r2, #0
 8100800:	2112      	movs	r1, #18
 8100802:	2018      	movs	r0, #24
 8100804:	f00b f82e 	bl	810b864 <ResMgr_Request>
 8100808:	4603      	mov	r3, r0
 810080a:	2b00      	cmp	r3, #0
 810080c:	d001      	beq.n	8100812 <MX_WWDG2_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_WWDG2 */
    Error_Handler();
 810080e:	f000 f825 	bl	810085c <Error_Handler>
  /* USER CODE END WWDG2_Init 0 */

  /* USER CODE BEGIN WWDG2_Init 1 */

  /* USER CODE END WWDG2_Init 1 */
  hwwdg2.Instance = WWDG2;
 8100812:	4b0c      	ldr	r3, [pc, #48]	@ (8100844 <MX_WWDG2_Init+0x4c>)
 8100814:	4a0c      	ldr	r2, [pc, #48]	@ (8100848 <MX_WWDG2_Init+0x50>)
 8100816:	601a      	str	r2, [r3, #0]
  hwwdg2.Init.Prescaler = WWDG_PRESCALER_1;
 8100818:	4b0a      	ldr	r3, [pc, #40]	@ (8100844 <MX_WWDG2_Init+0x4c>)
 810081a:	2200      	movs	r2, #0
 810081c:	605a      	str	r2, [r3, #4]
  hwwdg2.Init.Window = 64;
 810081e:	4b09      	ldr	r3, [pc, #36]	@ (8100844 <MX_WWDG2_Init+0x4c>)
 8100820:	2240      	movs	r2, #64	@ 0x40
 8100822:	609a      	str	r2, [r3, #8]
  hwwdg2.Init.Counter = 64;
 8100824:	4b07      	ldr	r3, [pc, #28]	@ (8100844 <MX_WWDG2_Init+0x4c>)
 8100826:	2240      	movs	r2, #64	@ 0x40
 8100828:	60da      	str	r2, [r3, #12]
  hwwdg2.Init.EWIMode = WWDG_EWI_DISABLE;
 810082a:	4b06      	ldr	r3, [pc, #24]	@ (8100844 <MX_WWDG2_Init+0x4c>)
 810082c:	2200      	movs	r2, #0
 810082e:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg2) != HAL_OK)
 8100830:	4804      	ldr	r0, [pc, #16]	@ (8100844 <MX_WWDG2_Init+0x4c>)
 8100832:	f006 ffba 	bl	81077aa <HAL_WWDG_Init>
 8100836:	4603      	mov	r3, r0
 8100838:	2b00      	cmp	r3, #0
 810083a:	d001      	beq.n	8100840 <MX_WWDG2_Init+0x48>
  {
    Error_Handler();
 810083c:	f000 f80e 	bl	810085c <Error_Handler>
  }
  /* USER CODE BEGIN WWDG2_Init 2 */

  /* USER CODE END WWDG2_Init 2 */

}
 8100840:	bf00      	nop
 8100842:	bd80      	pop	{r7, pc}
 8100844:	10000548 	.word	0x10000548
 8100848:	40002c00 	.word	0x40002c00

0810084c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810084c:	b580      	push	{r7, lr}
 810084e:	b082      	sub	sp, #8
 8100850:	af00      	add	r7, sp, #0
 8100852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8100854:	2001      	movs	r0, #1
 8100856:	f008 f8f6 	bl	8108a46 <osDelay>
 810085a:	e7fb      	b.n	8100854 <StartDefaultTask+0x8>

0810085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810085c:	b480      	push	{r7}
 810085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100860:	b672      	cpsid	i
}
 8100862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100864:	bf00      	nop
 8100866:	e7fd      	b.n	8100864 <Error_Handler+0x8>

08100868 <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 8100868:	b580      	push	{r7, lr}
 810086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 810086c:	4905      	ldr	r1, [pc, #20]	@ (8100884 <MX_RESMGR_UTILITY_Init+0x1c>)
 810086e:	4806      	ldr	r0, [pc, #24]	@ (8100888 <MX_RESMGR_UTILITY_Init+0x20>)
 8100870:	f00a ff5a 	bl	810b728 <ResMgr_Init>
 8100874:	4603      	mov	r3, r0
 8100876:	2b00      	cmp	r3, #0
 8100878:	d001      	beq.n	810087e <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 810087a:	f7ff ffef 	bl	810085c <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 810087e:	bf00      	nop
 8100880:	bd80      	pop	{r7, pc}
 8100882:	bf00      	nop
 8100884:	081008d9 	.word	0x081008d9
 8100888:	0810088d 	.word	0x0810088d

0810088c <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 810088c:	b480      	push	{r7}
 810088e:	b083      	sub	sp, #12
 8100890:	af00      	add	r7, sp, #0
 8100892:	6078      	str	r0, [r7, #4]
 8100894:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 8100896:	683b      	ldr	r3, [r7, #0]
 8100898:	2b05      	cmp	r3, #5
 810089a:	d811      	bhi.n	81008c0 <MX_RESMGR_UTILITY_SendMsg+0x34>
 810089c:	683b      	ldr	r3, [r7, #0]
 810089e:	2b05      	cmp	r3, #5
 81008a0:	d811      	bhi.n	81008c6 <MX_RESMGR_UTILITY_SendMsg+0x3a>
 81008a2:	a201      	add	r2, pc, #4	@ (adr r2, 81008a8 <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 81008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81008a8:	081008c7 	.word	0x081008c7
 81008ac:	081008c7 	.word	0x081008c7
 81008b0:	081008c7 	.word	0x081008c7
 81008b4:	081008c7 	.word	0x081008c7
 81008b8:	081008c7 	.word	0x081008c7
 81008bc:	081008c7 	.word	0x081008c7
 81008c0:	683b      	ldr	r3, [r7, #0]
 81008c2:	2bff      	cmp	r3, #255	@ 0xff
 81008c4:	d001      	beq.n	81008ca <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 81008c6:	bf00      	nop
 81008c8:	e000      	b.n	81008cc <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 81008ca:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 81008cc:	bf00      	nop
}
 81008ce:	370c      	adds	r7, #12
 81008d0:	46bd      	mov	sp, r7
 81008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008d6:	4770      	bx	lr

081008d8 <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 81008d8:	b480      	push	{r7}
 81008da:	b083      	sub	sp, #12
 81008dc:	af00      	add	r7, sp, #0
 81008de:	6078      	str	r0, [r7, #4]
 81008e0:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 81008e2:	683b      	ldr	r3, [r7, #0]
 81008e4:	2b15      	cmp	r3, #21
 81008e6:	d831      	bhi.n	810094c <MX_RESMGR_UTILITY_Callback+0x74>
 81008e8:	683b      	ldr	r3, [r7, #0]
 81008ea:	2b15      	cmp	r3, #21
 81008ec:	d831      	bhi.n	8100952 <MX_RESMGR_UTILITY_Callback+0x7a>
 81008ee:	a201      	add	r2, pc, #4	@ (adr r2, 81008f4 <MX_RESMGR_UTILITY_Callback+0x1c>)
 81008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81008f4:	08100953 	.word	0x08100953
 81008f8:	08100953 	.word	0x08100953
 81008fc:	08100953 	.word	0x08100953
 8100900:	08100953 	.word	0x08100953
 8100904:	08100953 	.word	0x08100953
 8100908:	08100953 	.word	0x08100953
 810090c:	08100953 	.word	0x08100953
 8100910:	08100953 	.word	0x08100953
 8100914:	08100953 	.word	0x08100953
 8100918:	08100953 	.word	0x08100953
 810091c:	08100953 	.word	0x08100953
 8100920:	08100953 	.word	0x08100953
 8100924:	08100953 	.word	0x08100953
 8100928:	08100953 	.word	0x08100953
 810092c:	08100953 	.word	0x08100953
 8100930:	08100953 	.word	0x08100953
 8100934:	08100953 	.word	0x08100953
 8100938:	08100953 	.word	0x08100953
 810093c:	08100953 	.word	0x08100953
 8100940:	08100953 	.word	0x08100953
 8100944:	08100953 	.word	0x08100953
 8100948:	08100953 	.word	0x08100953
 810094c:	683b      	ldr	r3, [r7, #0]
 810094e:	2bff      	cmp	r3, #255	@ 0xff
 8100950:	d001      	beq.n	8100956 <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8100952:	bf00      	nop
 8100954:	e000      	b.n	8100958 <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 8100956:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 8100958:	bf00      	nop
}
 810095a:	370c      	adds	r7, #12
 810095c:	46bd      	mov	sp, r7
 810095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100962:	4770      	bx	lr

08100964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100964:	b580      	push	{r7, lr}
 8100966:	b082      	sub	sp, #8
 8100968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810096a:	4b0c      	ldr	r3, [pc, #48]	@ (810099c <HAL_MspInit+0x38>)
 810096c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100970:	4a0a      	ldr	r2, [pc, #40]	@ (810099c <HAL_MspInit+0x38>)
 8100972:	f043 0302 	orr.w	r3, r3, #2
 8100976:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810097a:	4b08      	ldr	r3, [pc, #32]	@ (810099c <HAL_MspInit+0x38>)
 810097c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100980:	f003 0302 	and.w	r3, r3, #2
 8100984:	607b      	str	r3, [r7, #4]
 8100986:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100988:	2200      	movs	r2, #0
 810098a:	210f      	movs	r1, #15
 810098c:	f06f 0001 	mvn.w	r0, #1
 8100990:	f001 fa97 	bl	8101ec2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100994:	bf00      	nop
 8100996:	3708      	adds	r7, #8
 8100998:	46bd      	mov	sp, r7
 810099a:	bd80      	pop	{r7, pc}
 810099c:	58024400 	.word	0x58024400

081009a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81009a0:	b480      	push	{r7}
 81009a2:	b085      	sub	sp, #20
 81009a4:	af00      	add	r7, sp, #0
 81009a6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 81009a8:	687b      	ldr	r3, [r7, #4]
 81009aa:	681b      	ldr	r3, [r3, #0]
 81009ac:	4a0b      	ldr	r2, [pc, #44]	@ (81009dc <HAL_ADC_MspInit+0x3c>)
 81009ae:	4293      	cmp	r3, r2
 81009b0:	d10e      	bne.n	81009d0 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 81009b2:	4b0b      	ldr	r3, [pc, #44]	@ (81009e0 <HAL_ADC_MspInit+0x40>)
 81009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009b8:	4a09      	ldr	r2, [pc, #36]	@ (81009e0 <HAL_ADC_MspInit+0x40>)
 81009ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81009be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81009c2:	4b07      	ldr	r3, [pc, #28]	@ (81009e0 <HAL_ADC_MspInit+0x40>)
 81009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81009c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81009cc:	60fb      	str	r3, [r7, #12]
 81009ce:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 81009d0:	bf00      	nop
 81009d2:	3714      	adds	r7, #20
 81009d4:	46bd      	mov	sp, r7
 81009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009da:	4770      	bx	lr
 81009dc:	58026000 	.word	0x58026000
 81009e0:	58024400 	.word	0x58024400

081009e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 81009e4:	b480      	push	{r7}
 81009e6:	b085      	sub	sp, #20
 81009e8:	af00      	add	r7, sp, #0
 81009ea:	6078      	str	r0, [r7, #4]
  if(hfdcan->Instance==FDCAN1)
 81009ec:	687b      	ldr	r3, [r7, #4]
 81009ee:	681b      	ldr	r3, [r3, #0]
 81009f0:	4a1f      	ldr	r2, [pc, #124]	@ (8100a70 <HAL_FDCAN_MspInit+0x8c>)
 81009f2:	4293      	cmp	r3, r2
 81009f4:	d118      	bne.n	8100a28 <HAL_FDCAN_MspInit+0x44>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 81009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8100a74 <HAL_FDCAN_MspInit+0x90>)
 81009f8:	681b      	ldr	r3, [r3, #0]
 81009fa:	3301      	adds	r3, #1
 81009fc:	4a1d      	ldr	r2, [pc, #116]	@ (8100a74 <HAL_FDCAN_MspInit+0x90>)
 81009fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100a00:	4b1c      	ldr	r3, [pc, #112]	@ (8100a74 <HAL_FDCAN_MspInit+0x90>)
 8100a02:	681b      	ldr	r3, [r3, #0]
 8100a04:	2b01      	cmp	r3, #1
 8100a06:	d12c      	bne.n	8100a62 <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100a08:	4b1b      	ldr	r3, [pc, #108]	@ (8100a78 <HAL_FDCAN_MspInit+0x94>)
 8100a0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8100a78 <HAL_FDCAN_MspInit+0x94>)
 8100a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100a14:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8100a18:	4b17      	ldr	r3, [pc, #92]	@ (8100a78 <HAL_FDCAN_MspInit+0x94>)
 8100a1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100a22:	60fb      	str	r3, [r7, #12]
 8100a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8100a26:	e01c      	b.n	8100a62 <HAL_FDCAN_MspInit+0x7e>
  else if(hfdcan->Instance==FDCAN2)
 8100a28:	687b      	ldr	r3, [r7, #4]
 8100a2a:	681b      	ldr	r3, [r3, #0]
 8100a2c:	4a13      	ldr	r2, [pc, #76]	@ (8100a7c <HAL_FDCAN_MspInit+0x98>)
 8100a2e:	4293      	cmp	r3, r2
 8100a30:	d117      	bne.n	8100a62 <HAL_FDCAN_MspInit+0x7e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8100a32:	4b10      	ldr	r3, [pc, #64]	@ (8100a74 <HAL_FDCAN_MspInit+0x90>)
 8100a34:	681b      	ldr	r3, [r3, #0]
 8100a36:	3301      	adds	r3, #1
 8100a38:	4a0e      	ldr	r2, [pc, #56]	@ (8100a74 <HAL_FDCAN_MspInit+0x90>)
 8100a3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8100a74 <HAL_FDCAN_MspInit+0x90>)
 8100a3e:	681b      	ldr	r3, [r3, #0]
 8100a40:	2b01      	cmp	r3, #1
 8100a42:	d10e      	bne.n	8100a62 <HAL_FDCAN_MspInit+0x7e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100a44:	4b0c      	ldr	r3, [pc, #48]	@ (8100a78 <HAL_FDCAN_MspInit+0x94>)
 8100a46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8100a78 <HAL_FDCAN_MspInit+0x94>)
 8100a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100a50:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8100a54:	4b08      	ldr	r3, [pc, #32]	@ (8100a78 <HAL_FDCAN_MspInit+0x94>)
 8100a56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100a5e:	60bb      	str	r3, [r7, #8]
 8100a60:	68bb      	ldr	r3, [r7, #8]
}
 8100a62:	bf00      	nop
 8100a64:	3714      	adds	r7, #20
 8100a66:	46bd      	mov	sp, r7
 8100a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a6c:	4770      	bx	lr
 8100a6e:	bf00      	nop
 8100a70:	4000a000 	.word	0x4000a000
 8100a74:	10000560 	.word	0x10000560
 8100a78:	58024400 	.word	0x58024400
 8100a7c:	4000a400 	.word	0x4000a400

08100a80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8100a80:	b580      	push	{r7, lr}
 8100a82:	b0b4      	sub	sp, #208	@ 0xd0
 8100a84:	af00      	add	r7, sp, #0
 8100a86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100a88:	f107 0310 	add.w	r3, r7, #16
 8100a8c:	22c0      	movs	r2, #192	@ 0xc0
 8100a8e:	2100      	movs	r1, #0
 8100a90:	4618      	mov	r0, r3
 8100a92:	f00b f9a5 	bl	810bde0 <memset>
  if(hsd->Instance==SDMMC1)
 8100a96:	687b      	ldr	r3, [r7, #4]
 8100a98:	681b      	ldr	r3, [r3, #0]
 8100a9a:	4a14      	ldr	r2, [pc, #80]	@ (8100aec <HAL_SD_MspInit+0x6c>)
 8100a9c:	4293      	cmp	r3, r2
 8100a9e:	d120      	bne.n	8100ae2 <HAL_SD_MspInit+0x62>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8100aa0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8100aa4:	f04f 0300 	mov.w	r3, #0
 8100aa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8100aac:	2300      	movs	r3, #0
 8100aae:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100ab0:	f107 0310 	add.w	r3, r7, #16
 8100ab4:	4618      	mov	r0, r3
 8100ab6:	f002 fe3d 	bl	8103734 <HAL_RCCEx_PeriphCLKConfig>
 8100aba:	4603      	mov	r3, r0
 8100abc:	2b00      	cmp	r3, #0
 8100abe:	d001      	beq.n	8100ac4 <HAL_SD_MspInit+0x44>
    {
      Error_Handler();
 8100ac0:	f7ff fecc 	bl	810085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8100ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8100af0 <HAL_SD_MspInit+0x70>)
 8100ac6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100aca:	4a09      	ldr	r2, [pc, #36]	@ (8100af0 <HAL_SD_MspInit+0x70>)
 8100acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8100ad0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100ad4:	4b06      	ldr	r3, [pc, #24]	@ (8100af0 <HAL_SD_MspInit+0x70>)
 8100ad6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100ade:	60fb      	str	r3, [r7, #12]
 8100ae0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8100ae2:	bf00      	nop
 8100ae4:	37d0      	adds	r7, #208	@ 0xd0
 8100ae6:	46bd      	mov	sp, r7
 8100ae8:	bd80      	pop	{r7, pc}
 8100aea:	bf00      	nop
 8100aec:	52007000 	.word	0x52007000
 8100af0:	58024400 	.word	0x58024400

08100af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100af4:	b580      	push	{r7, lr}
 8100af6:	b0b4      	sub	sp, #208	@ 0xd0
 8100af8:	af00      	add	r7, sp, #0
 8100afa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100afc:	f107 0310 	add.w	r3, r7, #16
 8100b00:	22c0      	movs	r2, #192	@ 0xc0
 8100b02:	2100      	movs	r1, #0
 8100b04:	4618      	mov	r0, r3
 8100b06:	f00b f96b 	bl	810bde0 <memset>
  if(hspi->Instance==SPI1)
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	681b      	ldr	r3, [r3, #0]
 8100b0e:	4a14      	ldr	r2, [pc, #80]	@ (8100b60 <HAL_SPI_MspInit+0x6c>)
 8100b10:	4293      	cmp	r3, r2
 8100b12:	d120      	bne.n	8100b56 <HAL_SPI_MspInit+0x62>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8100b14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100b18:	f04f 0300 	mov.w	r3, #0
 8100b1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8100b20:	2300      	movs	r3, #0
 8100b22:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100b24:	f107 0310 	add.w	r3, r7, #16
 8100b28:	4618      	mov	r0, r3
 8100b2a:	f002 fe03 	bl	8103734 <HAL_RCCEx_PeriphCLKConfig>
 8100b2e:	4603      	mov	r3, r0
 8100b30:	2b00      	cmp	r3, #0
 8100b32:	d001      	beq.n	8100b38 <HAL_SPI_MspInit+0x44>
    {
      Error_Handler();
 8100b34:	f7ff fe92 	bl	810085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8100b38:	4b0a      	ldr	r3, [pc, #40]	@ (8100b64 <HAL_SPI_MspInit+0x70>)
 8100b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100b3e:	4a09      	ldr	r2, [pc, #36]	@ (8100b64 <HAL_SPI_MspInit+0x70>)
 8100b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8100b44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100b48:	4b06      	ldr	r3, [pc, #24]	@ (8100b64 <HAL_SPI_MspInit+0x70>)
 8100b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100b4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8100b52:	60fb      	str	r3, [r7, #12]
 8100b54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8100b56:	bf00      	nop
 8100b58:	37d0      	adds	r7, #208	@ 0xd0
 8100b5a:	46bd      	mov	sp, r7
 8100b5c:	bd80      	pop	{r7, pc}
 8100b5e:	bf00      	nop
 8100b60:	40013000 	.word	0x40013000
 8100b64:	58024400 	.word	0x58024400

08100b68 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8100b68:	b580      	push	{r7, lr}
 8100b6a:	b084      	sub	sp, #16
 8100b6c:	af00      	add	r7, sp, #0
 8100b6e:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG2)
 8100b70:	687b      	ldr	r3, [r7, #4]
 8100b72:	681b      	ldr	r3, [r3, #0]
 8100b74:	4a0c      	ldr	r2, [pc, #48]	@ (8100ba8 <HAL_WWDG_MspInit+0x40>)
 8100b76:	4293      	cmp	r3, r2
 8100b78:	d111      	bne.n	8100b9e <HAL_WWDG_MspInit+0x36>
  {
  /* USER CODE BEGIN WWDG2_MspInit 0 */

  /* USER CODE END WWDG2_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCCEx_WWDGxSysResetConfig(RCC_WWDG2);
 8100b7a:	2002      	movs	r0, #2
 8100b7c:	f005 f974 	bl	8105e68 <HAL_RCCEx_WWDGxSysResetConfig>
    __HAL_RCC_WWDG2_CLK_ENABLE();
 8100b80:	4b0a      	ldr	r3, [pc, #40]	@ (8100bac <HAL_WWDG_MspInit+0x44>)
 8100b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100b86:	4a09      	ldr	r2, [pc, #36]	@ (8100bac <HAL_WWDG_MspInit+0x44>)
 8100b88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8100b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100b90:	4b06      	ldr	r3, [pc, #24]	@ (8100bac <HAL_WWDG_MspInit+0x44>)
 8100b92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8100b9a:	60fb      	str	r3, [r7, #12]
 8100b9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END WWDG2_MspInit 1 */

  }

}
 8100b9e:	bf00      	nop
 8100ba0:	3710      	adds	r7, #16
 8100ba2:	46bd      	mov	sp, r7
 8100ba4:	bd80      	pop	{r7, pc}
 8100ba6:	bf00      	nop
 8100ba8:	40002c00 	.word	0x40002c00
 8100bac:	58024400 	.word	0x58024400

08100bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100bb0:	b480      	push	{r7}
 8100bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100bb4:	bf00      	nop
 8100bb6:	e7fd      	b.n	8100bb4 <NMI_Handler+0x4>

08100bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100bb8:	b480      	push	{r7}
 8100bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100bbc:	bf00      	nop
 8100bbe:	e7fd      	b.n	8100bbc <HardFault_Handler+0x4>

08100bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100bc0:	b480      	push	{r7}
 8100bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100bc4:	bf00      	nop
 8100bc6:	e7fd      	b.n	8100bc4 <MemManage_Handler+0x4>

08100bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100bc8:	b480      	push	{r7}
 8100bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100bcc:	bf00      	nop
 8100bce:	e7fd      	b.n	8100bcc <BusFault_Handler+0x4>

08100bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100bd0:	b480      	push	{r7}
 8100bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100bd4:	bf00      	nop
 8100bd6:	e7fd      	b.n	8100bd4 <UsageFault_Handler+0x4>

08100bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100bd8:	b480      	push	{r7}
 8100bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100bdc:	bf00      	nop
 8100bde:	46bd      	mov	sp, r7
 8100be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100be4:	4770      	bx	lr

08100be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100be6:	b580      	push	{r7, lr}
 8100be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100bea:	f000 f8c7 	bl	8100d7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8100bee:	f00a f95f 	bl	810aeb0 <xTaskGetSchedulerState>
 8100bf2:	4603      	mov	r3, r0
 8100bf4:	2b01      	cmp	r3, #1
 8100bf6:	d001      	beq.n	8100bfc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8100bf8:	f008 fca6 	bl	8109548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100bfc:	bf00      	nop
 8100bfe:	bd80      	pop	{r7, pc}

08100c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100c38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100c04:	f7ff fb6c 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100c08:	480c      	ldr	r0, [pc, #48]	@ (8100c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100c0a:	490d      	ldr	r1, [pc, #52]	@ (8100c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8100c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100c10:	e002      	b.n	8100c18 <LoopCopyDataInit>

08100c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100c16:	3304      	adds	r3, #4

08100c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100c1c:	d3f9      	bcc.n	8100c12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8100c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100c20:	4c0a      	ldr	r4, [pc, #40]	@ (8100c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100c24:	e001      	b.n	8100c2a <LoopFillZerobss>

08100c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100c28:	3204      	adds	r2, #4

08100c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100c2c:	d3fb      	bcc.n	8100c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100c2e:	f00b f935 	bl	810be9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100c32:	f7ff fb6d 	bl	8100310 <main>
  bx  lr
 8100c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100c38:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100c3c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100c40:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8100c44:	0810c0bc 	.word	0x0810c0bc
  ldr r2, =_sbss
 8100c48:	10000274 	.word	0x10000274
  ldr r4, =_ebss
 8100c4c:	100050f4 	.word	0x100050f4

08100c50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100c50:	e7fe      	b.n	8100c50 <ADC3_IRQHandler>
	...

08100c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100c54:	b580      	push	{r7, lr}
 8100c56:	b082      	sub	sp, #8
 8100c58:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100c5a:	4b28      	ldr	r3, [pc, #160]	@ (8100cfc <HAL_Init+0xa8>)
 8100c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100c60:	4a26      	ldr	r2, [pc, #152]	@ (8100cfc <HAL_Init+0xa8>)
 8100c62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100c66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100c6a:	4b24      	ldr	r3, [pc, #144]	@ (8100cfc <HAL_Init+0xa8>)
 8100c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100c70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100c74:	603b      	str	r3, [r7, #0]
 8100c76:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100c78:	4b21      	ldr	r3, [pc, #132]	@ (8100d00 <HAL_Init+0xac>)
 8100c7a:	681b      	ldr	r3, [r3, #0]
 8100c7c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100c80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100c84:	4a1e      	ldr	r2, [pc, #120]	@ (8100d00 <HAL_Init+0xac>)
 8100c86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100c8a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8100d00 <HAL_Init+0xac>)
 8100c8e:	681b      	ldr	r3, [r3, #0]
 8100c90:	4a1b      	ldr	r2, [pc, #108]	@ (8100d00 <HAL_Init+0xac>)
 8100c92:	f043 0301 	orr.w	r3, r3, #1
 8100c96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100c98:	2003      	movs	r0, #3
 8100c9a:	f001 f907 	bl	8101eac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100c9e:	f002 fb87 	bl	81033b0 <HAL_RCC_GetSysClockFreq>
 8100ca2:	4602      	mov	r2, r0
 8100ca4:	4b15      	ldr	r3, [pc, #84]	@ (8100cfc <HAL_Init+0xa8>)
 8100ca6:	699b      	ldr	r3, [r3, #24]
 8100ca8:	0a1b      	lsrs	r3, r3, #8
 8100caa:	f003 030f 	and.w	r3, r3, #15
 8100cae:	4915      	ldr	r1, [pc, #84]	@ (8100d04 <HAL_Init+0xb0>)
 8100cb0:	5ccb      	ldrb	r3, [r1, r3]
 8100cb2:	f003 031f 	and.w	r3, r3, #31
 8100cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8100cba:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8100cfc <HAL_Init+0xa8>)
 8100cbe:	699b      	ldr	r3, [r3, #24]
 8100cc0:	f003 030f 	and.w	r3, r3, #15
 8100cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8100d04 <HAL_Init+0xb0>)
 8100cc6:	5cd3      	ldrb	r3, [r2, r3]
 8100cc8:	f003 031f 	and.w	r3, r3, #31
 8100ccc:	687a      	ldr	r2, [r7, #4]
 8100cce:	fa22 f303 	lsr.w	r3, r2, r3
 8100cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8100d08 <HAL_Init+0xb4>)
 8100cd4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8100d08 <HAL_Init+0xb4>)
 8100cd8:	681b      	ldr	r3, [r3, #0]
 8100cda:	4a0c      	ldr	r2, [pc, #48]	@ (8100d0c <HAL_Init+0xb8>)
 8100cdc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100cde:	200f      	movs	r0, #15
 8100ce0:	f000 f816 	bl	8100d10 <HAL_InitTick>
 8100ce4:	4603      	mov	r3, r0
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	d001      	beq.n	8100cee <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100cea:	2301      	movs	r3, #1
 8100cec:	e002      	b.n	8100cf4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100cee:	f7ff fe39 	bl	8100964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100cf2:	2300      	movs	r3, #0
}
 8100cf4:	4618      	mov	r0, r3
 8100cf6:	3708      	adds	r7, #8
 8100cf8:	46bd      	mov	sp, r7
 8100cfa:	bd80      	pop	{r7, pc}
 8100cfc:	58024400 	.word	0x58024400
 8100d00:	40024400 	.word	0x40024400
 8100d04:	0810c040 	.word	0x0810c040
 8100d08:	10000004 	.word	0x10000004
 8100d0c:	10000000 	.word	0x10000000

08100d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100d10:	b580      	push	{r7, lr}
 8100d12:	b082      	sub	sp, #8
 8100d14:	af00      	add	r7, sp, #0
 8100d16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100d18:	4b15      	ldr	r3, [pc, #84]	@ (8100d70 <HAL_InitTick+0x60>)
 8100d1a:	781b      	ldrb	r3, [r3, #0]
 8100d1c:	2b00      	cmp	r3, #0
 8100d1e:	d101      	bne.n	8100d24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100d20:	2301      	movs	r3, #1
 8100d22:	e021      	b.n	8100d68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100d24:	4b13      	ldr	r3, [pc, #76]	@ (8100d74 <HAL_InitTick+0x64>)
 8100d26:	681a      	ldr	r2, [r3, #0]
 8100d28:	4b11      	ldr	r3, [pc, #68]	@ (8100d70 <HAL_InitTick+0x60>)
 8100d2a:	781b      	ldrb	r3, [r3, #0]
 8100d2c:	4619      	mov	r1, r3
 8100d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8100d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8100d3a:	4618      	mov	r0, r3
 8100d3c:	f001 f8db 	bl	8101ef6 <HAL_SYSTICK_Config>
 8100d40:	4603      	mov	r3, r0
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	d001      	beq.n	8100d4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100d46:	2301      	movs	r3, #1
 8100d48:	e00e      	b.n	8100d68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100d4a:	687b      	ldr	r3, [r7, #4]
 8100d4c:	2b0f      	cmp	r3, #15
 8100d4e:	d80a      	bhi.n	8100d66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100d50:	2200      	movs	r2, #0
 8100d52:	6879      	ldr	r1, [r7, #4]
 8100d54:	f04f 30ff 	mov.w	r0, #4294967295
 8100d58:	f001 f8b3 	bl	8101ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100d5c:	4a06      	ldr	r2, [pc, #24]	@ (8100d78 <HAL_InitTick+0x68>)
 8100d5e:	687b      	ldr	r3, [r7, #4]
 8100d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100d62:	2300      	movs	r3, #0
 8100d64:	e000      	b.n	8100d68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100d66:	2301      	movs	r3, #1
}
 8100d68:	4618      	mov	r0, r3
 8100d6a:	3708      	adds	r7, #8
 8100d6c:	46bd      	mov	sp, r7
 8100d6e:	bd80      	pop	{r7, pc}
 8100d70:	1000000c 	.word	0x1000000c
 8100d74:	10000000 	.word	0x10000000
 8100d78:	10000008 	.word	0x10000008

08100d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100d7c:	b480      	push	{r7}
 8100d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100d80:	4b06      	ldr	r3, [pc, #24]	@ (8100d9c <HAL_IncTick+0x20>)
 8100d82:	781b      	ldrb	r3, [r3, #0]
 8100d84:	461a      	mov	r2, r3
 8100d86:	4b06      	ldr	r3, [pc, #24]	@ (8100da0 <HAL_IncTick+0x24>)
 8100d88:	681b      	ldr	r3, [r3, #0]
 8100d8a:	4413      	add	r3, r2
 8100d8c:	4a04      	ldr	r2, [pc, #16]	@ (8100da0 <HAL_IncTick+0x24>)
 8100d8e:	6013      	str	r3, [r2, #0]
}
 8100d90:	bf00      	nop
 8100d92:	46bd      	mov	sp, r7
 8100d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d98:	4770      	bx	lr
 8100d9a:	bf00      	nop
 8100d9c:	1000000c 	.word	0x1000000c
 8100da0:	10000564 	.word	0x10000564

08100da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100da4:	b480      	push	{r7}
 8100da6:	af00      	add	r7, sp, #0
  return uwTick;
 8100da8:	4b03      	ldr	r3, [pc, #12]	@ (8100db8 <HAL_GetTick+0x14>)
 8100daa:	681b      	ldr	r3, [r3, #0]
}
 8100dac:	4618      	mov	r0, r3
 8100dae:	46bd      	mov	sp, r7
 8100db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db4:	4770      	bx	lr
 8100db6:	bf00      	nop
 8100db8:	10000564 	.word	0x10000564

08100dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100dbc:	b580      	push	{r7, lr}
 8100dbe:	b084      	sub	sp, #16
 8100dc0:	af00      	add	r7, sp, #0
 8100dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100dc4:	f7ff ffee 	bl	8100da4 <HAL_GetTick>
 8100dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100dca:	687b      	ldr	r3, [r7, #4]
 8100dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100dce:	68fb      	ldr	r3, [r7, #12]
 8100dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100dd4:	d005      	beq.n	8100de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8100e00 <HAL_Delay+0x44>)
 8100dd8:	781b      	ldrb	r3, [r3, #0]
 8100dda:	461a      	mov	r2, r3
 8100ddc:	68fb      	ldr	r3, [r7, #12]
 8100dde:	4413      	add	r3, r2
 8100de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100de2:	bf00      	nop
 8100de4:	f7ff ffde 	bl	8100da4 <HAL_GetTick>
 8100de8:	4602      	mov	r2, r0
 8100dea:	68bb      	ldr	r3, [r7, #8]
 8100dec:	1ad3      	subs	r3, r2, r3
 8100dee:	68fa      	ldr	r2, [r7, #12]
 8100df0:	429a      	cmp	r2, r3
 8100df2:	d8f7      	bhi.n	8100de4 <HAL_Delay+0x28>
  {
  }
}
 8100df4:	bf00      	nop
 8100df6:	bf00      	nop
 8100df8:	3710      	adds	r7, #16
 8100dfa:	46bd      	mov	sp, r7
 8100dfc:	bd80      	pop	{r7, pc}
 8100dfe:	bf00      	nop
 8100e00:	1000000c 	.word	0x1000000c

08100e04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8100e08:	4b03      	ldr	r3, [pc, #12]	@ (8100e18 <HAL_GetREVID+0x14>)
 8100e0a:	681b      	ldr	r3, [r3, #0]
 8100e0c:	0c1b      	lsrs	r3, r3, #16
}
 8100e0e:	4618      	mov	r0, r3
 8100e10:	46bd      	mov	sp, r7
 8100e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e16:	4770      	bx	lr
 8100e18:	5c001000 	.word	0x5c001000

08100e1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8100e1c:	b480      	push	{r7}
 8100e1e:	b083      	sub	sp, #12
 8100e20:	af00      	add	r7, sp, #0
 8100e22:	6078      	str	r0, [r7, #4]
 8100e24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8100e26:	687b      	ldr	r3, [r7, #4]
 8100e28:	689b      	ldr	r3, [r3, #8]
 8100e2a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8100e2e:	683b      	ldr	r3, [r7, #0]
 8100e30:	431a      	orrs	r2, r3
 8100e32:	687b      	ldr	r3, [r7, #4]
 8100e34:	609a      	str	r2, [r3, #8]
}
 8100e36:	bf00      	nop
 8100e38:	370c      	adds	r7, #12
 8100e3a:	46bd      	mov	sp, r7
 8100e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e40:	4770      	bx	lr

08100e42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8100e42:	b480      	push	{r7}
 8100e44:	b083      	sub	sp, #12
 8100e46:	af00      	add	r7, sp, #0
 8100e48:	6078      	str	r0, [r7, #4]
 8100e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8100e4c:	687b      	ldr	r3, [r7, #4]
 8100e4e:	689b      	ldr	r3, [r3, #8]
 8100e50:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8100e54:	683b      	ldr	r3, [r7, #0]
 8100e56:	431a      	orrs	r2, r3
 8100e58:	687b      	ldr	r3, [r7, #4]
 8100e5a:	609a      	str	r2, [r3, #8]
}
 8100e5c:	bf00      	nop
 8100e5e:	370c      	adds	r7, #12
 8100e60:	46bd      	mov	sp, r7
 8100e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e66:	4770      	bx	lr

08100e68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8100e68:	b480      	push	{r7}
 8100e6a:	b083      	sub	sp, #12
 8100e6c:	af00      	add	r7, sp, #0
 8100e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	689b      	ldr	r3, [r3, #8]
 8100e74:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8100e78:	4618      	mov	r0, r3
 8100e7a:	370c      	adds	r7, #12
 8100e7c:	46bd      	mov	sp, r7
 8100e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e82:	4770      	bx	lr

08100e84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8100e84:	b480      	push	{r7}
 8100e86:	b087      	sub	sp, #28
 8100e88:	af00      	add	r7, sp, #0
 8100e8a:	60f8      	str	r0, [r7, #12]
 8100e8c:	60b9      	str	r1, [r7, #8]
 8100e8e:	607a      	str	r2, [r7, #4]
 8100e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100e92:	68fb      	ldr	r3, [r7, #12]
 8100e94:	3360      	adds	r3, #96	@ 0x60
 8100e96:	461a      	mov	r2, r3
 8100e98:	68bb      	ldr	r3, [r7, #8]
 8100e9a:	009b      	lsls	r3, r3, #2
 8100e9c:	4413      	add	r3, r2
 8100e9e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8100ea0:	697b      	ldr	r3, [r7, #20]
 8100ea2:	681b      	ldr	r3, [r3, #0]
 8100ea4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8100ea8:	687b      	ldr	r3, [r7, #4]
 8100eaa:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8100eae:	683b      	ldr	r3, [r7, #0]
 8100eb0:	430b      	orrs	r3, r1
 8100eb2:	431a      	orrs	r2, r3
 8100eb4:	697b      	ldr	r3, [r7, #20]
 8100eb6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8100eb8:	bf00      	nop
 8100eba:	371c      	adds	r7, #28
 8100ebc:	46bd      	mov	sp, r7
 8100ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ec2:	4770      	bx	lr

08100ec4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8100ec4:	b480      	push	{r7}
 8100ec6:	b085      	sub	sp, #20
 8100ec8:	af00      	add	r7, sp, #0
 8100eca:	60f8      	str	r0, [r7, #12]
 8100ecc:	60b9      	str	r1, [r7, #8]
 8100ece:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8100ed0:	68fb      	ldr	r3, [r7, #12]
 8100ed2:	691b      	ldr	r3, [r3, #16]
 8100ed4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8100ed8:	68bb      	ldr	r3, [r7, #8]
 8100eda:	f003 031f 	and.w	r3, r3, #31
 8100ede:	6879      	ldr	r1, [r7, #4]
 8100ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8100ee4:	431a      	orrs	r2, r3
 8100ee6:	68fb      	ldr	r3, [r7, #12]
 8100ee8:	611a      	str	r2, [r3, #16]
}
 8100eea:	bf00      	nop
 8100eec:	3714      	adds	r7, #20
 8100eee:	46bd      	mov	sp, r7
 8100ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ef4:	4770      	bx	lr

08100ef6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8100ef6:	b480      	push	{r7}
 8100ef8:	b087      	sub	sp, #28
 8100efa:	af00      	add	r7, sp, #0
 8100efc:	60f8      	str	r0, [r7, #12]
 8100efe:	60b9      	str	r1, [r7, #8]
 8100f00:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8100f02:	68fb      	ldr	r3, [r7, #12]
 8100f04:	3360      	adds	r3, #96	@ 0x60
 8100f06:	461a      	mov	r2, r3
 8100f08:	68bb      	ldr	r3, [r7, #8]
 8100f0a:	009b      	lsls	r3, r3, #2
 8100f0c:	4413      	add	r3, r2
 8100f0e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8100f10:	697b      	ldr	r3, [r7, #20]
 8100f12:	681b      	ldr	r3, [r3, #0]
 8100f14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8100f18:	687b      	ldr	r3, [r7, #4]
 8100f1a:	431a      	orrs	r2, r3
 8100f1c:	697b      	ldr	r3, [r7, #20]
 8100f1e:	601a      	str	r2, [r3, #0]
  }
}
 8100f20:	bf00      	nop
 8100f22:	371c      	adds	r7, #28
 8100f24:	46bd      	mov	sp, r7
 8100f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f2a:	4770      	bx	lr

08100f2c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8100f2c:	b480      	push	{r7}
 8100f2e:	b087      	sub	sp, #28
 8100f30:	af00      	add	r7, sp, #0
 8100f32:	60f8      	str	r0, [r7, #12]
 8100f34:	60b9      	str	r1, [r7, #8]
 8100f36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8100f38:	68fb      	ldr	r3, [r7, #12]
 8100f3a:	3330      	adds	r3, #48	@ 0x30
 8100f3c:	461a      	mov	r2, r3
 8100f3e:	68bb      	ldr	r3, [r7, #8]
 8100f40:	0a1b      	lsrs	r3, r3, #8
 8100f42:	009b      	lsls	r3, r3, #2
 8100f44:	f003 030c 	and.w	r3, r3, #12
 8100f48:	4413      	add	r3, r2
 8100f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8100f4c:	697b      	ldr	r3, [r7, #20]
 8100f4e:	681a      	ldr	r2, [r3, #0]
 8100f50:	68bb      	ldr	r3, [r7, #8]
 8100f52:	f003 031f 	and.w	r3, r3, #31
 8100f56:	211f      	movs	r1, #31
 8100f58:	fa01 f303 	lsl.w	r3, r1, r3
 8100f5c:	43db      	mvns	r3, r3
 8100f5e:	401a      	ands	r2, r3
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	0e9b      	lsrs	r3, r3, #26
 8100f64:	f003 011f 	and.w	r1, r3, #31
 8100f68:	68bb      	ldr	r3, [r7, #8]
 8100f6a:	f003 031f 	and.w	r3, r3, #31
 8100f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8100f72:	431a      	orrs	r2, r3
 8100f74:	697b      	ldr	r3, [r7, #20]
 8100f76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8100f78:	bf00      	nop
 8100f7a:	371c      	adds	r7, #28
 8100f7c:	46bd      	mov	sp, r7
 8100f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f82:	4770      	bx	lr

08100f84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8100f84:	b480      	push	{r7}
 8100f86:	b087      	sub	sp, #28
 8100f88:	af00      	add	r7, sp, #0
 8100f8a:	60f8      	str	r0, [r7, #12]
 8100f8c:	60b9      	str	r1, [r7, #8]
 8100f8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8100f90:	68fb      	ldr	r3, [r7, #12]
 8100f92:	3314      	adds	r3, #20
 8100f94:	461a      	mov	r2, r3
 8100f96:	68bb      	ldr	r3, [r7, #8]
 8100f98:	0e5b      	lsrs	r3, r3, #25
 8100f9a:	009b      	lsls	r3, r3, #2
 8100f9c:	f003 0304 	and.w	r3, r3, #4
 8100fa0:	4413      	add	r3, r2
 8100fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8100fa4:	697b      	ldr	r3, [r7, #20]
 8100fa6:	681a      	ldr	r2, [r3, #0]
 8100fa8:	68bb      	ldr	r3, [r7, #8]
 8100faa:	0d1b      	lsrs	r3, r3, #20
 8100fac:	f003 031f 	and.w	r3, r3, #31
 8100fb0:	2107      	movs	r1, #7
 8100fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8100fb6:	43db      	mvns	r3, r3
 8100fb8:	401a      	ands	r2, r3
 8100fba:	68bb      	ldr	r3, [r7, #8]
 8100fbc:	0d1b      	lsrs	r3, r3, #20
 8100fbe:	f003 031f 	and.w	r3, r3, #31
 8100fc2:	6879      	ldr	r1, [r7, #4]
 8100fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8100fc8:	431a      	orrs	r2, r3
 8100fca:	697b      	ldr	r3, [r7, #20]
 8100fcc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8100fce:	bf00      	nop
 8100fd0:	371c      	adds	r7, #28
 8100fd2:	46bd      	mov	sp, r7
 8100fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fd8:	4770      	bx	lr
	...

08100fdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8100fdc:	b480      	push	{r7}
 8100fde:	b085      	sub	sp, #20
 8100fe0:	af00      	add	r7, sp, #0
 8100fe2:	60f8      	str	r0, [r7, #12]
 8100fe4:	60b9      	str	r1, [r7, #8]
 8100fe6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8100fe8:	68fb      	ldr	r3, [r7, #12]
 8100fea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8100fee:	68bb      	ldr	r3, [r7, #8]
 8100ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8100ff4:	43db      	mvns	r3, r3
 8100ff6:	401a      	ands	r2, r3
 8100ff8:	687b      	ldr	r3, [r7, #4]
 8100ffa:	f003 0318 	and.w	r3, r3, #24
 8100ffe:	4908      	ldr	r1, [pc, #32]	@ (8101020 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101000:	40d9      	lsrs	r1, r3
 8101002:	68bb      	ldr	r3, [r7, #8]
 8101004:	400b      	ands	r3, r1
 8101006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810100a:	431a      	orrs	r2, r3
 810100c:	68fb      	ldr	r3, [r7, #12]
 810100e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8101012:	bf00      	nop
 8101014:	3714      	adds	r7, #20
 8101016:	46bd      	mov	sp, r7
 8101018:	f85d 7b04 	ldr.w	r7, [sp], #4
 810101c:	4770      	bx	lr
 810101e:	bf00      	nop
 8101020:	000fffff 	.word	0x000fffff

08101024 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101024:	b480      	push	{r7}
 8101026:	b083      	sub	sp, #12
 8101028:	af00      	add	r7, sp, #0
 810102a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 810102c:	687b      	ldr	r3, [r7, #4]
 810102e:	689b      	ldr	r3, [r3, #8]
 8101030:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8101034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101038:	687a      	ldr	r2, [r7, #4]
 810103a:	6093      	str	r3, [r2, #8]
}
 810103c:	bf00      	nop
 810103e:	370c      	adds	r7, #12
 8101040:	46bd      	mov	sp, r7
 8101042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101046:	4770      	bx	lr

08101048 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8101048:	b480      	push	{r7}
 810104a:	b083      	sub	sp, #12
 810104c:	af00      	add	r7, sp, #0
 810104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	689b      	ldr	r3, [r3, #8]
 8101054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8101058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810105c:	d101      	bne.n	8101062 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810105e:	2301      	movs	r3, #1
 8101060:	e000      	b.n	8101064 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8101062:	2300      	movs	r3, #0
}
 8101064:	4618      	mov	r0, r3
 8101066:	370c      	adds	r7, #12
 8101068:	46bd      	mov	sp, r7
 810106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810106e:	4770      	bx	lr

08101070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101070:	b480      	push	{r7}
 8101072:	b083      	sub	sp, #12
 8101074:	af00      	add	r7, sp, #0
 8101076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101078:	687b      	ldr	r3, [r7, #4]
 810107a:	689b      	ldr	r3, [r3, #8]
 810107c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8101080:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101084:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8101088:	687b      	ldr	r3, [r7, #4]
 810108a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 810108c:	bf00      	nop
 810108e:	370c      	adds	r7, #12
 8101090:	46bd      	mov	sp, r7
 8101092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101096:	4770      	bx	lr

08101098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101098:	b480      	push	{r7}
 810109a:	b083      	sub	sp, #12
 810109c:	af00      	add	r7, sp, #0
 810109e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81010a0:	687b      	ldr	r3, [r7, #4]
 81010a2:	689b      	ldr	r3, [r3, #8]
 81010a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81010a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81010ac:	d101      	bne.n	81010b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81010ae:	2301      	movs	r3, #1
 81010b0:	e000      	b.n	81010b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81010b2:	2300      	movs	r3, #0
}
 81010b4:	4618      	mov	r0, r3
 81010b6:	370c      	adds	r7, #12
 81010b8:	46bd      	mov	sp, r7
 81010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010be:	4770      	bx	lr

081010c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81010c0:	b480      	push	{r7}
 81010c2:	b083      	sub	sp, #12
 81010c4:	af00      	add	r7, sp, #0
 81010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	689b      	ldr	r3, [r3, #8]
 81010cc:	f003 0301 	and.w	r3, r3, #1
 81010d0:	2b01      	cmp	r3, #1
 81010d2:	d101      	bne.n	81010d8 <LL_ADC_IsEnabled+0x18>
 81010d4:	2301      	movs	r3, #1
 81010d6:	e000      	b.n	81010da <LL_ADC_IsEnabled+0x1a>
 81010d8:	2300      	movs	r3, #0
}
 81010da:	4618      	mov	r0, r3
 81010dc:	370c      	adds	r7, #12
 81010de:	46bd      	mov	sp, r7
 81010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010e4:	4770      	bx	lr

081010e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81010e6:	b480      	push	{r7}
 81010e8:	b083      	sub	sp, #12
 81010ea:	af00      	add	r7, sp, #0
 81010ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	689b      	ldr	r3, [r3, #8]
 81010f2:	f003 0304 	and.w	r3, r3, #4
 81010f6:	2b04      	cmp	r3, #4
 81010f8:	d101      	bne.n	81010fe <LL_ADC_REG_IsConversionOngoing+0x18>
 81010fa:	2301      	movs	r3, #1
 81010fc:	e000      	b.n	8101100 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81010fe:	2300      	movs	r3, #0
}
 8101100:	4618      	mov	r0, r3
 8101102:	370c      	adds	r7, #12
 8101104:	46bd      	mov	sp, r7
 8101106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810110a:	4770      	bx	lr

0810110c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810110c:	b480      	push	{r7}
 810110e:	b083      	sub	sp, #12
 8101110:	af00      	add	r7, sp, #0
 8101112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	689b      	ldr	r3, [r3, #8]
 8101118:	f003 0308 	and.w	r3, r3, #8
 810111c:	2b08      	cmp	r3, #8
 810111e:	d101      	bne.n	8101124 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101120:	2301      	movs	r3, #1
 8101122:	e000      	b.n	8101126 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101124:	2300      	movs	r3, #0
}
 8101126:	4618      	mov	r0, r3
 8101128:	370c      	adds	r7, #12
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
	...

08101134 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101134:	b590      	push	{r4, r7, lr}
 8101136:	b089      	sub	sp, #36	@ 0x24
 8101138:	af00      	add	r7, sp, #0
 810113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810113c:	2300      	movs	r3, #0
 810113e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8101140:	2300      	movs	r3, #0
 8101142:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8101144:	687b      	ldr	r3, [r7, #4]
 8101146:	2b00      	cmp	r3, #0
 8101148:	d101      	bne.n	810114e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810114a:	2301      	movs	r3, #1
 810114c:	e18f      	b.n	810146e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	68db      	ldr	r3, [r3, #12]
 8101152:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8101154:	687b      	ldr	r3, [r7, #4]
 8101156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101158:	2b00      	cmp	r3, #0
 810115a:	d109      	bne.n	8101170 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 810115c:	6878      	ldr	r0, [r7, #4]
 810115e:	f7ff fc1f 	bl	81009a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8101162:	687b      	ldr	r3, [r7, #4]
 8101164:	2200      	movs	r2, #0
 8101166:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101168:	687b      	ldr	r3, [r7, #4]
 810116a:	2200      	movs	r2, #0
 810116c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101170:	687b      	ldr	r3, [r7, #4]
 8101172:	681b      	ldr	r3, [r3, #0]
 8101174:	4618      	mov	r0, r3
 8101176:	f7ff ff67 	bl	8101048 <LL_ADC_IsDeepPowerDownEnabled>
 810117a:	4603      	mov	r3, r0
 810117c:	2b00      	cmp	r3, #0
 810117e:	d004      	beq.n	810118a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101180:	687b      	ldr	r3, [r7, #4]
 8101182:	681b      	ldr	r3, [r3, #0]
 8101184:	4618      	mov	r0, r3
 8101186:	f7ff ff4d 	bl	8101024 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810118a:	687b      	ldr	r3, [r7, #4]
 810118c:	681b      	ldr	r3, [r3, #0]
 810118e:	4618      	mov	r0, r3
 8101190:	f7ff ff82 	bl	8101098 <LL_ADC_IsInternalRegulatorEnabled>
 8101194:	4603      	mov	r3, r0
 8101196:	2b00      	cmp	r3, #0
 8101198:	d114      	bne.n	81011c4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810119a:	687b      	ldr	r3, [r7, #4]
 810119c:	681b      	ldr	r3, [r3, #0]
 810119e:	4618      	mov	r0, r3
 81011a0:	f7ff ff66 	bl	8101070 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81011a4:	4b88      	ldr	r3, [pc, #544]	@ (81013c8 <HAL_ADC_Init+0x294>)
 81011a6:	681b      	ldr	r3, [r3, #0]
 81011a8:	099b      	lsrs	r3, r3, #6
 81011aa:	4a88      	ldr	r2, [pc, #544]	@ (81013cc <HAL_ADC_Init+0x298>)
 81011ac:	fba2 2303 	umull	r2, r3, r2, r3
 81011b0:	099b      	lsrs	r3, r3, #6
 81011b2:	3301      	adds	r3, #1
 81011b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81011b6:	e002      	b.n	81011be <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81011b8:	68bb      	ldr	r3, [r7, #8]
 81011ba:	3b01      	subs	r3, #1
 81011bc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81011be:	68bb      	ldr	r3, [r7, #8]
 81011c0:	2b00      	cmp	r3, #0
 81011c2:	d1f9      	bne.n	81011b8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	681b      	ldr	r3, [r3, #0]
 81011c8:	4618      	mov	r0, r3
 81011ca:	f7ff ff65 	bl	8101098 <LL_ADC_IsInternalRegulatorEnabled>
 81011ce:	4603      	mov	r3, r0
 81011d0:	2b00      	cmp	r3, #0
 81011d2:	d10d      	bne.n	81011f0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81011d8:	f043 0210 	orr.w	r2, r3, #16
 81011dc:	687b      	ldr	r3, [r7, #4]
 81011de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81011e0:	687b      	ldr	r3, [r7, #4]
 81011e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81011e4:	f043 0201 	orr.w	r2, r3, #1
 81011e8:	687b      	ldr	r3, [r7, #4]
 81011ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 81011ec:	2301      	movs	r3, #1
 81011ee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	681b      	ldr	r3, [r3, #0]
 81011f4:	4618      	mov	r0, r3
 81011f6:	f7ff ff76 	bl	81010e6 <LL_ADC_REG_IsConversionOngoing>
 81011fa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101200:	f003 0310 	and.w	r3, r3, #16
 8101204:	2b00      	cmp	r3, #0
 8101206:	f040 8129 	bne.w	810145c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810120a:	697b      	ldr	r3, [r7, #20]
 810120c:	2b00      	cmp	r3, #0
 810120e:	f040 8125 	bne.w	810145c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101212:	687b      	ldr	r3, [r7, #4]
 8101214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101216:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 810121a:	f043 0202 	orr.w	r2, r3, #2
 810121e:	687b      	ldr	r3, [r7, #4]
 8101220:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101222:	687b      	ldr	r3, [r7, #4]
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	4618      	mov	r0, r3
 8101228:	f7ff ff4a 	bl	81010c0 <LL_ADC_IsEnabled>
 810122c:	4603      	mov	r3, r0
 810122e:	2b00      	cmp	r3, #0
 8101230:	d136      	bne.n	81012a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	681b      	ldr	r3, [r3, #0]
 8101236:	4a66      	ldr	r2, [pc, #408]	@ (81013d0 <HAL_ADC_Init+0x29c>)
 8101238:	4293      	cmp	r3, r2
 810123a:	d004      	beq.n	8101246 <HAL_ADC_Init+0x112>
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	681b      	ldr	r3, [r3, #0]
 8101240:	4a64      	ldr	r2, [pc, #400]	@ (81013d4 <HAL_ADC_Init+0x2a0>)
 8101242:	4293      	cmp	r3, r2
 8101244:	d10e      	bne.n	8101264 <HAL_ADC_Init+0x130>
 8101246:	4862      	ldr	r0, [pc, #392]	@ (81013d0 <HAL_ADC_Init+0x29c>)
 8101248:	f7ff ff3a 	bl	81010c0 <LL_ADC_IsEnabled>
 810124c:	4604      	mov	r4, r0
 810124e:	4861      	ldr	r0, [pc, #388]	@ (81013d4 <HAL_ADC_Init+0x2a0>)
 8101250:	f7ff ff36 	bl	81010c0 <LL_ADC_IsEnabled>
 8101254:	4603      	mov	r3, r0
 8101256:	4323      	orrs	r3, r4
 8101258:	2b00      	cmp	r3, #0
 810125a:	bf0c      	ite	eq
 810125c:	2301      	moveq	r3, #1
 810125e:	2300      	movne	r3, #0
 8101260:	b2db      	uxtb	r3, r3
 8101262:	e008      	b.n	8101276 <HAL_ADC_Init+0x142>
 8101264:	485c      	ldr	r0, [pc, #368]	@ (81013d8 <HAL_ADC_Init+0x2a4>)
 8101266:	f7ff ff2b 	bl	81010c0 <LL_ADC_IsEnabled>
 810126a:	4603      	mov	r3, r0
 810126c:	2b00      	cmp	r3, #0
 810126e:	bf0c      	ite	eq
 8101270:	2301      	moveq	r3, #1
 8101272:	2300      	movne	r3, #0
 8101274:	b2db      	uxtb	r3, r3
 8101276:	2b00      	cmp	r3, #0
 8101278:	d012      	beq.n	81012a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	681b      	ldr	r3, [r3, #0]
 810127e:	4a54      	ldr	r2, [pc, #336]	@ (81013d0 <HAL_ADC_Init+0x29c>)
 8101280:	4293      	cmp	r3, r2
 8101282:	d004      	beq.n	810128e <HAL_ADC_Init+0x15a>
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	681b      	ldr	r3, [r3, #0]
 8101288:	4a52      	ldr	r2, [pc, #328]	@ (81013d4 <HAL_ADC_Init+0x2a0>)
 810128a:	4293      	cmp	r3, r2
 810128c:	d101      	bne.n	8101292 <HAL_ADC_Init+0x15e>
 810128e:	4a53      	ldr	r2, [pc, #332]	@ (81013dc <HAL_ADC_Init+0x2a8>)
 8101290:	e000      	b.n	8101294 <HAL_ADC_Init+0x160>
 8101292:	4a53      	ldr	r2, [pc, #332]	@ (81013e0 <HAL_ADC_Init+0x2ac>)
 8101294:	687b      	ldr	r3, [r7, #4]
 8101296:	685b      	ldr	r3, [r3, #4]
 8101298:	4619      	mov	r1, r3
 810129a:	4610      	mov	r0, r2
 810129c:	f7ff fdbe 	bl	8100e1c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 81012a0:	f7ff fdb0 	bl	8100e04 <HAL_GetREVID>
 81012a4:	4603      	mov	r3, r0
 81012a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 81012aa:	4293      	cmp	r3, r2
 81012ac:	d914      	bls.n	81012d8 <HAL_ADC_Init+0x1a4>
 81012ae:	687b      	ldr	r3, [r7, #4]
 81012b0:	689b      	ldr	r3, [r3, #8]
 81012b2:	2b10      	cmp	r3, #16
 81012b4:	d110      	bne.n	81012d8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81012b6:	687b      	ldr	r3, [r7, #4]
 81012b8:	7d5b      	ldrb	r3, [r3, #21]
 81012ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81012c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81012c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81012c8:	687b      	ldr	r3, [r7, #4]
 81012ca:	7f1b      	ldrb	r3, [r3, #28]
 81012cc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81012ce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81012d0:	f043 030c 	orr.w	r3, r3, #12
 81012d4:	61bb      	str	r3, [r7, #24]
 81012d6:	e00d      	b.n	81012f4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81012d8:	687b      	ldr	r3, [r7, #4]
 81012da:	7d5b      	ldrb	r3, [r3, #21]
 81012dc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81012e2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81012e4:	687b      	ldr	r3, [r7, #4]
 81012e6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81012e8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	7f1b      	ldrb	r3, [r3, #28]
 81012ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81012f0:	4313      	orrs	r3, r2
 81012f2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	7f1b      	ldrb	r3, [r3, #28]
 81012f8:	2b01      	cmp	r3, #1
 81012fa:	d106      	bne.n	810130a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81012fc:	687b      	ldr	r3, [r7, #4]
 81012fe:	6a1b      	ldr	r3, [r3, #32]
 8101300:	3b01      	subs	r3, #1
 8101302:	045b      	lsls	r3, r3, #17
 8101304:	69ba      	ldr	r2, [r7, #24]
 8101306:	4313      	orrs	r3, r2
 8101308:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810130e:	2b00      	cmp	r3, #0
 8101310:	d009      	beq.n	8101326 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101312:	687b      	ldr	r3, [r7, #4]
 8101314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101316:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810131a:	687b      	ldr	r3, [r7, #4]
 810131c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810131e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101320:	69ba      	ldr	r2, [r7, #24]
 8101322:	4313      	orrs	r3, r2
 8101324:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101326:	687b      	ldr	r3, [r7, #4]
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	68da      	ldr	r2, [r3, #12]
 810132c:	4b2d      	ldr	r3, [pc, #180]	@ (81013e4 <HAL_ADC_Init+0x2b0>)
 810132e:	4013      	ands	r3, r2
 8101330:	687a      	ldr	r2, [r7, #4]
 8101332:	6812      	ldr	r2, [r2, #0]
 8101334:	69b9      	ldr	r1, [r7, #24]
 8101336:	430b      	orrs	r3, r1
 8101338:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810133a:	687b      	ldr	r3, [r7, #4]
 810133c:	681b      	ldr	r3, [r3, #0]
 810133e:	4618      	mov	r0, r3
 8101340:	f7ff fed1 	bl	81010e6 <LL_ADC_REG_IsConversionOngoing>
 8101344:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	681b      	ldr	r3, [r3, #0]
 810134a:	4618      	mov	r0, r3
 810134c:	f7ff fede 	bl	810110c <LL_ADC_INJ_IsConversionOngoing>
 8101350:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101352:	693b      	ldr	r3, [r7, #16]
 8101354:	2b00      	cmp	r3, #0
 8101356:	d15f      	bne.n	8101418 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101358:	68fb      	ldr	r3, [r7, #12]
 810135a:	2b00      	cmp	r3, #0
 810135c:	d15c      	bne.n	8101418 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	7d1b      	ldrb	r3, [r3, #20]
 8101362:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8101364:	687b      	ldr	r3, [r7, #4]
 8101366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8101368:	4313      	orrs	r3, r2
 810136a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	68db      	ldr	r3, [r3, #12]
 8101372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8101376:	f023 0303 	bic.w	r3, r3, #3
 810137a:	687a      	ldr	r2, [r7, #4]
 810137c:	6812      	ldr	r2, [r2, #0]
 810137e:	69b9      	ldr	r1, [r7, #24]
 8101380:	430b      	orrs	r3, r1
 8101382:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810138a:	2b01      	cmp	r3, #1
 810138c:	d12e      	bne.n	81013ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101392:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101394:	687b      	ldr	r3, [r7, #4]
 8101396:	681b      	ldr	r3, [r3, #0]
 8101398:	691a      	ldr	r2, [r3, #16]
 810139a:	4b13      	ldr	r3, [pc, #76]	@ (81013e8 <HAL_ADC_Init+0x2b4>)
 810139c:	4013      	ands	r3, r2
 810139e:	687a      	ldr	r2, [r7, #4]
 81013a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 81013a2:	3a01      	subs	r2, #1
 81013a4:	0411      	lsls	r1, r2, #16
 81013a6:	687a      	ldr	r2, [r7, #4]
 81013a8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 81013aa:	4311      	orrs	r1, r2
 81013ac:	687a      	ldr	r2, [r7, #4]
 81013ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 81013b0:	4311      	orrs	r1, r2
 81013b2:	687a      	ldr	r2, [r7, #4]
 81013b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 81013b6:	430a      	orrs	r2, r1
 81013b8:	431a      	orrs	r2, r3
 81013ba:	687b      	ldr	r3, [r7, #4]
 81013bc:	681b      	ldr	r3, [r3, #0]
 81013be:	f042 0201 	orr.w	r2, r2, #1
 81013c2:	611a      	str	r2, [r3, #16]
 81013c4:	e01a      	b.n	81013fc <HAL_ADC_Init+0x2c8>
 81013c6:	bf00      	nop
 81013c8:	10000000 	.word	0x10000000
 81013cc:	053e2d63 	.word	0x053e2d63
 81013d0:	40022000 	.word	0x40022000
 81013d4:	40022100 	.word	0x40022100
 81013d8:	58026000 	.word	0x58026000
 81013dc:	40022300 	.word	0x40022300
 81013e0:	58026300 	.word	0x58026300
 81013e4:	fff0c003 	.word	0xfff0c003
 81013e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	681b      	ldr	r3, [r3, #0]
 81013f0:	691a      	ldr	r2, [r3, #16]
 81013f2:	687b      	ldr	r3, [r7, #4]
 81013f4:	681b      	ldr	r3, [r3, #0]
 81013f6:	f022 0201 	bic.w	r2, r2, #1
 81013fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81013fc:	687b      	ldr	r3, [r7, #4]
 81013fe:	681b      	ldr	r3, [r3, #0]
 8101400:	691b      	ldr	r3, [r3, #16]
 8101402:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	681b      	ldr	r3, [r3, #0]
 810140e:	430a      	orrs	r2, r1
 8101410:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101412:	6878      	ldr	r0, [r7, #4]
 8101414:	f000 fb8c 	bl	8101b30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	68db      	ldr	r3, [r3, #12]
 810141c:	2b01      	cmp	r3, #1
 810141e:	d10c      	bne.n	810143a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	681b      	ldr	r3, [r3, #0]
 8101424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101426:	f023 010f 	bic.w	r1, r3, #15
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	699b      	ldr	r3, [r3, #24]
 810142e:	1e5a      	subs	r2, r3, #1
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	681b      	ldr	r3, [r3, #0]
 8101434:	430a      	orrs	r2, r1
 8101436:	631a      	str	r2, [r3, #48]	@ 0x30
 8101438:	e007      	b.n	810144a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	681b      	ldr	r3, [r3, #0]
 810143e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8101440:	687b      	ldr	r3, [r7, #4]
 8101442:	681b      	ldr	r3, [r3, #0]
 8101444:	f022 020f 	bic.w	r2, r2, #15
 8101448:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 810144a:	687b      	ldr	r3, [r7, #4]
 810144c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810144e:	f023 0303 	bic.w	r3, r3, #3
 8101452:	f043 0201 	orr.w	r2, r3, #1
 8101456:	687b      	ldr	r3, [r7, #4]
 8101458:	655a      	str	r2, [r3, #84]	@ 0x54
 810145a:	e007      	b.n	810146c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810145c:	687b      	ldr	r3, [r7, #4]
 810145e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101460:	f043 0210 	orr.w	r2, r3, #16
 8101464:	687b      	ldr	r3, [r7, #4]
 8101466:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8101468:	2301      	movs	r3, #1
 810146a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 810146c:	7ffb      	ldrb	r3, [r7, #31]
}
 810146e:	4618      	mov	r0, r3
 8101470:	3724      	adds	r7, #36	@ 0x24
 8101472:	46bd      	mov	sp, r7
 8101474:	bd90      	pop	{r4, r7, pc}
 8101476:	bf00      	nop

08101478 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8101478:	b590      	push	{r4, r7, lr}
 810147a:	b0a1      	sub	sp, #132	@ 0x84
 810147c:	af00      	add	r7, sp, #0
 810147e:	6078      	str	r0, [r7, #4]
 8101480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101482:	2300      	movs	r3, #0
 8101484:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8101488:	2300      	movs	r3, #0
 810148a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 810148c:	683b      	ldr	r3, [r7, #0]
 810148e:	68db      	ldr	r3, [r3, #12]
 8101490:	4a65      	ldr	r2, [pc, #404]	@ (8101628 <HAL_ADC_ConfigChannel+0x1b0>)
 8101492:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101494:	687b      	ldr	r3, [r7, #4]
 8101496:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810149a:	2b01      	cmp	r3, #1
 810149c:	d101      	bne.n	81014a2 <HAL_ADC_ConfigChannel+0x2a>
 810149e:	2302      	movs	r3, #2
 81014a0:	e32e      	b.n	8101b00 <HAL_ADC_ConfigChannel+0x688>
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	2201      	movs	r2, #1
 81014a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	681b      	ldr	r3, [r3, #0]
 81014ae:	4618      	mov	r0, r3
 81014b0:	f7ff fe19 	bl	81010e6 <LL_ADC_REG_IsConversionOngoing>
 81014b4:	4603      	mov	r3, r0
 81014b6:	2b00      	cmp	r3, #0
 81014b8:	f040 8313 	bne.w	8101ae2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 81014bc:	683b      	ldr	r3, [r7, #0]
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	2b00      	cmp	r3, #0
 81014c2:	db2c      	blt.n	810151e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81014c4:	683b      	ldr	r3, [r7, #0]
 81014c6:	681b      	ldr	r3, [r3, #0]
 81014c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81014cc:	2b00      	cmp	r3, #0
 81014ce:	d108      	bne.n	81014e2 <HAL_ADC_ConfigChannel+0x6a>
 81014d0:	683b      	ldr	r3, [r7, #0]
 81014d2:	681b      	ldr	r3, [r3, #0]
 81014d4:	0e9b      	lsrs	r3, r3, #26
 81014d6:	f003 031f 	and.w	r3, r3, #31
 81014da:	2201      	movs	r2, #1
 81014dc:	fa02 f303 	lsl.w	r3, r2, r3
 81014e0:	e016      	b.n	8101510 <HAL_ADC_ConfigChannel+0x98>
 81014e2:	683b      	ldr	r3, [r7, #0]
 81014e4:	681b      	ldr	r3, [r3, #0]
 81014e6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81014e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 81014ea:	fa93 f3a3 	rbit	r3, r3
 81014ee:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81014f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 81014f2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81014f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 81014f6:	2b00      	cmp	r3, #0
 81014f8:	d101      	bne.n	81014fe <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 81014fa:	2320      	movs	r3, #32
 81014fc:	e003      	b.n	8101506 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 81014fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8101500:	fab3 f383 	clz	r3, r3
 8101504:	b2db      	uxtb	r3, r3
 8101506:	f003 031f 	and.w	r3, r3, #31
 810150a:	2201      	movs	r2, #1
 810150c:	fa02 f303 	lsl.w	r3, r2, r3
 8101510:	687a      	ldr	r2, [r7, #4]
 8101512:	6812      	ldr	r2, [r2, #0]
 8101514:	69d1      	ldr	r1, [r2, #28]
 8101516:	687a      	ldr	r2, [r7, #4]
 8101518:	6812      	ldr	r2, [r2, #0]
 810151a:	430b      	orrs	r3, r1
 810151c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810151e:	687b      	ldr	r3, [r7, #4]
 8101520:	6818      	ldr	r0, [r3, #0]
 8101522:	683b      	ldr	r3, [r7, #0]
 8101524:	6859      	ldr	r1, [r3, #4]
 8101526:	683b      	ldr	r3, [r7, #0]
 8101528:	681b      	ldr	r3, [r3, #0]
 810152a:	461a      	mov	r2, r3
 810152c:	f7ff fcfe 	bl	8100f2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101530:	687b      	ldr	r3, [r7, #4]
 8101532:	681b      	ldr	r3, [r3, #0]
 8101534:	4618      	mov	r0, r3
 8101536:	f7ff fdd6 	bl	81010e6 <LL_ADC_REG_IsConversionOngoing>
 810153a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810153c:	687b      	ldr	r3, [r7, #4]
 810153e:	681b      	ldr	r3, [r3, #0]
 8101540:	4618      	mov	r0, r3
 8101542:	f7ff fde3 	bl	810110c <LL_ADC_INJ_IsConversionOngoing>
 8101546:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101548:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 810154a:	2b00      	cmp	r3, #0
 810154c:	f040 80b8 	bne.w	81016c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101550:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8101552:	2b00      	cmp	r3, #0
 8101554:	f040 80b4 	bne.w	81016c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	6818      	ldr	r0, [r3, #0]
 810155c:	683b      	ldr	r3, [r7, #0]
 810155e:	6819      	ldr	r1, [r3, #0]
 8101560:	683b      	ldr	r3, [r7, #0]
 8101562:	689b      	ldr	r3, [r3, #8]
 8101564:	461a      	mov	r2, r3
 8101566:	f7ff fd0d 	bl	8100f84 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810156a:	4b30      	ldr	r3, [pc, #192]	@ (810162c <HAL_ADC_ConfigChannel+0x1b4>)
 810156c:	681b      	ldr	r3, [r3, #0]
 810156e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8101572:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101576:	d10b      	bne.n	8101590 <HAL_ADC_ConfigChannel+0x118>
 8101578:	683b      	ldr	r3, [r7, #0]
 810157a:	695a      	ldr	r2, [r3, #20]
 810157c:	687b      	ldr	r3, [r7, #4]
 810157e:	681b      	ldr	r3, [r3, #0]
 8101580:	68db      	ldr	r3, [r3, #12]
 8101582:	089b      	lsrs	r3, r3, #2
 8101584:	f003 0307 	and.w	r3, r3, #7
 8101588:	005b      	lsls	r3, r3, #1
 810158a:	fa02 f303 	lsl.w	r3, r2, r3
 810158e:	e01d      	b.n	81015cc <HAL_ADC_ConfigChannel+0x154>
 8101590:	687b      	ldr	r3, [r7, #4]
 8101592:	681b      	ldr	r3, [r3, #0]
 8101594:	68db      	ldr	r3, [r3, #12]
 8101596:	f003 0310 	and.w	r3, r3, #16
 810159a:	2b00      	cmp	r3, #0
 810159c:	d10b      	bne.n	81015b6 <HAL_ADC_ConfigChannel+0x13e>
 810159e:	683b      	ldr	r3, [r7, #0]
 81015a0:	695a      	ldr	r2, [r3, #20]
 81015a2:	687b      	ldr	r3, [r7, #4]
 81015a4:	681b      	ldr	r3, [r3, #0]
 81015a6:	68db      	ldr	r3, [r3, #12]
 81015a8:	089b      	lsrs	r3, r3, #2
 81015aa:	f003 0307 	and.w	r3, r3, #7
 81015ae:	005b      	lsls	r3, r3, #1
 81015b0:	fa02 f303 	lsl.w	r3, r2, r3
 81015b4:	e00a      	b.n	81015cc <HAL_ADC_ConfigChannel+0x154>
 81015b6:	683b      	ldr	r3, [r7, #0]
 81015b8:	695a      	ldr	r2, [r3, #20]
 81015ba:	687b      	ldr	r3, [r7, #4]
 81015bc:	681b      	ldr	r3, [r3, #0]
 81015be:	68db      	ldr	r3, [r3, #12]
 81015c0:	089b      	lsrs	r3, r3, #2
 81015c2:	f003 0304 	and.w	r3, r3, #4
 81015c6:	005b      	lsls	r3, r3, #1
 81015c8:	fa02 f303 	lsl.w	r3, r2, r3
 81015cc:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81015ce:	683b      	ldr	r3, [r7, #0]
 81015d0:	691b      	ldr	r3, [r3, #16]
 81015d2:	2b04      	cmp	r3, #4
 81015d4:	d02c      	beq.n	8101630 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81015d6:	687b      	ldr	r3, [r7, #4]
 81015d8:	6818      	ldr	r0, [r3, #0]
 81015da:	683b      	ldr	r3, [r7, #0]
 81015dc:	6919      	ldr	r1, [r3, #16]
 81015de:	683b      	ldr	r3, [r7, #0]
 81015e0:	681a      	ldr	r2, [r3, #0]
 81015e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 81015e4:	f7ff fc4e 	bl	8100e84 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81015e8:	687b      	ldr	r3, [r7, #4]
 81015ea:	6818      	ldr	r0, [r3, #0]
 81015ec:	683b      	ldr	r3, [r7, #0]
 81015ee:	6919      	ldr	r1, [r3, #16]
 81015f0:	683b      	ldr	r3, [r7, #0]
 81015f2:	7e5b      	ldrb	r3, [r3, #25]
 81015f4:	2b01      	cmp	r3, #1
 81015f6:	d102      	bne.n	81015fe <HAL_ADC_ConfigChannel+0x186>
 81015f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81015fc:	e000      	b.n	8101600 <HAL_ADC_ConfigChannel+0x188>
 81015fe:	2300      	movs	r3, #0
 8101600:	461a      	mov	r2, r3
 8101602:	f7ff fc78 	bl	8100ef6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	6818      	ldr	r0, [r3, #0]
 810160a:	683b      	ldr	r3, [r7, #0]
 810160c:	6919      	ldr	r1, [r3, #16]
 810160e:	683b      	ldr	r3, [r7, #0]
 8101610:	7e1b      	ldrb	r3, [r3, #24]
 8101612:	2b01      	cmp	r3, #1
 8101614:	d102      	bne.n	810161c <HAL_ADC_ConfigChannel+0x1a4>
 8101616:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810161a:	e000      	b.n	810161e <HAL_ADC_ConfigChannel+0x1a6>
 810161c:	2300      	movs	r3, #0
 810161e:	461a      	mov	r2, r3
 8101620:	f7ff fc50 	bl	8100ec4 <LL_ADC_SetDataRightShift>
 8101624:	e04c      	b.n	81016c0 <HAL_ADC_ConfigChannel+0x248>
 8101626:	bf00      	nop
 8101628:	47ff0000 	.word	0x47ff0000
 810162c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101630:	687b      	ldr	r3, [r7, #4]
 8101632:	681b      	ldr	r3, [r3, #0]
 8101634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101636:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810163a:	683b      	ldr	r3, [r7, #0]
 810163c:	681b      	ldr	r3, [r3, #0]
 810163e:	069b      	lsls	r3, r3, #26
 8101640:	429a      	cmp	r2, r3
 8101642:	d107      	bne.n	8101654 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8101644:	687b      	ldr	r3, [r7, #4]
 8101646:	681b      	ldr	r3, [r3, #0]
 8101648:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	681b      	ldr	r3, [r3, #0]
 810164e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8101652:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	681b      	ldr	r3, [r3, #0]
 8101658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810165a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810165e:	683b      	ldr	r3, [r7, #0]
 8101660:	681b      	ldr	r3, [r3, #0]
 8101662:	069b      	lsls	r3, r3, #26
 8101664:	429a      	cmp	r2, r3
 8101666:	d107      	bne.n	8101678 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	681b      	ldr	r3, [r3, #0]
 810166c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	681b      	ldr	r3, [r3, #0]
 8101672:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8101676:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	681b      	ldr	r3, [r3, #0]
 810167c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810167e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101682:	683b      	ldr	r3, [r7, #0]
 8101684:	681b      	ldr	r3, [r3, #0]
 8101686:	069b      	lsls	r3, r3, #26
 8101688:	429a      	cmp	r2, r3
 810168a:	d107      	bne.n	810169c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	681b      	ldr	r3, [r3, #0]
 8101690:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8101692:	687b      	ldr	r3, [r7, #4]
 8101694:	681b      	ldr	r3, [r3, #0]
 8101696:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810169a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81016a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81016a6:	683b      	ldr	r3, [r7, #0]
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	069b      	lsls	r3, r3, #26
 81016ac:	429a      	cmp	r2, r3
 81016ae:	d107      	bne.n	81016c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81016b0:	687b      	ldr	r3, [r7, #4]
 81016b2:	681b      	ldr	r3, [r3, #0]
 81016b4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	681b      	ldr	r3, [r3, #0]
 81016ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81016be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	681b      	ldr	r3, [r3, #0]
 81016c4:	4618      	mov	r0, r3
 81016c6:	f7ff fcfb 	bl	81010c0 <LL_ADC_IsEnabled>
 81016ca:	4603      	mov	r3, r0
 81016cc:	2b00      	cmp	r3, #0
 81016ce:	f040 8211 	bne.w	8101af4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	6818      	ldr	r0, [r3, #0]
 81016d6:	683b      	ldr	r3, [r7, #0]
 81016d8:	6819      	ldr	r1, [r3, #0]
 81016da:	683b      	ldr	r3, [r7, #0]
 81016dc:	68db      	ldr	r3, [r3, #12]
 81016de:	461a      	mov	r2, r3
 81016e0:	f7ff fc7c 	bl	8100fdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81016e4:	683b      	ldr	r3, [r7, #0]
 81016e6:	68db      	ldr	r3, [r3, #12]
 81016e8:	4aa1      	ldr	r2, [pc, #644]	@ (8101970 <HAL_ADC_ConfigChannel+0x4f8>)
 81016ea:	4293      	cmp	r3, r2
 81016ec:	f040 812e 	bne.w	810194c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81016f4:	683b      	ldr	r3, [r7, #0]
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81016fc:	2b00      	cmp	r3, #0
 81016fe:	d10b      	bne.n	8101718 <HAL_ADC_ConfigChannel+0x2a0>
 8101700:	683b      	ldr	r3, [r7, #0]
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	0e9b      	lsrs	r3, r3, #26
 8101706:	3301      	adds	r3, #1
 8101708:	f003 031f 	and.w	r3, r3, #31
 810170c:	2b09      	cmp	r3, #9
 810170e:	bf94      	ite	ls
 8101710:	2301      	movls	r3, #1
 8101712:	2300      	movhi	r3, #0
 8101714:	b2db      	uxtb	r3, r3
 8101716:	e019      	b.n	810174c <HAL_ADC_ConfigChannel+0x2d4>
 8101718:	683b      	ldr	r3, [r7, #0]
 810171a:	681b      	ldr	r3, [r3, #0]
 810171c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810171e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8101720:	fa93 f3a3 	rbit	r3, r3
 8101724:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8101726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8101728:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 810172a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810172c:	2b00      	cmp	r3, #0
 810172e:	d101      	bne.n	8101734 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8101730:	2320      	movs	r3, #32
 8101732:	e003      	b.n	810173c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8101734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8101736:	fab3 f383 	clz	r3, r3
 810173a:	b2db      	uxtb	r3, r3
 810173c:	3301      	adds	r3, #1
 810173e:	f003 031f 	and.w	r3, r3, #31
 8101742:	2b09      	cmp	r3, #9
 8101744:	bf94      	ite	ls
 8101746:	2301      	movls	r3, #1
 8101748:	2300      	movhi	r3, #0
 810174a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810174c:	2b00      	cmp	r3, #0
 810174e:	d079      	beq.n	8101844 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101750:	683b      	ldr	r3, [r7, #0]
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101758:	2b00      	cmp	r3, #0
 810175a:	d107      	bne.n	810176c <HAL_ADC_ConfigChannel+0x2f4>
 810175c:	683b      	ldr	r3, [r7, #0]
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	0e9b      	lsrs	r3, r3, #26
 8101762:	3301      	adds	r3, #1
 8101764:	069b      	lsls	r3, r3, #26
 8101766:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810176a:	e015      	b.n	8101798 <HAL_ADC_ConfigChannel+0x320>
 810176c:	683b      	ldr	r3, [r7, #0]
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8101774:	fa93 f3a3 	rbit	r3, r3
 8101778:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 810177a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810177c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 810177e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8101780:	2b00      	cmp	r3, #0
 8101782:	d101      	bne.n	8101788 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8101784:	2320      	movs	r3, #32
 8101786:	e003      	b.n	8101790 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8101788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810178a:	fab3 f383 	clz	r3, r3
 810178e:	b2db      	uxtb	r3, r3
 8101790:	3301      	adds	r3, #1
 8101792:	069b      	lsls	r3, r3, #26
 8101794:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101798:	683b      	ldr	r3, [r7, #0]
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81017a0:	2b00      	cmp	r3, #0
 81017a2:	d109      	bne.n	81017b8 <HAL_ADC_ConfigChannel+0x340>
 81017a4:	683b      	ldr	r3, [r7, #0]
 81017a6:	681b      	ldr	r3, [r3, #0]
 81017a8:	0e9b      	lsrs	r3, r3, #26
 81017aa:	3301      	adds	r3, #1
 81017ac:	f003 031f 	and.w	r3, r3, #31
 81017b0:	2101      	movs	r1, #1
 81017b2:	fa01 f303 	lsl.w	r3, r1, r3
 81017b6:	e017      	b.n	81017e8 <HAL_ADC_ConfigChannel+0x370>
 81017b8:	683b      	ldr	r3, [r7, #0]
 81017ba:	681b      	ldr	r3, [r3, #0]
 81017bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81017be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 81017c0:	fa93 f3a3 	rbit	r3, r3
 81017c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 81017c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81017c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 81017ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81017cc:	2b00      	cmp	r3, #0
 81017ce:	d101      	bne.n	81017d4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 81017d0:	2320      	movs	r3, #32
 81017d2:	e003      	b.n	81017dc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 81017d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81017d6:	fab3 f383 	clz	r3, r3
 81017da:	b2db      	uxtb	r3, r3
 81017dc:	3301      	adds	r3, #1
 81017de:	f003 031f 	and.w	r3, r3, #31
 81017e2:	2101      	movs	r1, #1
 81017e4:	fa01 f303 	lsl.w	r3, r1, r3
 81017e8:	ea42 0103 	orr.w	r1, r2, r3
 81017ec:	683b      	ldr	r3, [r7, #0]
 81017ee:	681b      	ldr	r3, [r3, #0]
 81017f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81017f4:	2b00      	cmp	r3, #0
 81017f6:	d10a      	bne.n	810180e <HAL_ADC_ConfigChannel+0x396>
 81017f8:	683b      	ldr	r3, [r7, #0]
 81017fa:	681b      	ldr	r3, [r3, #0]
 81017fc:	0e9b      	lsrs	r3, r3, #26
 81017fe:	3301      	adds	r3, #1
 8101800:	f003 021f 	and.w	r2, r3, #31
 8101804:	4613      	mov	r3, r2
 8101806:	005b      	lsls	r3, r3, #1
 8101808:	4413      	add	r3, r2
 810180a:	051b      	lsls	r3, r3, #20
 810180c:	e018      	b.n	8101840 <HAL_ADC_ConfigChannel+0x3c8>
 810180e:	683b      	ldr	r3, [r7, #0]
 8101810:	681b      	ldr	r3, [r3, #0]
 8101812:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101816:	fa93 f3a3 	rbit	r3, r3
 810181a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 810181c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810181e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8101820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101822:	2b00      	cmp	r3, #0
 8101824:	d101      	bne.n	810182a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8101826:	2320      	movs	r3, #32
 8101828:	e003      	b.n	8101832 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 810182a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810182c:	fab3 f383 	clz	r3, r3
 8101830:	b2db      	uxtb	r3, r3
 8101832:	3301      	adds	r3, #1
 8101834:	f003 021f 	and.w	r2, r3, #31
 8101838:	4613      	mov	r3, r2
 810183a:	005b      	lsls	r3, r3, #1
 810183c:	4413      	add	r3, r2
 810183e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101840:	430b      	orrs	r3, r1
 8101842:	e07e      	b.n	8101942 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101844:	683b      	ldr	r3, [r7, #0]
 8101846:	681b      	ldr	r3, [r3, #0]
 8101848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810184c:	2b00      	cmp	r3, #0
 810184e:	d107      	bne.n	8101860 <HAL_ADC_ConfigChannel+0x3e8>
 8101850:	683b      	ldr	r3, [r7, #0]
 8101852:	681b      	ldr	r3, [r3, #0]
 8101854:	0e9b      	lsrs	r3, r3, #26
 8101856:	3301      	adds	r3, #1
 8101858:	069b      	lsls	r3, r3, #26
 810185a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810185e:	e015      	b.n	810188c <HAL_ADC_ConfigChannel+0x414>
 8101860:	683b      	ldr	r3, [r7, #0]
 8101862:	681b      	ldr	r3, [r3, #0]
 8101864:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101868:	fa93 f3a3 	rbit	r3, r3
 810186c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 810186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8101872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101874:	2b00      	cmp	r3, #0
 8101876:	d101      	bne.n	810187c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8101878:	2320      	movs	r3, #32
 810187a:	e003      	b.n	8101884 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 810187c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810187e:	fab3 f383 	clz	r3, r3
 8101882:	b2db      	uxtb	r3, r3
 8101884:	3301      	adds	r3, #1
 8101886:	069b      	lsls	r3, r3, #26
 8101888:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810188c:	683b      	ldr	r3, [r7, #0]
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101894:	2b00      	cmp	r3, #0
 8101896:	d109      	bne.n	81018ac <HAL_ADC_ConfigChannel+0x434>
 8101898:	683b      	ldr	r3, [r7, #0]
 810189a:	681b      	ldr	r3, [r3, #0]
 810189c:	0e9b      	lsrs	r3, r3, #26
 810189e:	3301      	adds	r3, #1
 81018a0:	f003 031f 	and.w	r3, r3, #31
 81018a4:	2101      	movs	r1, #1
 81018a6:	fa01 f303 	lsl.w	r3, r1, r3
 81018aa:	e017      	b.n	81018dc <HAL_ADC_ConfigChannel+0x464>
 81018ac:	683b      	ldr	r3, [r7, #0]
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81018b2:	69fb      	ldr	r3, [r7, #28]
 81018b4:	fa93 f3a3 	rbit	r3, r3
 81018b8:	61bb      	str	r3, [r7, #24]
  return result;
 81018ba:	69bb      	ldr	r3, [r7, #24]
 81018bc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81018be:	6a3b      	ldr	r3, [r7, #32]
 81018c0:	2b00      	cmp	r3, #0
 81018c2:	d101      	bne.n	81018c8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 81018c4:	2320      	movs	r3, #32
 81018c6:	e003      	b.n	81018d0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 81018c8:	6a3b      	ldr	r3, [r7, #32]
 81018ca:	fab3 f383 	clz	r3, r3
 81018ce:	b2db      	uxtb	r3, r3
 81018d0:	3301      	adds	r3, #1
 81018d2:	f003 031f 	and.w	r3, r3, #31
 81018d6:	2101      	movs	r1, #1
 81018d8:	fa01 f303 	lsl.w	r3, r1, r3
 81018dc:	ea42 0103 	orr.w	r1, r2, r3
 81018e0:	683b      	ldr	r3, [r7, #0]
 81018e2:	681b      	ldr	r3, [r3, #0]
 81018e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81018e8:	2b00      	cmp	r3, #0
 81018ea:	d10d      	bne.n	8101908 <HAL_ADC_ConfigChannel+0x490>
 81018ec:	683b      	ldr	r3, [r7, #0]
 81018ee:	681b      	ldr	r3, [r3, #0]
 81018f0:	0e9b      	lsrs	r3, r3, #26
 81018f2:	3301      	adds	r3, #1
 81018f4:	f003 021f 	and.w	r2, r3, #31
 81018f8:	4613      	mov	r3, r2
 81018fa:	005b      	lsls	r3, r3, #1
 81018fc:	4413      	add	r3, r2
 81018fe:	3b1e      	subs	r3, #30
 8101900:	051b      	lsls	r3, r3, #20
 8101902:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101906:	e01b      	b.n	8101940 <HAL_ADC_ConfigChannel+0x4c8>
 8101908:	683b      	ldr	r3, [r7, #0]
 810190a:	681b      	ldr	r3, [r3, #0]
 810190c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810190e:	693b      	ldr	r3, [r7, #16]
 8101910:	fa93 f3a3 	rbit	r3, r3
 8101914:	60fb      	str	r3, [r7, #12]
  return result;
 8101916:	68fb      	ldr	r3, [r7, #12]
 8101918:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810191a:	697b      	ldr	r3, [r7, #20]
 810191c:	2b00      	cmp	r3, #0
 810191e:	d101      	bne.n	8101924 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8101920:	2320      	movs	r3, #32
 8101922:	e003      	b.n	810192c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8101924:	697b      	ldr	r3, [r7, #20]
 8101926:	fab3 f383 	clz	r3, r3
 810192a:	b2db      	uxtb	r3, r3
 810192c:	3301      	adds	r3, #1
 810192e:	f003 021f 	and.w	r2, r3, #31
 8101932:	4613      	mov	r3, r2
 8101934:	005b      	lsls	r3, r3, #1
 8101936:	4413      	add	r3, r2
 8101938:	3b1e      	subs	r3, #30
 810193a:	051b      	lsls	r3, r3, #20
 810193c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101940:	430b      	orrs	r3, r1
 8101942:	683a      	ldr	r2, [r7, #0]
 8101944:	6892      	ldr	r2, [r2, #8]
 8101946:	4619      	mov	r1, r3
 8101948:	f7ff fb1c 	bl	8100f84 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 810194c:	683b      	ldr	r3, [r7, #0]
 810194e:	681b      	ldr	r3, [r3, #0]
 8101950:	2b00      	cmp	r3, #0
 8101952:	f280 80cf 	bge.w	8101af4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101956:	687b      	ldr	r3, [r7, #4]
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	4a06      	ldr	r2, [pc, #24]	@ (8101974 <HAL_ADC_ConfigChannel+0x4fc>)
 810195c:	4293      	cmp	r3, r2
 810195e:	d004      	beq.n	810196a <HAL_ADC_ConfigChannel+0x4f2>
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	4a04      	ldr	r2, [pc, #16]	@ (8101978 <HAL_ADC_ConfigChannel+0x500>)
 8101966:	4293      	cmp	r3, r2
 8101968:	d10a      	bne.n	8101980 <HAL_ADC_ConfigChannel+0x508>
 810196a:	4b04      	ldr	r3, [pc, #16]	@ (810197c <HAL_ADC_ConfigChannel+0x504>)
 810196c:	e009      	b.n	8101982 <HAL_ADC_ConfigChannel+0x50a>
 810196e:	bf00      	nop
 8101970:	47ff0000 	.word	0x47ff0000
 8101974:	40022000 	.word	0x40022000
 8101978:	40022100 	.word	0x40022100
 810197c:	40022300 	.word	0x40022300
 8101980:	4b61      	ldr	r3, [pc, #388]	@ (8101b08 <HAL_ADC_ConfigChannel+0x690>)
 8101982:	4618      	mov	r0, r3
 8101984:	f7ff fa70 	bl	8100e68 <LL_ADC_GetCommonPathInternalCh>
 8101988:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	4a5f      	ldr	r2, [pc, #380]	@ (8101b0c <HAL_ADC_ConfigChannel+0x694>)
 8101990:	4293      	cmp	r3, r2
 8101992:	d004      	beq.n	810199e <HAL_ADC_ConfigChannel+0x526>
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	4a5d      	ldr	r2, [pc, #372]	@ (8101b10 <HAL_ADC_ConfigChannel+0x698>)
 810199a:	4293      	cmp	r3, r2
 810199c:	d10e      	bne.n	81019bc <HAL_ADC_ConfigChannel+0x544>
 810199e:	485b      	ldr	r0, [pc, #364]	@ (8101b0c <HAL_ADC_ConfigChannel+0x694>)
 81019a0:	f7ff fb8e 	bl	81010c0 <LL_ADC_IsEnabled>
 81019a4:	4604      	mov	r4, r0
 81019a6:	485a      	ldr	r0, [pc, #360]	@ (8101b10 <HAL_ADC_ConfigChannel+0x698>)
 81019a8:	f7ff fb8a 	bl	81010c0 <LL_ADC_IsEnabled>
 81019ac:	4603      	mov	r3, r0
 81019ae:	4323      	orrs	r3, r4
 81019b0:	2b00      	cmp	r3, #0
 81019b2:	bf0c      	ite	eq
 81019b4:	2301      	moveq	r3, #1
 81019b6:	2300      	movne	r3, #0
 81019b8:	b2db      	uxtb	r3, r3
 81019ba:	e008      	b.n	81019ce <HAL_ADC_ConfigChannel+0x556>
 81019bc:	4855      	ldr	r0, [pc, #340]	@ (8101b14 <HAL_ADC_ConfigChannel+0x69c>)
 81019be:	f7ff fb7f 	bl	81010c0 <LL_ADC_IsEnabled>
 81019c2:	4603      	mov	r3, r0
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	bf0c      	ite	eq
 81019c8:	2301      	moveq	r3, #1
 81019ca:	2300      	movne	r3, #0
 81019cc:	b2db      	uxtb	r3, r3
 81019ce:	2b00      	cmp	r3, #0
 81019d0:	d07d      	beq.n	8101ace <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81019d2:	683b      	ldr	r3, [r7, #0]
 81019d4:	681b      	ldr	r3, [r3, #0]
 81019d6:	4a50      	ldr	r2, [pc, #320]	@ (8101b18 <HAL_ADC_ConfigChannel+0x6a0>)
 81019d8:	4293      	cmp	r3, r2
 81019da:	d130      	bne.n	8101a3e <HAL_ADC_ConfigChannel+0x5c6>
 81019dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 81019de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81019e2:	2b00      	cmp	r3, #0
 81019e4:	d12b      	bne.n	8101a3e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81019e6:	687b      	ldr	r3, [r7, #4]
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	4a4a      	ldr	r2, [pc, #296]	@ (8101b14 <HAL_ADC_ConfigChannel+0x69c>)
 81019ec:	4293      	cmp	r3, r2
 81019ee:	f040 8081 	bne.w	8101af4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	681b      	ldr	r3, [r3, #0]
 81019f6:	4a45      	ldr	r2, [pc, #276]	@ (8101b0c <HAL_ADC_ConfigChannel+0x694>)
 81019f8:	4293      	cmp	r3, r2
 81019fa:	d004      	beq.n	8101a06 <HAL_ADC_ConfigChannel+0x58e>
 81019fc:	687b      	ldr	r3, [r7, #4]
 81019fe:	681b      	ldr	r3, [r3, #0]
 8101a00:	4a43      	ldr	r2, [pc, #268]	@ (8101b10 <HAL_ADC_ConfigChannel+0x698>)
 8101a02:	4293      	cmp	r3, r2
 8101a04:	d101      	bne.n	8101a0a <HAL_ADC_ConfigChannel+0x592>
 8101a06:	4a45      	ldr	r2, [pc, #276]	@ (8101b1c <HAL_ADC_ConfigChannel+0x6a4>)
 8101a08:	e000      	b.n	8101a0c <HAL_ADC_ConfigChannel+0x594>
 8101a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8101b08 <HAL_ADC_ConfigChannel+0x690>)
 8101a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101a0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101a12:	4619      	mov	r1, r3
 8101a14:	4610      	mov	r0, r2
 8101a16:	f7ff fa14 	bl	8100e42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101a1a:	4b41      	ldr	r3, [pc, #260]	@ (8101b20 <HAL_ADC_ConfigChannel+0x6a8>)
 8101a1c:	681b      	ldr	r3, [r3, #0]
 8101a1e:	099b      	lsrs	r3, r3, #6
 8101a20:	4a40      	ldr	r2, [pc, #256]	@ (8101b24 <HAL_ADC_ConfigChannel+0x6ac>)
 8101a22:	fba2 2303 	umull	r2, r3, r2, r3
 8101a26:	099b      	lsrs	r3, r3, #6
 8101a28:	3301      	adds	r3, #1
 8101a2a:	005b      	lsls	r3, r3, #1
 8101a2c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101a2e:	e002      	b.n	8101a36 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8101a30:	68bb      	ldr	r3, [r7, #8]
 8101a32:	3b01      	subs	r3, #1
 8101a34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101a36:	68bb      	ldr	r3, [r7, #8]
 8101a38:	2b00      	cmp	r3, #0
 8101a3a:	d1f9      	bne.n	8101a30 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101a3c:	e05a      	b.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8101a3e:	683b      	ldr	r3, [r7, #0]
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	4a39      	ldr	r2, [pc, #228]	@ (8101b28 <HAL_ADC_ConfigChannel+0x6b0>)
 8101a44:	4293      	cmp	r3, r2
 8101a46:	d11e      	bne.n	8101a86 <HAL_ADC_ConfigChannel+0x60e>
 8101a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101a4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101a4e:	2b00      	cmp	r3, #0
 8101a50:	d119      	bne.n	8101a86 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4a2f      	ldr	r2, [pc, #188]	@ (8101b14 <HAL_ADC_ConfigChannel+0x69c>)
 8101a58:	4293      	cmp	r3, r2
 8101a5a:	d14b      	bne.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	681b      	ldr	r3, [r3, #0]
 8101a60:	4a2a      	ldr	r2, [pc, #168]	@ (8101b0c <HAL_ADC_ConfigChannel+0x694>)
 8101a62:	4293      	cmp	r3, r2
 8101a64:	d004      	beq.n	8101a70 <HAL_ADC_ConfigChannel+0x5f8>
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	4a29      	ldr	r2, [pc, #164]	@ (8101b10 <HAL_ADC_ConfigChannel+0x698>)
 8101a6c:	4293      	cmp	r3, r2
 8101a6e:	d101      	bne.n	8101a74 <HAL_ADC_ConfigChannel+0x5fc>
 8101a70:	4a2a      	ldr	r2, [pc, #168]	@ (8101b1c <HAL_ADC_ConfigChannel+0x6a4>)
 8101a72:	e000      	b.n	8101a76 <HAL_ADC_ConfigChannel+0x5fe>
 8101a74:	4a24      	ldr	r2, [pc, #144]	@ (8101b08 <HAL_ADC_ConfigChannel+0x690>)
 8101a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101a78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8101a7c:	4619      	mov	r1, r3
 8101a7e:	4610      	mov	r0, r2
 8101a80:	f7ff f9df 	bl	8100e42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101a84:	e036      	b.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8101a86:	683b      	ldr	r3, [r7, #0]
 8101a88:	681b      	ldr	r3, [r3, #0]
 8101a8a:	4a28      	ldr	r2, [pc, #160]	@ (8101b2c <HAL_ADC_ConfigChannel+0x6b4>)
 8101a8c:	4293      	cmp	r3, r2
 8101a8e:	d131      	bne.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
 8101a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101a96:	2b00      	cmp	r3, #0
 8101a98:	d12c      	bne.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	681b      	ldr	r3, [r3, #0]
 8101a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8101b14 <HAL_ADC_ConfigChannel+0x69c>)
 8101aa0:	4293      	cmp	r3, r2
 8101aa2:	d127      	bne.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	681b      	ldr	r3, [r3, #0]
 8101aa8:	4a18      	ldr	r2, [pc, #96]	@ (8101b0c <HAL_ADC_ConfigChannel+0x694>)
 8101aaa:	4293      	cmp	r3, r2
 8101aac:	d004      	beq.n	8101ab8 <HAL_ADC_ConfigChannel+0x640>
 8101aae:	687b      	ldr	r3, [r7, #4]
 8101ab0:	681b      	ldr	r3, [r3, #0]
 8101ab2:	4a17      	ldr	r2, [pc, #92]	@ (8101b10 <HAL_ADC_ConfigChannel+0x698>)
 8101ab4:	4293      	cmp	r3, r2
 8101ab6:	d101      	bne.n	8101abc <HAL_ADC_ConfigChannel+0x644>
 8101ab8:	4a18      	ldr	r2, [pc, #96]	@ (8101b1c <HAL_ADC_ConfigChannel+0x6a4>)
 8101aba:	e000      	b.n	8101abe <HAL_ADC_ConfigChannel+0x646>
 8101abc:	4a12      	ldr	r2, [pc, #72]	@ (8101b08 <HAL_ADC_ConfigChannel+0x690>)
 8101abe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101ac0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101ac4:	4619      	mov	r1, r3
 8101ac6:	4610      	mov	r0, r2
 8101ac8:	f7ff f9bb 	bl	8100e42 <LL_ADC_SetCommonPathInternalCh>
 8101acc:	e012      	b.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101ad2:	f043 0220 	orr.w	r2, r3, #32
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8101ada:	2301      	movs	r3, #1
 8101adc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8101ae0:	e008      	b.n	8101af4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101ae6:	f043 0220 	orr.w	r2, r3, #32
 8101aea:	687b      	ldr	r3, [r7, #4]
 8101aec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8101aee:	2301      	movs	r3, #1
 8101af0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8101af4:	687b      	ldr	r3, [r7, #4]
 8101af6:	2200      	movs	r2, #0
 8101af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8101afc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8101b00:	4618      	mov	r0, r3
 8101b02:	3784      	adds	r7, #132	@ 0x84
 8101b04:	46bd      	mov	sp, r7
 8101b06:	bd90      	pop	{r4, r7, pc}
 8101b08:	58026300 	.word	0x58026300
 8101b0c:	40022000 	.word	0x40022000
 8101b10:	40022100 	.word	0x40022100
 8101b14:	58026000 	.word	0x58026000
 8101b18:	cb840000 	.word	0xcb840000
 8101b1c:	40022300 	.word	0x40022300
 8101b20:	10000000 	.word	0x10000000
 8101b24:	053e2d63 	.word	0x053e2d63
 8101b28:	c7520000 	.word	0xc7520000
 8101b2c:	cfb80000 	.word	0xcfb80000

08101b30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8101b30:	b580      	push	{r7, lr}
 8101b32:	b084      	sub	sp, #16
 8101b34:	af00      	add	r7, sp, #0
 8101b36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	681b      	ldr	r3, [r3, #0]
 8101b3c:	4a7a      	ldr	r2, [pc, #488]	@ (8101d28 <ADC_ConfigureBoostMode+0x1f8>)
 8101b3e:	4293      	cmp	r3, r2
 8101b40:	d004      	beq.n	8101b4c <ADC_ConfigureBoostMode+0x1c>
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	4a79      	ldr	r2, [pc, #484]	@ (8101d2c <ADC_ConfigureBoostMode+0x1fc>)
 8101b48:	4293      	cmp	r3, r2
 8101b4a:	d109      	bne.n	8101b60 <ADC_ConfigureBoostMode+0x30>
 8101b4c:	4b78      	ldr	r3, [pc, #480]	@ (8101d30 <ADC_ConfigureBoostMode+0x200>)
 8101b4e:	689b      	ldr	r3, [r3, #8]
 8101b50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101b54:	2b00      	cmp	r3, #0
 8101b56:	bf14      	ite	ne
 8101b58:	2301      	movne	r3, #1
 8101b5a:	2300      	moveq	r3, #0
 8101b5c:	b2db      	uxtb	r3, r3
 8101b5e:	e008      	b.n	8101b72 <ADC_ConfigureBoostMode+0x42>
 8101b60:	4b74      	ldr	r3, [pc, #464]	@ (8101d34 <ADC_ConfigureBoostMode+0x204>)
 8101b62:	689b      	ldr	r3, [r3, #8]
 8101b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101b68:	2b00      	cmp	r3, #0
 8101b6a:	bf14      	ite	ne
 8101b6c:	2301      	movne	r3, #1
 8101b6e:	2300      	moveq	r3, #0
 8101b70:	b2db      	uxtb	r3, r3
 8101b72:	2b00      	cmp	r3, #0
 8101b74:	d01c      	beq.n	8101bb0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8101b76:	f001 fd95 	bl	81036a4 <HAL_RCC_GetHCLKFreq>
 8101b7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8101b7c:	687b      	ldr	r3, [r7, #4]
 8101b7e:	685b      	ldr	r3, [r3, #4]
 8101b80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101b84:	d010      	beq.n	8101ba8 <ADC_ConfigureBoostMode+0x78>
 8101b86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101b8a:	d873      	bhi.n	8101c74 <ADC_ConfigureBoostMode+0x144>
 8101b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101b90:	d002      	beq.n	8101b98 <ADC_ConfigureBoostMode+0x68>
 8101b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101b96:	d16d      	bne.n	8101c74 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	685b      	ldr	r3, [r3, #4]
 8101b9c:	0c1b      	lsrs	r3, r3, #16
 8101b9e:	68fa      	ldr	r2, [r7, #12]
 8101ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8101ba4:	60fb      	str	r3, [r7, #12]
        break;
 8101ba6:	e068      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8101ba8:	68fb      	ldr	r3, [r7, #12]
 8101baa:	089b      	lsrs	r3, r3, #2
 8101bac:	60fb      	str	r3, [r7, #12]
        break;
 8101bae:	e064      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8101bb0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8101bb4:	f04f 0100 	mov.w	r1, #0
 8101bb8:	f002 ffc6 	bl	8104b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8101bbc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	685b      	ldr	r3, [r3, #4]
 8101bc2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8101bc6:	d051      	beq.n	8101c6c <ADC_ConfigureBoostMode+0x13c>
 8101bc8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8101bcc:	d854      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101bce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8101bd2:	d047      	beq.n	8101c64 <ADC_ConfigureBoostMode+0x134>
 8101bd4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8101bd8:	d84e      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101bda:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8101bde:	d03d      	beq.n	8101c5c <ADC_ConfigureBoostMode+0x12c>
 8101be0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8101be4:	d848      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101be6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101bea:	d033      	beq.n	8101c54 <ADC_ConfigureBoostMode+0x124>
 8101bec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101bf0:	d842      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101bf2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8101bf6:	d029      	beq.n	8101c4c <ADC_ConfigureBoostMode+0x11c>
 8101bf8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8101bfc:	d83c      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101bfe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8101c02:	d01a      	beq.n	8101c3a <ADC_ConfigureBoostMode+0x10a>
 8101c04:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8101c08:	d836      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101c0a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8101c0e:	d014      	beq.n	8101c3a <ADC_ConfigureBoostMode+0x10a>
 8101c10:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8101c14:	d830      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101c16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101c1a:	d00e      	beq.n	8101c3a <ADC_ConfigureBoostMode+0x10a>
 8101c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101c20:	d82a      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101c22:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8101c26:	d008      	beq.n	8101c3a <ADC_ConfigureBoostMode+0x10a>
 8101c28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8101c2c:	d824      	bhi.n	8101c78 <ADC_ConfigureBoostMode+0x148>
 8101c2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101c32:	d002      	beq.n	8101c3a <ADC_ConfigureBoostMode+0x10a>
 8101c34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8101c38:	d11e      	bne.n	8101c78 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8101c3a:	687b      	ldr	r3, [r7, #4]
 8101c3c:	685b      	ldr	r3, [r3, #4]
 8101c3e:	0c9b      	lsrs	r3, r3, #18
 8101c40:	005b      	lsls	r3, r3, #1
 8101c42:	68fa      	ldr	r2, [r7, #12]
 8101c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8101c48:	60fb      	str	r3, [r7, #12]
        break;
 8101c4a:	e016      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8101c4c:	68fb      	ldr	r3, [r7, #12]
 8101c4e:	091b      	lsrs	r3, r3, #4
 8101c50:	60fb      	str	r3, [r7, #12]
        break;
 8101c52:	e012      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8101c54:	68fb      	ldr	r3, [r7, #12]
 8101c56:	095b      	lsrs	r3, r3, #5
 8101c58:	60fb      	str	r3, [r7, #12]
        break;
 8101c5a:	e00e      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8101c5c:	68fb      	ldr	r3, [r7, #12]
 8101c5e:	099b      	lsrs	r3, r3, #6
 8101c60:	60fb      	str	r3, [r7, #12]
        break;
 8101c62:	e00a      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8101c64:	68fb      	ldr	r3, [r7, #12]
 8101c66:	09db      	lsrs	r3, r3, #7
 8101c68:	60fb      	str	r3, [r7, #12]
        break;
 8101c6a:	e006      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8101c6c:	68fb      	ldr	r3, [r7, #12]
 8101c6e:	0a1b      	lsrs	r3, r3, #8
 8101c70:	60fb      	str	r3, [r7, #12]
        break;
 8101c72:	e002      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
        break;
 8101c74:	bf00      	nop
 8101c76:	e000      	b.n	8101c7a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8101c78:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8101c7a:	f7ff f8c3 	bl	8100e04 <HAL_GetREVID>
 8101c7e:	4603      	mov	r3, r0
 8101c80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8101c84:	4293      	cmp	r3, r2
 8101c86:	d815      	bhi.n	8101cb4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8101c88:	68fb      	ldr	r3, [r7, #12]
 8101c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8101d38 <ADC_ConfigureBoostMode+0x208>)
 8101c8c:	4293      	cmp	r3, r2
 8101c8e:	d908      	bls.n	8101ca2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8101c90:	687b      	ldr	r3, [r7, #4]
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	689a      	ldr	r2, [r3, #8]
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101c9e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8101ca0:	e03e      	b.n	8101d20 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8101ca2:	687b      	ldr	r3, [r7, #4]
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	689a      	ldr	r2, [r3, #8]
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8101cb0:	609a      	str	r2, [r3, #8]
}
 8101cb2:	e035      	b.n	8101d20 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8101cb4:	68fb      	ldr	r3, [r7, #12]
 8101cb6:	085b      	lsrs	r3, r3, #1
 8101cb8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8101cba:	68fb      	ldr	r3, [r7, #12]
 8101cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8101d3c <ADC_ConfigureBoostMode+0x20c>)
 8101cbe:	4293      	cmp	r3, r2
 8101cc0:	d808      	bhi.n	8101cd4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8101cc2:	687b      	ldr	r3, [r7, #4]
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	689a      	ldr	r2, [r3, #8]
 8101cc8:	687b      	ldr	r3, [r7, #4]
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8101cd0:	609a      	str	r2, [r3, #8]
}
 8101cd2:	e025      	b.n	8101d20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8101cd4:	68fb      	ldr	r3, [r7, #12]
 8101cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8101d40 <ADC_ConfigureBoostMode+0x210>)
 8101cd8:	4293      	cmp	r3, r2
 8101cda:	d80a      	bhi.n	8101cf2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	689b      	ldr	r3, [r3, #8]
 8101ce2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	681b      	ldr	r3, [r3, #0]
 8101cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101cee:	609a      	str	r2, [r3, #8]
}
 8101cf0:	e016      	b.n	8101d20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8101cf2:	68fb      	ldr	r3, [r7, #12]
 8101cf4:	4a13      	ldr	r2, [pc, #76]	@ (8101d44 <ADC_ConfigureBoostMode+0x214>)
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d80a      	bhi.n	8101d10 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	689b      	ldr	r3, [r3, #8]
 8101d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8101d0c:	609a      	str	r2, [r3, #8]
}
 8101d0e:	e007      	b.n	8101d20 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	681b      	ldr	r3, [r3, #0]
 8101d14:	689a      	ldr	r2, [r3, #8]
 8101d16:	687b      	ldr	r3, [r7, #4]
 8101d18:	681b      	ldr	r3, [r3, #0]
 8101d1a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8101d1e:	609a      	str	r2, [r3, #8]
}
 8101d20:	bf00      	nop
 8101d22:	3710      	adds	r7, #16
 8101d24:	46bd      	mov	sp, r7
 8101d26:	bd80      	pop	{r7, pc}
 8101d28:	40022000 	.word	0x40022000
 8101d2c:	40022100 	.word	0x40022100
 8101d30:	40022300 	.word	0x40022300
 8101d34:	58026300 	.word	0x58026300
 8101d38:	01312d00 	.word	0x01312d00
 8101d3c:	005f5e10 	.word	0x005f5e10
 8101d40:	00bebc20 	.word	0x00bebc20
 8101d44:	017d7840 	.word	0x017d7840

08101d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101d48:	b480      	push	{r7}
 8101d4a:	b085      	sub	sp, #20
 8101d4c:	af00      	add	r7, sp, #0
 8101d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	f003 0307 	and.w	r3, r3, #7
 8101d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101d58:	4b0c      	ldr	r3, [pc, #48]	@ (8101d8c <__NVIC_SetPriorityGrouping+0x44>)
 8101d5a:	68db      	ldr	r3, [r3, #12]
 8101d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101d5e:	68ba      	ldr	r2, [r7, #8]
 8101d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101d64:	4013      	ands	r3, r2
 8101d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101d68:	68fb      	ldr	r3, [r7, #12]
 8101d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101d6c:	68bb      	ldr	r3, [r7, #8]
 8101d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101d7a:	4a04      	ldr	r2, [pc, #16]	@ (8101d8c <__NVIC_SetPriorityGrouping+0x44>)
 8101d7c:	68bb      	ldr	r3, [r7, #8]
 8101d7e:	60d3      	str	r3, [r2, #12]
}
 8101d80:	bf00      	nop
 8101d82:	3714      	adds	r7, #20
 8101d84:	46bd      	mov	sp, r7
 8101d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d8a:	4770      	bx	lr
 8101d8c:	e000ed00 	.word	0xe000ed00

08101d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101d90:	b480      	push	{r7}
 8101d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101d94:	4b04      	ldr	r3, [pc, #16]	@ (8101da8 <__NVIC_GetPriorityGrouping+0x18>)
 8101d96:	68db      	ldr	r3, [r3, #12]
 8101d98:	0a1b      	lsrs	r3, r3, #8
 8101d9a:	f003 0307 	and.w	r3, r3, #7
}
 8101d9e:	4618      	mov	r0, r3
 8101da0:	46bd      	mov	sp, r7
 8101da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101da6:	4770      	bx	lr
 8101da8:	e000ed00 	.word	0xe000ed00

08101dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101dac:	b480      	push	{r7}
 8101dae:	b083      	sub	sp, #12
 8101db0:	af00      	add	r7, sp, #0
 8101db2:	4603      	mov	r3, r0
 8101db4:	6039      	str	r1, [r7, #0]
 8101db6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101dbc:	2b00      	cmp	r3, #0
 8101dbe:	db0a      	blt.n	8101dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101dc0:	683b      	ldr	r3, [r7, #0]
 8101dc2:	b2da      	uxtb	r2, r3
 8101dc4:	490c      	ldr	r1, [pc, #48]	@ (8101df8 <__NVIC_SetPriority+0x4c>)
 8101dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101dca:	0112      	lsls	r2, r2, #4
 8101dcc:	b2d2      	uxtb	r2, r2
 8101dce:	440b      	add	r3, r1
 8101dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101dd4:	e00a      	b.n	8101dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101dd6:	683b      	ldr	r3, [r7, #0]
 8101dd8:	b2da      	uxtb	r2, r3
 8101dda:	4908      	ldr	r1, [pc, #32]	@ (8101dfc <__NVIC_SetPriority+0x50>)
 8101ddc:	88fb      	ldrh	r3, [r7, #6]
 8101dde:	f003 030f 	and.w	r3, r3, #15
 8101de2:	3b04      	subs	r3, #4
 8101de4:	0112      	lsls	r2, r2, #4
 8101de6:	b2d2      	uxtb	r2, r2
 8101de8:	440b      	add	r3, r1
 8101dea:	761a      	strb	r2, [r3, #24]
}
 8101dec:	bf00      	nop
 8101dee:	370c      	adds	r7, #12
 8101df0:	46bd      	mov	sp, r7
 8101df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101df6:	4770      	bx	lr
 8101df8:	e000e100 	.word	0xe000e100
 8101dfc:	e000ed00 	.word	0xe000ed00

08101e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e00:	b480      	push	{r7}
 8101e02:	b089      	sub	sp, #36	@ 0x24
 8101e04:	af00      	add	r7, sp, #0
 8101e06:	60f8      	str	r0, [r7, #12]
 8101e08:	60b9      	str	r1, [r7, #8]
 8101e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101e0c:	68fb      	ldr	r3, [r7, #12]
 8101e0e:	f003 0307 	and.w	r3, r3, #7
 8101e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101e14:	69fb      	ldr	r3, [r7, #28]
 8101e16:	f1c3 0307 	rsb	r3, r3, #7
 8101e1a:	2b04      	cmp	r3, #4
 8101e1c:	bf28      	it	cs
 8101e1e:	2304      	movcs	r3, #4
 8101e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101e22:	69fb      	ldr	r3, [r7, #28]
 8101e24:	3304      	adds	r3, #4
 8101e26:	2b06      	cmp	r3, #6
 8101e28:	d902      	bls.n	8101e30 <NVIC_EncodePriority+0x30>
 8101e2a:	69fb      	ldr	r3, [r7, #28]
 8101e2c:	3b03      	subs	r3, #3
 8101e2e:	e000      	b.n	8101e32 <NVIC_EncodePriority+0x32>
 8101e30:	2300      	movs	r3, #0
 8101e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e34:	f04f 32ff 	mov.w	r2, #4294967295
 8101e38:	69bb      	ldr	r3, [r7, #24]
 8101e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8101e3e:	43da      	mvns	r2, r3
 8101e40:	68bb      	ldr	r3, [r7, #8]
 8101e42:	401a      	ands	r2, r3
 8101e44:	697b      	ldr	r3, [r7, #20]
 8101e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101e48:	f04f 31ff 	mov.w	r1, #4294967295
 8101e4c:	697b      	ldr	r3, [r7, #20]
 8101e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8101e52:	43d9      	mvns	r1, r3
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e58:	4313      	orrs	r3, r2
         );
}
 8101e5a:	4618      	mov	r0, r3
 8101e5c:	3724      	adds	r7, #36	@ 0x24
 8101e5e:	46bd      	mov	sp, r7
 8101e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e64:	4770      	bx	lr
	...

08101e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101e68:	b580      	push	{r7, lr}
 8101e6a:	b082      	sub	sp, #8
 8101e6c:	af00      	add	r7, sp, #0
 8101e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	3b01      	subs	r3, #1
 8101e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101e78:	d301      	bcc.n	8101e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101e7a:	2301      	movs	r3, #1
 8101e7c:	e00f      	b.n	8101e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8101ea8 <SysTick_Config+0x40>)
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	3b01      	subs	r3, #1
 8101e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101e86:	210f      	movs	r1, #15
 8101e88:	f04f 30ff 	mov.w	r0, #4294967295
 8101e8c:	f7ff ff8e 	bl	8101dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101e90:	4b05      	ldr	r3, [pc, #20]	@ (8101ea8 <SysTick_Config+0x40>)
 8101e92:	2200      	movs	r2, #0
 8101e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101e96:	4b04      	ldr	r3, [pc, #16]	@ (8101ea8 <SysTick_Config+0x40>)
 8101e98:	2207      	movs	r2, #7
 8101e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101e9c:	2300      	movs	r3, #0
}
 8101e9e:	4618      	mov	r0, r3
 8101ea0:	3708      	adds	r7, #8
 8101ea2:	46bd      	mov	sp, r7
 8101ea4:	bd80      	pop	{r7, pc}
 8101ea6:	bf00      	nop
 8101ea8:	e000e010 	.word	0xe000e010

08101eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101eac:	b580      	push	{r7, lr}
 8101eae:	b082      	sub	sp, #8
 8101eb0:	af00      	add	r7, sp, #0
 8101eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101eb4:	6878      	ldr	r0, [r7, #4]
 8101eb6:	f7ff ff47 	bl	8101d48 <__NVIC_SetPriorityGrouping>
}
 8101eba:	bf00      	nop
 8101ebc:	3708      	adds	r7, #8
 8101ebe:	46bd      	mov	sp, r7
 8101ec0:	bd80      	pop	{r7, pc}

08101ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ec2:	b580      	push	{r7, lr}
 8101ec4:	b086      	sub	sp, #24
 8101ec6:	af00      	add	r7, sp, #0
 8101ec8:	4603      	mov	r3, r0
 8101eca:	60b9      	str	r1, [r7, #8]
 8101ecc:	607a      	str	r2, [r7, #4]
 8101ece:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ed0:	f7ff ff5e 	bl	8101d90 <__NVIC_GetPriorityGrouping>
 8101ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ed6:	687a      	ldr	r2, [r7, #4]
 8101ed8:	68b9      	ldr	r1, [r7, #8]
 8101eda:	6978      	ldr	r0, [r7, #20]
 8101edc:	f7ff ff90 	bl	8101e00 <NVIC_EncodePriority>
 8101ee0:	4602      	mov	r2, r0
 8101ee2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101ee6:	4611      	mov	r1, r2
 8101ee8:	4618      	mov	r0, r3
 8101eea:	f7ff ff5f 	bl	8101dac <__NVIC_SetPriority>
}
 8101eee:	bf00      	nop
 8101ef0:	3718      	adds	r7, #24
 8101ef2:	46bd      	mov	sp, r7
 8101ef4:	bd80      	pop	{r7, pc}

08101ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101ef6:	b580      	push	{r7, lr}
 8101ef8:	b082      	sub	sp, #8
 8101efa:	af00      	add	r7, sp, #0
 8101efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101efe:	6878      	ldr	r0, [r7, #4]
 8101f00:	f7ff ffb2 	bl	8101e68 <SysTick_Config>
 8101f04:	4603      	mov	r3, r0
}
 8101f06:	4618      	mov	r0, r3
 8101f08:	3708      	adds	r7, #8
 8101f0a:	46bd      	mov	sp, r7
 8101f0c:	bd80      	pop	{r7, pc}
	...

08101f10 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101f10:	b480      	push	{r7}
 8101f12:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101f14:	4b07      	ldr	r3, [pc, #28]	@ (8101f34 <HAL_GetCurrentCPUID+0x24>)
 8101f16:	681b      	ldr	r3, [r3, #0]
 8101f18:	091b      	lsrs	r3, r3, #4
 8101f1a:	f003 030f 	and.w	r3, r3, #15
 8101f1e:	2b07      	cmp	r3, #7
 8101f20:	d101      	bne.n	8101f26 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101f22:	2303      	movs	r3, #3
 8101f24:	e000      	b.n	8101f28 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101f26:	2301      	movs	r3, #1
  }
}
 8101f28:	4618      	mov	r0, r3
 8101f2a:	46bd      	mov	sp, r7
 8101f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f30:	4770      	bx	lr
 8101f32:	bf00      	nop
 8101f34:	e000ed00 	.word	0xe000ed00

08101f38 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8101f38:	b580      	push	{r7, lr}
 8101f3a:	b098      	sub	sp, #96	@ 0x60
 8101f3c:	af00      	add	r7, sp, #0
 8101f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8101f40:	4a84      	ldr	r2, [pc, #528]	@ (8102154 <HAL_FDCAN_Init+0x21c>)
 8101f42:	f107 030c 	add.w	r3, r7, #12
 8101f46:	4611      	mov	r1, r2
 8101f48:	224c      	movs	r2, #76	@ 0x4c
 8101f4a:	4618      	mov	r0, r3
 8101f4c:	f009 ffcc 	bl	810bee8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8101f50:	687b      	ldr	r3, [r7, #4]
 8101f52:	2b00      	cmp	r3, #0
 8101f54:	d101      	bne.n	8101f5a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8101f56:	2301      	movs	r3, #1
 8101f58:	e1c6      	b.n	81022e8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	681b      	ldr	r3, [r3, #0]
 8101f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8102158 <HAL_FDCAN_Init+0x220>)
 8101f60:	4293      	cmp	r3, r2
 8101f62:	d106      	bne.n	8101f72 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8101f6c:	461a      	mov	r2, r3
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8101f78:	b2db      	uxtb	r3, r3
 8101f7a:	2b00      	cmp	r3, #0
 8101f7c:	d106      	bne.n	8101f8c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	2200      	movs	r2, #0
 8101f82:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8101f86:	6878      	ldr	r0, [r7, #4]
 8101f88:	f7fe fd2c 	bl	81009e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	699a      	ldr	r2, [r3, #24]
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	f022 0210 	bic.w	r2, r2, #16
 8101f9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101f9c:	f7fe ff02 	bl	8100da4 <HAL_GetTick>
 8101fa0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101fa2:	e014      	b.n	8101fce <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101fa4:	f7fe fefe 	bl	8100da4 <HAL_GetTick>
 8101fa8:	4602      	mov	r2, r0
 8101faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8101fac:	1ad3      	subs	r3, r2, r3
 8101fae:	2b0a      	cmp	r3, #10
 8101fb0:	d90d      	bls.n	8101fce <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8101fb8:	f043 0201 	orr.w	r2, r3, #1
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	2203      	movs	r2, #3
 8101fc6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8101fca:	2301      	movs	r3, #1
 8101fcc:	e18c      	b.n	81022e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	681b      	ldr	r3, [r3, #0]
 8101fd2:	699b      	ldr	r3, [r3, #24]
 8101fd4:	f003 0308 	and.w	r3, r3, #8
 8101fd8:	2b08      	cmp	r3, #8
 8101fda:	d0e3      	beq.n	8101fa4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	699a      	ldr	r2, [r3, #24]
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	681b      	ldr	r3, [r3, #0]
 8101fe6:	f042 0201 	orr.w	r2, r2, #1
 8101fea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101fec:	f7fe feda 	bl	8100da4 <HAL_GetTick>
 8101ff0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8101ff2:	e014      	b.n	810201e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101ff4:	f7fe fed6 	bl	8100da4 <HAL_GetTick>
 8101ff8:	4602      	mov	r2, r0
 8101ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8101ffc:	1ad3      	subs	r3, r2, r3
 8101ffe:	2b0a      	cmp	r3, #10
 8102000:	d90d      	bls.n	810201e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8102002:	687b      	ldr	r3, [r7, #4]
 8102004:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102008:	f043 0201 	orr.w	r2, r3, #1
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102012:	687b      	ldr	r3, [r7, #4]
 8102014:	2203      	movs	r2, #3
 8102016:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 810201a:	2301      	movs	r3, #1
 810201c:	e164      	b.n	81022e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	699b      	ldr	r3, [r3, #24]
 8102024:	f003 0301 	and.w	r3, r3, #1
 8102028:	2b00      	cmp	r3, #0
 810202a:	d0e3      	beq.n	8101ff4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	681b      	ldr	r3, [r3, #0]
 8102030:	699a      	ldr	r2, [r3, #24]
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	681b      	ldr	r3, [r3, #0]
 8102036:	f042 0202 	orr.w	r2, r2, #2
 810203a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	7c1b      	ldrb	r3, [r3, #16]
 8102040:	2b01      	cmp	r3, #1
 8102042:	d108      	bne.n	8102056 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	681b      	ldr	r3, [r3, #0]
 8102048:	699a      	ldr	r2, [r3, #24]
 810204a:	687b      	ldr	r3, [r7, #4]
 810204c:	681b      	ldr	r3, [r3, #0]
 810204e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8102052:	619a      	str	r2, [r3, #24]
 8102054:	e007      	b.n	8102066 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	699a      	ldr	r2, [r3, #24]
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8102064:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8102066:	687b      	ldr	r3, [r7, #4]
 8102068:	7c5b      	ldrb	r3, [r3, #17]
 810206a:	2b01      	cmp	r3, #1
 810206c:	d108      	bne.n	8102080 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	681b      	ldr	r3, [r3, #0]
 8102072:	699a      	ldr	r2, [r3, #24]
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	681b      	ldr	r3, [r3, #0]
 8102078:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810207c:	619a      	str	r2, [r3, #24]
 810207e:	e007      	b.n	8102090 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	699a      	ldr	r2, [r3, #24]
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 810208e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	7c9b      	ldrb	r3, [r3, #18]
 8102094:	2b01      	cmp	r3, #1
 8102096:	d108      	bne.n	81020aa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	681b      	ldr	r3, [r3, #0]
 810209c:	699a      	ldr	r2, [r3, #24]
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 81020a6:	619a      	str	r2, [r3, #24]
 81020a8:	e007      	b.n	81020ba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	681b      	ldr	r3, [r3, #0]
 81020ae:	699a      	ldr	r2, [r3, #24]
 81020b0:	687b      	ldr	r3, [r7, #4]
 81020b2:	681b      	ldr	r3, [r3, #0]
 81020b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 81020b8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 81020ba:	687b      	ldr	r3, [r7, #4]
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	699b      	ldr	r3, [r3, #24]
 81020c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	689a      	ldr	r2, [r3, #8]
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	681b      	ldr	r3, [r3, #0]
 81020cc:	430a      	orrs	r2, r1
 81020ce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	699a      	ldr	r2, [r3, #24]
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	681b      	ldr	r3, [r3, #0]
 81020da:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 81020de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 81020e0:	687b      	ldr	r3, [r7, #4]
 81020e2:	681b      	ldr	r3, [r3, #0]
 81020e4:	691a      	ldr	r2, [r3, #16]
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	681b      	ldr	r3, [r3, #0]
 81020ea:	f022 0210 	bic.w	r2, r2, #16
 81020ee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	68db      	ldr	r3, [r3, #12]
 81020f4:	2b01      	cmp	r3, #1
 81020f6:	d108      	bne.n	810210a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	699a      	ldr	r2, [r3, #24]
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	f042 0204 	orr.w	r2, r2, #4
 8102106:	619a      	str	r2, [r3, #24]
 8102108:	e030      	b.n	810216c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	68db      	ldr	r3, [r3, #12]
 810210e:	2b00      	cmp	r3, #0
 8102110:	d02c      	beq.n	810216c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	68db      	ldr	r3, [r3, #12]
 8102116:	2b02      	cmp	r3, #2
 8102118:	d020      	beq.n	810215c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	681b      	ldr	r3, [r3, #0]
 810211e:	699a      	ldr	r2, [r3, #24]
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	681b      	ldr	r3, [r3, #0]
 8102124:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8102128:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	681b      	ldr	r3, [r3, #0]
 810212e:	691a      	ldr	r2, [r3, #16]
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	681b      	ldr	r3, [r3, #0]
 8102134:	f042 0210 	orr.w	r2, r2, #16
 8102138:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	68db      	ldr	r3, [r3, #12]
 810213e:	2b03      	cmp	r3, #3
 8102140:	d114      	bne.n	810216c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	681b      	ldr	r3, [r3, #0]
 8102146:	699a      	ldr	r2, [r3, #24]
 8102148:	687b      	ldr	r3, [r7, #4]
 810214a:	681b      	ldr	r3, [r3, #0]
 810214c:	f042 0220 	orr.w	r2, r2, #32
 8102150:	619a      	str	r2, [r3, #24]
 8102152:	e00b      	b.n	810216c <HAL_FDCAN_Init+0x234>
 8102154:	0810bfd4 	.word	0x0810bfd4
 8102158:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 810215c:	687b      	ldr	r3, [r7, #4]
 810215e:	681b      	ldr	r3, [r3, #0]
 8102160:	699a      	ldr	r2, [r3, #24]
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	681b      	ldr	r3, [r3, #0]
 8102166:	f042 0220 	orr.w	r2, r2, #32
 810216a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	699b      	ldr	r3, [r3, #24]
 8102170:	3b01      	subs	r3, #1
 8102172:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	69db      	ldr	r3, [r3, #28]
 8102178:	3b01      	subs	r3, #1
 810217a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810217c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	6a1b      	ldr	r3, [r3, #32]
 8102182:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8102184:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	695b      	ldr	r3, [r3, #20]
 810218c:	3b01      	subs	r3, #1
 810218e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8102194:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102196:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	689b      	ldr	r3, [r3, #8]
 810219c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81021a0:	d115      	bne.n	81021ce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81021a6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81021ac:	3b01      	subs	r3, #1
 81021ae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81021b0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81021b6:	3b01      	subs	r3, #1
 81021b8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 81021ba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 81021be:	687b      	ldr	r3, [r7, #4]
 81021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81021c2:	3b01      	subs	r3, #1
 81021c4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 81021ca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 81021cc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81021d2:	2b00      	cmp	r3, #0
 81021d4:	d00a      	beq.n	81021ec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	681b      	ldr	r3, [r3, #0]
 81021e6:	430a      	orrs	r2, r1
 81021e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81021f4:	4413      	add	r3, r2
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d011      	beq.n	810221e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	681b      	ldr	r3, [r3, #0]
 81021fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8102202:	f023 0107 	bic.w	r1, r3, #7
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810220a:	009b      	lsls	r3, r3, #2
 810220c:	3360      	adds	r3, #96	@ 0x60
 810220e:	443b      	add	r3, r7
 8102210:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	430a      	orrs	r2, r1
 810221a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102222:	2b00      	cmp	r3, #0
 8102224:	d011      	beq.n	810224a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810222e:	f023 0107 	bic.w	r1, r3, #7
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102236:	009b      	lsls	r3, r3, #2
 8102238:	3360      	adds	r3, #96	@ 0x60
 810223a:	443b      	add	r3, r7
 810223c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8102240:	687b      	ldr	r3, [r7, #4]
 8102242:	681b      	ldr	r3, [r3, #0]
 8102244:	430a      	orrs	r2, r1
 8102246:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810224e:	2b00      	cmp	r3, #0
 8102250:	d012      	beq.n	8102278 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	681b      	ldr	r3, [r3, #0]
 8102256:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810225a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102262:	009b      	lsls	r3, r3, #2
 8102264:	3360      	adds	r3, #96	@ 0x60
 8102266:	443b      	add	r3, r7
 8102268:	f853 3c54 	ldr.w	r3, [r3, #-84]
 810226c:	011a      	lsls	r2, r3, #4
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	430a      	orrs	r2, r1
 8102274:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810227c:	2b00      	cmp	r3, #0
 810227e:	d012      	beq.n	81022a6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	681b      	ldr	r3, [r3, #0]
 8102284:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102288:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102290:	009b      	lsls	r3, r3, #2
 8102292:	3360      	adds	r3, #96	@ 0x60
 8102294:	443b      	add	r3, r7
 8102296:	f853 3c54 	ldr.w	r3, [r3, #-84]
 810229a:	021a      	lsls	r2, r3, #8
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	430a      	orrs	r2, r1
 81022a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	4a11      	ldr	r2, [pc, #68]	@ (81022f0 <HAL_FDCAN_Init+0x3b8>)
 81022ac:	4293      	cmp	r3, r2
 81022ae:	d107      	bne.n	81022c0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	685b      	ldr	r3, [r3, #4]
 81022b4:	689a      	ldr	r2, [r3, #8]
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	685b      	ldr	r3, [r3, #4]
 81022ba:	f022 0203 	bic.w	r2, r2, #3
 81022be:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 81022c0:	687b      	ldr	r3, [r7, #4]
 81022c2:	2200      	movs	r2, #0
 81022c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	2200      	movs	r2, #0
 81022cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	2201      	movs	r2, #1
 81022d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 81022d8:	6878      	ldr	r0, [r7, #4]
 81022da:	f000 fd43 	bl	8102d64 <FDCAN_CalcultateRamBlockAddresses>
 81022de:	4603      	mov	r3, r0
 81022e0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 81022e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 81022e8:	4618      	mov	r0, r3
 81022ea:	3760      	adds	r7, #96	@ 0x60
 81022ec:	46bd      	mov	sp, r7
 81022ee:	bd80      	pop	{r7, pc}
 81022f0:	4000a000 	.word	0x4000a000

081022f4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 81022f4:	b580      	push	{r7, lr}
 81022f6:	b086      	sub	sp, #24
 81022f8:	af00      	add	r7, sp, #0
 81022fa:	60f8      	str	r0, [r7, #12]
 81022fc:	60b9      	str	r1, [r7, #8]
 81022fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8102306:	b2db      	uxtb	r3, r3
 8102308:	2b02      	cmp	r3, #2
 810230a:	d141      	bne.n	8102390 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 810230c:	68fb      	ldr	r3, [r7, #12]
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102314:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8102318:	2b00      	cmp	r3, #0
 810231a:	d109      	bne.n	8102330 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 810231c:	68fb      	ldr	r3, [r7, #12]
 810231e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102322:	f043 0220 	orr.w	r2, r3, #32
 8102326:	68fb      	ldr	r3, [r7, #12]
 8102328:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 810232c:	2301      	movs	r3, #1
 810232e:	e038      	b.n	81023a2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8102330:	68fb      	ldr	r3, [r7, #12]
 8102332:	681b      	ldr	r3, [r3, #0]
 8102334:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8102338:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810233c:	2b00      	cmp	r3, #0
 810233e:	d009      	beq.n	8102354 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8102340:	68fb      	ldr	r3, [r7, #12]
 8102342:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102346:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 810234a:	68fb      	ldr	r3, [r7, #12]
 810234c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8102350:	2301      	movs	r3, #1
 8102352:	e026      	b.n	81023a2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8102354:	68fb      	ldr	r3, [r7, #12]
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 810235c:	0c1b      	lsrs	r3, r3, #16
 810235e:	f003 031f 	and.w	r3, r3, #31
 8102362:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8102364:	697b      	ldr	r3, [r7, #20]
 8102366:	687a      	ldr	r2, [r7, #4]
 8102368:	68b9      	ldr	r1, [r7, #8]
 810236a:	68f8      	ldr	r0, [r7, #12]
 810236c:	f000 fe8a 	bl	8103084 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8102370:	68fb      	ldr	r3, [r7, #12]
 8102372:	681b      	ldr	r3, [r3, #0]
 8102374:	2101      	movs	r1, #1
 8102376:	697a      	ldr	r2, [r7, #20]
 8102378:	fa01 f202 	lsl.w	r2, r1, r2
 810237c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8102380:	2201      	movs	r2, #1
 8102382:	697b      	ldr	r3, [r7, #20]
 8102384:	409a      	lsls	r2, r3
 8102386:	68fb      	ldr	r3, [r7, #12]
 8102388:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 810238c:	2300      	movs	r3, #0
 810238e:	e008      	b.n	81023a2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8102390:	68fb      	ldr	r3, [r7, #12]
 8102392:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102396:	f043 0208 	orr.w	r2, r3, #8
 810239a:	68fb      	ldr	r3, [r7, #12]
 810239c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 81023a0:	2301      	movs	r3, #1
  }
}
 81023a2:	4618      	mov	r0, r3
 81023a4:	3718      	adds	r7, #24
 81023a6:	46bd      	mov	sp, r7
 81023a8:	bd80      	pop	{r7, pc}
	...

081023ac <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 81023ac:	b480      	push	{r7}
 81023ae:	b08b      	sub	sp, #44	@ 0x2c
 81023b0:	af00      	add	r7, sp, #0
 81023b2:	60f8      	str	r0, [r7, #12]
 81023b4:	60b9      	str	r1, [r7, #8]
 81023b6:	607a      	str	r2, [r7, #4]
 81023b8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 81023ba:	2300      	movs	r3, #0
 81023bc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 81023be:	68fb      	ldr	r3, [r7, #12]
 81023c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 81023c4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 81023c6:	7efb      	ldrb	r3, [r7, #27]
 81023c8:	2b02      	cmp	r3, #2
 81023ca:	f040 8149 	bne.w	8102660 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 81023ce:	68bb      	ldr	r3, [r7, #8]
 81023d0:	2b40      	cmp	r3, #64	@ 0x40
 81023d2:	d14c      	bne.n	810246e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 81023d4:	68fb      	ldr	r3, [r7, #12]
 81023d6:	681b      	ldr	r3, [r3, #0]
 81023d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81023dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81023e0:	2b00      	cmp	r3, #0
 81023e2:	d109      	bne.n	81023f8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81023e4:	68fb      	ldr	r3, [r7, #12]
 81023e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81023ea:	f043 0220 	orr.w	r2, r3, #32
 81023ee:	68fb      	ldr	r3, [r7, #12]
 81023f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 81023f4:	2301      	movs	r3, #1
 81023f6:	e13c      	b.n	8102672 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 81023f8:	68fb      	ldr	r3, [r7, #12]
 81023fa:	681b      	ldr	r3, [r3, #0]
 81023fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102404:	2b00      	cmp	r3, #0
 8102406:	d109      	bne.n	810241c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8102408:	68fb      	ldr	r3, [r7, #12]
 810240a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810240e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102412:	68fb      	ldr	r3, [r7, #12]
 8102414:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8102418:	2301      	movs	r3, #1
 810241a:	e12a      	b.n	8102672 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 810241c:	68fb      	ldr	r3, [r7, #12]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102424:	0e1b      	lsrs	r3, r3, #24
 8102426:	f003 0301 	and.w	r3, r3, #1
 810242a:	2b01      	cmp	r3, #1
 810242c:	d10a      	bne.n	8102444 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 810242e:	68fb      	ldr	r3, [r7, #12]
 8102430:	681b      	ldr	r3, [r3, #0]
 8102432:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102436:	0fdb      	lsrs	r3, r3, #31
 8102438:	f003 0301 	and.w	r3, r3, #1
 810243c:	2b01      	cmp	r3, #1
 810243e:	d101      	bne.n	8102444 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8102440:	2301      	movs	r3, #1
 8102442:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8102444:	68fb      	ldr	r3, [r7, #12]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810244c:	0a1b      	lsrs	r3, r3, #8
 810244e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102452:	69fa      	ldr	r2, [r7, #28]
 8102454:	4413      	add	r3, r2
 8102456:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8102458:	68fb      	ldr	r3, [r7, #12]
 810245a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 810245c:	68fb      	ldr	r3, [r7, #12]
 810245e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102460:	69f9      	ldr	r1, [r7, #28]
 8102462:	fb01 f303 	mul.w	r3, r1, r3
 8102466:	009b      	lsls	r3, r3, #2
 8102468:	4413      	add	r3, r2
 810246a:	627b      	str	r3, [r7, #36]	@ 0x24
 810246c:	e068      	b.n	8102540 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 810246e:	68bb      	ldr	r3, [r7, #8]
 8102470:	2b41      	cmp	r3, #65	@ 0x41
 8102472:	d14c      	bne.n	810250e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8102474:	68fb      	ldr	r3, [r7, #12]
 8102476:	681b      	ldr	r3, [r3, #0]
 8102478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810247c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8102480:	2b00      	cmp	r3, #0
 8102482:	d109      	bne.n	8102498 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102484:	68fb      	ldr	r3, [r7, #12]
 8102486:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810248a:	f043 0220 	orr.w	r2, r3, #32
 810248e:	68fb      	ldr	r3, [r7, #12]
 8102490:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8102494:	2301      	movs	r3, #1
 8102496:	e0ec      	b.n	8102672 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8102498:	68fb      	ldr	r3, [r7, #12]
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81024a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81024a4:	2b00      	cmp	r3, #0
 81024a6:	d109      	bne.n	81024bc <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 81024a8:	68fb      	ldr	r3, [r7, #12]
 81024aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81024ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81024b2:	68fb      	ldr	r3, [r7, #12]
 81024b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 81024b8:	2301      	movs	r3, #1
 81024ba:	e0da      	b.n	8102672 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 81024bc:	68fb      	ldr	r3, [r7, #12]
 81024be:	681b      	ldr	r3, [r3, #0]
 81024c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81024c4:	0e1b      	lsrs	r3, r3, #24
 81024c6:	f003 0301 	and.w	r3, r3, #1
 81024ca:	2b01      	cmp	r3, #1
 81024cc:	d10a      	bne.n	81024e4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 81024ce:	68fb      	ldr	r3, [r7, #12]
 81024d0:	681b      	ldr	r3, [r3, #0]
 81024d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81024d6:	0fdb      	lsrs	r3, r3, #31
 81024d8:	f003 0301 	and.w	r3, r3, #1
 81024dc:	2b01      	cmp	r3, #1
 81024de:	d101      	bne.n	81024e4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 81024e0:	2301      	movs	r3, #1
 81024e2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 81024e4:	68fb      	ldr	r3, [r7, #12]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81024ec:	0a1b      	lsrs	r3, r3, #8
 81024ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81024f2:	69fa      	ldr	r2, [r7, #28]
 81024f4:	4413      	add	r3, r2
 81024f6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 81024f8:	68fb      	ldr	r3, [r7, #12]
 81024fa:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 81024fc:	68fb      	ldr	r3, [r7, #12]
 81024fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102500:	69f9      	ldr	r1, [r7, #28]
 8102502:	fb01 f303 	mul.w	r3, r1, r3
 8102506:	009b      	lsls	r3, r3, #2
 8102508:	4413      	add	r3, r2
 810250a:	627b      	str	r3, [r7, #36]	@ 0x24
 810250c:	e018      	b.n	8102540 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 810250e:	68fb      	ldr	r3, [r7, #12]
 8102510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102512:	68ba      	ldr	r2, [r7, #8]
 8102514:	429a      	cmp	r2, r3
 8102516:	d309      	bcc.n	810252c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102518:	68fb      	ldr	r3, [r7, #12]
 810251a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810251e:	f043 0220 	orr.w	r2, r3, #32
 8102522:	68fb      	ldr	r3, [r7, #12]
 8102524:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8102528:	2301      	movs	r3, #1
 810252a:	e0a2      	b.n	8102672 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 810252c:	68fb      	ldr	r3, [r7, #12]
 810252e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8102530:	68fb      	ldr	r3, [r7, #12]
 8102532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102534:	68b9      	ldr	r1, [r7, #8]
 8102536:	fb01 f303 	mul.w	r3, r1, r3
 810253a:	009b      	lsls	r3, r3, #2
 810253c:	4413      	add	r3, r2
 810253e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8102540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	685b      	ldr	r3, [r3, #4]
 8102550:	2b00      	cmp	r3, #0
 8102552:	d107      	bne.n	8102564 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8102554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	0c9b      	lsrs	r3, r3, #18
 810255a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	601a      	str	r2, [r3, #0]
 8102562:	e005      	b.n	8102570 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8102564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8102570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 810257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8102588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810258a:	3304      	adds	r3, #4
 810258c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 810258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	b29a      	uxth	r2, r3
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8102598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	0c1b      	lsrs	r3, r3, #16
 810259e:	f003 020f 	and.w	r2, r3, #15
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 81025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 81025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025b4:	681b      	ldr	r3, [r3, #0]
 81025b6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 81025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	0e1b      	lsrs	r3, r3, #24
 81025c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 81025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	0fda      	lsrs	r2, r3, #31
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 81025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025d8:	3304      	adds	r3, #4
 81025da:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 81025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025de:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 81025e0:	2300      	movs	r3, #0
 81025e2:	623b      	str	r3, [r7, #32]
 81025e4:	e00a      	b.n	81025fc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 81025e6:	697a      	ldr	r2, [r7, #20]
 81025e8:	6a3b      	ldr	r3, [r7, #32]
 81025ea:	441a      	add	r2, r3
 81025ec:	6839      	ldr	r1, [r7, #0]
 81025ee:	6a3b      	ldr	r3, [r7, #32]
 81025f0:	440b      	add	r3, r1
 81025f2:	7812      	ldrb	r2, [r2, #0]
 81025f4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 81025f6:	6a3b      	ldr	r3, [r7, #32]
 81025f8:	3301      	adds	r3, #1
 81025fa:	623b      	str	r3, [r7, #32]
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	68db      	ldr	r3, [r3, #12]
 8102600:	4a1f      	ldr	r2, [pc, #124]	@ (8102680 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8102602:	5cd3      	ldrb	r3, [r2, r3]
 8102604:	461a      	mov	r2, r3
 8102606:	6a3b      	ldr	r3, [r7, #32]
 8102608:	4293      	cmp	r3, r2
 810260a:	d3ec      	bcc.n	81025e6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 810260c:	68bb      	ldr	r3, [r7, #8]
 810260e:	2b40      	cmp	r3, #64	@ 0x40
 8102610:	d105      	bne.n	810261e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8102612:	68fb      	ldr	r3, [r7, #12]
 8102614:	681b      	ldr	r3, [r3, #0]
 8102616:	69fa      	ldr	r2, [r7, #28]
 8102618:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 810261c:	e01e      	b.n	810265c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 810261e:	68bb      	ldr	r3, [r7, #8]
 8102620:	2b41      	cmp	r3, #65	@ 0x41
 8102622:	d105      	bne.n	8102630 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8102624:	68fb      	ldr	r3, [r7, #12]
 8102626:	681b      	ldr	r3, [r3, #0]
 8102628:	69fa      	ldr	r2, [r7, #28]
 810262a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 810262e:	e015      	b.n	810265c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8102630:	68bb      	ldr	r3, [r7, #8]
 8102632:	2b1f      	cmp	r3, #31
 8102634:	d808      	bhi.n	8102648 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8102636:	68fb      	ldr	r3, [r7, #12]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	2101      	movs	r1, #1
 810263c:	68ba      	ldr	r2, [r7, #8]
 810263e:	fa01 f202 	lsl.w	r2, r1, r2
 8102642:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8102646:	e009      	b.n	810265c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8102648:	68bb      	ldr	r3, [r7, #8]
 810264a:	f003 021f 	and.w	r2, r3, #31
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	2101      	movs	r1, #1
 8102654:	fa01 f202 	lsl.w	r2, r1, r2
 8102658:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 810265c:	2300      	movs	r3, #0
 810265e:	e008      	b.n	8102672 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8102660:	68fb      	ldr	r3, [r7, #12]
 8102662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102666:	f043 0208 	orr.w	r2, r3, #8
 810266a:	68fb      	ldr	r3, [r7, #12]
 810266c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8102670:	2301      	movs	r3, #1
  }
}
 8102672:	4618      	mov	r0, r3
 8102674:	372c      	adds	r7, #44	@ 0x2c
 8102676:	46bd      	mov	sp, r7
 8102678:	f85d 7b04 	ldr.w	r7, [sp], #4
 810267c:	4770      	bx	lr
 810267e:	bf00      	nop
 8102680:	0810c074 	.word	0x0810c074

08102684 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8102684:	b480      	push	{r7}
 8102686:	b085      	sub	sp, #20
 8102688:	af00      	add	r7, sp, #0
 810268a:	6078      	str	r0, [r7, #4]
 810268c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	681b      	ldr	r3, [r3, #0]
 8102692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102694:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	f003 0207 	and.w	r2, r3, #7
 810269c:	683b      	ldr	r3, [r7, #0]
 810269e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 81026a0:	68fb      	ldr	r3, [r7, #12]
 81026a2:	0a1b      	lsrs	r3, r3, #8
 81026a4:	f003 0207 	and.w	r2, r3, #7
 81026a8:	683b      	ldr	r3, [r7, #0]
 81026aa:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 81026ac:	68fb      	ldr	r3, [r7, #12]
 81026ae:	f003 0218 	and.w	r2, r3, #24
 81026b2:	683b      	ldr	r3, [r7, #0]
 81026b4:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 81026b6:	68fb      	ldr	r3, [r7, #12]
 81026b8:	095b      	lsrs	r3, r3, #5
 81026ba:	f003 0201 	and.w	r2, r3, #1
 81026be:	683b      	ldr	r3, [r7, #0]
 81026c0:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 81026c2:	68fb      	ldr	r3, [r7, #12]
 81026c4:	099b      	lsrs	r3, r3, #6
 81026c6:	f003 0201 	and.w	r2, r3, #1
 81026ca:	683b      	ldr	r3, [r7, #0]
 81026cc:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 81026ce:	68fb      	ldr	r3, [r7, #12]
 81026d0:	09db      	lsrs	r3, r3, #7
 81026d2:	f003 0201 	and.w	r2, r3, #1
 81026d6:	683b      	ldr	r3, [r7, #0]
 81026d8:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 81026da:	68fb      	ldr	r3, [r7, #12]
 81026dc:	0adb      	lsrs	r3, r3, #11
 81026de:	f003 0201 	and.w	r2, r3, #1
 81026e2:	683b      	ldr	r3, [r7, #0]
 81026e4:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 81026e6:	68fb      	ldr	r3, [r7, #12]
 81026e8:	0b1b      	lsrs	r3, r3, #12
 81026ea:	f003 0201 	and.w	r2, r3, #1
 81026ee:	683b      	ldr	r3, [r7, #0]
 81026f0:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 81026f2:	68fb      	ldr	r3, [r7, #12]
 81026f4:	0b5b      	lsrs	r3, r3, #13
 81026f6:	f003 0201 	and.w	r2, r3, #1
 81026fa:	683b      	ldr	r3, [r7, #0]
 81026fc:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 81026fe:	68fb      	ldr	r3, [r7, #12]
 8102700:	0b9b      	lsrs	r3, r3, #14
 8102702:	f003 0201 	and.w	r2, r3, #1
 8102706:	683b      	ldr	r3, [r7, #0]
 8102708:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 810270a:	68fb      	ldr	r3, [r7, #12]
 810270c:	0c1b      	lsrs	r3, r3, #16
 810270e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8102712:	683b      	ldr	r3, [r7, #0]
 8102714:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 8102716:	2300      	movs	r3, #0
}
 8102718:	4618      	mov	r0, r3
 810271a:	3714      	adds	r7, #20
 810271c:	46bd      	mov	sp, r7
 810271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102722:	4770      	bx	lr

08102724 <HAL_FDCAN_IsTxBufferMessagePending>:
  * @retval Status
  *          - 0 : No pending transmission request on TxBufferIndex.
  *          - 1 : Pending transmission request on TxBufferIndex.
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(const FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
 8102724:	b480      	push	{r7}
 8102726:	b083      	sub	sp, #12
 8102728:	af00      	add	r7, sp, #0
 810272a:	6078      	str	r0, [r7, #4]
 810272c:	6039      	str	r1, [r7, #0]
  /* Check pending transmission request on the selected buffer */
  if ((hfdcan->Instance->TXBRP & TxBufferIndex) == 0U)
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8102736:	683b      	ldr	r3, [r7, #0]
 8102738:	4013      	ands	r3, r2
 810273a:	2b00      	cmp	r3, #0
 810273c:	d101      	bne.n	8102742 <HAL_FDCAN_IsTxBufferMessagePending+0x1e>
  {
    return 0;
 810273e:	2300      	movs	r3, #0
 8102740:	e000      	b.n	8102744 <HAL_FDCAN_IsTxBufferMessagePending+0x20>
  }
  return 1;
 8102742:	2301      	movs	r3, #1
}
 8102744:	4618      	mov	r0, r3
 8102746:	370c      	adds	r7, #12
 8102748:	46bd      	mov	sp, r7
 810274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810274e:	4770      	bx	lr

08102750 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8102750:	b580      	push	{r7, lr}
 8102752:	b096      	sub	sp, #88	@ 0x58
 8102754:	af00      	add	r7, sp, #0
 8102756:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8102758:	4b99      	ldr	r3, [pc, #612]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 810275a:	691b      	ldr	r3, [r3, #16]
 810275c:	079b      	lsls	r3, r3, #30
 810275e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8102760:	4b97      	ldr	r3, [pc, #604]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 8102762:	695b      	ldr	r3, [r3, #20]
 8102764:	079b      	lsls	r3, r3, #30
 8102766:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8102768:	4013      	ands	r3, r2
 810276a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	681b      	ldr	r3, [r3, #0]
 8102770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102772:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8102776:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	681b      	ldr	r3, [r3, #0]
 810277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810277e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8102780:	4013      	ands	r3, r2
 8102782:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810278a:	f003 030f 	and.w	r3, r3, #15
 810278e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8102798:	4013      	ands	r3, r2
 810279a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 810279c:	687b      	ldr	r3, [r7, #4]
 810279e:	681b      	ldr	r3, [r3, #0]
 81027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81027a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81027b0:	4013      	ands	r3, r2
 81027b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 81027b4:	687b      	ldr	r3, [r7, #4]
 81027b6:	681b      	ldr	r3, [r3, #0]
 81027b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027ba:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 81027be:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81027c8:	4013      	ands	r3, r2
 81027ca:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027d2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 81027d6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81027e0:	4013      	ands	r3, r2
 81027e2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 81027f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d00f      	beq.n	810281e <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 81027fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102804:	2b00      	cmp	r3, #0
 8102806:	d00a      	beq.n	810281e <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	681b      	ldr	r3, [r3, #0]
 810280c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102810:	651a      	str	r2, [r3, #80]	@ 0x50
 8102812:	4b6b      	ldr	r3, [pc, #428]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 8102814:	2200      	movs	r2, #0
 8102816:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8102818:	6878      	ldr	r0, [r7, #4]
 810281a:	f000 fa57 	bl	8102ccc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 810281e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8102824:	2b00      	cmp	r3, #0
 8102826:	d01c      	beq.n	8102862 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8102828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810282a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810282e:	2b00      	cmp	r3, #0
 8102830:	d017      	beq.n	8102862 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 810283a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	681b      	ldr	r3, [r3, #0]
 8102840:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8102844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8102846:	4013      	ands	r3, r2
 8102848:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	681b      	ldr	r3, [r3, #0]
 810284e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8102852:	651a      	str	r2, [r3, #80]	@ 0x50
 8102854:	4b5a      	ldr	r3, [pc, #360]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 8102856:	2200      	movs	r2, #0
 8102858:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 810285a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 810285c:	6878      	ldr	r0, [r7, #4]
 810285e:	f000 fa0c 	bl	8102c7a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8102862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8102864:	2b00      	cmp	r3, #0
 8102866:	d00f      	beq.n	8102888 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	681a      	ldr	r2, [r3, #0]
 810286c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810286e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102872:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102876:	6513      	str	r3, [r2, #80]	@ 0x50
 8102878:	4a51      	ldr	r2, [pc, #324]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 810287a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810287c:	0f9b      	lsrs	r3, r3, #30
 810287e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8102880:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8102882:	6878      	ldr	r0, [r7, #4]
 8102884:	f000 f9b8 	bl	8102bf8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8102888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810288a:	2b00      	cmp	r3, #0
 810288c:	d00f      	beq.n	81028ae <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 810288e:	687b      	ldr	r3, [r7, #4]
 8102890:	681a      	ldr	r2, [r3, #0]
 8102892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102894:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102898:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810289c:	6513      	str	r3, [r2, #80]	@ 0x50
 810289e:	4a48      	ldr	r2, [pc, #288]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 81028a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81028a2:	0f9b      	lsrs	r3, r3, #30
 81028a4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 81028a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 81028a8:	6878      	ldr	r0, [r7, #4]
 81028aa:	f000 f9b0 	bl	8102c0e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 81028ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81028b0:	2b00      	cmp	r3, #0
 81028b2:	d00f      	beq.n	81028d4 <HAL_FDCAN_IRQHandler+0x184>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	681a      	ldr	r2, [r3, #0]
 81028b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81028ba:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81028be:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81028c2:	6513      	str	r3, [r2, #80]	@ 0x50
 81028c4:	4a3e      	ldr	r2, [pc, #248]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 81028c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81028c8:	0f9b      	lsrs	r3, r3, #30
 81028ca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 81028cc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 81028ce:	6878      	ldr	r0, [r7, #4]
 81028d0:	f000 f9a8 	bl	8102c24 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 81028d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81028d6:	2b00      	cmp	r3, #0
 81028d8:	d00f      	beq.n	81028fa <HAL_FDCAN_IRQHandler+0x1aa>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 81028da:	687b      	ldr	r3, [r7, #4]
 81028dc:	681a      	ldr	r2, [r3, #0]
 81028de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81028e0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 81028e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81028e8:	6513      	str	r3, [r2, #80]	@ 0x50
 81028ea:	4a35      	ldr	r2, [pc, #212]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 81028ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81028ee:	0f9b      	lsrs	r3, r3, #30
 81028f0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 81028f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 81028f4:	6878      	ldr	r0, [r7, #4]
 81028f6:	f000 f9a0 	bl	8102c3a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 81028fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81028fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8102900:	2b00      	cmp	r3, #0
 8102902:	d00f      	beq.n	8102924 <HAL_FDCAN_IRQHandler+0x1d4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8102904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810290a:	2b00      	cmp	r3, #0
 810290c:	d00a      	beq.n	8102924 <HAL_FDCAN_IRQHandler+0x1d4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	681b      	ldr	r3, [r3, #0]
 8102912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102916:	651a      	str	r2, [r3, #80]	@ 0x50
 8102918:	4b29      	ldr	r3, [pc, #164]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 810291a:	2200      	movs	r2, #0
 810291c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 810291e:	6878      	ldr	r0, [r7, #4]
 8102920:	f000 f996 	bl	8102c50 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8102924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810292a:	2b00      	cmp	r3, #0
 810292c:	d01c      	beq.n	8102968 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 810292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102934:	2b00      	cmp	r3, #0
 8102936:	d017      	beq.n	8102968 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102940:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810294a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810294c:	4013      	ands	r3, r2
 810294e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	681b      	ldr	r3, [r3, #0]
 8102954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8102958:	651a      	str	r2, [r3, #80]	@ 0x50
 810295a:	4b19      	ldr	r3, [pc, #100]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 810295c:	2200      	movs	r2, #0
 810295e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8102960:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8102962:	6878      	ldr	r0, [r7, #4]
 8102964:	f000 f97e 	bl	8102c64 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8102968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810296a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810296e:	2b00      	cmp	r3, #0
 8102970:	d00f      	beq.n	8102992 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8102972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8102978:	2b00      	cmp	r3, #0
 810297a:	d00a      	beq.n	8102992 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8102984:	651a      	str	r2, [r3, #80]	@ 0x50
 8102986:	4b0e      	ldr	r3, [pc, #56]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 8102988:	2200      	movs	r2, #0
 810298a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 810298c:	6878      	ldr	r0, [r7, #4]
 810298e:	f000 f97f 	bl	8102c90 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8102992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102998:	2b00      	cmp	r3, #0
 810299a:	d013      	beq.n	81029c4 <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 810299c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810299e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81029a2:	2b00      	cmp	r3, #0
 81029a4:	d00e      	beq.n	81029c4 <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81029ae:	651a      	str	r2, [r3, #80]	@ 0x50
 81029b0:	4b03      	ldr	r3, [pc, #12]	@ (81029c0 <HAL_FDCAN_IRQHandler+0x270>)
 81029b2:	2200      	movs	r2, #0
 81029b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 81029b6:	6878      	ldr	r0, [r7, #4]
 81029b8:	f000 f974 	bl	8102ca4 <HAL_FDCAN_TimestampWraparoundCallback>
 81029bc:	e002      	b.n	81029c4 <HAL_FDCAN_IRQHandler+0x274>
 81029be:	bf00      	nop
 81029c0:	4000a800 	.word	0x4000a800
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 81029c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81029c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81029ca:	2b00      	cmp	r3, #0
 81029cc:	d00f      	beq.n	81029ee <HAL_FDCAN_IRQHandler+0x29e>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 81029ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81029d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81029d4:	2b00      	cmp	r3, #0
 81029d6:	d00a      	beq.n	81029ee <HAL_FDCAN_IRQHandler+0x29e>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	681b      	ldr	r3, [r3, #0]
 81029dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 81029e0:	651a      	str	r2, [r3, #80]	@ 0x50
 81029e2:	4b83      	ldr	r3, [pc, #524]	@ (8102bf0 <HAL_FDCAN_IRQHandler+0x4a0>)
 81029e4:	2200      	movs	r2, #0
 81029e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 81029e8:	6878      	ldr	r0, [r7, #4]
 81029ea:	f000 f965 	bl	8102cb8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 81029ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81029f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81029f4:	2b00      	cmp	r3, #0
 81029f6:	d014      	beq.n	8102a22 <HAL_FDCAN_IRQHandler+0x2d2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 81029f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81029fe:	2b00      	cmp	r3, #0
 8102a00:	d00f      	beq.n	8102a22 <HAL_FDCAN_IRQHandler+0x2d2>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8102a0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8102a0c:	4b78      	ldr	r3, [pc, #480]	@ (8102bf0 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102a0e:	2200      	movs	r2, #0
 8102a10:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102a18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8102a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102a24:	2b00      	cmp	r3, #0
 8102a26:	d00f      	beq.n	8102a48 <HAL_FDCAN_IRQHandler+0x2f8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	681a      	ldr	r2, [r3, #0]
 8102a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102a2e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102a32:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8102a38:	4a6d      	ldr	r2, [pc, #436]	@ (8102bf0 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102a3c:	0f9b      	lsrs	r3, r3, #30
 8102a3e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8102a40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8102a42:	6878      	ldr	r0, [r7, #4]
 8102a44:	f000 f956 	bl	8102cf4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8102a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102a4a:	2b00      	cmp	r3, #0
 8102a4c:	d013      	beq.n	8102a76 <HAL_FDCAN_IRQHandler+0x326>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	681a      	ldr	r2, [r3, #0]
 8102a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102a54:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102a58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102a5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8102a5e:	4a64      	ldr	r2, [pc, #400]	@ (8102bf0 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102a62:	0f9b      	lsrs	r3, r3, #30
 8102a64:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8102a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102a6e:	431a      	orrs	r2, r3
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8102bf4 <HAL_FDCAN_IRQHandler+0x4a4>)
 8102a7c:	4293      	cmp	r3, r2
 8102a7e:	f040 80aa 	bne.w	8102bd6 <HAL_FDCAN_IRQHandler+0x486>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	685b      	ldr	r3, [r3, #4]
 8102a86:	689b      	ldr	r3, [r3, #8]
 8102a88:	f003 0303 	and.w	r3, r3, #3
 8102a8c:	2b00      	cmp	r3, #0
 8102a8e:	f000 80a2 	beq.w	8102bd6 <HAL_FDCAN_IRQHandler+0x486>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	685b      	ldr	r3, [r3, #4]
 8102a96:	6a1b      	ldr	r3, [r3, #32]
 8102a98:	f003 030f 	and.w	r3, r3, #15
 8102a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	685b      	ldr	r3, [r3, #4]
 8102aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102aa6:	4013      	ands	r3, r2
 8102aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	685b      	ldr	r3, [r3, #4]
 8102aae:	6a1b      	ldr	r3, [r3, #32]
 8102ab0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8102ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	685b      	ldr	r3, [r3, #4]
 8102aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102abe:	4013      	ands	r3, r2
 8102ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	685b      	ldr	r3, [r3, #4]
 8102ac6:	6a1b      	ldr	r3, [r3, #32]
 8102ac8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8102acc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	685b      	ldr	r3, [r3, #4]
 8102ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102ad6:	4013      	ands	r3, r2
 8102ad8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	685b      	ldr	r3, [r3, #4]
 8102ade:	6a1b      	ldr	r3, [r3, #32]
 8102ae0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8102ae4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	685b      	ldr	r3, [r3, #4]
 8102aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102aec:	6a3a      	ldr	r2, [r7, #32]
 8102aee:	4013      	ands	r3, r2
 8102af0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	685b      	ldr	r3, [r3, #4]
 8102af6:	6a1b      	ldr	r3, [r3, #32]
 8102af8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8102afc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	685b      	ldr	r3, [r3, #4]
 8102b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b04:	69fa      	ldr	r2, [r7, #28]
 8102b06:	4013      	ands	r3, r2
 8102b08:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	685b      	ldr	r3, [r3, #4]
 8102b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b10:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	685b      	ldr	r3, [r3, #4]
 8102b16:	6a1b      	ldr	r3, [r3, #32]
 8102b18:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8102b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102b1c:	2b00      	cmp	r3, #0
 8102b1e:	d007      	beq.n	8102b30 <HAL_FDCAN_IRQHandler+0x3e0>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	685b      	ldr	r3, [r3, #4]
 8102b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102b26:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8102b28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8102b2a:	6878      	ldr	r0, [r7, #4]
 8102b2c:	f000 f8ed 	bl	8102d0a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8102b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102b32:	2b00      	cmp	r3, #0
 8102b34:	d007      	beq.n	8102b46 <HAL_FDCAN_IRQHandler+0x3f6>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	685b      	ldr	r3, [r3, #4]
 8102b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102b3c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8102b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8102b40:	6878      	ldr	r0, [r7, #4]
 8102b42:	f000 f8ed 	bl	8102d20 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8102b46:	69bb      	ldr	r3, [r7, #24]
 8102b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102b4c:	2b00      	cmp	r3, #0
 8102b4e:	d019      	beq.n	8102b84 <HAL_FDCAN_IRQHandler+0x434>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8102b50:	697b      	ldr	r3, [r7, #20]
 8102b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102b56:	2b00      	cmp	r3, #0
 8102b58:	d014      	beq.n	8102b84 <HAL_FDCAN_IRQHandler+0x434>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	685b      	ldr	r3, [r3, #4]
 8102b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102b60:	0c1b      	lsrs	r3, r3, #16
 8102b62:	b29b      	uxth	r3, r3
 8102b64:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	685b      	ldr	r3, [r3, #4]
 8102b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102b70:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	685b      	ldr	r3, [r3, #4]
 8102b76:	2240      	movs	r2, #64	@ 0x40
 8102b78:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8102b7a:	68fa      	ldr	r2, [r7, #12]
 8102b7c:	6939      	ldr	r1, [r7, #16]
 8102b7e:	6878      	ldr	r0, [r7, #4]
 8102b80:	f000 f8d9 	bl	8102d36 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8102b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102b86:	2b00      	cmp	r3, #0
 8102b88:	d007      	beq.n	8102b9a <HAL_FDCAN_IRQHandler+0x44a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	685b      	ldr	r3, [r3, #4]
 8102b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102b90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8102b92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8102b94:	6878      	ldr	r0, [r7, #4]
 8102b96:	f000 f8da 	bl	8102d4e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8102b9a:	6a3b      	ldr	r3, [r7, #32]
 8102b9c:	2b00      	cmp	r3, #0
 8102b9e:	d00b      	beq.n	8102bb8 <HAL_FDCAN_IRQHandler+0x468>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	685b      	ldr	r3, [r3, #4]
 8102ba4:	6a3a      	ldr	r2, [r7, #32]
 8102ba6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8102bae:	6a3b      	ldr	r3, [r7, #32]
 8102bb0:	431a      	orrs	r2, r3
 8102bb2:	687b      	ldr	r3, [r7, #4]
 8102bb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8102bb8:	69fb      	ldr	r3, [r7, #28]
 8102bba:	2b00      	cmp	r3, #0
 8102bbc:	d00b      	beq.n	8102bd6 <HAL_FDCAN_IRQHandler+0x486>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	685b      	ldr	r3, [r3, #4]
 8102bc2:	69fa      	ldr	r2, [r7, #28]
 8102bc4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8102bcc:	69fb      	ldr	r3, [r7, #28]
 8102bce:	431a      	orrs	r2, r3
 8102bd0:	687b      	ldr	r3, [r7, #4]
 8102bd2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102bdc:	2b00      	cmp	r3, #0
 8102bde:	d002      	beq.n	8102be6 <HAL_FDCAN_IRQHandler+0x496>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8102be0:	6878      	ldr	r0, [r7, #4]
 8102be2:	f000 f87d 	bl	8102ce0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8102be6:	bf00      	nop
 8102be8:	3758      	adds	r7, #88	@ 0x58
 8102bea:	46bd      	mov	sp, r7
 8102bec:	bd80      	pop	{r7, pc}
 8102bee:	bf00      	nop
 8102bf0:	4000a800 	.word	0x4000a800
 8102bf4:	4000a000 	.word	0x4000a000

08102bf8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8102bf8:	b480      	push	{r7}
 8102bfa:	b083      	sub	sp, #12
 8102bfc:	af00      	add	r7, sp, #0
 8102bfe:	6078      	str	r0, [r7, #4]
 8102c00:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8102c02:	bf00      	nop
 8102c04:	370c      	adds	r7, #12
 8102c06:	46bd      	mov	sp, r7
 8102c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c0c:	4770      	bx	lr

08102c0e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8102c0e:	b480      	push	{r7}
 8102c10:	b083      	sub	sp, #12
 8102c12:	af00      	add	r7, sp, #0
 8102c14:	6078      	str	r0, [r7, #4]
 8102c16:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8102c18:	bf00      	nop
 8102c1a:	370c      	adds	r7, #12
 8102c1c:	46bd      	mov	sp, r7
 8102c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c22:	4770      	bx	lr

08102c24 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8102c24:	b480      	push	{r7}
 8102c26:	b083      	sub	sp, #12
 8102c28:	af00      	add	r7, sp, #0
 8102c2a:	6078      	str	r0, [r7, #4]
 8102c2c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8102c2e:	bf00      	nop
 8102c30:	370c      	adds	r7, #12
 8102c32:	46bd      	mov	sp, r7
 8102c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c38:	4770      	bx	lr

08102c3a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8102c3a:	b480      	push	{r7}
 8102c3c:	b083      	sub	sp, #12
 8102c3e:	af00      	add	r7, sp, #0
 8102c40:	6078      	str	r0, [r7, #4]
 8102c42:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8102c44:	bf00      	nop
 8102c46:	370c      	adds	r7, #12
 8102c48:	46bd      	mov	sp, r7
 8102c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c4e:	4770      	bx	lr

08102c50 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102c50:	b480      	push	{r7}
 8102c52:	b083      	sub	sp, #12
 8102c54:	af00      	add	r7, sp, #0
 8102c56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8102c58:	bf00      	nop
 8102c5a:	370c      	adds	r7, #12
 8102c5c:	46bd      	mov	sp, r7
 8102c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c62:	4770      	bx	lr

08102c64 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8102c64:	b480      	push	{r7}
 8102c66:	b083      	sub	sp, #12
 8102c68:	af00      	add	r7, sp, #0
 8102c6a:	6078      	str	r0, [r7, #4]
 8102c6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8102c6e:	bf00      	nop
 8102c70:	370c      	adds	r7, #12
 8102c72:	46bd      	mov	sp, r7
 8102c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c78:	4770      	bx	lr

08102c7a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8102c7a:	b480      	push	{r7}
 8102c7c:	b083      	sub	sp, #12
 8102c7e:	af00      	add	r7, sp, #0
 8102c80:	6078      	str	r0, [r7, #4]
 8102c82:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8102c84:	bf00      	nop
 8102c86:	370c      	adds	r7, #12
 8102c88:	46bd      	mov	sp, r7
 8102c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c8e:	4770      	bx	lr

08102c90 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102c90:	b480      	push	{r7}
 8102c92:	b083      	sub	sp, #12
 8102c94:	af00      	add	r7, sp, #0
 8102c96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8102c98:	bf00      	nop
 8102c9a:	370c      	adds	r7, #12
 8102c9c:	46bd      	mov	sp, r7
 8102c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ca2:	4770      	bx	lr

08102ca4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102ca4:	b480      	push	{r7}
 8102ca6:	b083      	sub	sp, #12
 8102ca8:	af00      	add	r7, sp, #0
 8102caa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8102cac:	bf00      	nop
 8102cae:	370c      	adds	r7, #12
 8102cb0:	46bd      	mov	sp, r7
 8102cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cb6:	4770      	bx	lr

08102cb8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102cb8:	b480      	push	{r7}
 8102cba:	b083      	sub	sp, #12
 8102cbc:	af00      	add	r7, sp, #0
 8102cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8102cc0:	bf00      	nop
 8102cc2:	370c      	adds	r7, #12
 8102cc4:	46bd      	mov	sp, r7
 8102cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cca:	4770      	bx	lr

08102ccc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102ccc:	b480      	push	{r7}
 8102cce:	b083      	sub	sp, #12
 8102cd0:	af00      	add	r7, sp, #0
 8102cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8102cd4:	bf00      	nop
 8102cd6:	370c      	adds	r7, #12
 8102cd8:	46bd      	mov	sp, r7
 8102cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cde:	4770      	bx	lr

08102ce0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102ce0:	b480      	push	{r7}
 8102ce2:	b083      	sub	sp, #12
 8102ce4:	af00      	add	r7, sp, #0
 8102ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8102ce8:	bf00      	nop
 8102cea:	370c      	adds	r7, #12
 8102cec:	46bd      	mov	sp, r7
 8102cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cf2:	4770      	bx	lr

08102cf4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8102cf4:	b480      	push	{r7}
 8102cf6:	b083      	sub	sp, #12
 8102cf8:	af00      	add	r7, sp, #0
 8102cfa:	6078      	str	r0, [r7, #4]
 8102cfc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8102cfe:	bf00      	nop
 8102d00:	370c      	adds	r7, #12
 8102d02:	46bd      	mov	sp, r7
 8102d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d08:	4770      	bx	lr

08102d0a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8102d0a:	b480      	push	{r7}
 8102d0c:	b083      	sub	sp, #12
 8102d0e:	af00      	add	r7, sp, #0
 8102d10:	6078      	str	r0, [r7, #4]
 8102d12:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8102d14:	bf00      	nop
 8102d16:	370c      	adds	r7, #12
 8102d18:	46bd      	mov	sp, r7
 8102d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d1e:	4770      	bx	lr

08102d20 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8102d20:	b480      	push	{r7}
 8102d22:	b083      	sub	sp, #12
 8102d24:	af00      	add	r7, sp, #0
 8102d26:	6078      	str	r0, [r7, #4]
 8102d28:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8102d2a:	bf00      	nop
 8102d2c:	370c      	adds	r7, #12
 8102d2e:	46bd      	mov	sp, r7
 8102d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d34:	4770      	bx	lr

08102d36 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8102d36:	b480      	push	{r7}
 8102d38:	b085      	sub	sp, #20
 8102d3a:	af00      	add	r7, sp, #0
 8102d3c:	60f8      	str	r0, [r7, #12]
 8102d3e:	60b9      	str	r1, [r7, #8]
 8102d40:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8102d42:	bf00      	nop
 8102d44:	3714      	adds	r7, #20
 8102d46:	46bd      	mov	sp, r7
 8102d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d4c:	4770      	bx	lr

08102d4e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8102d4e:	b480      	push	{r7}
 8102d50:	b083      	sub	sp, #12
 8102d52:	af00      	add	r7, sp, #0
 8102d54:	6078      	str	r0, [r7, #4]
 8102d56:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8102d58:	bf00      	nop
 8102d5a:	370c      	adds	r7, #12
 8102d5c:	46bd      	mov	sp, r7
 8102d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d62:	4770      	bx	lr

08102d64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102d64:	b480      	push	{r7}
 8102d66:	b085      	sub	sp, #20
 8102d68:	af00      	add	r7, sp, #0
 8102d6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102d70:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8102d72:	687b      	ldr	r3, [r7, #4]
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102d7e:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102d82:	68ba      	ldr	r2, [r7, #8]
 8102d84:	0091      	lsls	r1, r2, #2
 8102d86:	687a      	ldr	r2, [r7, #4]
 8102d88:	6812      	ldr	r2, [r2, #0]
 8102d8a:	430b      	orrs	r3, r1
 8102d8c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102d98:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102da0:	041a      	lsls	r2, r3, #16
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	430a      	orrs	r2, r1
 8102da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102db0:	68ba      	ldr	r2, [r7, #8]
 8102db2:	4413      	add	r3, r2
 8102db4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102dbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102dc2:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102dc6:	68ba      	ldr	r2, [r7, #8]
 8102dc8:	0091      	lsls	r1, r2, #2
 8102dca:	687a      	ldr	r2, [r7, #4]
 8102dcc:	6812      	ldr	r2, [r2, #0]
 8102dce:	430b      	orrs	r3, r1
 8102dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8102dd4:	687b      	ldr	r3, [r7, #4]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ddc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102de4:	041a      	lsls	r2, r3, #16
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	430a      	orrs	r2, r1
 8102dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102df4:	005b      	lsls	r3, r3, #1
 8102df6:	68ba      	ldr	r2, [r7, #8]
 8102df8:	4413      	add	r3, r2
 8102dfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102e04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102e08:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102e0c:	68ba      	ldr	r2, [r7, #8]
 8102e0e:	0091      	lsls	r1, r2, #2
 8102e10:	687a      	ldr	r2, [r7, #4]
 8102e12:	6812      	ldr	r2, [r2, #0]
 8102e14:	430b      	orrs	r3, r1
 8102e16:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	681b      	ldr	r3, [r3, #0]
 8102e1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102e22:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e2a:	041a      	lsls	r2, r3, #16
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	681b      	ldr	r3, [r3, #0]
 8102e30:	430a      	orrs	r2, r1
 8102e32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e3a:	687a      	ldr	r2, [r7, #4]
 8102e3c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8102e3e:	fb02 f303 	mul.w	r3, r2, r3
 8102e42:	68ba      	ldr	r2, [r7, #8]
 8102e44:	4413      	add	r3, r2
 8102e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102e50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102e54:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102e58:	68ba      	ldr	r2, [r7, #8]
 8102e5a:	0091      	lsls	r1, r2, #2
 8102e5c:	687a      	ldr	r2, [r7, #4]
 8102e5e:	6812      	ldr	r2, [r2, #0]
 8102e60:	430b      	orrs	r3, r1
 8102e62:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102e6e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102e76:	041a      	lsls	r2, r3, #16
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	430a      	orrs	r2, r1
 8102e7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102e86:	687a      	ldr	r2, [r7, #4]
 8102e88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8102e8a:	fb02 f303 	mul.w	r3, r2, r3
 8102e8e:	68ba      	ldr	r2, [r7, #8]
 8102e90:	4413      	add	r3, r2
 8102e92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102e9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102ea0:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102ea4:	68ba      	ldr	r2, [r7, #8]
 8102ea6:	0091      	lsls	r1, r2, #2
 8102ea8:	687a      	ldr	r2, [r7, #4]
 8102eaa:	6812      	ldr	r2, [r2, #0]
 8102eac:	430b      	orrs	r3, r1
 8102eae:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102eb6:	687a      	ldr	r2, [r7, #4]
 8102eb8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8102eba:	fb02 f303 	mul.w	r3, r2, r3
 8102ebe:	68ba      	ldr	r2, [r7, #8]
 8102ec0:	4413      	add	r3, r2
 8102ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8102ec4:	687b      	ldr	r3, [r7, #4]
 8102ec6:	681b      	ldr	r3, [r3, #0]
 8102ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102ecc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102ed0:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102ed4:	68ba      	ldr	r2, [r7, #8]
 8102ed6:	0091      	lsls	r1, r2, #2
 8102ed8:	687a      	ldr	r2, [r7, #4]
 8102eda:	6812      	ldr	r2, [r2, #0]
 8102edc:	430b      	orrs	r3, r1
 8102ede:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102eea:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ef2:	041a      	lsls	r2, r3, #16
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	681b      	ldr	r3, [r3, #0]
 8102ef8:	430a      	orrs	r2, r1
 8102efa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102f02:	005b      	lsls	r3, r3, #1
 8102f04:	68ba      	ldr	r2, [r7, #8]
 8102f06:	4413      	add	r3, r2
 8102f08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102f16:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8102f1a:	68ba      	ldr	r2, [r7, #8]
 8102f1c:	0091      	lsls	r1, r2, #2
 8102f1e:	687a      	ldr	r2, [r7, #4]
 8102f20:	6812      	ldr	r2, [r2, #0]
 8102f22:	430b      	orrs	r3, r1
 8102f24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102f30:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102f38:	041a      	lsls	r2, r3, #16
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	430a      	orrs	r2, r1
 8102f40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8102f4c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102f54:	061a      	lsls	r2, r3, #24
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	681b      	ldr	r3, [r3, #0]
 8102f5a:	430a      	orrs	r2, r1
 8102f5c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102f64:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8102f68:	f503 532c 	add.w	r3, r3, #11008	@ 0x2b00
 8102f6c:	009a      	lsls	r2, r3, #2
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102f7a:	009b      	lsls	r3, r3, #2
 8102f7c:	441a      	add	r2, r3
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102f8a:	00db      	lsls	r3, r3, #3
 8102f8c:	441a      	add	r2, r3
 8102f8e:	687b      	ldr	r3, [r7, #4]
 8102f90:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102f9a:	6879      	ldr	r1, [r7, #4]
 8102f9c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8102f9e:	fb01 f303 	mul.w	r3, r1, r3
 8102fa2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8102fa4:	441a      	add	r2, r3
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8102fae:	687b      	ldr	r3, [r7, #4]
 8102fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102fb2:	6879      	ldr	r1, [r7, #4]
 8102fb4:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8102fb6:	fb01 f303 	mul.w	r3, r1, r3
 8102fba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8102fbc:	441a      	add	r2, r3
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8102fc2:	687b      	ldr	r3, [r7, #4]
 8102fc4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102fca:	6879      	ldr	r1, [r7, #4]
 8102fcc:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8102fce:	fb01 f303 	mul.w	r3, r1, r3
 8102fd2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8102fd4:	441a      	add	r2, r3
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102fe6:	00db      	lsls	r3, r3, #3
 8102fe8:	441a      	add	r2, r3
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102ffa:	6879      	ldr	r1, [r7, #4]
 8102ffc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8102ffe:	fb01 f303 	mul.w	r3, r1, r3
 8103002:	009b      	lsls	r3, r3, #2
 8103004:	441a      	add	r2, r3
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 810300c:	687b      	ldr	r3, [r7, #4]
 810300e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103016:	6879      	ldr	r1, [r7, #4]
 8103018:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 810301a:	fb01 f303 	mul.w	r3, r1, r3
 810301e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8103020:	441a      	add	r2, r3
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810302e:	4a14      	ldr	r2, [pc, #80]	@ (8103080 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d90d      	bls.n	8103050 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810303a:	f043 0220 	orr.w	r2, r3, #32
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8103044:	687b      	ldr	r3, [r7, #4]
 8103046:	2203      	movs	r2, #3
 8103048:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 810304c:	2301      	movs	r3, #1
 810304e:	e010      	b.n	8103072 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103054:	60fb      	str	r3, [r7, #12]
 8103056:	e005      	b.n	8103064 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8103058:	68fb      	ldr	r3, [r7, #12]
 810305a:	2200      	movs	r2, #0
 810305c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 810305e:	68fb      	ldr	r3, [r7, #12]
 8103060:	3304      	adds	r3, #4
 8103062:	60fb      	str	r3, [r7, #12]
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810306a:	68fa      	ldr	r2, [r7, #12]
 810306c:	429a      	cmp	r2, r3
 810306e:	d3f3      	bcc.n	8103058 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8103070:	2300      	movs	r3, #0
}
 8103072:	4618      	mov	r0, r3
 8103074:	3714      	adds	r7, #20
 8103076:	46bd      	mov	sp, r7
 8103078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810307c:	4770      	bx	lr
 810307e:	bf00      	nop
 8103080:	4000d3fc 	.word	0x4000d3fc

08103084 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8103084:	b480      	push	{r7}
 8103086:	b089      	sub	sp, #36	@ 0x24
 8103088:	af00      	add	r7, sp, #0
 810308a:	60f8      	str	r0, [r7, #12]
 810308c:	60b9      	str	r1, [r7, #8]
 810308e:	607a      	str	r2, [r7, #4]
 8103090:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8103092:	68bb      	ldr	r3, [r7, #8]
 8103094:	685b      	ldr	r3, [r3, #4]
 8103096:	2b00      	cmp	r3, #0
 8103098:	d10a      	bne.n	81030b0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 810309a:	68bb      	ldr	r3, [r7, #8]
 810309c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 810309e:	68bb      	ldr	r3, [r7, #8]
 81030a0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 81030a2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 81030a4:	68bb      	ldr	r3, [r7, #8]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 81030aa:	4313      	orrs	r3, r2
 81030ac:	61fb      	str	r3, [r7, #28]
 81030ae:	e00a      	b.n	81030c6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 81030b0:	68bb      	ldr	r3, [r7, #8]
 81030b2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 81030b4:	68bb      	ldr	r3, [r7, #8]
 81030b6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 81030b8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 81030ba:	68bb      	ldr	r3, [r7, #8]
 81030bc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 81030be:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 81030c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81030c4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 81030c6:	68bb      	ldr	r3, [r7, #8]
 81030c8:	6a1b      	ldr	r3, [r3, #32]
 81030ca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 81030cc:	68bb      	ldr	r3, [r7, #8]
 81030ce:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 81030d0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 81030d2:	68bb      	ldr	r3, [r7, #8]
 81030d4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 81030d6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 81030d8:	68bb      	ldr	r3, [r7, #8]
 81030da:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 81030dc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 81030de:	68bb      	ldr	r3, [r7, #8]
 81030e0:	68db      	ldr	r3, [r3, #12]
 81030e2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 81030e4:	4313      	orrs	r3, r2
 81030e6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 81030e8:	68fb      	ldr	r3, [r7, #12]
 81030ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 81030ee:	68fb      	ldr	r3, [r7, #12]
 81030f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81030f2:	6839      	ldr	r1, [r7, #0]
 81030f4:	fb01 f303 	mul.w	r3, r1, r3
 81030f8:	009b      	lsls	r3, r3, #2
 81030fa:	4413      	add	r3, r2
 81030fc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 81030fe:	69bb      	ldr	r3, [r7, #24]
 8103100:	69fa      	ldr	r2, [r7, #28]
 8103102:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8103104:	69bb      	ldr	r3, [r7, #24]
 8103106:	3304      	adds	r3, #4
 8103108:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 810310a:	69bb      	ldr	r3, [r7, #24]
 810310c:	693a      	ldr	r2, [r7, #16]
 810310e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8103110:	69bb      	ldr	r3, [r7, #24]
 8103112:	3304      	adds	r3, #4
 8103114:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8103116:	2300      	movs	r3, #0
 8103118:	617b      	str	r3, [r7, #20]
 810311a:	e020      	b.n	810315e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 810311c:	697b      	ldr	r3, [r7, #20]
 810311e:	3303      	adds	r3, #3
 8103120:	687a      	ldr	r2, [r7, #4]
 8103122:	4413      	add	r3, r2
 8103124:	781b      	ldrb	r3, [r3, #0]
 8103126:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8103128:	697b      	ldr	r3, [r7, #20]
 810312a:	3302      	adds	r3, #2
 810312c:	6879      	ldr	r1, [r7, #4]
 810312e:	440b      	add	r3, r1
 8103130:	781b      	ldrb	r3, [r3, #0]
 8103132:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8103134:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8103136:	697b      	ldr	r3, [r7, #20]
 8103138:	3301      	adds	r3, #1
 810313a:	6879      	ldr	r1, [r7, #4]
 810313c:	440b      	add	r3, r1
 810313e:	781b      	ldrb	r3, [r3, #0]
 8103140:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8103142:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8103144:	6879      	ldr	r1, [r7, #4]
 8103146:	697a      	ldr	r2, [r7, #20]
 8103148:	440a      	add	r2, r1
 810314a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 810314c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 810314e:	69bb      	ldr	r3, [r7, #24]
 8103150:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8103152:	69bb      	ldr	r3, [r7, #24]
 8103154:	3304      	adds	r3, #4
 8103156:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8103158:	697b      	ldr	r3, [r7, #20]
 810315a:	3304      	adds	r3, #4
 810315c:	617b      	str	r3, [r7, #20]
 810315e:	68bb      	ldr	r3, [r7, #8]
 8103160:	68db      	ldr	r3, [r3, #12]
 8103162:	4a06      	ldr	r2, [pc, #24]	@ (810317c <FDCAN_CopyMessageToRAM+0xf8>)
 8103164:	5cd3      	ldrb	r3, [r2, r3]
 8103166:	461a      	mov	r2, r3
 8103168:	697b      	ldr	r3, [r7, #20]
 810316a:	4293      	cmp	r3, r2
 810316c:	d3d6      	bcc.n	810311c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 810316e:	bf00      	nop
 8103170:	bf00      	nop
 8103172:	3724      	adds	r7, #36	@ 0x24
 8103174:	46bd      	mov	sp, r7
 8103176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810317a:	4770      	bx	lr
 810317c:	0810c074 	.word	0x0810c074

08103180 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8103180:	b480      	push	{r7}
 8103182:	b083      	sub	sp, #12
 8103184:	af00      	add	r7, sp, #0
 8103186:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8103188:	4a08      	ldr	r2, [pc, #32]	@ (81031ac <HAL_HSEM_FastTake+0x2c>)
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	3320      	adds	r3, #32
 810318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103192:	4a07      	ldr	r2, [pc, #28]	@ (81031b0 <HAL_HSEM_FastTake+0x30>)
 8103194:	4293      	cmp	r3, r2
 8103196:	d101      	bne.n	810319c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8103198:	2300      	movs	r3, #0
 810319a:	e000      	b.n	810319e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 810319c:	2301      	movs	r3, #1
}
 810319e:	4618      	mov	r0, r3
 81031a0:	370c      	adds	r7, #12
 81031a2:	46bd      	mov	sp, r7
 81031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031a8:	4770      	bx	lr
 81031aa:	bf00      	nop
 81031ac:	58026400 	.word	0x58026400
 81031b0:	80000100 	.word	0x80000100

081031b4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81031b4:	b480      	push	{r7}
 81031b6:	b083      	sub	sp, #12
 81031b8:	af00      	add	r7, sp, #0
 81031ba:	6078      	str	r0, [r7, #4]
 81031bc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81031be:	4906      	ldr	r1, [pc, #24]	@ (81031d8 <HAL_HSEM_Release+0x24>)
 81031c0:	683b      	ldr	r3, [r7, #0]
 81031c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81031cc:	bf00      	nop
 81031ce:	370c      	adds	r7, #12
 81031d0:	46bd      	mov	sp, r7
 81031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031d6:	4770      	bx	lr
 81031d8:	58026400 	.word	0x58026400

081031dc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81031dc:	b480      	push	{r7}
 81031de:	b083      	sub	sp, #12
 81031e0:	af00      	add	r7, sp, #0
 81031e2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81031e4:	4b05      	ldr	r3, [pc, #20]	@ (81031fc <HAL_HSEM_ActivateNotification+0x20>)
 81031e6:	681a      	ldr	r2, [r3, #0]
 81031e8:	4904      	ldr	r1, [pc, #16]	@ (81031fc <HAL_HSEM_ActivateNotification+0x20>)
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	4313      	orrs	r3, r2
 81031ee:	600b      	str	r3, [r1, #0]
#endif
}
 81031f0:	bf00      	nop
 81031f2:	370c      	adds	r7, #12
 81031f4:	46bd      	mov	sp, r7
 81031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031fa:	4770      	bx	lr
 81031fc:	58026510 	.word	0x58026510

08103200 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8103200:	b580      	push	{r7, lr}
 8103202:	b084      	sub	sp, #16
 8103204:	af00      	add	r7, sp, #0
 8103206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	2b00      	cmp	r3, #0
 810320c:	d101      	bne.n	8103212 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 810320e:	2301      	movs	r3, #1
 8103210:	e041      	b.n	8103296 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 810321a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	681b      	ldr	r3, [r3, #0]
 8103220:	f245 5255 	movw	r2, #21845	@ 0x5555
 8103224:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	681b      	ldr	r3, [r3, #0]
 810322a:	687a      	ldr	r2, [r7, #4]
 810322c:	6852      	ldr	r2, [r2, #4]
 810322e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	687a      	ldr	r2, [r7, #4]
 8103236:	6892      	ldr	r2, [r2, #8]
 8103238:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 810323a:	f7fd fdb3 	bl	8100da4 <HAL_GetTick>
 810323e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8103240:	e00f      	b.n	8103262 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8103242:	f7fd fdaf 	bl	8100da4 <HAL_GetTick>
 8103246:	4602      	mov	r2, r0
 8103248:	68fb      	ldr	r3, [r7, #12]
 810324a:	1ad3      	subs	r3, r2, r3
 810324c:	2b31      	cmp	r3, #49	@ 0x31
 810324e:	d908      	bls.n	8103262 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	68db      	ldr	r3, [r3, #12]
 8103256:	f003 0307 	and.w	r3, r3, #7
 810325a:	2b00      	cmp	r3, #0
 810325c:	d001      	beq.n	8103262 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 810325e:	2303      	movs	r3, #3
 8103260:	e019      	b.n	8103296 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	681b      	ldr	r3, [r3, #0]
 8103266:	68db      	ldr	r3, [r3, #12]
 8103268:	f003 0307 	and.w	r3, r3, #7
 810326c:	2b00      	cmp	r3, #0
 810326e:	d1e8      	bne.n	8103242 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	681b      	ldr	r3, [r3, #0]
 8103274:	691a      	ldr	r2, [r3, #16]
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	68db      	ldr	r3, [r3, #12]
 810327a:	429a      	cmp	r2, r3
 810327c:	d005      	beq.n	810328a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	681b      	ldr	r3, [r3, #0]
 8103282:	687a      	ldr	r2, [r7, #4]
 8103284:	68d2      	ldr	r2, [r2, #12]
 8103286:	611a      	str	r2, [r3, #16]
 8103288:	e004      	b.n	8103294 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	681b      	ldr	r3, [r3, #0]
 810328e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8103292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8103294:	2300      	movs	r3, #0
}
 8103296:	4618      	mov	r0, r3
 8103298:	3710      	adds	r7, #16
 810329a:	46bd      	mov	sp, r7
 810329c:	bd80      	pop	{r7, pc}
	...

081032a0 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81032a0:	b580      	push	{r7, lr}
 81032a2:	b084      	sub	sp, #16
 81032a4:	af00      	add	r7, sp, #0
 81032a6:	60f8      	str	r0, [r7, #12]
 81032a8:	460b      	mov	r3, r1
 81032aa:	607a      	str	r2, [r7, #4]
 81032ac:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81032ae:	4b37      	ldr	r3, [pc, #220]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	f023 0201 	bic.w	r2, r3, #1
 81032b6:	4935      	ldr	r1, [pc, #212]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	4313      	orrs	r3, r2
 81032bc:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	2b00      	cmp	r3, #0
 81032c2:	d123      	bne.n	810330c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81032c4:	f7fe fe24 	bl	8101f10 <HAL_GetCurrentCPUID>
 81032c8:	4603      	mov	r3, r0
 81032ca:	2b03      	cmp	r3, #3
 81032cc:	d158      	bne.n	8103380 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81032ce:	4b2f      	ldr	r3, [pc, #188]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 81032d0:	691b      	ldr	r3, [r3, #16]
 81032d2:	4a2e      	ldr	r2, [pc, #184]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 81032d4:	f023 0301 	bic.w	r3, r3, #1
 81032d8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032da:	4b2d      	ldr	r3, [pc, #180]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032dc:	691b      	ldr	r3, [r3, #16]
 81032de:	4a2c      	ldr	r2, [pc, #176]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032e0:	f043 0304 	orr.w	r3, r3, #4
 81032e4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81032e6:	f3bf 8f4f 	dsb	sy
}
 81032ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81032ec:	f3bf 8f6f 	isb	sy
}
 81032f0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81032f2:	7afb      	ldrb	r3, [r7, #11]
 81032f4:	2b01      	cmp	r3, #1
 81032f6:	d101      	bne.n	81032fc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81032f8:	bf30      	wfi
 81032fa:	e000      	b.n	81032fe <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81032fc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032fe:	4b24      	ldr	r3, [pc, #144]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103300:	691b      	ldr	r3, [r3, #16]
 8103302:	4a23      	ldr	r2, [pc, #140]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103304:	f023 0304 	bic.w	r3, r3, #4
 8103308:	6113      	str	r3, [r2, #16]
 810330a:	e03c      	b.n	8103386 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	2b01      	cmp	r3, #1
 8103310:	d123      	bne.n	810335a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103312:	f7fe fdfd 	bl	8101f10 <HAL_GetCurrentCPUID>
 8103316:	4603      	mov	r3, r0
 8103318:	2b01      	cmp	r3, #1
 810331a:	d133      	bne.n	8103384 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810331c:	4b1b      	ldr	r3, [pc, #108]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 810331e:	695b      	ldr	r3, [r3, #20]
 8103320:	4a1a      	ldr	r2, [pc, #104]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103322:	f023 0302 	bic.w	r3, r3, #2
 8103326:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103328:	4b19      	ldr	r3, [pc, #100]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810332a:	691b      	ldr	r3, [r3, #16]
 810332c:	4a18      	ldr	r2, [pc, #96]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810332e:	f043 0304 	orr.w	r3, r3, #4
 8103332:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103334:	f3bf 8f4f 	dsb	sy
}
 8103338:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810333a:	f3bf 8f6f 	isb	sy
}
 810333e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103340:	7afb      	ldrb	r3, [r7, #11]
 8103342:	2b01      	cmp	r3, #1
 8103344:	d101      	bne.n	810334a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103346:	bf30      	wfi
 8103348:	e000      	b.n	810334c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810334a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810334c:	4b10      	ldr	r3, [pc, #64]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810334e:	691b      	ldr	r3, [r3, #16]
 8103350:	4a0f      	ldr	r2, [pc, #60]	@ (8103390 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103352:	f023 0304 	bic.w	r3, r3, #4
 8103356:	6113      	str	r3, [r2, #16]
 8103358:	e015      	b.n	8103386 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810335a:	f7fe fdd9 	bl	8101f10 <HAL_GetCurrentCPUID>
 810335e:	4603      	mov	r3, r0
 8103360:	2b03      	cmp	r3, #3
 8103362:	d106      	bne.n	8103372 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103364:	4b09      	ldr	r3, [pc, #36]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103366:	691b      	ldr	r3, [r3, #16]
 8103368:	4a08      	ldr	r2, [pc, #32]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 810336a:	f023 0304 	bic.w	r3, r3, #4
 810336e:	6113      	str	r3, [r2, #16]
 8103370:	e009      	b.n	8103386 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103372:	4b06      	ldr	r3, [pc, #24]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103374:	695b      	ldr	r3, [r3, #20]
 8103376:	4a05      	ldr	r2, [pc, #20]	@ (810338c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103378:	f023 0304 	bic.w	r3, r3, #4
 810337c:	6153      	str	r3, [r2, #20]
 810337e:	e002      	b.n	8103386 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103380:	bf00      	nop
 8103382:	e000      	b.n	8103386 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103384:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103386:	3710      	adds	r7, #16
 8103388:	46bd      	mov	sp, r7
 810338a:	bd80      	pop	{r7, pc}
 810338c:	58024800 	.word	0x58024800
 8103390:	e000ed00 	.word	0xe000ed00

08103394 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103394:	b580      	push	{r7, lr}
 8103396:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103398:	f7fe fdba 	bl	8101f10 <HAL_GetCurrentCPUID>
 810339c:	4603      	mov	r3, r0
 810339e:	2b03      	cmp	r3, #3
 81033a0:	d101      	bne.n	81033a6 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81033a2:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81033a4:	e001      	b.n	81033aa <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81033a6:	bf40      	sev
    __WFE ();
 81033a8:	bf20      	wfe
}
 81033aa:	bf00      	nop
 81033ac:	bd80      	pop	{r7, pc}
	...

081033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81033b0:	b480      	push	{r7}
 81033b2:	b089      	sub	sp, #36	@ 0x24
 81033b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81033b6:	4bb3      	ldr	r3, [pc, #716]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033b8:	691b      	ldr	r3, [r3, #16]
 81033ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81033be:	2b18      	cmp	r3, #24
 81033c0:	f200 8155 	bhi.w	810366e <HAL_RCC_GetSysClockFreq+0x2be>
 81033c4:	a201      	add	r2, pc, #4	@ (adr r2, 81033cc <HAL_RCC_GetSysClockFreq+0x1c>)
 81033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033ca:	bf00      	nop
 81033cc:	08103431 	.word	0x08103431
 81033d0:	0810366f 	.word	0x0810366f
 81033d4:	0810366f 	.word	0x0810366f
 81033d8:	0810366f 	.word	0x0810366f
 81033dc:	0810366f 	.word	0x0810366f
 81033e0:	0810366f 	.word	0x0810366f
 81033e4:	0810366f 	.word	0x0810366f
 81033e8:	0810366f 	.word	0x0810366f
 81033ec:	08103457 	.word	0x08103457
 81033f0:	0810366f 	.word	0x0810366f
 81033f4:	0810366f 	.word	0x0810366f
 81033f8:	0810366f 	.word	0x0810366f
 81033fc:	0810366f 	.word	0x0810366f
 8103400:	0810366f 	.word	0x0810366f
 8103404:	0810366f 	.word	0x0810366f
 8103408:	0810366f 	.word	0x0810366f
 810340c:	0810345d 	.word	0x0810345d
 8103410:	0810366f 	.word	0x0810366f
 8103414:	0810366f 	.word	0x0810366f
 8103418:	0810366f 	.word	0x0810366f
 810341c:	0810366f 	.word	0x0810366f
 8103420:	0810366f 	.word	0x0810366f
 8103424:	0810366f 	.word	0x0810366f
 8103428:	0810366f 	.word	0x0810366f
 810342c:	08103463 	.word	0x08103463
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103430:	4b94      	ldr	r3, [pc, #592]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	f003 0320 	and.w	r3, r3, #32
 8103438:	2b00      	cmp	r3, #0
 810343a:	d009      	beq.n	8103450 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810343c:	4b91      	ldr	r3, [pc, #580]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	08db      	lsrs	r3, r3, #3
 8103442:	f003 0303 	and.w	r3, r3, #3
 8103446:	4a90      	ldr	r2, [pc, #576]	@ (8103688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103448:	fa22 f303 	lsr.w	r3, r2, r3
 810344c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810344e:	e111      	b.n	8103674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103450:	4b8d      	ldr	r3, [pc, #564]	@ (8103688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103452:	61bb      	str	r3, [r7, #24]
      break;
 8103454:	e10e      	b.n	8103674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103456:	4b8d      	ldr	r3, [pc, #564]	@ (810368c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103458:	61bb      	str	r3, [r7, #24]
      break;
 810345a:	e10b      	b.n	8103674 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810345c:	4b8c      	ldr	r3, [pc, #560]	@ (8103690 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810345e:	61bb      	str	r3, [r7, #24]
      break;
 8103460:	e108      	b.n	8103674 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103462:	4b88      	ldr	r3, [pc, #544]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103466:	f003 0303 	and.w	r3, r3, #3
 810346a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810346c:	4b85      	ldr	r3, [pc, #532]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810346e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103470:	091b      	lsrs	r3, r3, #4
 8103472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103476:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103478:	4b82      	ldr	r3, [pc, #520]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810347c:	f003 0301 	and.w	r3, r3, #1
 8103480:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103482:	4b80      	ldr	r3, [pc, #512]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103486:	08db      	lsrs	r3, r3, #3
 8103488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810348c:	68fa      	ldr	r2, [r7, #12]
 810348e:	fb02 f303 	mul.w	r3, r2, r3
 8103492:	ee07 3a90 	vmov	s15, r3
 8103496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810349a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810349e:	693b      	ldr	r3, [r7, #16]
 81034a0:	2b00      	cmp	r3, #0
 81034a2:	f000 80e1 	beq.w	8103668 <HAL_RCC_GetSysClockFreq+0x2b8>
 81034a6:	697b      	ldr	r3, [r7, #20]
 81034a8:	2b02      	cmp	r3, #2
 81034aa:	f000 8083 	beq.w	81035b4 <HAL_RCC_GetSysClockFreq+0x204>
 81034ae:	697b      	ldr	r3, [r7, #20]
 81034b0:	2b02      	cmp	r3, #2
 81034b2:	f200 80a1 	bhi.w	81035f8 <HAL_RCC_GetSysClockFreq+0x248>
 81034b6:	697b      	ldr	r3, [r7, #20]
 81034b8:	2b00      	cmp	r3, #0
 81034ba:	d003      	beq.n	81034c4 <HAL_RCC_GetSysClockFreq+0x114>
 81034bc:	697b      	ldr	r3, [r7, #20]
 81034be:	2b01      	cmp	r3, #1
 81034c0:	d056      	beq.n	8103570 <HAL_RCC_GetSysClockFreq+0x1c0>
 81034c2:	e099      	b.n	81035f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81034c4:	4b6f      	ldr	r3, [pc, #444]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034c6:	681b      	ldr	r3, [r3, #0]
 81034c8:	f003 0320 	and.w	r3, r3, #32
 81034cc:	2b00      	cmp	r3, #0
 81034ce:	d02d      	beq.n	810352c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81034d0:	4b6c      	ldr	r3, [pc, #432]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034d2:	681b      	ldr	r3, [r3, #0]
 81034d4:	08db      	lsrs	r3, r3, #3
 81034d6:	f003 0303 	and.w	r3, r3, #3
 81034da:	4a6b      	ldr	r2, [pc, #428]	@ (8103688 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81034dc:	fa22 f303 	lsr.w	r3, r2, r3
 81034e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	ee07 3a90 	vmov	s15, r3
 81034e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034ec:	693b      	ldr	r3, [r7, #16]
 81034ee:	ee07 3a90 	vmov	s15, r3
 81034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034fa:	4b62      	ldr	r3, [pc, #392]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81034fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103502:	ee07 3a90 	vmov	s15, r3
 8103506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810350a:	ed97 6a02 	vldr	s12, [r7, #8]
 810350e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810351a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810351e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103526:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810352a:	e087      	b.n	810363c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810352c:	693b      	ldr	r3, [r7, #16]
 810352e:	ee07 3a90 	vmov	s15, r3
 8103532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103536:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103698 <HAL_RCC_GetSysClockFreq+0x2e8>
 810353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810353e:	4b51      	ldr	r3, [pc, #324]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103546:	ee07 3a90 	vmov	s15, r3
 810354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810354e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103552:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810355e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103566:	ee67 7a27 	vmul.f32	s15, s14, s15
 810356a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810356e:	e065      	b.n	810363c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103570:	693b      	ldr	r3, [r7, #16]
 8103572:	ee07 3a90 	vmov	s15, r3
 8103576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810357a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810369c <HAL_RCC_GetSysClockFreq+0x2ec>
 810357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103582:	4b40      	ldr	r3, [pc, #256]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810358a:	ee07 3a90 	vmov	s15, r3
 810358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103592:	ed97 6a02 	vldr	s12, [r7, #8]
 8103596:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103694 <HAL_RCC_GetSysClockFreq+0x2e4>
 810359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81035b2:	e043      	b.n	810363c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81035b4:	693b      	ldr	r3, [r7, #16]
 81035b6:	ee07 3a90 	vmov	s15, r3
 81035ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81036a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 81035c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035c6:	4b2f      	ldr	r3, [pc, #188]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81035ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035ce:	ee07 3a90 	vmov	s15, r3
 81035d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81035da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103694 <HAL_RCC_GetSysClockFreq+0x2e4>
 81035de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81035ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81035f6:	e021      	b.n	810363c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81035f8:	693b      	ldr	r3, [r7, #16]
 81035fa:	ee07 3a90 	vmov	s15, r3
 81035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103602:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810369c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810360a:	4b1e      	ldr	r3, [pc, #120]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103612:	ee07 3a90 	vmov	s15, r3
 8103616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810361a:	ed97 6a02 	vldr	s12, [r7, #8]
 810361e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103694 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810362a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810362e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810363a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810363c:	4b11      	ldr	r3, [pc, #68]	@ (8103684 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103640:	0a5b      	lsrs	r3, r3, #9
 8103642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103646:	3301      	adds	r3, #1
 8103648:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810364a:	683b      	ldr	r3, [r7, #0]
 810364c:	ee07 3a90 	vmov	s15, r3
 8103650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103654:	edd7 6a07 	vldr	s13, [r7, #28]
 8103658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810365c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103660:	ee17 3a90 	vmov	r3, s15
 8103664:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103666:	e005      	b.n	8103674 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103668:	2300      	movs	r3, #0
 810366a:	61bb      	str	r3, [r7, #24]
      break;
 810366c:	e002      	b.n	8103674 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810366e:	4b07      	ldr	r3, [pc, #28]	@ (810368c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103670:	61bb      	str	r3, [r7, #24]
      break;
 8103672:	bf00      	nop
  }

  return sysclockfreq;
 8103674:	69bb      	ldr	r3, [r7, #24]
}
 8103676:	4618      	mov	r0, r3
 8103678:	3724      	adds	r7, #36	@ 0x24
 810367a:	46bd      	mov	sp, r7
 810367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103680:	4770      	bx	lr
 8103682:	bf00      	nop
 8103684:	58024400 	.word	0x58024400
 8103688:	03d09000 	.word	0x03d09000
 810368c:	003d0900 	.word	0x003d0900
 8103690:	017d7840 	.word	0x017d7840
 8103694:	46000000 	.word	0x46000000
 8103698:	4c742400 	.word	0x4c742400
 810369c:	4a742400 	.word	0x4a742400
 81036a0:	4bbebc20 	.word	0x4bbebc20

081036a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81036a4:	b580      	push	{r7, lr}
 81036a6:	b082      	sub	sp, #8
 81036a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81036aa:	f7ff fe81 	bl	81033b0 <HAL_RCC_GetSysClockFreq>
 81036ae:	4602      	mov	r2, r0
 81036b0:	4b11      	ldr	r3, [pc, #68]	@ (81036f8 <HAL_RCC_GetHCLKFreq+0x54>)
 81036b2:	699b      	ldr	r3, [r3, #24]
 81036b4:	0a1b      	lsrs	r3, r3, #8
 81036b6:	f003 030f 	and.w	r3, r3, #15
 81036ba:	4910      	ldr	r1, [pc, #64]	@ (81036fc <HAL_RCC_GetHCLKFreq+0x58>)
 81036bc:	5ccb      	ldrb	r3, [r1, r3]
 81036be:	f003 031f 	and.w	r3, r3, #31
 81036c2:	fa22 f303 	lsr.w	r3, r2, r3
 81036c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81036c8:	4b0b      	ldr	r3, [pc, #44]	@ (81036f8 <HAL_RCC_GetHCLKFreq+0x54>)
 81036ca:	699b      	ldr	r3, [r3, #24]
 81036cc:	f003 030f 	and.w	r3, r3, #15
 81036d0:	4a0a      	ldr	r2, [pc, #40]	@ (81036fc <HAL_RCC_GetHCLKFreq+0x58>)
 81036d2:	5cd3      	ldrb	r3, [r2, r3]
 81036d4:	f003 031f 	and.w	r3, r3, #31
 81036d8:	687a      	ldr	r2, [r7, #4]
 81036da:	fa22 f303 	lsr.w	r3, r2, r3
 81036de:	4a08      	ldr	r2, [pc, #32]	@ (8103700 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036e0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81036e2:	4b07      	ldr	r3, [pc, #28]	@ (8103700 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036e4:	681b      	ldr	r3, [r3, #0]
 81036e6:	4a07      	ldr	r2, [pc, #28]	@ (8103704 <HAL_RCC_GetHCLKFreq+0x60>)
 81036e8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81036ea:	4b05      	ldr	r3, [pc, #20]	@ (8103700 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036ec:	681b      	ldr	r3, [r3, #0]
}
 81036ee:	4618      	mov	r0, r3
 81036f0:	3708      	adds	r7, #8
 81036f2:	46bd      	mov	sp, r7
 81036f4:	bd80      	pop	{r7, pc}
 81036f6:	bf00      	nop
 81036f8:	58024400 	.word	0x58024400
 81036fc:	0810c040 	.word	0x0810c040
 8103700:	10000004 	.word	0x10000004
 8103704:	10000000 	.word	0x10000000

08103708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103708:	b580      	push	{r7, lr}
 810370a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810370c:	f7ff ffca 	bl	81036a4 <HAL_RCC_GetHCLKFreq>
 8103710:	4602      	mov	r2, r0
 8103712:	4b06      	ldr	r3, [pc, #24]	@ (810372c <HAL_RCC_GetPCLK1Freq+0x24>)
 8103714:	69db      	ldr	r3, [r3, #28]
 8103716:	091b      	lsrs	r3, r3, #4
 8103718:	f003 0307 	and.w	r3, r3, #7
 810371c:	4904      	ldr	r1, [pc, #16]	@ (8103730 <HAL_RCC_GetPCLK1Freq+0x28>)
 810371e:	5ccb      	ldrb	r3, [r1, r3]
 8103720:	f003 031f 	and.w	r3, r3, #31
 8103724:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103728:	4618      	mov	r0, r3
 810372a:	bd80      	pop	{r7, pc}
 810372c:	58024400 	.word	0x58024400
 8103730:	0810c040 	.word	0x0810c040

08103734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103738:	b0ca      	sub	sp, #296	@ 0x128
 810373a:	af00      	add	r7, sp, #0
 810373c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103740:	2300      	movs	r3, #0
 8103742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103746:	2300      	movs	r3, #0
 8103748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103754:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8103758:	2500      	movs	r5, #0
 810375a:	ea54 0305 	orrs.w	r3, r4, r5
 810375e:	d049      	beq.n	81037f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103766:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810376a:	d02f      	beq.n	81037cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 810376c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103770:	d828      	bhi.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103772:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103776:	d01a      	beq.n	81037ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103778:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810377c:	d822      	bhi.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810377e:	2b00      	cmp	r3, #0
 8103780:	d003      	beq.n	810378a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103786:	d007      	beq.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103788:	e01c      	b.n	81037c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810378a:	4bb8      	ldr	r3, [pc, #736]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810378e:	4ab7      	ldr	r2, [pc, #732]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103796:	e01a      	b.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810379c:	3308      	adds	r3, #8
 810379e:	2102      	movs	r1, #2
 81037a0:	4618      	mov	r0, r3
 81037a2:	f002 fb75 	bl	8105e90 <RCCEx_PLL2_Config>
 81037a6:	4603      	mov	r3, r0
 81037a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81037ac:	e00f      	b.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037b2:	3328      	adds	r3, #40	@ 0x28
 81037b4:	2102      	movs	r1, #2
 81037b6:	4618      	mov	r0, r3
 81037b8:	f002 fc1c 	bl	8105ff4 <RCCEx_PLL3_Config>
 81037bc:	4603      	mov	r3, r0
 81037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81037c2:	e004      	b.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81037c4:	2301      	movs	r3, #1
 81037c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81037ca:	e000      	b.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81037cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81037d2:	2b00      	cmp	r3, #0
 81037d4:	d10a      	bne.n	81037ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81037d6:	4ba5      	ldr	r3, [pc, #660]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81037da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81037e4:	4aa1      	ldr	r2, [pc, #644]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037e6:	430b      	orrs	r3, r1
 81037e8:	6513      	str	r3, [r2, #80]	@ 0x50
 81037ea:	e003      	b.n	81037f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81037f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8103800:	f04f 0900 	mov.w	r9, #0
 8103804:	ea58 0309 	orrs.w	r3, r8, r9
 8103808:	d047      	beq.n	810389a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810380a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103810:	2b04      	cmp	r3, #4
 8103812:	d82a      	bhi.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103814:	a201      	add	r2, pc, #4	@ (adr r2, 810381c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810381a:	bf00      	nop
 810381c:	08103831 	.word	0x08103831
 8103820:	0810383f 	.word	0x0810383f
 8103824:	08103855 	.word	0x08103855
 8103828:	08103873 	.word	0x08103873
 810382c:	08103873 	.word	0x08103873
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103830:	4b8e      	ldr	r3, [pc, #568]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103834:	4a8d      	ldr	r2, [pc, #564]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810383a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810383c:	e01a      	b.n	8103874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103842:	3308      	adds	r3, #8
 8103844:	2100      	movs	r1, #0
 8103846:	4618      	mov	r0, r3
 8103848:	f002 fb22 	bl	8105e90 <RCCEx_PLL2_Config>
 810384c:	4603      	mov	r3, r0
 810384e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103852:	e00f      	b.n	8103874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103858:	3328      	adds	r3, #40	@ 0x28
 810385a:	2100      	movs	r1, #0
 810385c:	4618      	mov	r0, r3
 810385e:	f002 fbc9 	bl	8105ff4 <RCCEx_PLL3_Config>
 8103862:	4603      	mov	r3, r0
 8103864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103868:	e004      	b.n	8103874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810386a:	2301      	movs	r3, #1
 810386c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103870:	e000      	b.n	8103874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103878:	2b00      	cmp	r3, #0
 810387a:	d10a      	bne.n	8103892 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810387c:	4b7b      	ldr	r3, [pc, #492]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810387e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103880:	f023 0107 	bic.w	r1, r3, #7
 8103884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810388a:	4a78      	ldr	r2, [pc, #480]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810388c:	430b      	orrs	r3, r1
 810388e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103890:	e003      	b.n	810389a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81038a6:	f04f 0b00 	mov.w	fp, #0
 81038aa:	ea5a 030b 	orrs.w	r3, sl, fp
 81038ae:	d04c      	beq.n	810394a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81038b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81038ba:	d030      	beq.n	810391e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81038bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81038c0:	d829      	bhi.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81038c2:	2bc0      	cmp	r3, #192	@ 0xc0
 81038c4:	d02d      	beq.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81038c6:	2bc0      	cmp	r3, #192	@ 0xc0
 81038c8:	d825      	bhi.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81038ca:	2b80      	cmp	r3, #128	@ 0x80
 81038cc:	d018      	beq.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81038ce:	2b80      	cmp	r3, #128	@ 0x80
 81038d0:	d821      	bhi.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d002      	beq.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81038d6:	2b40      	cmp	r3, #64	@ 0x40
 81038d8:	d007      	beq.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81038da:	e01c      	b.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038dc:	4b63      	ldr	r3, [pc, #396]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038e0:	4a62      	ldr	r2, [pc, #392]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81038e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81038e8:	e01c      	b.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038ee:	3308      	adds	r3, #8
 81038f0:	2100      	movs	r1, #0
 81038f2:	4618      	mov	r0, r3
 81038f4:	f002 facc 	bl	8105e90 <RCCEx_PLL2_Config>
 81038f8:	4603      	mov	r3, r0
 81038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81038fe:	e011      	b.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103904:	3328      	adds	r3, #40	@ 0x28
 8103906:	2100      	movs	r1, #0
 8103908:	4618      	mov	r0, r3
 810390a:	f002 fb73 	bl	8105ff4 <RCCEx_PLL3_Config>
 810390e:	4603      	mov	r3, r0
 8103910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103914:	e006      	b.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103916:	2301      	movs	r3, #1
 8103918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810391c:	e002      	b.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810391e:	bf00      	nop
 8103920:	e000      	b.n	8103924 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103928:	2b00      	cmp	r3, #0
 810392a:	d10a      	bne.n	8103942 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810392c:	4b4f      	ldr	r3, [pc, #316]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103930:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810393a:	4a4c      	ldr	r2, [pc, #304]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810393c:	430b      	orrs	r3, r1
 810393e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103940:	e003      	b.n	810394a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103952:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8103956:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810395a:	2300      	movs	r3, #0
 810395c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8103960:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103964:	460b      	mov	r3, r1
 8103966:	4313      	orrs	r3, r2
 8103968:	d053      	beq.n	8103a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810396e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103972:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103976:	d035      	beq.n	81039e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103978:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810397c:	d82e      	bhi.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810397e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103982:	d031      	beq.n	81039e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103984:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103988:	d828      	bhi.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810398a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810398e:	d01a      	beq.n	81039c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103994:	d822      	bhi.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103996:	2b00      	cmp	r3, #0
 8103998:	d003      	beq.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810399a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810399e:	d007      	beq.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81039a0:	e01c      	b.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039a2:	4b32      	ldr	r3, [pc, #200]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81039a6:	4a31      	ldr	r2, [pc, #196]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81039ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81039ae:	e01c      	b.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039b4:	3308      	adds	r3, #8
 81039b6:	2100      	movs	r1, #0
 81039b8:	4618      	mov	r0, r3
 81039ba:	f002 fa69 	bl	8105e90 <RCCEx_PLL2_Config>
 81039be:	4603      	mov	r3, r0
 81039c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81039c4:	e011      	b.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ca:	3328      	adds	r3, #40	@ 0x28
 81039cc:	2100      	movs	r1, #0
 81039ce:	4618      	mov	r0, r3
 81039d0:	f002 fb10 	bl	8105ff4 <RCCEx_PLL3_Config>
 81039d4:	4603      	mov	r3, r0
 81039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81039da:	e006      	b.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81039dc:	2301      	movs	r3, #1
 81039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81039e2:	e002      	b.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81039e4:	bf00      	nop
 81039e6:	e000      	b.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81039e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039ee:	2b00      	cmp	r3, #0
 81039f0:	d10b      	bne.n	8103a0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81039f2:	4b1e      	ldr	r3, [pc, #120]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81039f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103a02:	4a1a      	ldr	r2, [pc, #104]	@ (8103a6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a04:	430b      	orrs	r3, r1
 8103a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8103a08:	e003      	b.n	8103a12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a1a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103a1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103a22:	2300      	movs	r3, #0
 8103a24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8103a28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8103a2c:	460b      	mov	r3, r1
 8103a2e:	4313      	orrs	r3, r2
 8103a30:	d056      	beq.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103a3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103a3e:	d038      	beq.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103a40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103a44:	d831      	bhi.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103a4a:	d034      	beq.n	8103ab6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103a4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103a50:	d82b      	bhi.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103a56:	d01d      	beq.n	8103a94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103a58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103a5c:	d825      	bhi.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d006      	beq.n	8103a70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103a62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103a66:	d00a      	beq.n	8103a7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103a68:	e01f      	b.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a6a:	bf00      	nop
 8103a6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a70:	4ba2      	ldr	r3, [pc, #648]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a74:	4aa1      	ldr	r2, [pc, #644]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103a7c:	e01c      	b.n	8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a82:	3308      	adds	r3, #8
 8103a84:	2100      	movs	r1, #0
 8103a86:	4618      	mov	r0, r3
 8103a88:	f002 fa02 	bl	8105e90 <RCCEx_PLL2_Config>
 8103a8c:	4603      	mov	r3, r0
 8103a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103a92:	e011      	b.n	8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a98:	3328      	adds	r3, #40	@ 0x28
 8103a9a:	2100      	movs	r1, #0
 8103a9c:	4618      	mov	r0, r3
 8103a9e:	f002 faa9 	bl	8105ff4 <RCCEx_PLL3_Config>
 8103aa2:	4603      	mov	r3, r0
 8103aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103aa8:	e006      	b.n	8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103aaa:	2301      	movs	r3, #1
 8103aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ab0:	e002      	b.n	8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103ab2:	bf00      	nop
 8103ab4:	e000      	b.n	8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103abc:	2b00      	cmp	r3, #0
 8103abe:	d10b      	bne.n	8103ad8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103ac4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8103ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103acc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103ad0:	4a8a      	ldr	r2, [pc, #552]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ad2:	430b      	orrs	r3, r1
 8103ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8103ad6:	e003      	b.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ae8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103aec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8103af0:	2300      	movs	r3, #0
 8103af2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8103af6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8103afa:	460b      	mov	r3, r1
 8103afc:	4313      	orrs	r3, r2
 8103afe:	d03a      	beq.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103b06:	2b30      	cmp	r3, #48	@ 0x30
 8103b08:	d01f      	beq.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103b0a:	2b30      	cmp	r3, #48	@ 0x30
 8103b0c:	d819      	bhi.n	8103b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103b0e:	2b20      	cmp	r3, #32
 8103b10:	d00c      	beq.n	8103b2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103b12:	2b20      	cmp	r3, #32
 8103b14:	d815      	bhi.n	8103b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103b16:	2b00      	cmp	r3, #0
 8103b18:	d019      	beq.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103b1a:	2b10      	cmp	r3, #16
 8103b1c:	d111      	bne.n	8103b42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b1e:	4b77      	ldr	r3, [pc, #476]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b22:	4a76      	ldr	r2, [pc, #472]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103b2a:	e011      	b.n	8103b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b30:	3308      	adds	r3, #8
 8103b32:	2102      	movs	r1, #2
 8103b34:	4618      	mov	r0, r3
 8103b36:	f002 f9ab 	bl	8105e90 <RCCEx_PLL2_Config>
 8103b3a:	4603      	mov	r3, r0
 8103b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103b40:	e006      	b.n	8103b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103b42:	2301      	movs	r3, #1
 8103b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103b48:	e002      	b.n	8103b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103b4a:	bf00      	nop
 8103b4c:	e000      	b.n	8103b50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b54:	2b00      	cmp	r3, #0
 8103b56:	d10a      	bne.n	8103b6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103b58:	4b68      	ldr	r3, [pc, #416]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103b5c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8103b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103b66:	4a65      	ldr	r2, [pc, #404]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b68:	430b      	orrs	r3, r1
 8103b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103b6c:	e003      	b.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b7e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8103b82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8103b86:	2300      	movs	r3, #0
 8103b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103b8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8103b90:	460b      	mov	r3, r1
 8103b92:	4313      	orrs	r3, r2
 8103b94:	d051      	beq.n	8103c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103ba0:	d035      	beq.n	8103c0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103ba2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103ba6:	d82e      	bhi.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103ba8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103bac:	d031      	beq.n	8103c12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103bae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103bb2:	d828      	bhi.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103bb8:	d01a      	beq.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103bbe:	d822      	bhi.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103bc0:	2b00      	cmp	r3, #0
 8103bc2:	d003      	beq.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103bc8:	d007      	beq.n	8103bda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103bca:	e01c      	b.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bd0:	4a4a      	ldr	r2, [pc, #296]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103bd8:	e01c      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bde:	3308      	adds	r3, #8
 8103be0:	2100      	movs	r1, #0
 8103be2:	4618      	mov	r0, r3
 8103be4:	f002 f954 	bl	8105e90 <RCCEx_PLL2_Config>
 8103be8:	4603      	mov	r3, r0
 8103bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103bee:	e011      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bf4:	3328      	adds	r3, #40	@ 0x28
 8103bf6:	2100      	movs	r1, #0
 8103bf8:	4618      	mov	r0, r3
 8103bfa:	f002 f9fb 	bl	8105ff4 <RCCEx_PLL3_Config>
 8103bfe:	4603      	mov	r3, r0
 8103c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103c04:	e006      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c06:	2301      	movs	r3, #1
 8103c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103c0c:	e002      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103c0e:	bf00      	nop
 8103c10:	e000      	b.n	8103c14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c18:	2b00      	cmp	r3, #0
 8103c1a:	d10a      	bne.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103c1c:	4b37      	ldr	r3, [pc, #220]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103c20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103c2a:	4a34      	ldr	r2, [pc, #208]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c2c:	430b      	orrs	r3, r1
 8103c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103c30:	e003      	b.n	8103c3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8103c46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103c4a:	2300      	movs	r3, #0
 8103c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103c50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103c54:	460b      	mov	r3, r1
 8103c56:	4313      	orrs	r3, r2
 8103c58:	d056      	beq.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103c64:	d033      	beq.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103c66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103c6a:	d82c      	bhi.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103c70:	d02f      	beq.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103c76:	d826      	bhi.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103c7c:	d02b      	beq.n	8103cd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103c7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103c82:	d820      	bhi.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103c88:	d012      	beq.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103c8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103c8e:	d81a      	bhi.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d022      	beq.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103c98:	d115      	bne.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c9e:	3308      	adds	r3, #8
 8103ca0:	2101      	movs	r1, #1
 8103ca2:	4618      	mov	r0, r3
 8103ca4:	f002 f8f4 	bl	8105e90 <RCCEx_PLL2_Config>
 8103ca8:	4603      	mov	r3, r0
 8103caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103cae:	e015      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cb4:	3328      	adds	r3, #40	@ 0x28
 8103cb6:	2101      	movs	r1, #1
 8103cb8:	4618      	mov	r0, r3
 8103cba:	f002 f99b 	bl	8105ff4 <RCCEx_PLL3_Config>
 8103cbe:	4603      	mov	r3, r0
 8103cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103cc4:	e00a      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103cc6:	2301      	movs	r3, #1
 8103cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ccc:	e006      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cce:	bf00      	nop
 8103cd0:	e004      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cd2:	bf00      	nop
 8103cd4:	e002      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cd6:	bf00      	nop
 8103cd8:	e000      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ce0:	2b00      	cmp	r3, #0
 8103ce2:	d10d      	bne.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103ce4:	4b05      	ldr	r3, [pc, #20]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103ce8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103cf2:	4a02      	ldr	r2, [pc, #8]	@ (8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103cf4:	430b      	orrs	r3, r1
 8103cf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8103cf8:	e006      	b.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103cfa:	bf00      	nop
 8103cfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d10:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103d14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103d18:	2300      	movs	r3, #0
 8103d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103d1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103d22:	460b      	mov	r3, r1
 8103d24:	4313      	orrs	r3, r2
 8103d26:	d055      	beq.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103d34:	d033      	beq.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103d3a:	d82c      	bhi.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103d40:	d02f      	beq.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103d46:	d826      	bhi.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103d4c:	d02b      	beq.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103d4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103d52:	d820      	bhi.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103d58:	d012      	beq.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103d5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103d5e:	d81a      	bhi.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d60:	2b00      	cmp	r3, #0
 8103d62:	d022      	beq.n	8103daa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103d64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103d68:	d115      	bne.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d6e:	3308      	adds	r3, #8
 8103d70:	2101      	movs	r1, #1
 8103d72:	4618      	mov	r0, r3
 8103d74:	f002 f88c 	bl	8105e90 <RCCEx_PLL2_Config>
 8103d78:	4603      	mov	r3, r0
 8103d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103d7e:	e015      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d84:	3328      	adds	r3, #40	@ 0x28
 8103d86:	2101      	movs	r1, #1
 8103d88:	4618      	mov	r0, r3
 8103d8a:	f002 f933 	bl	8105ff4 <RCCEx_PLL3_Config>
 8103d8e:	4603      	mov	r3, r0
 8103d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103d94:	e00a      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103d96:	2301      	movs	r3, #1
 8103d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103d9c:	e006      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d9e:	bf00      	nop
 8103da0:	e004      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103da2:	bf00      	nop
 8103da4:	e002      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103da6:	bf00      	nop
 8103da8:	e000      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	d10b      	bne.n	8103dcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103db4:	4ba4      	ldr	r3, [pc, #656]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103db8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103dc4:	4aa0      	ldr	r2, [pc, #640]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103dc6:	430b      	orrs	r3, r1
 8103dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8103dca:	e003      	b.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ddc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8103de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103de4:	2300      	movs	r3, #0
 8103de6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103dee:	460b      	mov	r3, r1
 8103df0:	4313      	orrs	r3, r2
 8103df2:	d037      	beq.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103dfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103dfe:	d00e      	beq.n	8103e1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8103e00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103e04:	d816      	bhi.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8103e06:	2b00      	cmp	r3, #0
 8103e08:	d018      	beq.n	8103e3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8103e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103e0e:	d111      	bne.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e10:	4b8d      	ldr	r3, [pc, #564]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e14:	4a8c      	ldr	r2, [pc, #560]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103e1c:	e00f      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e22:	3308      	adds	r3, #8
 8103e24:	2101      	movs	r1, #1
 8103e26:	4618      	mov	r0, r3
 8103e28:	f002 f832 	bl	8105e90 <RCCEx_PLL2_Config>
 8103e2c:	4603      	mov	r3, r0
 8103e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103e32:	e004      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103e34:	2301      	movs	r3, #1
 8103e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103e3a:	e000      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d10a      	bne.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103e46:	4b80      	ldr	r3, [pc, #512]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103e4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103e54:	4a7c      	ldr	r2, [pc, #496]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e56:	430b      	orrs	r3, r1
 8103e58:	6513      	str	r3, [r2, #80]	@ 0x50
 8103e5a:	e003      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8103e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103e74:	2300      	movs	r3, #0
 8103e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103e7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103e7e:	460b      	mov	r3, r1
 8103e80:	4313      	orrs	r3, r2
 8103e82:	d039      	beq.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103e8a:	2b03      	cmp	r3, #3
 8103e8c:	d81c      	bhi.n	8103ec8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8103e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8103e94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8103e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e94:	08103ed1 	.word	0x08103ed1
 8103e98:	08103ea5 	.word	0x08103ea5
 8103e9c:	08103eb3 	.word	0x08103eb3
 8103ea0:	08103ed1 	.word	0x08103ed1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ea4:	4b68      	ldr	r3, [pc, #416]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ea8:	4a67      	ldr	r2, [pc, #412]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103eb0:	e00f      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103eb6:	3308      	adds	r3, #8
 8103eb8:	2102      	movs	r1, #2
 8103eba:	4618      	mov	r0, r3
 8103ebc:	f001 ffe8 	bl	8105e90 <RCCEx_PLL2_Config>
 8103ec0:	4603      	mov	r3, r0
 8103ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103ec6:	e004      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103ec8:	2301      	movs	r3, #1
 8103eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ece:	e000      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8103ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ed6:	2b00      	cmp	r3, #0
 8103ed8:	d10a      	bne.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103eda:	4b5b      	ldr	r3, [pc, #364]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103ede:	f023 0103 	bic.w	r1, r3, #3
 8103ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103ee8:	4a57      	ldr	r2, [pc, #348]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103eea:	430b      	orrs	r3, r1
 8103eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103eee:	e003      	b.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103f08:	2300      	movs	r3, #0
 8103f0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8103f0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8103f12:	460b      	mov	r3, r1
 8103f14:	4313      	orrs	r3, r2
 8103f16:	f000 809f 	beq.w	8104058 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103f1a:	4b4c      	ldr	r3, [pc, #304]	@ (810404c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103f1c:	681b      	ldr	r3, [r3, #0]
 8103f1e:	4a4b      	ldr	r2, [pc, #300]	@ (810404c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103f24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103f26:	f7fc ff3d 	bl	8100da4 <HAL_GetTick>
 8103f2a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f2e:	e00b      	b.n	8103f48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103f30:	f7fc ff38 	bl	8100da4 <HAL_GetTick>
 8103f34:	4602      	mov	r2, r0
 8103f36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103f3a:	1ad3      	subs	r3, r2, r3
 8103f3c:	2b64      	cmp	r3, #100	@ 0x64
 8103f3e:	d903      	bls.n	8103f48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8103f40:	2303      	movs	r3, #3
 8103f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103f46:	e005      	b.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f48:	4b40      	ldr	r3, [pc, #256]	@ (810404c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103f50:	2b00      	cmp	r3, #0
 8103f52:	d0ed      	beq.n	8103f30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f58:	2b00      	cmp	r3, #0
 8103f5a:	d179      	bne.n	8104050 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103f68:	4053      	eors	r3, r2
 8103f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103f6e:	2b00      	cmp	r3, #0
 8103f70:	d015      	beq.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103f72:	4b35      	ldr	r3, [pc, #212]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103f7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103f7e:	4b32      	ldr	r3, [pc, #200]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103f82:	4a31      	ldr	r2, [pc, #196]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103f88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103f94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103f96:	4a2c      	ldr	r2, [pc, #176]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103f9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103faa:	d118      	bne.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103fac:	f7fc fefa 	bl	8100da4 <HAL_GetTick>
 8103fb0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fb4:	e00d      	b.n	8103fd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103fb6:	f7fc fef5 	bl	8100da4 <HAL_GetTick>
 8103fba:	4602      	mov	r2, r0
 8103fbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103fc0:	1ad2      	subs	r2, r2, r3
 8103fc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8103fc6:	429a      	cmp	r2, r3
 8103fc8:	d903      	bls.n	8103fd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8103fca:	2303      	movs	r3, #3
 8103fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8103fd0:	e005      	b.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103fd6:	f003 0302 	and.w	r3, r3, #2
 8103fda:	2b00      	cmp	r3, #0
 8103fdc:	d0eb      	beq.n	8103fb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8103fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fe2:	2b00      	cmp	r3, #0
 8103fe4:	d12b      	bne.n	810403e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103ff6:	d110      	bne.n	810401a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8103ff8:	4b13      	ldr	r3, [pc, #76]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ffa:	691b      	ldr	r3, [r3, #16]
 8103ffc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8104000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104008:	091b      	lsrs	r3, r3, #4
 810400a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810400e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8104012:	4a0d      	ldr	r2, [pc, #52]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104014:	430b      	orrs	r3, r1
 8104016:	6113      	str	r3, [r2, #16]
 8104018:	e005      	b.n	8104026 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810401a:	4b0b      	ldr	r3, [pc, #44]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810401c:	691b      	ldr	r3, [r3, #16]
 810401e:	4a0a      	ldr	r2, [pc, #40]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104020:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8104024:	6113      	str	r3, [r2, #16]
 8104026:	4b08      	ldr	r3, [pc, #32]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104028:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810402e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104036:	4a04      	ldr	r2, [pc, #16]	@ (8104048 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104038:	430b      	orrs	r3, r1
 810403a:	6713      	str	r3, [r2, #112]	@ 0x70
 810403c:	e00c      	b.n	8104058 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810403e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8104046:	e007      	b.n	8104058 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8104048:	58024400 	.word	0x58024400
 810404c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104060:	f002 0301 	and.w	r3, r2, #1
 8104064:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8104068:	2300      	movs	r3, #0
 810406a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810406e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8104072:	460b      	mov	r3, r1
 8104074:	4313      	orrs	r3, r2
 8104076:	f000 8089 	beq.w	810418c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810407e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104080:	2b28      	cmp	r3, #40	@ 0x28
 8104082:	d86b      	bhi.n	810415c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8104084:	a201      	add	r2, pc, #4	@ (adr r2, 810408c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8104086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810408a:	bf00      	nop
 810408c:	08104165 	.word	0x08104165
 8104090:	0810415d 	.word	0x0810415d
 8104094:	0810415d 	.word	0x0810415d
 8104098:	0810415d 	.word	0x0810415d
 810409c:	0810415d 	.word	0x0810415d
 81040a0:	0810415d 	.word	0x0810415d
 81040a4:	0810415d 	.word	0x0810415d
 81040a8:	0810415d 	.word	0x0810415d
 81040ac:	08104131 	.word	0x08104131
 81040b0:	0810415d 	.word	0x0810415d
 81040b4:	0810415d 	.word	0x0810415d
 81040b8:	0810415d 	.word	0x0810415d
 81040bc:	0810415d 	.word	0x0810415d
 81040c0:	0810415d 	.word	0x0810415d
 81040c4:	0810415d 	.word	0x0810415d
 81040c8:	0810415d 	.word	0x0810415d
 81040cc:	08104147 	.word	0x08104147
 81040d0:	0810415d 	.word	0x0810415d
 81040d4:	0810415d 	.word	0x0810415d
 81040d8:	0810415d 	.word	0x0810415d
 81040dc:	0810415d 	.word	0x0810415d
 81040e0:	0810415d 	.word	0x0810415d
 81040e4:	0810415d 	.word	0x0810415d
 81040e8:	0810415d 	.word	0x0810415d
 81040ec:	08104165 	.word	0x08104165
 81040f0:	0810415d 	.word	0x0810415d
 81040f4:	0810415d 	.word	0x0810415d
 81040f8:	0810415d 	.word	0x0810415d
 81040fc:	0810415d 	.word	0x0810415d
 8104100:	0810415d 	.word	0x0810415d
 8104104:	0810415d 	.word	0x0810415d
 8104108:	0810415d 	.word	0x0810415d
 810410c:	08104165 	.word	0x08104165
 8104110:	0810415d 	.word	0x0810415d
 8104114:	0810415d 	.word	0x0810415d
 8104118:	0810415d 	.word	0x0810415d
 810411c:	0810415d 	.word	0x0810415d
 8104120:	0810415d 	.word	0x0810415d
 8104124:	0810415d 	.word	0x0810415d
 8104128:	0810415d 	.word	0x0810415d
 810412c:	08104165 	.word	0x08104165
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104134:	3308      	adds	r3, #8
 8104136:	2101      	movs	r1, #1
 8104138:	4618      	mov	r0, r3
 810413a:	f001 fea9 	bl	8105e90 <RCCEx_PLL2_Config>
 810413e:	4603      	mov	r3, r0
 8104140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104144:	e00f      	b.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810414a:	3328      	adds	r3, #40	@ 0x28
 810414c:	2101      	movs	r1, #1
 810414e:	4618      	mov	r0, r3
 8104150:	f001 ff50 	bl	8105ff4 <RCCEx_PLL3_Config>
 8104154:	4603      	mov	r3, r0
 8104156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810415a:	e004      	b.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810415c:	2301      	movs	r3, #1
 810415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104162:	e000      	b.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8104164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810416a:	2b00      	cmp	r3, #0
 810416c:	d10a      	bne.n	8104184 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810416e:	4bbf      	ldr	r3, [pc, #764]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104172:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8104176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810417a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810417c:	4abb      	ldr	r2, [pc, #748]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810417e:	430b      	orrs	r3, r1
 8104180:	6553      	str	r3, [r2, #84]	@ 0x54
 8104182:	e003      	b.n	810418c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104194:	f002 0302 	and.w	r3, r2, #2
 8104198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810419c:	2300      	movs	r3, #0
 810419e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81041a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81041a6:	460b      	mov	r3, r1
 81041a8:	4313      	orrs	r3, r2
 81041aa:	d041      	beq.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81041b2:	2b05      	cmp	r3, #5
 81041b4:	d824      	bhi.n	8104200 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81041b6:	a201      	add	r2, pc, #4	@ (adr r2, 81041bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81041b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041bc:	08104209 	.word	0x08104209
 81041c0:	081041d5 	.word	0x081041d5
 81041c4:	081041eb 	.word	0x081041eb
 81041c8:	08104209 	.word	0x08104209
 81041cc:	08104209 	.word	0x08104209
 81041d0:	08104209 	.word	0x08104209
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041d8:	3308      	adds	r3, #8
 81041da:	2101      	movs	r1, #1
 81041dc:	4618      	mov	r0, r3
 81041de:	f001 fe57 	bl	8105e90 <RCCEx_PLL2_Config>
 81041e2:	4603      	mov	r3, r0
 81041e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81041e8:	e00f      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041ee:	3328      	adds	r3, #40	@ 0x28
 81041f0:	2101      	movs	r1, #1
 81041f2:	4618      	mov	r0, r3
 81041f4:	f001 fefe 	bl	8105ff4 <RCCEx_PLL3_Config>
 81041f8:	4603      	mov	r3, r0
 81041fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81041fe:	e004      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104200:	2301      	movs	r3, #1
 8104202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104206:	e000      	b.n	810420a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8104208:	bf00      	nop
    }

    if (ret == HAL_OK)
 810420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810420e:	2b00      	cmp	r3, #0
 8104210:	d10a      	bne.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104212:	4b96      	ldr	r3, [pc, #600]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104216:	f023 0107 	bic.w	r1, r3, #7
 810421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810421e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104220:	4a92      	ldr	r2, [pc, #584]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104222:	430b      	orrs	r3, r1
 8104224:	6553      	str	r3, [r2, #84]	@ 0x54
 8104226:	e003      	b.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810422c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104238:	f002 0304 	and.w	r3, r2, #4
 810423c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8104240:	2300      	movs	r3, #0
 8104242:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8104246:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810424a:	460b      	mov	r3, r1
 810424c:	4313      	orrs	r3, r2
 810424e:	d044      	beq.n	81042da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104258:	2b05      	cmp	r3, #5
 810425a:	d825      	bhi.n	81042a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810425c:	a201      	add	r2, pc, #4	@ (adr r2, 8104264 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104262:	bf00      	nop
 8104264:	081042b1 	.word	0x081042b1
 8104268:	0810427d 	.word	0x0810427d
 810426c:	08104293 	.word	0x08104293
 8104270:	081042b1 	.word	0x081042b1
 8104274:	081042b1 	.word	0x081042b1
 8104278:	081042b1 	.word	0x081042b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104280:	3308      	adds	r3, #8
 8104282:	2101      	movs	r1, #1
 8104284:	4618      	mov	r0, r3
 8104286:	f001 fe03 	bl	8105e90 <RCCEx_PLL2_Config>
 810428a:	4603      	mov	r3, r0
 810428c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104290:	e00f      	b.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104296:	3328      	adds	r3, #40	@ 0x28
 8104298:	2101      	movs	r1, #1
 810429a:	4618      	mov	r0, r3
 810429c:	f001 feaa 	bl	8105ff4 <RCCEx_PLL3_Config>
 81042a0:	4603      	mov	r3, r0
 81042a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81042a6:	e004      	b.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042a8:	2301      	movs	r3, #1
 81042aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81042ae:	e000      	b.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81042b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042b6:	2b00      	cmp	r3, #0
 81042b8:	d10b      	bne.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81042ba:	4b6c      	ldr	r3, [pc, #432]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81042be:	f023 0107 	bic.w	r1, r3, #7
 81042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81042ca:	4a68      	ldr	r2, [pc, #416]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042cc:	430b      	orrs	r3, r1
 81042ce:	6593      	str	r3, [r2, #88]	@ 0x58
 81042d0:	e003      	b.n	81042da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042e2:	f002 0320 	and.w	r3, r2, #32
 81042e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81042ea:	2300      	movs	r3, #0
 81042ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81042f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81042f4:	460b      	mov	r3, r1
 81042f6:	4313      	orrs	r3, r2
 81042f8:	d055      	beq.n	81043a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104302:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104306:	d033      	beq.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8104308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810430c:	d82c      	bhi.n	8104368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810430e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104312:	d02f      	beq.n	8104374 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104318:	d826      	bhi.n	8104368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810431a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810431e:	d02b      	beq.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8104320:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104324:	d820      	bhi.n	8104368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810432a:	d012      	beq.n	8104352 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810432c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104330:	d81a      	bhi.n	8104368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104332:	2b00      	cmp	r3, #0
 8104334:	d022      	beq.n	810437c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8104336:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810433a:	d115      	bne.n	8104368 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104340:	3308      	adds	r3, #8
 8104342:	2100      	movs	r1, #0
 8104344:	4618      	mov	r0, r3
 8104346:	f001 fda3 	bl	8105e90 <RCCEx_PLL2_Config>
 810434a:	4603      	mov	r3, r0
 810434c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104350:	e015      	b.n	810437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104356:	3328      	adds	r3, #40	@ 0x28
 8104358:	2102      	movs	r1, #2
 810435a:	4618      	mov	r0, r3
 810435c:	f001 fe4a 	bl	8105ff4 <RCCEx_PLL3_Config>
 8104360:	4603      	mov	r3, r0
 8104362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104366:	e00a      	b.n	810437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104368:	2301      	movs	r3, #1
 810436a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810436e:	e006      	b.n	810437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104370:	bf00      	nop
 8104372:	e004      	b.n	810437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104374:	bf00      	nop
 8104376:	e002      	b.n	810437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104378:	bf00      	nop
 810437a:	e000      	b.n	810437e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810437e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104382:	2b00      	cmp	r3, #0
 8104384:	d10b      	bne.n	810439e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104386:	4b39      	ldr	r3, [pc, #228]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810438a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104396:	4a35      	ldr	r2, [pc, #212]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104398:	430b      	orrs	r3, r1
 810439a:	6553      	str	r3, [r2, #84]	@ 0x54
 810439c:	e003      	b.n	81043a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810439e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81043a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81043b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81043b6:	2300      	movs	r3, #0
 81043b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81043bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81043c0:	460b      	mov	r3, r1
 81043c2:	4313      	orrs	r3, r2
 81043c4:	d058      	beq.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81043ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81043d2:	d033      	beq.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81043d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81043d8:	d82c      	bhi.n	8104434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81043de:	d02f      	beq.n	8104440 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81043e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81043e4:	d826      	bhi.n	8104434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81043ea:	d02b      	beq.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81043ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81043f0:	d820      	bhi.n	8104434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81043f6:	d012      	beq.n	810441e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81043f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81043fc:	d81a      	bhi.n	8104434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043fe:	2b00      	cmp	r3, #0
 8104400:	d022      	beq.n	8104448 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8104402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104406:	d115      	bne.n	8104434 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810440c:	3308      	adds	r3, #8
 810440e:	2100      	movs	r1, #0
 8104410:	4618      	mov	r0, r3
 8104412:	f001 fd3d 	bl	8105e90 <RCCEx_PLL2_Config>
 8104416:	4603      	mov	r3, r0
 8104418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810441c:	e015      	b.n	810444a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104422:	3328      	adds	r3, #40	@ 0x28
 8104424:	2102      	movs	r1, #2
 8104426:	4618      	mov	r0, r3
 8104428:	f001 fde4 	bl	8105ff4 <RCCEx_PLL3_Config>
 810442c:	4603      	mov	r3, r0
 810442e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104432:	e00a      	b.n	810444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104434:	2301      	movs	r3, #1
 8104436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810443a:	e006      	b.n	810444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810443c:	bf00      	nop
 810443e:	e004      	b.n	810444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104440:	bf00      	nop
 8104442:	e002      	b.n	810444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104444:	bf00      	nop
 8104446:	e000      	b.n	810444a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104448:	bf00      	nop
    }

    if (ret == HAL_OK)
 810444a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810444e:	2b00      	cmp	r3, #0
 8104450:	d10e      	bne.n	8104470 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104452:	4b06      	ldr	r3, [pc, #24]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104456:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810445e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104462:	4a02      	ldr	r2, [pc, #8]	@ (810446c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104464:	430b      	orrs	r3, r1
 8104466:	6593      	str	r3, [r2, #88]	@ 0x58
 8104468:	e006      	b.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810446a:	bf00      	nop
 810446c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104480:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8104484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8104488:	2300      	movs	r3, #0
 810448a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810448e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8104492:	460b      	mov	r3, r1
 8104494:	4313      	orrs	r3, r2
 8104496:	d055      	beq.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810449c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81044a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81044a4:	d033      	beq.n	810450e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81044a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81044aa:	d82c      	bhi.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81044ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81044b0:	d02f      	beq.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81044b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81044b6:	d826      	bhi.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81044b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81044bc:	d02b      	beq.n	8104516 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81044be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81044c2:	d820      	bhi.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81044c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81044c8:	d012      	beq.n	81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81044ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81044ce:	d81a      	bhi.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81044d0:	2b00      	cmp	r3, #0
 81044d2:	d022      	beq.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81044d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81044d8:	d115      	bne.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044de:	3308      	adds	r3, #8
 81044e0:	2100      	movs	r1, #0
 81044e2:	4618      	mov	r0, r3
 81044e4:	f001 fcd4 	bl	8105e90 <RCCEx_PLL2_Config>
 81044e8:	4603      	mov	r3, r0
 81044ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81044ee:	e015      	b.n	810451c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044f4:	3328      	adds	r3, #40	@ 0x28
 81044f6:	2102      	movs	r1, #2
 81044f8:	4618      	mov	r0, r3
 81044fa:	f001 fd7b 	bl	8105ff4 <RCCEx_PLL3_Config>
 81044fe:	4603      	mov	r3, r0
 8104500:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104504:	e00a      	b.n	810451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104506:	2301      	movs	r3, #1
 8104508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810450c:	e006      	b.n	810451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810450e:	bf00      	nop
 8104510:	e004      	b.n	810451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104512:	bf00      	nop
 8104514:	e002      	b.n	810451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104516:	bf00      	nop
 8104518:	e000      	b.n	810451c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810451a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810451c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104520:	2b00      	cmp	r3, #0
 8104522:	d10b      	bne.n	810453c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104524:	4ba1      	ldr	r3, [pc, #644]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104528:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104534:	4a9d      	ldr	r2, [pc, #628]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104536:	430b      	orrs	r3, r1
 8104538:	6593      	str	r3, [r2, #88]	@ 0x58
 810453a:	e003      	b.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810453c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104548:	e9d3 2300 	ldrd	r2, r3, [r3]
 810454c:	f002 0308 	and.w	r3, r2, #8
 8104550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8104554:	2300      	movs	r3, #0
 8104556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810455a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810455e:	460b      	mov	r3, r1
 8104560:	4313      	orrs	r3, r2
 8104562:	d01e      	beq.n	81045a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810456c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104570:	d10c      	bne.n	810458c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104576:	3328      	adds	r3, #40	@ 0x28
 8104578:	2102      	movs	r1, #2
 810457a:	4618      	mov	r0, r3
 810457c:	f001 fd3a 	bl	8105ff4 <RCCEx_PLL3_Config>
 8104580:	4603      	mov	r3, r0
 8104582:	2b00      	cmp	r3, #0
 8104584:	d002      	beq.n	810458c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8104586:	2301      	movs	r3, #1
 8104588:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810458c:	4b87      	ldr	r3, [pc, #540]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810458e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104590:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810459c:	4a83      	ldr	r2, [pc, #524]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810459e:	430b      	orrs	r3, r1
 81045a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045aa:	f002 0310 	and.w	r3, r2, #16
 81045ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81045b2:	2300      	movs	r3, #0
 81045b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81045b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81045bc:	460b      	mov	r3, r1
 81045be:	4313      	orrs	r3, r2
 81045c0:	d01e      	beq.n	8104600 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81045ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81045ce:	d10c      	bne.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045d4:	3328      	adds	r3, #40	@ 0x28
 81045d6:	2102      	movs	r1, #2
 81045d8:	4618      	mov	r0, r3
 81045da:	f001 fd0b 	bl	8105ff4 <RCCEx_PLL3_Config>
 81045de:	4603      	mov	r3, r0
 81045e0:	2b00      	cmp	r3, #0
 81045e2:	d002      	beq.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81045e4:	2301      	movs	r3, #1
 81045e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81045ea:	4b70      	ldr	r3, [pc, #448]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81045ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81045fa:	4a6c      	ldr	r2, [pc, #432]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045fc:	430b      	orrs	r3, r1
 81045fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104608:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810460c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8104610:	2300      	movs	r3, #0
 8104612:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8104616:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810461a:	460b      	mov	r3, r1
 810461c:	4313      	orrs	r3, r2
 810461e:	d03e      	beq.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8104620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104624:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810462c:	d022      	beq.n	8104674 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810462e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104632:	d81b      	bhi.n	810466c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8104634:	2b00      	cmp	r3, #0
 8104636:	d003      	beq.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8104638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810463c:	d00b      	beq.n	8104656 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810463e:	e015      	b.n	810466c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104644:	3308      	adds	r3, #8
 8104646:	2100      	movs	r1, #0
 8104648:	4618      	mov	r0, r3
 810464a:	f001 fc21 	bl	8105e90 <RCCEx_PLL2_Config>
 810464e:	4603      	mov	r3, r0
 8104650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104654:	e00f      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810465a:	3328      	adds	r3, #40	@ 0x28
 810465c:	2102      	movs	r1, #2
 810465e:	4618      	mov	r0, r3
 8104660:	f001 fcc8 	bl	8105ff4 <RCCEx_PLL3_Config>
 8104664:	4603      	mov	r3, r0
 8104666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810466a:	e004      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810466c:	2301      	movs	r3, #1
 810466e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104672:	e000      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8104674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810467a:	2b00      	cmp	r3, #0
 810467c:	d10b      	bne.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810467e:	4b4b      	ldr	r3, [pc, #300]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104682:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8104686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810468a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810468e:	4a47      	ldr	r2, [pc, #284]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104690:	430b      	orrs	r3, r1
 8104692:	6593      	str	r3, [r2, #88]	@ 0x58
 8104694:	e003      	b.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810469a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81046aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 81046ac:	2300      	movs	r3, #0
 81046ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81046b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81046b4:	460b      	mov	r3, r1
 81046b6:	4313      	orrs	r3, r2
 81046b8:	d03b      	beq.n	8104732 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81046c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81046c6:	d01f      	beq.n	8104708 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81046c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81046cc:	d818      	bhi.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81046ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81046d2:	d003      	beq.n	81046dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81046d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81046d8:	d007      	beq.n	81046ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81046da:	e011      	b.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046dc:	4b33      	ldr	r3, [pc, #204]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81046e0:	4a32      	ldr	r2, [pc, #200]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81046e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81046e8:	e00f      	b.n	810470a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046ee:	3328      	adds	r3, #40	@ 0x28
 81046f0:	2101      	movs	r1, #1
 81046f2:	4618      	mov	r0, r3
 81046f4:	f001 fc7e 	bl	8105ff4 <RCCEx_PLL3_Config>
 81046f8:	4603      	mov	r3, r0
 81046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81046fe:	e004      	b.n	810470a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104700:	2301      	movs	r3, #1
 8104702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104706:	e000      	b.n	810470a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8104708:	bf00      	nop
    }

    if (ret == HAL_OK)
 810470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810470e:	2b00      	cmp	r3, #0
 8104710:	d10b      	bne.n	810472a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104712:	4b26      	ldr	r3, [pc, #152]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104716:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104722:	4a22      	ldr	r2, [pc, #136]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104724:	430b      	orrs	r3, r1
 8104726:	6553      	str	r3, [r2, #84]	@ 0x54
 8104728:	e003      	b.n	8104732 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810472a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810472e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810473a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810473e:	673b      	str	r3, [r7, #112]	@ 0x70
 8104740:	2300      	movs	r3, #0
 8104742:	677b      	str	r3, [r7, #116]	@ 0x74
 8104744:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8104748:	460b      	mov	r3, r1
 810474a:	4313      	orrs	r3, r2
 810474c:	d034      	beq.n	81047b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104754:	2b00      	cmp	r3, #0
 8104756:	d003      	beq.n	8104760 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8104758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810475c:	d007      	beq.n	810476e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810475e:	e011      	b.n	8104784 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104760:	4b12      	ldr	r3, [pc, #72]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104764:	4a11      	ldr	r2, [pc, #68]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810476a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810476c:	e00e      	b.n	810478c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104772:	3308      	adds	r3, #8
 8104774:	2102      	movs	r1, #2
 8104776:	4618      	mov	r0, r3
 8104778:	f001 fb8a 	bl	8105e90 <RCCEx_PLL2_Config>
 810477c:	4603      	mov	r3, r0
 810477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104782:	e003      	b.n	810478c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8104784:	2301      	movs	r3, #1
 8104786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810478a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810478c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104790:	2b00      	cmp	r3, #0
 8104792:	d10d      	bne.n	81047b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104794:	4b05      	ldr	r3, [pc, #20]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104798:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81047a2:	4a02      	ldr	r2, [pc, #8]	@ (81047ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047a4:	430b      	orrs	r3, r1
 81047a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81047a8:	e006      	b.n	81047b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81047aa:	bf00      	nop
 81047ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81047b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81047c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 81047c6:	2300      	movs	r3, #0
 81047c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81047ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81047ce:	460b      	mov	r3, r1
 81047d0:	4313      	orrs	r3, r2
 81047d2:	d00c      	beq.n	81047ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047d8:	3328      	adds	r3, #40	@ 0x28
 81047da:	2102      	movs	r1, #2
 81047dc:	4618      	mov	r0, r3
 81047de:	f001 fc09 	bl	8105ff4 <RCCEx_PLL3_Config>
 81047e2:	4603      	mov	r3, r0
 81047e4:	2b00      	cmp	r3, #0
 81047e6:	d002      	beq.n	81047ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81047e8:	2301      	movs	r3, #1
 81047ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81047fa:	663b      	str	r3, [r7, #96]	@ 0x60
 81047fc:	2300      	movs	r3, #0
 81047fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8104800:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8104804:	460b      	mov	r3, r1
 8104806:	4313      	orrs	r3, r2
 8104808:	d038      	beq.n	810487c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810480e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104816:	d018      	beq.n	810484a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8104818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810481c:	d811      	bhi.n	8104842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810481e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104822:	d014      	beq.n	810484e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104828:	d80b      	bhi.n	8104842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810482a:	2b00      	cmp	r3, #0
 810482c:	d011      	beq.n	8104852 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810482e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104832:	d106      	bne.n	8104842 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104834:	4bc3      	ldr	r3, [pc, #780]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104838:	4ac2      	ldr	r2, [pc, #776]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810483a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810483e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104840:	e008      	b.n	8104854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104842:	2301      	movs	r3, #1
 8104844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104848:	e004      	b.n	8104854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810484a:	bf00      	nop
 810484c:	e002      	b.n	8104854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810484e:	bf00      	nop
 8104850:	e000      	b.n	8104854 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104858:	2b00      	cmp	r3, #0
 810485a:	d10b      	bne.n	8104874 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810485c:	4bb9      	ldr	r3, [pc, #740]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810485e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104860:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810486c:	4ab5      	ldr	r2, [pc, #724]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810486e:	430b      	orrs	r3, r1
 8104870:	6553      	str	r3, [r2, #84]	@ 0x54
 8104872:	e003      	b.n	810487c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104884:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8104888:	65bb      	str	r3, [r7, #88]	@ 0x58
 810488a:	2300      	movs	r3, #0
 810488c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810488e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104892:	460b      	mov	r3, r1
 8104894:	4313      	orrs	r3, r2
 8104896:	d009      	beq.n	81048ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104898:	4baa      	ldr	r3, [pc, #680]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810489a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810489c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81048a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81048a6:	4aa7      	ldr	r2, [pc, #668]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048a8:	430b      	orrs	r3, r1
 81048aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81048b8:	653b      	str	r3, [r7, #80]	@ 0x50
 81048ba:	2300      	movs	r3, #0
 81048bc:	657b      	str	r3, [r7, #84]	@ 0x54
 81048be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81048c2:	460b      	mov	r3, r1
 81048c4:	4313      	orrs	r3, r2
 81048c6:	d00a      	beq.n	81048de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81048c8:	4b9e      	ldr	r3, [pc, #632]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048ca:	691b      	ldr	r3, [r3, #16]
 81048cc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81048d8:	4a9a      	ldr	r2, [pc, #616]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048da:	430b      	orrs	r3, r1
 81048dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81048ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 81048ec:	2300      	movs	r3, #0
 81048ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81048f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81048f4:	460b      	mov	r3, r1
 81048f6:	4313      	orrs	r3, r2
 81048f8:	d009      	beq.n	810490e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81048fa:	4b92      	ldr	r3, [pc, #584]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81048fe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8104902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104908:	4a8e      	ldr	r2, [pc, #568]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810490a:	430b      	orrs	r3, r1
 810490c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104916:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 810491a:	643b      	str	r3, [r7, #64]	@ 0x40
 810491c:	2300      	movs	r3, #0
 810491e:	647b      	str	r3, [r7, #68]	@ 0x44
 8104920:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8104924:	460b      	mov	r3, r1
 8104926:	4313      	orrs	r3, r2
 8104928:	d00e      	beq.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810492a:	4b86      	ldr	r3, [pc, #536]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810492c:	691b      	ldr	r3, [r3, #16]
 810492e:	4a85      	ldr	r2, [pc, #532]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104930:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8104934:	6113      	str	r3, [r2, #16]
 8104936:	4b83      	ldr	r3, [pc, #524]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104938:	6919      	ldr	r1, [r3, #16]
 810493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810493e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104942:	4a80      	ldr	r2, [pc, #512]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104944:	430b      	orrs	r3, r1
 8104946:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104950:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8104954:	63bb      	str	r3, [r7, #56]	@ 0x38
 8104956:	2300      	movs	r3, #0
 8104958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810495a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810495e:	460b      	mov	r3, r1
 8104960:	4313      	orrs	r3, r2
 8104962:	d009      	beq.n	8104978 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104964:	4b77      	ldr	r3, [pc, #476]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104968:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810496c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104972:	4a74      	ldr	r2, [pc, #464]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104974:	430b      	orrs	r3, r1
 8104976:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104980:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8104984:	633b      	str	r3, [r7, #48]	@ 0x30
 8104986:	2300      	movs	r3, #0
 8104988:	637b      	str	r3, [r7, #52]	@ 0x34
 810498a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810498e:	460b      	mov	r3, r1
 8104990:	4313      	orrs	r3, r2
 8104992:	d00a      	beq.n	81049aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104994:	4b6b      	ldr	r3, [pc, #428]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104998:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 810499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81049a4:	4a67      	ldr	r2, [pc, #412]	@ (8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049a6:	430b      	orrs	r3, r1
 81049a8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049b2:	2100      	movs	r1, #0
 81049b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 81049b6:	f003 0301 	and.w	r3, r3, #1
 81049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81049bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81049c0:	460b      	mov	r3, r1
 81049c2:	4313      	orrs	r3, r2
 81049c4:	d011      	beq.n	81049ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049ca:	3308      	adds	r3, #8
 81049cc:	2100      	movs	r1, #0
 81049ce:	4618      	mov	r0, r3
 81049d0:	f001 fa5e 	bl	8105e90 <RCCEx_PLL2_Config>
 81049d4:	4603      	mov	r3, r0
 81049d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81049da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81049de:	2b00      	cmp	r3, #0
 81049e0:	d003      	beq.n	81049ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81049e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049f2:	2100      	movs	r1, #0
 81049f4:	6239      	str	r1, [r7, #32]
 81049f6:	f003 0302 	and.w	r3, r3, #2
 81049fa:	627b      	str	r3, [r7, #36]	@ 0x24
 81049fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104a00:	460b      	mov	r3, r1
 8104a02:	4313      	orrs	r3, r2
 8104a04:	d011      	beq.n	8104a2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a0a:	3308      	adds	r3, #8
 8104a0c:	2101      	movs	r1, #1
 8104a0e:	4618      	mov	r0, r3
 8104a10:	f001 fa3e 	bl	8105e90 <RCCEx_PLL2_Config>
 8104a14:	4603      	mov	r3, r0
 8104a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a1e:	2b00      	cmp	r3, #0
 8104a20:	d003      	beq.n	8104a2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a32:	2100      	movs	r1, #0
 8104a34:	61b9      	str	r1, [r7, #24]
 8104a36:	f003 0304 	and.w	r3, r3, #4
 8104a3a:	61fb      	str	r3, [r7, #28]
 8104a3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104a40:	460b      	mov	r3, r1
 8104a42:	4313      	orrs	r3, r2
 8104a44:	d011      	beq.n	8104a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a4a:	3308      	adds	r3, #8
 8104a4c:	2102      	movs	r1, #2
 8104a4e:	4618      	mov	r0, r3
 8104a50:	f001 fa1e 	bl	8105e90 <RCCEx_PLL2_Config>
 8104a54:	4603      	mov	r3, r0
 8104a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a5e:	2b00      	cmp	r3, #0
 8104a60:	d003      	beq.n	8104a6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a72:	2100      	movs	r1, #0
 8104a74:	6139      	str	r1, [r7, #16]
 8104a76:	f003 0308 	and.w	r3, r3, #8
 8104a7a:	617b      	str	r3, [r7, #20]
 8104a7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104a80:	460b      	mov	r3, r1
 8104a82:	4313      	orrs	r3, r2
 8104a84:	d011      	beq.n	8104aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a8a:	3328      	adds	r3, #40	@ 0x28
 8104a8c:	2100      	movs	r1, #0
 8104a8e:	4618      	mov	r0, r3
 8104a90:	f001 fab0 	bl	8105ff4 <RCCEx_PLL3_Config>
 8104a94:	4603      	mov	r3, r0
 8104a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8104a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a9e:	2b00      	cmp	r3, #0
 8104aa0:	d003      	beq.n	8104aaa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104aa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ab2:	2100      	movs	r1, #0
 8104ab4:	60b9      	str	r1, [r7, #8]
 8104ab6:	f003 0310 	and.w	r3, r3, #16
 8104aba:	60fb      	str	r3, [r7, #12]
 8104abc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104ac0:	460b      	mov	r3, r1
 8104ac2:	4313      	orrs	r3, r2
 8104ac4:	d011      	beq.n	8104aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104aca:	3328      	adds	r3, #40	@ 0x28
 8104acc:	2101      	movs	r1, #1
 8104ace:	4618      	mov	r0, r3
 8104ad0:	f001 fa90 	bl	8105ff4 <RCCEx_PLL3_Config>
 8104ad4:	4603      	mov	r3, r0
 8104ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ade:	2b00      	cmp	r3, #0
 8104ae0:	d003      	beq.n	8104aea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104af2:	2100      	movs	r1, #0
 8104af4:	6039      	str	r1, [r7, #0]
 8104af6:	f003 0320 	and.w	r3, r3, #32
 8104afa:	607b      	str	r3, [r7, #4]
 8104afc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104b00:	460b      	mov	r3, r1
 8104b02:	4313      	orrs	r3, r2
 8104b04:	d011      	beq.n	8104b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b0a:	3328      	adds	r3, #40	@ 0x28
 8104b0c:	2102      	movs	r1, #2
 8104b0e:	4618      	mov	r0, r3
 8104b10:	f001 fa70 	bl	8105ff4 <RCCEx_PLL3_Config>
 8104b14:	4603      	mov	r3, r0
 8104b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b1e:	2b00      	cmp	r3, #0
 8104b20:	d003      	beq.n	8104b2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8104b2a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8104b2e:	2b00      	cmp	r3, #0
 8104b30:	d101      	bne.n	8104b36 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8104b32:	2300      	movs	r3, #0
 8104b34:	e000      	b.n	8104b38 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8104b36:	2301      	movs	r3, #1
}
 8104b38:	4618      	mov	r0, r3
 8104b3a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8104b3e:	46bd      	mov	sp, r7
 8104b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104b44:	58024400 	.word	0x58024400

08104b48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104b48:	b580      	push	{r7, lr}
 8104b4a:	b090      	sub	sp, #64	@ 0x40
 8104b4c:	af00      	add	r7, sp, #0
 8104b4e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104b56:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8104b5a:	430b      	orrs	r3, r1
 8104b5c:	f040 8094 	bne.w	8104c88 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104b60:	4b9e      	ldr	r3, [pc, #632]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104b64:	f003 0307 	and.w	r3, r3, #7
 8104b68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104b6c:	2b04      	cmp	r3, #4
 8104b6e:	f200 8087 	bhi.w	8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104b72:	a201      	add	r2, pc, #4	@ (adr r2, 8104b78 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b78:	08104b8d 	.word	0x08104b8d
 8104b7c:	08104bb5 	.word	0x08104bb5
 8104b80:	08104bdd 	.word	0x08104bdd
 8104b84:	08104c79 	.word	0x08104c79
 8104b88:	08104c05 	.word	0x08104c05
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104b8c:	4b93      	ldr	r3, [pc, #588]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104b94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104b98:	d108      	bne.n	8104bac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104b9e:	4618      	mov	r0, r3
 8104ba0:	f001 f810 	bl	8105bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ba8:	f000 bd45 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bac:	2300      	movs	r3, #0
 8104bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104bb0:	f000 bd41 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104bb4:	4b89      	ldr	r3, [pc, #548]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104bb6:	681b      	ldr	r3, [r3, #0]
 8104bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104bbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104bc0:	d108      	bne.n	8104bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104bc2:	f107 0318 	add.w	r3, r7, #24
 8104bc6:	4618      	mov	r0, r3
 8104bc8:	f000 fd54 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104bcc:	69bb      	ldr	r3, [r7, #24]
 8104bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104bd0:	f000 bd31 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bd4:	2300      	movs	r3, #0
 8104bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104bd8:	f000 bd2d 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104bdc:	4b7f      	ldr	r3, [pc, #508]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104be8:	d108      	bne.n	8104bfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104bea:	f107 030c 	add.w	r3, r7, #12
 8104bee:	4618      	mov	r0, r3
 8104bf0:	f000 fe94 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104bf4:	68fb      	ldr	r3, [r7, #12]
 8104bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104bf8:	f000 bd1d 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104bfc:	2300      	movs	r3, #0
 8104bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c00:	f000 bd19 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104c04:	4b75      	ldr	r3, [pc, #468]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104c0c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104c0e:	4b73      	ldr	r3, [pc, #460]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	f003 0304 	and.w	r3, r3, #4
 8104c16:	2b04      	cmp	r3, #4
 8104c18:	d10c      	bne.n	8104c34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8104c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c1c:	2b00      	cmp	r3, #0
 8104c1e:	d109      	bne.n	8104c34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104c20:	4b6e      	ldr	r3, [pc, #440]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	08db      	lsrs	r3, r3, #3
 8104c26:	f003 0303 	and.w	r3, r3, #3
 8104c2a:	4a6d      	ldr	r2, [pc, #436]	@ (8104de0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8104c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c32:	e01f      	b.n	8104c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104c34:	4b69      	ldr	r3, [pc, #420]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104c40:	d106      	bne.n	8104c50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104c48:	d102      	bne.n	8104c50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104c4a:	4b66      	ldr	r3, [pc, #408]	@ (8104de4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c4e:	e011      	b.n	8104c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104c50:	4b62      	ldr	r3, [pc, #392]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c5c:	d106      	bne.n	8104c6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104c64:	d102      	bne.n	8104c6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104c66:	4b60      	ldr	r3, [pc, #384]	@ (8104de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104c6a:	e003      	b.n	8104c74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104c6c:	2300      	movs	r3, #0
 8104c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104c70:	f000 bce1 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104c74:	f000 bcdf 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104c78:	4b5c      	ldr	r3, [pc, #368]	@ (8104dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c7c:	f000 bcdb 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104c80:	2300      	movs	r3, #0
 8104c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104c84:	f000 bcd7 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104c8c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8104c90:	430b      	orrs	r3, r1
 8104c92:	f040 80ad 	bne.w	8104df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8104c96:	4b51      	ldr	r3, [pc, #324]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104c9a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8104c9e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104ca6:	d056      	beq.n	8104d56 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8104ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104cae:	f200 8090 	bhi.w	8104dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104cb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8104cb6:	f000 8088 	beq.w	8104dca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8104cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104cbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8104cbe:	f200 8088 	bhi.w	8104dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104cc4:	2b80      	cmp	r3, #128	@ 0x80
 8104cc6:	d032      	beq.n	8104d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8104cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104cca:	2b80      	cmp	r3, #128	@ 0x80
 8104ccc:	f200 8081 	bhi.w	8104dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104cd2:	2b00      	cmp	r3, #0
 8104cd4:	d003      	beq.n	8104cde <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8104cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104cd8:	2b40      	cmp	r3, #64	@ 0x40
 8104cda:	d014      	beq.n	8104d06 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8104cdc:	e079      	b.n	8104dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104cde:	4b3f      	ldr	r3, [pc, #252]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ce0:	681b      	ldr	r3, [r3, #0]
 8104ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104ce6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104cea:	d108      	bne.n	8104cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104cf0:	4618      	mov	r0, r3
 8104cf2:	f000 ff67 	bl	8105bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cfa:	f000 bc9c 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cfe:	2300      	movs	r3, #0
 8104d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d02:	f000 bc98 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d06:	4b35      	ldr	r3, [pc, #212]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104d0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104d12:	d108      	bne.n	8104d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d14:	f107 0318 	add.w	r3, r7, #24
 8104d18:	4618      	mov	r0, r3
 8104d1a:	f000 fcab 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104d1e:	69bb      	ldr	r3, [r7, #24]
 8104d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d22:	f000 bc88 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d26:	2300      	movs	r3, #0
 8104d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d2a:	f000 bc84 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d30:	681b      	ldr	r3, [r3, #0]
 8104d32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104d36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104d3a:	d108      	bne.n	8104d4e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104d3c:	f107 030c 	add.w	r3, r7, #12
 8104d40:	4618      	mov	r0, r3
 8104d42:	f000 fdeb 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104d46:	68fb      	ldr	r3, [r7, #12]
 8104d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d4a:	f000 bc74 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d4e:	2300      	movs	r3, #0
 8104d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104d52:	f000 bc70 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104d56:	4b21      	ldr	r3, [pc, #132]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104d5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104d5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104d60:	4b1e      	ldr	r3, [pc, #120]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d62:	681b      	ldr	r3, [r3, #0]
 8104d64:	f003 0304 	and.w	r3, r3, #4
 8104d68:	2b04      	cmp	r3, #4
 8104d6a:	d10c      	bne.n	8104d86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104d6e:	2b00      	cmp	r3, #0
 8104d70:	d109      	bne.n	8104d86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104d72:	4b1a      	ldr	r3, [pc, #104]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	08db      	lsrs	r3, r3, #3
 8104d78:	f003 0303 	and.w	r3, r3, #3
 8104d7c:	4a18      	ldr	r2, [pc, #96]	@ (8104de0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8104d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104d84:	e01f      	b.n	8104dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104d86:	4b15      	ldr	r3, [pc, #84]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d88:	681b      	ldr	r3, [r3, #0]
 8104d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104d92:	d106      	bne.n	8104da2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104d96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104d9a:	d102      	bne.n	8104da2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104d9c:	4b11      	ldr	r3, [pc, #68]	@ (8104de4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104da0:	e011      	b.n	8104dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104da2:	4b0e      	ldr	r3, [pc, #56]	@ (8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104da4:	681b      	ldr	r3, [r3, #0]
 8104da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104dae:	d106      	bne.n	8104dbe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104db2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104db6:	d102      	bne.n	8104dbe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104db8:	4b0b      	ldr	r3, [pc, #44]	@ (8104de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104dbc:	e003      	b.n	8104dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104dbe:	2300      	movs	r3, #0
 8104dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104dc2:	f000 bc38 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104dc6:	f000 bc36 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104dca:	4b08      	ldr	r3, [pc, #32]	@ (8104dec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104dce:	f000 bc32 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104dd2:	2300      	movs	r3, #0
 8104dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104dd6:	f000 bc2e 	b.w	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104dda:	bf00      	nop
 8104ddc:	58024400 	.word	0x58024400
 8104de0:	03d09000 	.word	0x03d09000
 8104de4:	003d0900 	.word	0x003d0900
 8104de8:	017d7840 	.word	0x017d7840
 8104dec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104df4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8104df8:	430b      	orrs	r3, r1
 8104dfa:	f040 809c 	bne.w	8104f36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8104dfe:	4b9e      	ldr	r3, [pc, #632]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104e02:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8104e06:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104e0e:	d054      	beq.n	8104eba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104e16:	f200 808b 	bhi.w	8104f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104e20:	f000 8083 	beq.w	8104f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e26:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104e2a:	f200 8081 	bhi.w	8104f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104e34:	d02f      	beq.n	8104e96 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8104e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104e3c:	d878      	bhi.n	8104f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e40:	2b00      	cmp	r3, #0
 8104e42:	d004      	beq.n	8104e4e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104e46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104e4a:	d012      	beq.n	8104e72 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104e4c:	e070      	b.n	8104f30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104e4e:	4b8a      	ldr	r3, [pc, #552]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104e56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104e5a:	d107      	bne.n	8104e6c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104e60:	4618      	mov	r0, r3
 8104e62:	f000 feaf 	bl	8105bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e6a:	e3e4      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e6c:	2300      	movs	r3, #0
 8104e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e70:	e3e1      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104e72:	4b81      	ldr	r3, [pc, #516]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104e7e:	d107      	bne.n	8104e90 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e80:	f107 0318 	add.w	r3, r7, #24
 8104e84:	4618      	mov	r0, r3
 8104e86:	f000 fbf5 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104e8a:	69bb      	ldr	r3, [r7, #24]
 8104e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e8e:	e3d2      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e90:	2300      	movs	r3, #0
 8104e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104e94:	e3cf      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104e96:	4b78      	ldr	r3, [pc, #480]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104ea2:	d107      	bne.n	8104eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104ea4:	f107 030c 	add.w	r3, r7, #12
 8104ea8:	4618      	mov	r0, r3
 8104eaa:	f000 fd37 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104eae:	68fb      	ldr	r3, [r7, #12]
 8104eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104eb2:	e3c0      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104eb4:	2300      	movs	r3, #0
 8104eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104eb8:	e3bd      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104eba:	4b6f      	ldr	r3, [pc, #444]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8104ec2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ec6:	681b      	ldr	r3, [r3, #0]
 8104ec8:	f003 0304 	and.w	r3, r3, #4
 8104ecc:	2b04      	cmp	r3, #4
 8104ece:	d10c      	bne.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8104ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104ed2:	2b00      	cmp	r3, #0
 8104ed4:	d109      	bne.n	8104eea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104ed6:	4b68      	ldr	r3, [pc, #416]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	08db      	lsrs	r3, r3, #3
 8104edc:	f003 0303 	and.w	r3, r3, #3
 8104ee0:	4a66      	ldr	r2, [pc, #408]	@ (810507c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8104ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104ee8:	e01e      	b.n	8104f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104eea:	4b63      	ldr	r3, [pc, #396]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104eec:	681b      	ldr	r3, [r3, #0]
 8104eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104ef6:	d106      	bne.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8104ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104efe:	d102      	bne.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104f00:	4b5f      	ldr	r3, [pc, #380]	@ (8105080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f04:	e010      	b.n	8104f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104f06:	4b5c      	ldr	r3, [pc, #368]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f08:	681b      	ldr	r3, [r3, #0]
 8104f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f12:	d106      	bne.n	8104f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104f16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f1a:	d102      	bne.n	8104f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104f1c:	4b59      	ldr	r3, [pc, #356]	@ (8105084 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f20:	e002      	b.n	8104f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104f22:	2300      	movs	r3, #0
 8104f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8104f26:	e386      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104f28:	e385      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104f2a:	4b57      	ldr	r3, [pc, #348]	@ (8105088 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f2e:	e382      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104f30:	2300      	movs	r3, #0
 8104f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104f34:	e37f      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f3a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8104f3e:	430b      	orrs	r3, r1
 8104f40:	f040 80a7 	bne.w	8105092 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104f44:	4b4c      	ldr	r3, [pc, #304]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104f48:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8104f4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8104f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104f54:	d055      	beq.n	8105002 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104f5c:	f200 8096 	bhi.w	810508c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104f66:	f000 8084 	beq.w	8105072 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8104f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104f70:	f200 808c 	bhi.w	810508c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104f7a:	d030      	beq.n	8104fde <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104f82:	f200 8083 	bhi.w	810508c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f88:	2b00      	cmp	r3, #0
 8104f8a:	d004      	beq.n	8104f96 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104f92:	d012      	beq.n	8104fba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104f94:	e07a      	b.n	810508c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104f96:	4b38      	ldr	r3, [pc, #224]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f98:	681b      	ldr	r3, [r3, #0]
 8104f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8104f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104fa2:	d107      	bne.n	8104fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104fa8:	4618      	mov	r0, r3
 8104faa:	f000 fe0b 	bl	8105bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104fb2:	e340      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104fb4:	2300      	movs	r3, #0
 8104fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104fb8:	e33d      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104fba:	4b2f      	ldr	r3, [pc, #188]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104fbc:	681b      	ldr	r3, [r3, #0]
 8104fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104fc6:	d107      	bne.n	8104fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104fc8:	f107 0318 	add.w	r3, r7, #24
 8104fcc:	4618      	mov	r0, r3
 8104fce:	f000 fb51 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104fd2:	69bb      	ldr	r3, [r7, #24]
 8104fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104fd6:	e32e      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104fd8:	2300      	movs	r3, #0
 8104fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104fdc:	e32b      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104fde:	4b26      	ldr	r3, [pc, #152]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104fea:	d107      	bne.n	8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104fec:	f107 030c 	add.w	r3, r7, #12
 8104ff0:	4618      	mov	r0, r3
 8104ff2:	f000 fc93 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104ff6:	68fb      	ldr	r3, [r7, #12]
 8104ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ffa:	e31c      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ffc:	2300      	movs	r3, #0
 8104ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105000:	e319      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105002:	4b1d      	ldr	r3, [pc, #116]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105006:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810500a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810500c:	4b1a      	ldr	r3, [pc, #104]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	f003 0304 	and.w	r3, r3, #4
 8105014:	2b04      	cmp	r3, #4
 8105016:	d10c      	bne.n	8105032 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8105018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810501a:	2b00      	cmp	r3, #0
 810501c:	d109      	bne.n	8105032 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810501e:	4b16      	ldr	r3, [pc, #88]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	08db      	lsrs	r3, r3, #3
 8105024:	f003 0303 	and.w	r3, r3, #3
 8105028:	4a14      	ldr	r2, [pc, #80]	@ (810507c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810502a:	fa22 f303 	lsr.w	r3, r2, r3
 810502e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105030:	e01e      	b.n	8105070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105032:	4b11      	ldr	r3, [pc, #68]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810503a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810503e:	d106      	bne.n	810504e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8105040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105046:	d102      	bne.n	810504e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105048:	4b0d      	ldr	r3, [pc, #52]	@ (8105080 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810504c:	e010      	b.n	8105070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810504e:	4b0a      	ldr	r3, [pc, #40]	@ (8105078 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810505a:	d106      	bne.n	810506a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810505c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810505e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105062:	d102      	bne.n	810506a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105064:	4b07      	ldr	r3, [pc, #28]	@ (8105084 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105068:	e002      	b.n	8105070 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810506a:	2300      	movs	r3, #0
 810506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810506e:	e2e2      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105070:	e2e1      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105072:	4b05      	ldr	r3, [pc, #20]	@ (8105088 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105076:	e2de      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105078:	58024400 	.word	0x58024400
 810507c:	03d09000 	.word	0x03d09000
 8105080:	003d0900 	.word	0x003d0900
 8105084:	017d7840 	.word	0x017d7840
 8105088:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810508c:	2300      	movs	r3, #0
 810508e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105090:	e2d1      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105096:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810509a:	430b      	orrs	r3, r1
 810509c:	f040 809c 	bne.w	81051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81050a0:	4b93      	ldr	r3, [pc, #588]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81050a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81050a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81050a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81050b0:	d054      	beq.n	810515c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81050b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81050b8:	f200 808b 	bhi.w	81051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81050c2:	f000 8083 	beq.w	81051cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81050c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81050cc:	f200 8081 	bhi.w	81051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81050d6:	d02f      	beq.n	8105138 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81050d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81050de:	d878      	bhi.n	81051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81050e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050e2:	2b00      	cmp	r3, #0
 81050e4:	d004      	beq.n	81050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81050e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81050ec:	d012      	beq.n	8105114 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81050ee:	e070      	b.n	81051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81050f0:	4b7f      	ldr	r3, [pc, #508]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81050f2:	681b      	ldr	r3, [r3, #0]
 81050f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81050f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81050fc:	d107      	bne.n	810510e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81050fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105102:	4618      	mov	r0, r3
 8105104:	f000 fd5e 	bl	8105bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810510c:	e293      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810510e:	2300      	movs	r3, #0
 8105110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105112:	e290      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105114:	4b76      	ldr	r3, [pc, #472]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105116:	681b      	ldr	r3, [r3, #0]
 8105118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810511c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105120:	d107      	bne.n	8105132 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105122:	f107 0318 	add.w	r3, r7, #24
 8105126:	4618      	mov	r0, r3
 8105128:	f000 faa4 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810512c:	69bb      	ldr	r3, [r7, #24]
 810512e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105130:	e281      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105132:	2300      	movs	r3, #0
 8105134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105136:	e27e      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105138:	4b6d      	ldr	r3, [pc, #436]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810513a:	681b      	ldr	r3, [r3, #0]
 810513c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105144:	d107      	bne.n	8105156 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105146:	f107 030c 	add.w	r3, r7, #12
 810514a:	4618      	mov	r0, r3
 810514c:	f000 fbe6 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105150:	68fb      	ldr	r3, [r7, #12]
 8105152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105154:	e26f      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105156:	2300      	movs	r3, #0
 8105158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810515a:	e26c      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810515c:	4b64      	ldr	r3, [pc, #400]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810515e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105160:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105164:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105166:	4b62      	ldr	r3, [pc, #392]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	f003 0304 	and.w	r3, r3, #4
 810516e:	2b04      	cmp	r3, #4
 8105170:	d10c      	bne.n	810518c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8105172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105174:	2b00      	cmp	r3, #0
 8105176:	d109      	bne.n	810518c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105178:	4b5d      	ldr	r3, [pc, #372]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	08db      	lsrs	r3, r3, #3
 810517e:	f003 0303 	and.w	r3, r3, #3
 8105182:	4a5c      	ldr	r2, [pc, #368]	@ (81052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105184:	fa22 f303 	lsr.w	r3, r2, r3
 8105188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810518a:	e01e      	b.n	81051ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810518c:	4b58      	ldr	r3, [pc, #352]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105198:	d106      	bne.n	81051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810519a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810519c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81051a0:	d102      	bne.n	81051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81051a2:	4b55      	ldr	r3, [pc, #340]	@ (81052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81051a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81051a6:	e010      	b.n	81051ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81051a8:	4b51      	ldr	r3, [pc, #324]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81051aa:	681b      	ldr	r3, [r3, #0]
 81051ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81051b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81051b4:	d106      	bne.n	81051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81051b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81051bc:	d102      	bne.n	81051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81051be:	4b4f      	ldr	r3, [pc, #316]	@ (81052fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81051c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81051c2:	e002      	b.n	81051ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81051c4:	2300      	movs	r3, #0
 81051c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81051c8:	e235      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81051ca:	e234      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81051cc:	4b4c      	ldr	r3, [pc, #304]	@ (8105300 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051d0:	e231      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81051d2:	2300      	movs	r3, #0
 81051d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051d6:	e22e      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81051d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81051dc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81051e0:	430b      	orrs	r3, r1
 81051e2:	f040 808f 	bne.w	8105304 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81051e6:	4b42      	ldr	r3, [pc, #264]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81051e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81051ea:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81051ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81051f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81051f6:	d06b      	beq.n	81052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81051fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81051fe:	d874      	bhi.n	81052ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105202:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105206:	d056      	beq.n	81052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8105208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810520a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810520e:	d86c      	bhi.n	81052ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105212:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105216:	d03b      	beq.n	8105290 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8105218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810521a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810521e:	d864      	bhi.n	81052ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105226:	d021      	beq.n	810526c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8105228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810522a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810522e:	d85c      	bhi.n	81052ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105232:	2b00      	cmp	r3, #0
 8105234:	d004      	beq.n	8105240 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8105236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810523c:	d004      	beq.n	8105248 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810523e:	e054      	b.n	81052ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8105240:	f7fe fa62 	bl	8103708 <HAL_RCC_GetPCLK1Freq>
 8105244:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105246:	e1f6      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105248:	4b29      	ldr	r3, [pc, #164]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810524a:	681b      	ldr	r3, [r3, #0]
 810524c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105254:	d107      	bne.n	8105266 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105256:	f107 0318 	add.w	r3, r7, #24
 810525a:	4618      	mov	r0, r3
 810525c:	f000 fa0a 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105260:	69fb      	ldr	r3, [r7, #28]
 8105262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105264:	e1e7      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105266:	2300      	movs	r3, #0
 8105268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810526a:	e1e4      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810526c:	4b20      	ldr	r3, [pc, #128]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810526e:	681b      	ldr	r3, [r3, #0]
 8105270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105278:	d107      	bne.n	810528a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810527a:	f107 030c 	add.w	r3, r7, #12
 810527e:	4618      	mov	r0, r3
 8105280:	f000 fb4c 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105284:	693b      	ldr	r3, [r7, #16]
 8105286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105288:	e1d5      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810528a:	2300      	movs	r3, #0
 810528c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810528e:	e1d2      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105290:	4b17      	ldr	r3, [pc, #92]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105292:	681b      	ldr	r3, [r3, #0]
 8105294:	f003 0304 	and.w	r3, r3, #4
 8105298:	2b04      	cmp	r3, #4
 810529a:	d109      	bne.n	81052b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810529c:	4b14      	ldr	r3, [pc, #80]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810529e:	681b      	ldr	r3, [r3, #0]
 81052a0:	08db      	lsrs	r3, r3, #3
 81052a2:	f003 0303 	and.w	r3, r3, #3
 81052a6:	4a13      	ldr	r2, [pc, #76]	@ (81052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81052a8:	fa22 f303 	lsr.w	r3, r2, r3
 81052ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052ae:	e1c2      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052b0:	2300      	movs	r3, #0
 81052b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052b4:	e1bf      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81052b6:	4b0e      	ldr	r3, [pc, #56]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81052be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81052c2:	d102      	bne.n	81052ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81052c4:	4b0c      	ldr	r3, [pc, #48]	@ (81052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052c8:	e1b5      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052ca:	2300      	movs	r3, #0
 81052cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052ce:	e1b2      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81052d0:	4b07      	ldr	r3, [pc, #28]	@ (81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81052d2:	681b      	ldr	r3, [r3, #0]
 81052d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81052d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81052dc:	d102      	bne.n	81052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81052de:	4b07      	ldr	r3, [pc, #28]	@ (81052fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81052e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052e2:	e1a8      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052e4:	2300      	movs	r3, #0
 81052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052e8:	e1a5      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81052ea:	2300      	movs	r3, #0
 81052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052ee:	e1a2      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81052f0:	58024400 	.word	0x58024400
 81052f4:	03d09000 	.word	0x03d09000
 81052f8:	003d0900 	.word	0x003d0900
 81052fc:	017d7840 	.word	0x017d7840
 8105300:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8105304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105308:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810530c:	430b      	orrs	r3, r1
 810530e:	d173      	bne.n	81053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105310:	4b9c      	ldr	r3, [pc, #624]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105318:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810531c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105320:	d02f      	beq.n	8105382 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8105322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105328:	d863      	bhi.n	81053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810532c:	2b00      	cmp	r3, #0
 810532e:	d004      	beq.n	810533a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8105330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105336:	d012      	beq.n	810535e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8105338:	e05b      	b.n	81053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810533a:	4b92      	ldr	r3, [pc, #584]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810533c:	681b      	ldr	r3, [r3, #0]
 810533e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105346:	d107      	bne.n	8105358 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105348:	f107 0318 	add.w	r3, r7, #24
 810534c:	4618      	mov	r0, r3
 810534e:	f000 f991 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105352:	69bb      	ldr	r3, [r7, #24]
 8105354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105356:	e16e      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105358:	2300      	movs	r3, #0
 810535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810535c:	e16b      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810535e:	4b89      	ldr	r3, [pc, #548]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810536a:	d107      	bne.n	810537c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810536c:	f107 030c 	add.w	r3, r7, #12
 8105370:	4618      	mov	r0, r3
 8105372:	f000 fad3 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105376:	697b      	ldr	r3, [r7, #20]
 8105378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810537a:	e15c      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810537c:	2300      	movs	r3, #0
 810537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105380:	e159      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105382:	4b80      	ldr	r3, [pc, #512]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105386:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810538a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810538c:	4b7d      	ldr	r3, [pc, #500]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810538e:	681b      	ldr	r3, [r3, #0]
 8105390:	f003 0304 	and.w	r3, r3, #4
 8105394:	2b04      	cmp	r3, #4
 8105396:	d10c      	bne.n	81053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8105398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810539a:	2b00      	cmp	r3, #0
 810539c:	d109      	bne.n	81053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810539e:	4b79      	ldr	r3, [pc, #484]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81053a0:	681b      	ldr	r3, [r3, #0]
 81053a2:	08db      	lsrs	r3, r3, #3
 81053a4:	f003 0303 	and.w	r3, r3, #3
 81053a8:	4a77      	ldr	r2, [pc, #476]	@ (8105588 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81053aa:	fa22 f303 	lsr.w	r3, r2, r3
 81053ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81053b0:	e01e      	b.n	81053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81053b2:	4b74      	ldr	r3, [pc, #464]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81053b4:	681b      	ldr	r3, [r3, #0]
 81053b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81053ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81053be:	d106      	bne.n	81053ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81053c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81053c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81053c6:	d102      	bne.n	81053ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81053c8:	4b70      	ldr	r3, [pc, #448]	@ (810558c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81053ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81053cc:	e010      	b.n	81053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81053ce:	4b6d      	ldr	r3, [pc, #436]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81053d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81053da:	d106      	bne.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81053dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81053de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81053e2:	d102      	bne.n	81053ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81053e4:	4b6a      	ldr	r3, [pc, #424]	@ (8105590 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81053e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81053e8:	e002      	b.n	81053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81053ea:	2300      	movs	r3, #0
 81053ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81053ee:	e122      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81053f0:	e121      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81053f2:	2300      	movs	r3, #0
 81053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053f6:	e11e      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81053f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81053fc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8105400:	430b      	orrs	r3, r1
 8105402:	d133      	bne.n	810546c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8105404:	4b5f      	ldr	r3, [pc, #380]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810540c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105410:	2b00      	cmp	r3, #0
 8105412:	d004      	beq.n	810541e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8105414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810541a:	d012      	beq.n	8105442 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810541c:	e023      	b.n	8105466 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810541e:	4b59      	ldr	r3, [pc, #356]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810542a:	d107      	bne.n	810543c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810542c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105430:	4618      	mov	r0, r3
 8105432:	f000 fbc7 	bl	8105bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810543a:	e0fc      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810543c:	2300      	movs	r3, #0
 810543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105440:	e0f9      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105442:	4b50      	ldr	r3, [pc, #320]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105444:	681b      	ldr	r3, [r3, #0]
 8105446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810544a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810544e:	d107      	bne.n	8105460 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105450:	f107 0318 	add.w	r3, r7, #24
 8105454:	4618      	mov	r0, r3
 8105456:	f000 f90d 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810545a:	6a3b      	ldr	r3, [r7, #32]
 810545c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810545e:	e0ea      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105460:	2300      	movs	r3, #0
 8105462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105464:	e0e7      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105466:	2300      	movs	r3, #0
 8105468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810546a:	e0e4      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810546c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105470:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8105474:	430b      	orrs	r3, r1
 8105476:	f040 808d 	bne.w	8105594 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810547a:	4b42      	ldr	r3, [pc, #264]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810547c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810547e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8105482:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810548a:	d06b      	beq.n	8105564 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810548e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105492:	d874      	bhi.n	810557e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810549a:	d056      	beq.n	810554a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810549e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81054a2:	d86c      	bhi.n	810557e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81054aa:	d03b      	beq.n	8105524 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81054ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81054b2:	d864      	bhi.n	810557e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81054b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81054ba:	d021      	beq.n	8105500 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81054bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81054c2:	d85c      	bhi.n	810557e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81054c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054c6:	2b00      	cmp	r3, #0
 81054c8:	d004      	beq.n	81054d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81054cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81054d0:	d004      	beq.n	81054dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81054d2:	e054      	b.n	810557e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81054d4:	f000 f8b8 	bl	8105648 <HAL_RCCEx_GetD3PCLK1Freq>
 81054d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81054da:	e0ac      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81054dc:	4b29      	ldr	r3, [pc, #164]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81054de:	681b      	ldr	r3, [r3, #0]
 81054e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81054e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81054e8:	d107      	bne.n	81054fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81054ea:	f107 0318 	add.w	r3, r7, #24
 81054ee:	4618      	mov	r0, r3
 81054f0:	f000 f8c0 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81054f4:	69fb      	ldr	r3, [r7, #28]
 81054f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054f8:	e09d      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054fa:	2300      	movs	r3, #0
 81054fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81054fe:	e09a      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105500:	4b20      	ldr	r3, [pc, #128]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105502:	681b      	ldr	r3, [r3, #0]
 8105504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810550c:	d107      	bne.n	810551e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810550e:	f107 030c 	add.w	r3, r7, #12
 8105512:	4618      	mov	r0, r3
 8105514:	f000 fa02 	bl	810591c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105518:	693b      	ldr	r3, [r7, #16]
 810551a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810551c:	e08b      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810551e:	2300      	movs	r3, #0
 8105520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105522:	e088      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105524:	4b17      	ldr	r3, [pc, #92]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	f003 0304 	and.w	r3, r3, #4
 810552c:	2b04      	cmp	r3, #4
 810552e:	d109      	bne.n	8105544 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105530:	4b14      	ldr	r3, [pc, #80]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105532:	681b      	ldr	r3, [r3, #0]
 8105534:	08db      	lsrs	r3, r3, #3
 8105536:	f003 0303 	and.w	r3, r3, #3
 810553a:	4a13      	ldr	r2, [pc, #76]	@ (8105588 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810553c:	fa22 f303 	lsr.w	r3, r2, r3
 8105540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105542:	e078      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105544:	2300      	movs	r3, #0
 8105546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105548:	e075      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810554a:	4b0e      	ldr	r3, [pc, #56]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105556:	d102      	bne.n	810555e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8105558:	4b0c      	ldr	r3, [pc, #48]	@ (810558c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810555c:	e06b      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810555e:	2300      	movs	r3, #0
 8105560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105562:	e068      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105564:	4b07      	ldr	r3, [pc, #28]	@ (8105584 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810556c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105570:	d102      	bne.n	8105578 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8105572:	4b07      	ldr	r3, [pc, #28]	@ (8105590 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8105574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105576:	e05e      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105578:	2300      	movs	r3, #0
 810557a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810557c:	e05b      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810557e:	2300      	movs	r3, #0
 8105580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105582:	e058      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105584:	58024400 	.word	0x58024400
 8105588:	03d09000 	.word	0x03d09000
 810558c:	003d0900 	.word	0x003d0900
 8105590:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105598:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 810559c:	430b      	orrs	r3, r1
 810559e:	d148      	bne.n	8105632 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81055a0:	4b27      	ldr	r3, [pc, #156]	@ (8105640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81055a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81055a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81055a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81055aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81055b0:	d02a      	beq.n	8105608 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81055b8:	d838      	bhi.n	810562c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055bc:	2b00      	cmp	r3, #0
 81055be:	d004      	beq.n	81055ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81055c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81055c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81055c6:	d00d      	beq.n	81055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81055c8:	e030      	b.n	810562c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81055ca:	4b1d      	ldr	r3, [pc, #116]	@ (8105640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81055d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81055d6:	d102      	bne.n	81055de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81055d8:	4b1a      	ldr	r3, [pc, #104]	@ (8105644 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81055da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81055dc:	e02b      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81055de:	2300      	movs	r3, #0
 81055e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055e2:	e028      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81055e4:	4b16      	ldr	r3, [pc, #88]	@ (8105640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81055e6:	681b      	ldr	r3, [r3, #0]
 81055e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81055ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81055f0:	d107      	bne.n	8105602 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81055f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81055f6:	4618      	mov	r0, r3
 81055f8:	f000 fae4 	bl	8105bc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81055fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105600:	e019      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105602:	2300      	movs	r3, #0
 8105604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105606:	e016      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105608:	4b0d      	ldr	r3, [pc, #52]	@ (8105640 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105614:	d107      	bne.n	8105626 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105616:	f107 0318 	add.w	r3, r7, #24
 810561a:	4618      	mov	r0, r3
 810561c:	f000 f82a 	bl	8105674 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105620:	69fb      	ldr	r3, [r7, #28]
 8105622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105624:	e007      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105626:	2300      	movs	r3, #0
 8105628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810562a:	e004      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810562c:	2300      	movs	r3, #0
 810562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105630:	e001      	b.n	8105636 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8105632:	2300      	movs	r3, #0
 8105634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8105636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8105638:	4618      	mov	r0, r3
 810563a:	3740      	adds	r7, #64	@ 0x40
 810563c:	46bd      	mov	sp, r7
 810563e:	bd80      	pop	{r7, pc}
 8105640:	58024400 	.word	0x58024400
 8105644:	017d7840 	.word	0x017d7840

08105648 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105648:	b580      	push	{r7, lr}
 810564a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810564c:	f7fe f82a 	bl	81036a4 <HAL_RCC_GetHCLKFreq>
 8105650:	4602      	mov	r2, r0
 8105652:	4b06      	ldr	r3, [pc, #24]	@ (810566c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105654:	6a1b      	ldr	r3, [r3, #32]
 8105656:	091b      	lsrs	r3, r3, #4
 8105658:	f003 0307 	and.w	r3, r3, #7
 810565c:	4904      	ldr	r1, [pc, #16]	@ (8105670 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810565e:	5ccb      	ldrb	r3, [r1, r3]
 8105660:	f003 031f 	and.w	r3, r3, #31
 8105664:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105668:	4618      	mov	r0, r3
 810566a:	bd80      	pop	{r7, pc}
 810566c:	58024400 	.word	0x58024400
 8105670:	0810c040 	.word	0x0810c040

08105674 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105674:	b480      	push	{r7}
 8105676:	b089      	sub	sp, #36	@ 0x24
 8105678:	af00      	add	r7, sp, #0
 810567a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810567c:	4ba1      	ldr	r3, [pc, #644]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105680:	f003 0303 	and.w	r3, r3, #3
 8105684:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105686:	4b9f      	ldr	r3, [pc, #636]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810568a:	0b1b      	lsrs	r3, r3, #12
 810568c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105690:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105692:	4b9c      	ldr	r3, [pc, #624]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105696:	091b      	lsrs	r3, r3, #4
 8105698:	f003 0301 	and.w	r3, r3, #1
 810569c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810569e:	4b99      	ldr	r3, [pc, #612]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81056a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81056a2:	08db      	lsrs	r3, r3, #3
 81056a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81056a8:	693a      	ldr	r2, [r7, #16]
 81056aa:	fb02 f303 	mul.w	r3, r2, r3
 81056ae:	ee07 3a90 	vmov	s15, r3
 81056b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81056ba:	697b      	ldr	r3, [r7, #20]
 81056bc:	2b00      	cmp	r3, #0
 81056be:	f000 8111 	beq.w	81058e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81056c2:	69bb      	ldr	r3, [r7, #24]
 81056c4:	2b02      	cmp	r3, #2
 81056c6:	f000 8083 	beq.w	81057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81056ca:	69bb      	ldr	r3, [r7, #24]
 81056cc:	2b02      	cmp	r3, #2
 81056ce:	f200 80a1 	bhi.w	8105814 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81056d2:	69bb      	ldr	r3, [r7, #24]
 81056d4:	2b00      	cmp	r3, #0
 81056d6:	d003      	beq.n	81056e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81056d8:	69bb      	ldr	r3, [r7, #24]
 81056da:	2b01      	cmp	r3, #1
 81056dc:	d056      	beq.n	810578c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81056de:	e099      	b.n	8105814 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81056e0:	4b88      	ldr	r3, [pc, #544]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81056e2:	681b      	ldr	r3, [r3, #0]
 81056e4:	f003 0320 	and.w	r3, r3, #32
 81056e8:	2b00      	cmp	r3, #0
 81056ea:	d02d      	beq.n	8105748 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81056ec:	4b85      	ldr	r3, [pc, #532]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	08db      	lsrs	r3, r3, #3
 81056f2:	f003 0303 	and.w	r3, r3, #3
 81056f6:	4a84      	ldr	r2, [pc, #528]	@ (8105908 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81056f8:	fa22 f303 	lsr.w	r3, r2, r3
 81056fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81056fe:	68bb      	ldr	r3, [r7, #8]
 8105700:	ee07 3a90 	vmov	s15, r3
 8105704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105708:	697b      	ldr	r3, [r7, #20]
 810570a:	ee07 3a90 	vmov	s15, r3
 810570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105716:	4b7b      	ldr	r3, [pc, #492]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810571a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810571e:	ee07 3a90 	vmov	s15, r3
 8105722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105726:	ed97 6a03 	vldr	s12, [r7, #12]
 810572a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 810590c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810572e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810573a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810573e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105742:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105746:	e087      	b.n	8105858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105748:	697b      	ldr	r3, [r7, #20]
 810574a:	ee07 3a90 	vmov	s15, r3
 810574e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105752:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105910 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810575a:	4b6a      	ldr	r3, [pc, #424]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105762:	ee07 3a90 	vmov	s15, r3
 8105766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810576a:	ed97 6a03 	vldr	s12, [r7, #12]
 810576e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 810590c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810577a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810577e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810578a:	e065      	b.n	8105858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810578c:	697b      	ldr	r3, [r7, #20]
 810578e:	ee07 3a90 	vmov	s15, r3
 8105792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105796:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810579a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810579e:	4b59      	ldr	r3, [pc, #356]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81057a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057a6:	ee07 3a90 	vmov	s15, r3
 81057aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81057b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 810590c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81057b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81057c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81057ce:	e043      	b.n	8105858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81057d0:	697b      	ldr	r3, [r7, #20]
 81057d2:	ee07 3a90 	vmov	s15, r3
 81057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105918 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057e2:	4b48      	ldr	r3, [pc, #288]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057ea:	ee07 3a90 	vmov	s15, r3
 81057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81057f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 810590c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810580e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105812:	e021      	b.n	8105858 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105814:	697b      	ldr	r3, [r7, #20]
 8105816:	ee07 3a90 	vmov	s15, r3
 810581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810581e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105914 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105826:	4b37      	ldr	r3, [pc, #220]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810582e:	ee07 3a90 	vmov	s15, r3
 8105832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105836:	ed97 6a03 	vldr	s12, [r7, #12]
 810583a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 810590c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105856:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105858:	4b2a      	ldr	r3, [pc, #168]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810585a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810585c:	0a5b      	lsrs	r3, r3, #9
 810585e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105862:	ee07 3a90 	vmov	s15, r3
 8105866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810586a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810586e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105872:	edd7 6a07 	vldr	s13, [r7, #28]
 8105876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810587a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810587e:	ee17 2a90 	vmov	r2, s15
 8105882:	687b      	ldr	r3, [r7, #4]
 8105884:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105886:	4b1f      	ldr	r3, [pc, #124]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810588a:	0c1b      	lsrs	r3, r3, #16
 810588c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105890:	ee07 3a90 	vmov	s15, r3
 8105894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105898:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810589c:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058a0:	edd7 6a07 	vldr	s13, [r7, #28]
 81058a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058ac:	ee17 2a90 	vmov	r2, s15
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81058b4:	4b13      	ldr	r3, [pc, #76]	@ (8105904 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81058b8:	0e1b      	lsrs	r3, r3, #24
 81058ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81058be:	ee07 3a90 	vmov	s15, r3
 81058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81058ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81058d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058da:	ee17 2a90 	vmov	r2, s15
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81058e2:	e008      	b.n	81058f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81058e4:	687b      	ldr	r3, [r7, #4]
 81058e6:	2200      	movs	r2, #0
 81058e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	2200      	movs	r2, #0
 81058ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81058f0:	687b      	ldr	r3, [r7, #4]
 81058f2:	2200      	movs	r2, #0
 81058f4:	609a      	str	r2, [r3, #8]
}
 81058f6:	bf00      	nop
 81058f8:	3724      	adds	r7, #36	@ 0x24
 81058fa:	46bd      	mov	sp, r7
 81058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105900:	4770      	bx	lr
 8105902:	bf00      	nop
 8105904:	58024400 	.word	0x58024400
 8105908:	03d09000 	.word	0x03d09000
 810590c:	46000000 	.word	0x46000000
 8105910:	4c742400 	.word	0x4c742400
 8105914:	4a742400 	.word	0x4a742400
 8105918:	4bbebc20 	.word	0x4bbebc20

0810591c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810591c:	b480      	push	{r7}
 810591e:	b089      	sub	sp, #36	@ 0x24
 8105920:	af00      	add	r7, sp, #0
 8105922:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105924:	4ba1      	ldr	r3, [pc, #644]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105928:	f003 0303 	and.w	r3, r3, #3
 810592c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810592e:	4b9f      	ldr	r3, [pc, #636]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105932:	0d1b      	lsrs	r3, r3, #20
 8105934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105938:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810593a:	4b9c      	ldr	r3, [pc, #624]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810593e:	0a1b      	lsrs	r3, r3, #8
 8105940:	f003 0301 	and.w	r3, r3, #1
 8105944:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105946:	4b99      	ldr	r3, [pc, #612]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810594a:	08db      	lsrs	r3, r3, #3
 810594c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105950:	693a      	ldr	r2, [r7, #16]
 8105952:	fb02 f303 	mul.w	r3, r2, r3
 8105956:	ee07 3a90 	vmov	s15, r3
 810595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810595e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105962:	697b      	ldr	r3, [r7, #20]
 8105964:	2b00      	cmp	r3, #0
 8105966:	f000 8111 	beq.w	8105b8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810596a:	69bb      	ldr	r3, [r7, #24]
 810596c:	2b02      	cmp	r3, #2
 810596e:	f000 8083 	beq.w	8105a78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105972:	69bb      	ldr	r3, [r7, #24]
 8105974:	2b02      	cmp	r3, #2
 8105976:	f200 80a1 	bhi.w	8105abc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810597a:	69bb      	ldr	r3, [r7, #24]
 810597c:	2b00      	cmp	r3, #0
 810597e:	d003      	beq.n	8105988 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105980:	69bb      	ldr	r3, [r7, #24]
 8105982:	2b01      	cmp	r3, #1
 8105984:	d056      	beq.n	8105a34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105986:	e099      	b.n	8105abc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105988:	4b88      	ldr	r3, [pc, #544]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810598a:	681b      	ldr	r3, [r3, #0]
 810598c:	f003 0320 	and.w	r3, r3, #32
 8105990:	2b00      	cmp	r3, #0
 8105992:	d02d      	beq.n	81059f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105994:	4b85      	ldr	r3, [pc, #532]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	08db      	lsrs	r3, r3, #3
 810599a:	f003 0303 	and.w	r3, r3, #3
 810599e:	4a84      	ldr	r2, [pc, #528]	@ (8105bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81059a0:	fa22 f303 	lsr.w	r3, r2, r3
 81059a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059a6:	68bb      	ldr	r3, [r7, #8]
 81059a8:	ee07 3a90 	vmov	s15, r3
 81059ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059b0:	697b      	ldr	r3, [r7, #20]
 81059b2:	ee07 3a90 	vmov	s15, r3
 81059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059be:	4b7b      	ldr	r3, [pc, #492]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81059c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059c6:	ee07 3a90 	vmov	s15, r3
 81059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81059d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81059ee:	e087      	b.n	8105b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059f0:	697b      	ldr	r3, [r7, #20]
 81059f2:	ee07 3a90 	vmov	s15, r3
 81059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a02:	4b6a      	ldr	r3, [pc, #424]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a0a:	ee07 3a90 	vmov	s15, r3
 8105a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a32:	e065      	b.n	8105b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105a34:	697b      	ldr	r3, [r7, #20]
 8105a36:	ee07 3a90 	vmov	s15, r3
 8105a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a46:	4b59      	ldr	r3, [pc, #356]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a4e:	ee07 3a90 	vmov	s15, r3
 8105a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a76:	e043      	b.n	8105b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105a78:	697b      	ldr	r3, [r7, #20]
 8105a7a:	ee07 3a90 	vmov	s15, r3
 8105a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a8a:	4b48      	ldr	r3, [pc, #288]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a92:	ee07 3a90 	vmov	s15, r3
 8105a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105aba:	e021      	b.n	8105b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105abc:	697b      	ldr	r3, [r7, #20]
 8105abe:	ee07 3a90 	vmov	s15, r3
 8105ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105bbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ace:	4b37      	ldr	r3, [pc, #220]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ad6:	ee07 3a90 	vmov	s15, r3
 8105ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ae2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105afe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105b00:	4b2a      	ldr	r3, [pc, #168]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b04:	0a5b      	lsrs	r3, r3, #9
 8105b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105b0a:	ee07 3a90 	vmov	s15, r3
 8105b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8105b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105b26:	ee17 2a90 	vmov	r2, s15
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b32:	0c1b      	lsrs	r3, r3, #16
 8105b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105b38:	ee07 3a90 	vmov	s15, r3
 8105b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8105b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105b54:	ee17 2a90 	vmov	r2, s15
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105b5c:	4b13      	ldr	r3, [pc, #76]	@ (8105bac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105b60:	0e1b      	lsrs	r3, r3, #24
 8105b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105b66:	ee07 3a90 	vmov	s15, r3
 8105b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8105b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105b82:	ee17 2a90 	vmov	r2, s15
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105b8a:	e008      	b.n	8105b9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	2200      	movs	r2, #0
 8105b90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	2200      	movs	r2, #0
 8105b96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	2200      	movs	r2, #0
 8105b9c:	609a      	str	r2, [r3, #8]
}
 8105b9e:	bf00      	nop
 8105ba0:	3724      	adds	r7, #36	@ 0x24
 8105ba2:	46bd      	mov	sp, r7
 8105ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ba8:	4770      	bx	lr
 8105baa:	bf00      	nop
 8105bac:	58024400 	.word	0x58024400
 8105bb0:	03d09000 	.word	0x03d09000
 8105bb4:	46000000 	.word	0x46000000
 8105bb8:	4c742400 	.word	0x4c742400
 8105bbc:	4a742400 	.word	0x4a742400
 8105bc0:	4bbebc20 	.word	0x4bbebc20

08105bc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105bc4:	b480      	push	{r7}
 8105bc6:	b089      	sub	sp, #36	@ 0x24
 8105bc8:	af00      	add	r7, sp, #0
 8105bca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105bcc:	4ba0      	ldr	r3, [pc, #640]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105bd0:	f003 0303 	and.w	r3, r3, #3
 8105bd4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105bd6:	4b9e      	ldr	r3, [pc, #632]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105bda:	091b      	lsrs	r3, r3, #4
 8105bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105be0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105be2:	4b9b      	ldr	r3, [pc, #620]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105be6:	f003 0301 	and.w	r3, r3, #1
 8105bea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105bec:	4b98      	ldr	r3, [pc, #608]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105bf0:	08db      	lsrs	r3, r3, #3
 8105bf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105bf6:	693a      	ldr	r2, [r7, #16]
 8105bf8:	fb02 f303 	mul.w	r3, r2, r3
 8105bfc:	ee07 3a90 	vmov	s15, r3
 8105c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105c08:	697b      	ldr	r3, [r7, #20]
 8105c0a:	2b00      	cmp	r3, #0
 8105c0c:	f000 8111 	beq.w	8105e32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105c10:	69bb      	ldr	r3, [r7, #24]
 8105c12:	2b02      	cmp	r3, #2
 8105c14:	f000 8083 	beq.w	8105d1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105c18:	69bb      	ldr	r3, [r7, #24]
 8105c1a:	2b02      	cmp	r3, #2
 8105c1c:	f200 80a1 	bhi.w	8105d62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105c20:	69bb      	ldr	r3, [r7, #24]
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d003      	beq.n	8105c2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105c26:	69bb      	ldr	r3, [r7, #24]
 8105c28:	2b01      	cmp	r3, #1
 8105c2a:	d056      	beq.n	8105cda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105c2c:	e099      	b.n	8105d62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105c2e:	4b88      	ldr	r3, [pc, #544]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c30:	681b      	ldr	r3, [r3, #0]
 8105c32:	f003 0320 	and.w	r3, r3, #32
 8105c36:	2b00      	cmp	r3, #0
 8105c38:	d02d      	beq.n	8105c96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105c3a:	4b85      	ldr	r3, [pc, #532]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	08db      	lsrs	r3, r3, #3
 8105c40:	f003 0303 	and.w	r3, r3, #3
 8105c44:	4a83      	ldr	r2, [pc, #524]	@ (8105e54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105c46:	fa22 f303 	lsr.w	r3, r2, r3
 8105c4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105c4c:	68bb      	ldr	r3, [r7, #8]
 8105c4e:	ee07 3a90 	vmov	s15, r3
 8105c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c56:	697b      	ldr	r3, [r7, #20]
 8105c58:	ee07 3a90 	vmov	s15, r3
 8105c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c64:	4b7a      	ldr	r3, [pc, #488]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c6c:	ee07 3a90 	vmov	s15, r3
 8105c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c74:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c78:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8105e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105c94:	e087      	b.n	8105da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105c96:	697b      	ldr	r3, [r7, #20]
 8105c98:	ee07 3a90 	vmov	s15, r3
 8105c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ca0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8105e5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ca8:	4b69      	ldr	r3, [pc, #420]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cb0:	ee07 3a90 	vmov	s15, r3
 8105cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8105cbc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8105e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105cc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105cd8:	e065      	b.n	8105da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105cda:	697b      	ldr	r3, [r7, #20]
 8105cdc:	ee07 3a90 	vmov	s15, r3
 8105ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ce4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8105e60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105cec:	4b58      	ldr	r3, [pc, #352]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cf4:	ee07 3a90 	vmov	s15, r3
 8105cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d00:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8105e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105d1c:	e043      	b.n	8105da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105d1e:	697b      	ldr	r3, [r7, #20]
 8105d20:	ee07 3a90 	vmov	s15, r3
 8105d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d28:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8105e64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d30:	4b47      	ldr	r3, [pc, #284]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d38:	ee07 3a90 	vmov	s15, r3
 8105d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d44:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8105e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105d60:	e021      	b.n	8105da6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105d62:	697b      	ldr	r3, [r7, #20]
 8105d64:	ee07 3a90 	vmov	s15, r3
 8105d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d6c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8105e5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d74:	4b36      	ldr	r3, [pc, #216]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d7c:	ee07 3a90 	vmov	s15, r3
 8105d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d88:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8105e58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105da0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105da4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105da6:	4b2a      	ldr	r3, [pc, #168]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105daa:	0a5b      	lsrs	r3, r3, #9
 8105dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105db0:	ee07 3a90 	vmov	s15, r3
 8105db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105db8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105dbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8105dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105dcc:	ee17 2a90 	vmov	r2, s15
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105dd8:	0c1b      	lsrs	r3, r3, #16
 8105dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105dde:	ee07 3a90 	vmov	s15, r3
 8105de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105de6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105dee:	edd7 6a07 	vldr	s13, [r7, #28]
 8105df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105dfa:	ee17 2a90 	vmov	r2, s15
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105e02:	4b13      	ldr	r3, [pc, #76]	@ (8105e50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105e06:	0e1b      	lsrs	r3, r3, #24
 8105e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105e0c:	ee07 3a90 	vmov	s15, r3
 8105e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105e18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105e1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e28:	ee17 2a90 	vmov	r2, s15
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105e30:	e008      	b.n	8105e44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	2200      	movs	r2, #0
 8105e36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	2200      	movs	r2, #0
 8105e3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	2200      	movs	r2, #0
 8105e42:	609a      	str	r2, [r3, #8]
}
 8105e44:	bf00      	nop
 8105e46:	3724      	adds	r7, #36	@ 0x24
 8105e48:	46bd      	mov	sp, r7
 8105e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e4e:	4770      	bx	lr
 8105e50:	58024400 	.word	0x58024400
 8105e54:	03d09000 	.word	0x03d09000
 8105e58:	46000000 	.word	0x46000000
 8105e5c:	4c742400 	.word	0x4c742400
 8105e60:	4a742400 	.word	0x4a742400
 8105e64:	4bbebc20 	.word	0x4bbebc20

08105e68 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
 8105e68:	b480      	push	{r7}
 8105e6a:	b083      	sub	sp, #12
 8105e6c:	af00      	add	r7, sp, #0
 8105e6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
 8105e70:	4b06      	ldr	r3, [pc, #24]	@ (8105e8c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 8105e72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8105e76:	4905      	ldr	r1, [pc, #20]	@ (8105e8c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 8105e78:	687b      	ldr	r3, [r7, #4]
 8105e7a:	4313      	orrs	r3, r2
 8105e7c:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
}
 8105e80:	bf00      	nop
 8105e82:	370c      	adds	r7, #12
 8105e84:	46bd      	mov	sp, r7
 8105e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e8a:	4770      	bx	lr
 8105e8c:	58024400 	.word	0x58024400

08105e90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105e90:	b580      	push	{r7, lr}
 8105e92:	b084      	sub	sp, #16
 8105e94:	af00      	add	r7, sp, #0
 8105e96:	6078      	str	r0, [r7, #4]
 8105e98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105e9a:	2300      	movs	r3, #0
 8105e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105e9e:	4b54      	ldr	r3, [pc, #336]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105ea2:	f003 0303 	and.w	r3, r3, #3
 8105ea6:	2b03      	cmp	r3, #3
 8105ea8:	d101      	bne.n	8105eae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105eaa:	2301      	movs	r3, #1
 8105eac:	e09b      	b.n	8105fe6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105eae:	4b50      	ldr	r3, [pc, #320]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	4a4f      	ldr	r2, [pc, #316]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105eb4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8105eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105eba:	f7fa ff73 	bl	8100da4 <HAL_GetTick>
 8105ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105ec0:	e008      	b.n	8105ed4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105ec2:	f7fa ff6f 	bl	8100da4 <HAL_GetTick>
 8105ec6:	4602      	mov	r2, r0
 8105ec8:	68bb      	ldr	r3, [r7, #8]
 8105eca:	1ad3      	subs	r3, r2, r3
 8105ecc:	2b02      	cmp	r3, #2
 8105ece:	d901      	bls.n	8105ed4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105ed0:	2303      	movs	r3, #3
 8105ed2:	e088      	b.n	8105fe6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105ed4:	4b46      	ldr	r3, [pc, #280]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105ed6:	681b      	ldr	r3, [r3, #0]
 8105ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105edc:	2b00      	cmp	r3, #0
 8105ede:	d1f0      	bne.n	8105ec2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105ee0:	4b43      	ldr	r3, [pc, #268]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105ee4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	681b      	ldr	r3, [r3, #0]
 8105eec:	031b      	lsls	r3, r3, #12
 8105eee:	4940      	ldr	r1, [pc, #256]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105ef0:	4313      	orrs	r3, r2
 8105ef2:	628b      	str	r3, [r1, #40]	@ 0x28
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	685b      	ldr	r3, [r3, #4]
 8105ef8:	3b01      	subs	r3, #1
 8105efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105efe:	687b      	ldr	r3, [r7, #4]
 8105f00:	689b      	ldr	r3, [r3, #8]
 8105f02:	3b01      	subs	r3, #1
 8105f04:	025b      	lsls	r3, r3, #9
 8105f06:	b29b      	uxth	r3, r3
 8105f08:	431a      	orrs	r2, r3
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	68db      	ldr	r3, [r3, #12]
 8105f0e:	3b01      	subs	r3, #1
 8105f10:	041b      	lsls	r3, r3, #16
 8105f12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8105f16:	431a      	orrs	r2, r3
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	691b      	ldr	r3, [r3, #16]
 8105f1c:	3b01      	subs	r3, #1
 8105f1e:	061b      	lsls	r3, r3, #24
 8105f20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8105f24:	4932      	ldr	r1, [pc, #200]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f26:	4313      	orrs	r3, r2
 8105f28:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105f2a:	4b31      	ldr	r3, [pc, #196]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	695b      	ldr	r3, [r3, #20]
 8105f36:	492e      	ldr	r1, [pc, #184]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f38:	4313      	orrs	r3, r2
 8105f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f40:	f023 0220 	bic.w	r2, r3, #32
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	699b      	ldr	r3, [r3, #24]
 8105f48:	4929      	ldr	r1, [pc, #164]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f4a:	4313      	orrs	r3, r2
 8105f4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105f4e:	4b28      	ldr	r3, [pc, #160]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f52:	4a27      	ldr	r2, [pc, #156]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f54:	f023 0310 	bic.w	r3, r3, #16
 8105f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105f5a:	4b25      	ldr	r3, [pc, #148]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8105f62:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8105f66:	687a      	ldr	r2, [r7, #4]
 8105f68:	69d2      	ldr	r2, [r2, #28]
 8105f6a:	00d2      	lsls	r2, r2, #3
 8105f6c:	4920      	ldr	r1, [pc, #128]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f6e:	4313      	orrs	r3, r2
 8105f70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105f72:	4b1f      	ldr	r3, [pc, #124]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f76:	4a1e      	ldr	r2, [pc, #120]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f78:	f043 0310 	orr.w	r3, r3, #16
 8105f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105f7e:	683b      	ldr	r3, [r7, #0]
 8105f80:	2b00      	cmp	r3, #0
 8105f82:	d106      	bne.n	8105f92 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105f84:	4b1a      	ldr	r3, [pc, #104]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f88:	4a19      	ldr	r2, [pc, #100]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8105f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105f90:	e00f      	b.n	8105fb2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105f92:	683b      	ldr	r3, [r7, #0]
 8105f94:	2b01      	cmp	r3, #1
 8105f96:	d106      	bne.n	8105fa6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105f98:	4b15      	ldr	r3, [pc, #84]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f9c:	4a14      	ldr	r2, [pc, #80]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8105fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8105fa4:	e005      	b.n	8105fb2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105fa6:	4b12      	ldr	r3, [pc, #72]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105faa:	4a11      	ldr	r2, [pc, #68]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105fac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8105fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105fb4:	681b      	ldr	r3, [r3, #0]
 8105fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8105fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105fbe:	f7fa fef1 	bl	8100da4 <HAL_GetTick>
 8105fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105fc4:	e008      	b.n	8105fd8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105fc6:	f7fa feed 	bl	8100da4 <HAL_GetTick>
 8105fca:	4602      	mov	r2, r0
 8105fcc:	68bb      	ldr	r3, [r7, #8]
 8105fce:	1ad3      	subs	r3, r2, r3
 8105fd0:	2b02      	cmp	r3, #2
 8105fd2:	d901      	bls.n	8105fd8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105fd4:	2303      	movs	r3, #3
 8105fd6:	e006      	b.n	8105fe6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105fd8:	4b05      	ldr	r3, [pc, #20]	@ (8105ff0 <RCCEx_PLL2_Config+0x160>)
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105fe0:	2b00      	cmp	r3, #0
 8105fe2:	d0f0      	beq.n	8105fc6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8105fe6:	4618      	mov	r0, r3
 8105fe8:	3710      	adds	r7, #16
 8105fea:	46bd      	mov	sp, r7
 8105fec:	bd80      	pop	{r7, pc}
 8105fee:	bf00      	nop
 8105ff0:	58024400 	.word	0x58024400

08105ff4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105ff4:	b580      	push	{r7, lr}
 8105ff6:	b084      	sub	sp, #16
 8105ff8:	af00      	add	r7, sp, #0
 8105ffa:	6078      	str	r0, [r7, #4]
 8105ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105ffe:	2300      	movs	r3, #0
 8106000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106002:	4b54      	ldr	r3, [pc, #336]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106006:	f003 0303 	and.w	r3, r3, #3
 810600a:	2b03      	cmp	r3, #3
 810600c:	d101      	bne.n	8106012 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810600e:	2301      	movs	r3, #1
 8106010:	e09b      	b.n	810614a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106012:	4b50      	ldr	r3, [pc, #320]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	4a4f      	ldr	r2, [pc, #316]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106018:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810601c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810601e:	f7fa fec1 	bl	8100da4 <HAL_GetTick>
 8106022:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106024:	e008      	b.n	8106038 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106026:	f7fa febd 	bl	8100da4 <HAL_GetTick>
 810602a:	4602      	mov	r2, r0
 810602c:	68bb      	ldr	r3, [r7, #8]
 810602e:	1ad3      	subs	r3, r2, r3
 8106030:	2b02      	cmp	r3, #2
 8106032:	d901      	bls.n	8106038 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106034:	2303      	movs	r3, #3
 8106036:	e088      	b.n	810614a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106038:	4b46      	ldr	r3, [pc, #280]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106040:	2b00      	cmp	r3, #0
 8106042:	d1f0      	bne.n	8106026 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106044:	4b43      	ldr	r3, [pc, #268]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106048:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	681b      	ldr	r3, [r3, #0]
 8106050:	051b      	lsls	r3, r3, #20
 8106052:	4940      	ldr	r1, [pc, #256]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106054:	4313      	orrs	r3, r2
 8106056:	628b      	str	r3, [r1, #40]	@ 0x28
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	685b      	ldr	r3, [r3, #4]
 810605c:	3b01      	subs	r3, #1
 810605e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106062:	687b      	ldr	r3, [r7, #4]
 8106064:	689b      	ldr	r3, [r3, #8]
 8106066:	3b01      	subs	r3, #1
 8106068:	025b      	lsls	r3, r3, #9
 810606a:	b29b      	uxth	r3, r3
 810606c:	431a      	orrs	r2, r3
 810606e:	687b      	ldr	r3, [r7, #4]
 8106070:	68db      	ldr	r3, [r3, #12]
 8106072:	3b01      	subs	r3, #1
 8106074:	041b      	lsls	r3, r3, #16
 8106076:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810607a:	431a      	orrs	r2, r3
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	691b      	ldr	r3, [r3, #16]
 8106080:	3b01      	subs	r3, #1
 8106082:	061b      	lsls	r3, r3, #24
 8106084:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106088:	4932      	ldr	r1, [pc, #200]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 810608a:	4313      	orrs	r3, r2
 810608c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810608e:	4b31      	ldr	r3, [pc, #196]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106092:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8106096:	687b      	ldr	r3, [r7, #4]
 8106098:	695b      	ldr	r3, [r3, #20]
 810609a:	492e      	ldr	r1, [pc, #184]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 810609c:	4313      	orrs	r3, r2
 810609e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81060a0:	4b2c      	ldr	r3, [pc, #176]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	699b      	ldr	r3, [r3, #24]
 81060ac:	4929      	ldr	r1, [pc, #164]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060ae:	4313      	orrs	r3, r2
 81060b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81060b2:	4b28      	ldr	r3, [pc, #160]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060b6:	4a27      	ldr	r2, [pc, #156]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81060bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81060be:	4b25      	ldr	r3, [pc, #148]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81060c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81060c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81060ca:	687a      	ldr	r2, [r7, #4]
 81060cc:	69d2      	ldr	r2, [r2, #28]
 81060ce:	00d2      	lsls	r2, r2, #3
 81060d0:	4920      	ldr	r1, [pc, #128]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060d2:	4313      	orrs	r3, r2
 81060d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81060d6:	4b1f      	ldr	r3, [pc, #124]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060da:	4a1e      	ldr	r2, [pc, #120]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81060e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81060e2:	683b      	ldr	r3, [r7, #0]
 81060e4:	2b00      	cmp	r3, #0
 81060e6:	d106      	bne.n	81060f6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81060e8:	4b1a      	ldr	r3, [pc, #104]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060ec:	4a19      	ldr	r2, [pc, #100]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81060f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81060f4:	e00f      	b.n	8106116 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81060f6:	683b      	ldr	r3, [r7, #0]
 81060f8:	2b01      	cmp	r3, #1
 81060fa:	d106      	bne.n	810610a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81060fc:	4b15      	ldr	r3, [pc, #84]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 81060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106100:	4a14      	ldr	r2, [pc, #80]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106102:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8106106:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106108:	e005      	b.n	8106116 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810610a:	4b12      	ldr	r3, [pc, #72]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 810610c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810610e:	4a11      	ldr	r2, [pc, #68]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8106114:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106116:	4b0f      	ldr	r3, [pc, #60]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	4a0e      	ldr	r2, [pc, #56]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 810611c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8106120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106122:	f7fa fe3f 	bl	8100da4 <HAL_GetTick>
 8106126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106128:	e008      	b.n	810613c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810612a:	f7fa fe3b 	bl	8100da4 <HAL_GetTick>
 810612e:	4602      	mov	r2, r0
 8106130:	68bb      	ldr	r3, [r7, #8]
 8106132:	1ad3      	subs	r3, r2, r3
 8106134:	2b02      	cmp	r3, #2
 8106136:	d901      	bls.n	810613c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106138:	2303      	movs	r3, #3
 810613a:	e006      	b.n	810614a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810613c:	4b05      	ldr	r3, [pc, #20]	@ (8106154 <RCCEx_PLL3_Config+0x160>)
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106144:	2b00      	cmp	r3, #0
 8106146:	d0f0      	beq.n	810612a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106148:	7bfb      	ldrb	r3, [r7, #15]
}
 810614a:	4618      	mov	r0, r3
 810614c:	3710      	adds	r7, #16
 810614e:	46bd      	mov	sp, r7
 8106150:	bd80      	pop	{r7, pc}
 8106152:	bf00      	nop
 8106154:	58024400 	.word	0x58024400

08106158 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8106158:	b580      	push	{r7, lr}
 810615a:	b08a      	sub	sp, #40	@ 0x28
 810615c:	af00      	add	r7, sp, #0
 810615e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	2b00      	cmp	r3, #0
 8106164:	d101      	bne.n	810616a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8106166:	2301      	movs	r3, #1
 8106168:	e075      	b.n	8106256 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8106170:	b2db      	uxtb	r3, r3
 8106172:	2b00      	cmp	r3, #0
 8106174:	d105      	bne.n	8106182 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	2200      	movs	r2, #0
 810617a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810617c:	6878      	ldr	r0, [r7, #4]
 810617e:	f7fa fc7f 	bl	8100a80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	2204      	movs	r2, #4
 8106186:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810618a:	6878      	ldr	r0, [r7, #4]
 810618c:	f000 f868 	bl	8106260 <HAL_SD_InitCard>
 8106190:	4603      	mov	r3, r0
 8106192:	2b00      	cmp	r3, #0
 8106194:	d001      	beq.n	810619a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8106196:	2301      	movs	r3, #1
 8106198:	e05d      	b.n	8106256 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810619a:	f107 0308 	add.w	r3, r7, #8
 810619e:	4619      	mov	r1, r3
 81061a0:	6878      	ldr	r0, [r7, #4]
 81061a2:	f000 fbed 	bl	8106980 <HAL_SD_GetCardStatus>
 81061a6:	4603      	mov	r3, r0
 81061a8:	2b00      	cmp	r3, #0
 81061aa:	d001      	beq.n	81061b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 81061ac:	2301      	movs	r3, #1
 81061ae:	e052      	b.n	8106256 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81061b0:	7e3b      	ldrb	r3, [r7, #24]
 81061b2:	b2db      	uxtb	r3, r3
 81061b4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81061b6:	7e7b      	ldrb	r3, [r7, #25]
 81061b8:	b2db      	uxtb	r3, r3
 81061ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81061c0:	2b01      	cmp	r3, #1
 81061c2:	d10a      	bne.n	81061da <HAL_SD_Init+0x82>
 81061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81061c6:	2b00      	cmp	r3, #0
 81061c8:	d102      	bne.n	81061d0 <HAL_SD_Init+0x78>
 81061ca:	6a3b      	ldr	r3, [r7, #32]
 81061cc:	2b00      	cmp	r3, #0
 81061ce:	d004      	beq.n	81061da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81061d6:	659a      	str	r2, [r3, #88]	@ 0x58
 81061d8:	e00b      	b.n	81061f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81061da:	687b      	ldr	r3, [r7, #4]
 81061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81061de:	2b01      	cmp	r3, #1
 81061e0:	d104      	bne.n	81061ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81061e8:	659a      	str	r2, [r3, #88]	@ 0x58
 81061ea:	e002      	b.n	81061f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	2200      	movs	r2, #0
 81061f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	68db      	ldr	r3, [r3, #12]
 81061f6:	4619      	mov	r1, r3
 81061f8:	6878      	ldr	r0, [r7, #4]
 81061fa:	f000 fcab 	bl	8106b54 <HAL_SD_ConfigWideBusOperation>
 81061fe:	4603      	mov	r3, r0
 8106200:	2b00      	cmp	r3, #0
 8106202:	d001      	beq.n	8106208 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8106204:	2301      	movs	r3, #1
 8106206:	e026      	b.n	8106256 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8106208:	f7fa fdcc 	bl	8100da4 <HAL_GetTick>
 810620c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810620e:	e011      	b.n	8106234 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8106210:	f7fa fdc8 	bl	8100da4 <HAL_GetTick>
 8106214:	4602      	mov	r2, r0
 8106216:	69fb      	ldr	r3, [r7, #28]
 8106218:	1ad3      	subs	r3, r2, r3
 810621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810621e:	d109      	bne.n	8106234 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8106226:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	2201      	movs	r2, #1
 810622c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8106230:	2303      	movs	r3, #3
 8106232:	e010      	b.n	8106256 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8106234:	6878      	ldr	r0, [r7, #4]
 8106236:	f000 fd9f 	bl	8106d78 <HAL_SD_GetCardState>
 810623a:	4603      	mov	r3, r0
 810623c:	2b04      	cmp	r3, #4
 810623e:	d1e7      	bne.n	8106210 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8106240:	687b      	ldr	r3, [r7, #4]
 8106242:	2200      	movs	r2, #0
 8106244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8106246:	687b      	ldr	r3, [r7, #4]
 8106248:	2200      	movs	r2, #0
 810624a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810624c:	687b      	ldr	r3, [r7, #4]
 810624e:	2201      	movs	r2, #1
 8106250:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8106254:	2300      	movs	r3, #0
}
 8106256:	4618      	mov	r0, r3
 8106258:	3728      	adds	r7, #40	@ 0x28
 810625a:	46bd      	mov	sp, r7
 810625c:	bd80      	pop	{r7, pc}
	...

08106260 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8106260:	b590      	push	{r4, r7, lr}
 8106262:	b08d      	sub	sp, #52	@ 0x34
 8106264:	af02      	add	r7, sp, #8
 8106266:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8106268:	2300      	movs	r3, #0
 810626a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810626c:	2300      	movs	r3, #0
 810626e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8106270:	2300      	movs	r3, #0
 8106272:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8106274:	2300      	movs	r3, #0
 8106276:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8106278:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 810627c:	f04f 0100 	mov.w	r1, #0
 8106280:	f7fe fc62 	bl	8104b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8106284:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8106286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106288:	2b00      	cmp	r3, #0
 810628a:	d109      	bne.n	81062a0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	2201      	movs	r2, #1
 8106290:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 810629a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810629c:	2301      	movs	r3, #1
 810629e:	e070      	b.n	8106382 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 81062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062a2:	0a1b      	lsrs	r3, r3, #8
 81062a4:	4a39      	ldr	r2, [pc, #228]	@ (810638c <HAL_SD_InitCard+0x12c>)
 81062a6:	fba2 2303 	umull	r2, r3, r2, r3
 81062aa:	091b      	lsrs	r3, r3, #4
 81062ac:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	681c      	ldr	r4, [r3, #0]
 81062b2:	466a      	mov	r2, sp
 81062b4:	f107 0318 	add.w	r3, r7, #24
 81062b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 81062bc:	e882 0003 	stmia.w	r2, {r0, r1}
 81062c0:	f107 030c 	add.w	r3, r7, #12
 81062c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 81062c6:	4620      	mov	r0, r4
 81062c8:	f001 fa94 	bl	81077f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	681b      	ldr	r3, [r3, #0]
 81062d0:	4618      	mov	r0, r3
 81062d2:	f001 fac6 	bl	8107862 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 81062d6:	69fb      	ldr	r3, [r7, #28]
 81062d8:	2b00      	cmp	r3, #0
 81062da:	d005      	beq.n	81062e8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81062dc:	69fb      	ldr	r3, [r7, #28]
 81062de:	005b      	lsls	r3, r3, #1
 81062e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81062e2:	fbb2 f3f3 	udiv	r3, r2, r3
 81062e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 81062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062ea:	2b00      	cmp	r3, #0
 81062ec:	d007      	beq.n	81062fe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81062ee:	4a28      	ldr	r2, [pc, #160]	@ (8106390 <HAL_SD_InitCard+0x130>)
 81062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81062f6:	3301      	adds	r3, #1
 81062f8:	4618      	mov	r0, r3
 81062fa:	f7fa fd5f 	bl	8100dbc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 81062fe:	6878      	ldr	r0, [r7, #4]
 8106300:	f000 fe28 	bl	8106f54 <SD_PowerON>
 8106304:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8106306:	6a3b      	ldr	r3, [r7, #32]
 8106308:	2b00      	cmp	r3, #0
 810630a:	d00b      	beq.n	8106324 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	2201      	movs	r2, #1
 8106310:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8106314:	687b      	ldr	r3, [r7, #4]
 8106316:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106318:	6a3b      	ldr	r3, [r7, #32]
 810631a:	431a      	orrs	r2, r3
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8106320:	2301      	movs	r3, #1
 8106322:	e02e      	b.n	8106382 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8106324:	6878      	ldr	r0, [r7, #4]
 8106326:	f000 fd47 	bl	8106db8 <SD_InitCard>
 810632a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810632c:	6a3b      	ldr	r3, [r7, #32]
 810632e:	2b00      	cmp	r3, #0
 8106330:	d00b      	beq.n	810634a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	2201      	movs	r2, #1
 8106336:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 810633a:	687b      	ldr	r3, [r7, #4]
 810633c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810633e:	6a3b      	ldr	r3, [r7, #32]
 8106340:	431a      	orrs	r2, r3
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8106346:	2301      	movs	r3, #1
 8106348:	e01b      	b.n	8106382 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	681b      	ldr	r3, [r3, #0]
 810634e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8106352:	4618      	mov	r0, r3
 8106354:	f001 fb1a 	bl	810798c <SDMMC_CmdBlockLength>
 8106358:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810635a:	6a3b      	ldr	r3, [r7, #32]
 810635c:	2b00      	cmp	r3, #0
 810635e:	d00f      	beq.n	8106380 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	681b      	ldr	r3, [r3, #0]
 8106364:	4a0b      	ldr	r2, [pc, #44]	@ (8106394 <HAL_SD_InitCard+0x134>)
 8106366:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810636c:	6a3b      	ldr	r3, [r7, #32]
 810636e:	431a      	orrs	r2, r3
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	2201      	movs	r2, #1
 8106378:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 810637c:	2301      	movs	r3, #1
 810637e:	e000      	b.n	8106382 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8106380:	2300      	movs	r3, #0
}
 8106382:	4618      	mov	r0, r3
 8106384:	372c      	adds	r7, #44	@ 0x2c
 8106386:	46bd      	mov	sp, r7
 8106388:	bd90      	pop	{r4, r7, pc}
 810638a:	bf00      	nop
 810638c:	014f8b59 	.word	0x014f8b59
 8106390:	00012110 	.word	0x00012110
 8106394:	1fe00fff 	.word	0x1fe00fff

08106398 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8106398:	b580      	push	{r7, lr}
 810639a:	b08c      	sub	sp, #48	@ 0x30
 810639c:	af00      	add	r7, sp, #0
 810639e:	60f8      	str	r0, [r7, #12]
 81063a0:	60b9      	str	r1, [r7, #8]
 81063a2:	607a      	str	r2, [r7, #4]
 81063a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 81063aa:	68bb      	ldr	r3, [r7, #8]
 81063ac:	2b00      	cmp	r3, #0
 81063ae:	d107      	bne.n	81063c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 81063b0:	68fb      	ldr	r3, [r7, #12]
 81063b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81063b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81063b8:	68fb      	ldr	r3, [r7, #12]
 81063ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81063bc:	2301      	movs	r3, #1
 81063be:	e08d      	b.n	81064dc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 81063c0:	68fb      	ldr	r3, [r7, #12]
 81063c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81063c6:	b2db      	uxtb	r3, r3
 81063c8:	2b01      	cmp	r3, #1
 81063ca:	f040 8086 	bne.w	81064da <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 81063ce:	68fb      	ldr	r3, [r7, #12]
 81063d0:	2200      	movs	r2, #0
 81063d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 81063d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81063d6:	683b      	ldr	r3, [r7, #0]
 81063d8:	441a      	add	r2, r3
 81063da:	68fb      	ldr	r3, [r7, #12]
 81063dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81063de:	429a      	cmp	r2, r3
 81063e0:	d907      	bls.n	81063f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 81063e2:	68fb      	ldr	r3, [r7, #12]
 81063e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81063e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 81063ea:	68fb      	ldr	r3, [r7, #12]
 81063ec:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 81063ee:	2301      	movs	r3, #1
 81063f0:	e074      	b.n	81064dc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 81063f2:	68fb      	ldr	r3, [r7, #12]
 81063f4:	2203      	movs	r2, #3
 81063f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 81063fa:	68fb      	ldr	r3, [r7, #12]
 81063fc:	681b      	ldr	r3, [r3, #0]
 81063fe:	2200      	movs	r2, #0
 8106400:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8106402:	68fb      	ldr	r3, [r7, #12]
 8106404:	68ba      	ldr	r2, [r7, #8]
 8106406:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8106408:	683b      	ldr	r3, [r7, #0]
 810640a:	025a      	lsls	r2, r3, #9
 810640c:	68fb      	ldr	r3, [r7, #12]
 810640e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8106410:	68fb      	ldr	r3, [r7, #12]
 8106412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106414:	2b01      	cmp	r3, #1
 8106416:	d002      	beq.n	810641e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8106418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810641a:	025b      	lsls	r3, r3, #9
 810641c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810641e:	f04f 33ff 	mov.w	r3, #4294967295
 8106422:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8106424:	683b      	ldr	r3, [r7, #0]
 8106426:	025b      	lsls	r3, r3, #9
 8106428:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810642a:	2390      	movs	r3, #144	@ 0x90
 810642c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810642e:	2302      	movs	r3, #2
 8106430:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8106432:	2300      	movs	r3, #0
 8106434:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8106436:	2300      	movs	r3, #0
 8106438:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810643a:	68fb      	ldr	r3, [r7, #12]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	f107 0210 	add.w	r2, r7, #16
 8106442:	4611      	mov	r1, r2
 8106444:	4618      	mov	r0, r3
 8106446:	f001 fa75 	bl	8107934 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810644a:	68fb      	ldr	r3, [r7, #12]
 810644c:	681b      	ldr	r3, [r3, #0]
 810644e:	68da      	ldr	r2, [r3, #12]
 8106450:	68fb      	ldr	r3, [r7, #12]
 8106452:	681b      	ldr	r3, [r3, #0]
 8106454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8106458:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 810645a:	68fb      	ldr	r3, [r7, #12]
 810645c:	681b      	ldr	r3, [r3, #0]
 810645e:	68ba      	ldr	r2, [r7, #8]
 8106460:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8106462:	68fb      	ldr	r3, [r7, #12]
 8106464:	681b      	ldr	r3, [r3, #0]
 8106466:	2201      	movs	r2, #1
 8106468:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 810646a:	683b      	ldr	r3, [r7, #0]
 810646c:	2b01      	cmp	r3, #1
 810646e:	d90a      	bls.n	8106486 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8106470:	68fb      	ldr	r3, [r7, #12]
 8106472:	2282      	movs	r2, #130	@ 0x82
 8106474:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8106476:	68fb      	ldr	r3, [r7, #12]
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810647c:	4618      	mov	r0, r3
 810647e:	f001 facb 	bl	8107a18 <SDMMC_CmdReadMultiBlock>
 8106482:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8106484:	e009      	b.n	810649a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8106486:	68fb      	ldr	r3, [r7, #12]
 8106488:	2281      	movs	r2, #129	@ 0x81
 810648a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 810648c:	68fb      	ldr	r3, [r7, #12]
 810648e:	681b      	ldr	r3, [r3, #0]
 8106490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106492:	4618      	mov	r0, r3
 8106494:	f001 fa9d 	bl	81079d2 <SDMMC_CmdReadSingleBlock>
 8106498:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 810649a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810649c:	2b00      	cmp	r3, #0
 810649e:	d012      	beq.n	81064c6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81064a0:	68fb      	ldr	r3, [r7, #12]
 81064a2:	681b      	ldr	r3, [r3, #0]
 81064a4:	4a0f      	ldr	r2, [pc, #60]	@ (81064e4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 81064a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 81064a8:	68fb      	ldr	r3, [r7, #12]
 81064aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81064ae:	431a      	orrs	r2, r3
 81064b0:	68fb      	ldr	r3, [r7, #12]
 81064b2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 81064b4:	68fb      	ldr	r3, [r7, #12]
 81064b6:	2201      	movs	r2, #1
 81064b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81064bc:	68fb      	ldr	r3, [r7, #12]
 81064be:	2200      	movs	r2, #0
 81064c0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 81064c2:	2301      	movs	r3, #1
 81064c4:	e00a      	b.n	81064dc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 81064c6:	68fb      	ldr	r3, [r7, #12]
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81064cc:	68fb      	ldr	r3, [r7, #12]
 81064ce:	681b      	ldr	r3, [r3, #0]
 81064d0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 81064d4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 81064d6:	2300      	movs	r3, #0
 81064d8:	e000      	b.n	81064dc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 81064da:	2302      	movs	r3, #2
  }
}
 81064dc:	4618      	mov	r0, r3
 81064de:	3730      	adds	r7, #48	@ 0x30
 81064e0:	46bd      	mov	sp, r7
 81064e2:	bd80      	pop	{r7, pc}
 81064e4:	1fe00fff 	.word	0x1fe00fff

081064e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 81064e8:	b580      	push	{r7, lr}
 81064ea:	b08c      	sub	sp, #48	@ 0x30
 81064ec:	af00      	add	r7, sp, #0
 81064ee:	60f8      	str	r0, [r7, #12]
 81064f0:	60b9      	str	r1, [r7, #8]
 81064f2:	607a      	str	r2, [r7, #4]
 81064f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 81064fa:	68bb      	ldr	r3, [r7, #8]
 81064fc:	2b00      	cmp	r3, #0
 81064fe:	d107      	bne.n	8106510 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8106500:	68fb      	ldr	r3, [r7, #12]
 8106502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106504:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8106508:	68fb      	ldr	r3, [r7, #12]
 810650a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810650c:	2301      	movs	r3, #1
 810650e:	e08d      	b.n	810662c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8106510:	68fb      	ldr	r3, [r7, #12]
 8106512:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8106516:	b2db      	uxtb	r3, r3
 8106518:	2b01      	cmp	r3, #1
 810651a:	f040 8086 	bne.w	810662a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810651e:	68fb      	ldr	r3, [r7, #12]
 8106520:	2200      	movs	r2, #0
 8106522:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8106524:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8106526:	683b      	ldr	r3, [r7, #0]
 8106528:	441a      	add	r2, r3
 810652a:	68fb      	ldr	r3, [r7, #12]
 810652c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810652e:	429a      	cmp	r2, r3
 8106530:	d907      	bls.n	8106542 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8106532:	68fb      	ldr	r3, [r7, #12]
 8106534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106536:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 810653a:	68fb      	ldr	r3, [r7, #12]
 810653c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 810653e:	2301      	movs	r3, #1
 8106540:	e074      	b.n	810662c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8106542:	68fb      	ldr	r3, [r7, #12]
 8106544:	2203      	movs	r2, #3
 8106546:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 810654a:	68fb      	ldr	r3, [r7, #12]
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	2200      	movs	r2, #0
 8106550:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8106552:	68fb      	ldr	r3, [r7, #12]
 8106554:	68ba      	ldr	r2, [r7, #8]
 8106556:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8106558:	683b      	ldr	r3, [r7, #0]
 810655a:	025a      	lsls	r2, r3, #9
 810655c:	68fb      	ldr	r3, [r7, #12]
 810655e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8106560:	68fb      	ldr	r3, [r7, #12]
 8106562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106564:	2b01      	cmp	r3, #1
 8106566:	d002      	beq.n	810656e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8106568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810656a:	025b      	lsls	r3, r3, #9
 810656c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810656e:	f04f 33ff 	mov.w	r3, #4294967295
 8106572:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8106574:	683b      	ldr	r3, [r7, #0]
 8106576:	025b      	lsls	r3, r3, #9
 8106578:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 810657a:	2390      	movs	r3, #144	@ 0x90
 810657c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 810657e:	2300      	movs	r3, #0
 8106580:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8106582:	2300      	movs	r3, #0
 8106584:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8106586:	2300      	movs	r3, #0
 8106588:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 810658a:	68fb      	ldr	r3, [r7, #12]
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	f107 0210 	add.w	r2, r7, #16
 8106592:	4611      	mov	r1, r2
 8106594:	4618      	mov	r0, r3
 8106596:	f001 f9cd 	bl	8107934 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 810659a:	68fb      	ldr	r3, [r7, #12]
 810659c:	681b      	ldr	r3, [r3, #0]
 810659e:	68da      	ldr	r2, [r3, #12]
 81065a0:	68fb      	ldr	r3, [r7, #12]
 81065a2:	681b      	ldr	r3, [r3, #0]
 81065a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 81065a8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 81065aa:	68fb      	ldr	r3, [r7, #12]
 81065ac:	681b      	ldr	r3, [r3, #0]
 81065ae:	68ba      	ldr	r2, [r7, #8]
 81065b0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 81065b2:	68fb      	ldr	r3, [r7, #12]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	2201      	movs	r2, #1
 81065b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 81065ba:	683b      	ldr	r3, [r7, #0]
 81065bc:	2b01      	cmp	r3, #1
 81065be:	d90a      	bls.n	81065d6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 81065c0:	68fb      	ldr	r3, [r7, #12]
 81065c2:	22a0      	movs	r2, #160	@ 0xa0
 81065c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 81065c6:	68fb      	ldr	r3, [r7, #12]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81065cc:	4618      	mov	r0, r3
 81065ce:	f001 fa69 	bl	8107aa4 <SDMMC_CmdWriteMultiBlock>
 81065d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 81065d4:	e009      	b.n	81065ea <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 81065d6:	68fb      	ldr	r3, [r7, #12]
 81065d8:	2290      	movs	r2, #144	@ 0x90
 81065da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 81065dc:	68fb      	ldr	r3, [r7, #12]
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81065e2:	4618      	mov	r0, r3
 81065e4:	f001 fa3b 	bl	8107a5e <SDMMC_CmdWriteSingleBlock>
 81065e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 81065ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81065ec:	2b00      	cmp	r3, #0
 81065ee:	d012      	beq.n	8106616 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81065f0:	68fb      	ldr	r3, [r7, #12]
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	4a0f      	ldr	r2, [pc, #60]	@ (8106634 <HAL_SD_WriteBlocks_DMA+0x14c>)
 81065f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 81065f8:	68fb      	ldr	r3, [r7, #12]
 81065fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81065fe:	431a      	orrs	r2, r3
 8106600:	68fb      	ldr	r3, [r7, #12]
 8106602:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8106604:	68fb      	ldr	r3, [r7, #12]
 8106606:	2201      	movs	r2, #1
 8106608:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 810660c:	68fb      	ldr	r3, [r7, #12]
 810660e:	2200      	movs	r2, #0
 8106610:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8106612:	2301      	movs	r3, #1
 8106614:	e00a      	b.n	810662c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8106616:	68fb      	ldr	r3, [r7, #12]
 8106618:	681b      	ldr	r3, [r3, #0]
 810661a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810661c:	68fb      	ldr	r3, [r7, #12]
 810661e:	681b      	ldr	r3, [r3, #0]
 8106620:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8106624:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8106626:	2300      	movs	r3, #0
 8106628:	e000      	b.n	810662c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 810662a:	2302      	movs	r3, #2
  }
}
 810662c:	4618      	mov	r0, r3
 810662e:	3730      	adds	r7, #48	@ 0x30
 8106630:	46bd      	mov	sp, r7
 8106632:	bd80      	pop	{r7, pc}
 8106634:	1fe00fff 	.word	0x1fe00fff

08106638 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8106638:	b480      	push	{r7}
 810663a:	b083      	sub	sp, #12
 810663c:	af00      	add	r7, sp, #0
 810663e:	6078      	str	r0, [r7, #4]
 8106640:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106646:	0f9b      	lsrs	r3, r3, #30
 8106648:	b2da      	uxtb	r2, r3
 810664a:	683b      	ldr	r3, [r7, #0]
 810664c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106652:	0e9b      	lsrs	r3, r3, #26
 8106654:	b2db      	uxtb	r3, r3
 8106656:	f003 030f 	and.w	r3, r3, #15
 810665a:	b2da      	uxtb	r2, r3
 810665c:	683b      	ldr	r3, [r7, #0]
 810665e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8106660:	687b      	ldr	r3, [r7, #4]
 8106662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106664:	0e1b      	lsrs	r3, r3, #24
 8106666:	b2db      	uxtb	r3, r3
 8106668:	f003 0303 	and.w	r3, r3, #3
 810666c:	b2da      	uxtb	r2, r3
 810666e:	683b      	ldr	r3, [r7, #0]
 8106670:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106676:	0c1b      	lsrs	r3, r3, #16
 8106678:	b2da      	uxtb	r2, r3
 810667a:	683b      	ldr	r3, [r7, #0]
 810667c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106682:	0a1b      	lsrs	r3, r3, #8
 8106684:	b2da      	uxtb	r2, r3
 8106686:	683b      	ldr	r3, [r7, #0]
 8106688:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810668e:	b2da      	uxtb	r2, r3
 8106690:	683b      	ldr	r3, [r7, #0]
 8106692:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106698:	0d1b      	lsrs	r3, r3, #20
 810669a:	b29a      	uxth	r2, r3
 810669c:	683b      	ldr	r3, [r7, #0]
 810669e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066a4:	0c1b      	lsrs	r3, r3, #16
 81066a6:	b2db      	uxtb	r3, r3
 81066a8:	f003 030f 	and.w	r3, r3, #15
 81066ac:	b2da      	uxtb	r2, r3
 81066ae:	683b      	ldr	r3, [r7, #0]
 81066b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066b6:	0bdb      	lsrs	r3, r3, #15
 81066b8:	b2db      	uxtb	r3, r3
 81066ba:	f003 0301 	and.w	r3, r3, #1
 81066be:	b2da      	uxtb	r2, r3
 81066c0:	683b      	ldr	r3, [r7, #0]
 81066c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066c8:	0b9b      	lsrs	r3, r3, #14
 81066ca:	b2db      	uxtb	r3, r3
 81066cc:	f003 0301 	and.w	r3, r3, #1
 81066d0:	b2da      	uxtb	r2, r3
 81066d2:	683b      	ldr	r3, [r7, #0]
 81066d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066da:	0b5b      	lsrs	r3, r3, #13
 81066dc:	b2db      	uxtb	r3, r3
 81066de:	f003 0301 	and.w	r3, r3, #1
 81066e2:	b2da      	uxtb	r2, r3
 81066e4:	683b      	ldr	r3, [r7, #0]
 81066e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81066ec:	0b1b      	lsrs	r3, r3, #12
 81066ee:	b2db      	uxtb	r3, r3
 81066f0:	f003 0301 	and.w	r3, r3, #1
 81066f4:	b2da      	uxtb	r2, r3
 81066f6:	683b      	ldr	r3, [r7, #0]
 81066f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 81066fa:	683b      	ldr	r3, [r7, #0]
 81066fc:	2200      	movs	r2, #0
 81066fe:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106704:	2b00      	cmp	r3, #0
 8106706:	d163      	bne.n	81067d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810670c:	009a      	lsls	r2, r3, #2
 810670e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8106712:	4013      	ands	r3, r2
 8106714:	687a      	ldr	r2, [r7, #4]
 8106716:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8106718:	0f92      	lsrs	r2, r2, #30
 810671a:	431a      	orrs	r2, r3
 810671c:	683b      	ldr	r3, [r7, #0]
 810671e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106724:	0edb      	lsrs	r3, r3, #27
 8106726:	b2db      	uxtb	r3, r3
 8106728:	f003 0307 	and.w	r3, r3, #7
 810672c:	b2da      	uxtb	r2, r3
 810672e:	683b      	ldr	r3, [r7, #0]
 8106730:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8106732:	687b      	ldr	r3, [r7, #4]
 8106734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106736:	0e1b      	lsrs	r3, r3, #24
 8106738:	b2db      	uxtb	r3, r3
 810673a:	f003 0307 	and.w	r3, r3, #7
 810673e:	b2da      	uxtb	r2, r3
 8106740:	683b      	ldr	r3, [r7, #0]
 8106742:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106748:	0d5b      	lsrs	r3, r3, #21
 810674a:	b2db      	uxtb	r3, r3
 810674c:	f003 0307 	and.w	r3, r3, #7
 8106750:	b2da      	uxtb	r2, r3
 8106752:	683b      	ldr	r3, [r7, #0]
 8106754:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8106756:	687b      	ldr	r3, [r7, #4]
 8106758:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810675a:	0c9b      	lsrs	r3, r3, #18
 810675c:	b2db      	uxtb	r3, r3
 810675e:	f003 0307 	and.w	r3, r3, #7
 8106762:	b2da      	uxtb	r2, r3
 8106764:	683b      	ldr	r3, [r7, #0]
 8106766:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810676c:	0bdb      	lsrs	r3, r3, #15
 810676e:	b2db      	uxtb	r3, r3
 8106770:	f003 0307 	and.w	r3, r3, #7
 8106774:	b2da      	uxtb	r2, r3
 8106776:	683b      	ldr	r3, [r7, #0]
 8106778:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 810677a:	683b      	ldr	r3, [r7, #0]
 810677c:	691b      	ldr	r3, [r3, #16]
 810677e:	1c5a      	adds	r2, r3, #1
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8106784:	683b      	ldr	r3, [r7, #0]
 8106786:	7e1b      	ldrb	r3, [r3, #24]
 8106788:	b2db      	uxtb	r3, r3
 810678a:	f003 0307 	and.w	r3, r3, #7
 810678e:	3302      	adds	r3, #2
 8106790:	2201      	movs	r2, #1
 8106792:	fa02 f303 	lsl.w	r3, r2, r3
 8106796:	687a      	ldr	r2, [r7, #4]
 8106798:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810679a:	fb03 f202 	mul.w	r2, r3, r2
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 81067a2:	683b      	ldr	r3, [r7, #0]
 81067a4:	7a1b      	ldrb	r3, [r3, #8]
 81067a6:	b2db      	uxtb	r3, r3
 81067a8:	f003 030f 	and.w	r3, r3, #15
 81067ac:	2201      	movs	r2, #1
 81067ae:	409a      	lsls	r2, r3
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 81067b4:	687b      	ldr	r3, [r7, #4]
 81067b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81067b8:	687a      	ldr	r2, [r7, #4]
 81067ba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 81067bc:	0a52      	lsrs	r2, r2, #9
 81067be:	fb03 f202 	mul.w	r2, r3, r2
 81067c2:	687b      	ldr	r3, [r7, #4]
 81067c4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81067cc:	655a      	str	r2, [r3, #84]	@ 0x54
 81067ce:	e031      	b.n	8106834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81067d4:	2b01      	cmp	r3, #1
 81067d6:	d11d      	bne.n	8106814 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81067dc:	041b      	lsls	r3, r3, #16
 81067de:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81067e6:	0c1b      	lsrs	r3, r3, #16
 81067e8:	431a      	orrs	r2, r3
 81067ea:	683b      	ldr	r3, [r7, #0]
 81067ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 81067ee:	683b      	ldr	r3, [r7, #0]
 81067f0:	691b      	ldr	r3, [r3, #16]
 81067f2:	3301      	adds	r3, #1
 81067f4:	029a      	lsls	r2, r3, #10
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8106808:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	655a      	str	r2, [r3, #84]	@ 0x54
 8106812:	e00f      	b.n	8106834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106814:	687b      	ldr	r3, [r7, #4]
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	4a58      	ldr	r2, [pc, #352]	@ (810697c <HAL_SD_GetCardCSD+0x344>)
 810681a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106820:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	2201      	movs	r2, #1
 810682c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8106830:	2301      	movs	r3, #1
 8106832:	e09d      	b.n	8106970 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8106834:	687b      	ldr	r3, [r7, #4]
 8106836:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106838:	0b9b      	lsrs	r3, r3, #14
 810683a:	b2db      	uxtb	r3, r3
 810683c:	f003 0301 	and.w	r3, r3, #1
 8106840:	b2da      	uxtb	r2, r3
 8106842:	683b      	ldr	r3, [r7, #0]
 8106844:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810684a:	09db      	lsrs	r3, r3, #7
 810684c:	b2db      	uxtb	r3, r3
 810684e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106852:	b2da      	uxtb	r2, r3
 8106854:	683b      	ldr	r3, [r7, #0]
 8106856:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8106858:	687b      	ldr	r3, [r7, #4]
 810685a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810685c:	b2db      	uxtb	r3, r3
 810685e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106862:	b2da      	uxtb	r2, r3
 8106864:	683b      	ldr	r3, [r7, #0]
 8106866:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8106868:	687b      	ldr	r3, [r7, #4]
 810686a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810686c:	0fdb      	lsrs	r3, r3, #31
 810686e:	b2da      	uxtb	r2, r3
 8106870:	683b      	ldr	r3, [r7, #0]
 8106872:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106878:	0f5b      	lsrs	r3, r3, #29
 810687a:	b2db      	uxtb	r3, r3
 810687c:	f003 0303 	and.w	r3, r3, #3
 8106880:	b2da      	uxtb	r2, r3
 8106882:	683b      	ldr	r3, [r7, #0]
 8106884:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810688a:	0e9b      	lsrs	r3, r3, #26
 810688c:	b2db      	uxtb	r3, r3
 810688e:	f003 0307 	and.w	r3, r3, #7
 8106892:	b2da      	uxtb	r2, r3
 8106894:	683b      	ldr	r3, [r7, #0]
 8106896:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810689c:	0d9b      	lsrs	r3, r3, #22
 810689e:	b2db      	uxtb	r3, r3
 81068a0:	f003 030f 	and.w	r3, r3, #15
 81068a4:	b2da      	uxtb	r2, r3
 81068a6:	683b      	ldr	r3, [r7, #0]
 81068a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81068ae:	0d5b      	lsrs	r3, r3, #21
 81068b0:	b2db      	uxtb	r3, r3
 81068b2:	f003 0301 	and.w	r3, r3, #1
 81068b6:	b2da      	uxtb	r2, r3
 81068b8:	683b      	ldr	r3, [r7, #0]
 81068ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 81068be:	683b      	ldr	r3, [r7, #0]
 81068c0:	2200      	movs	r2, #0
 81068c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81068ca:	0c1b      	lsrs	r3, r3, #16
 81068cc:	b2db      	uxtb	r3, r3
 81068ce:	f003 0301 	and.w	r3, r3, #1
 81068d2:	b2da      	uxtb	r2, r3
 81068d4:	683b      	ldr	r3, [r7, #0]
 81068d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 81068da:	687b      	ldr	r3, [r7, #4]
 81068dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81068de:	0bdb      	lsrs	r3, r3, #15
 81068e0:	b2db      	uxtb	r3, r3
 81068e2:	f003 0301 	and.w	r3, r3, #1
 81068e6:	b2da      	uxtb	r2, r3
 81068e8:	683b      	ldr	r3, [r7, #0]
 81068ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 81068ee:	687b      	ldr	r3, [r7, #4]
 81068f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81068f2:	0b9b      	lsrs	r3, r3, #14
 81068f4:	b2db      	uxtb	r3, r3
 81068f6:	f003 0301 	and.w	r3, r3, #1
 81068fa:	b2da      	uxtb	r2, r3
 81068fc:	683b      	ldr	r3, [r7, #0]
 81068fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106906:	0b5b      	lsrs	r3, r3, #13
 8106908:	b2db      	uxtb	r3, r3
 810690a:	f003 0301 	and.w	r3, r3, #1
 810690e:	b2da      	uxtb	r2, r3
 8106910:	683b      	ldr	r3, [r7, #0]
 8106912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8106916:	687b      	ldr	r3, [r7, #4]
 8106918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810691a:	0b1b      	lsrs	r3, r3, #12
 810691c:	b2db      	uxtb	r3, r3
 810691e:	f003 0301 	and.w	r3, r3, #1
 8106922:	b2da      	uxtb	r2, r3
 8106924:	683b      	ldr	r3, [r7, #0]
 8106926:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810692e:	0a9b      	lsrs	r3, r3, #10
 8106930:	b2db      	uxtb	r3, r3
 8106932:	f003 0303 	and.w	r3, r3, #3
 8106936:	b2da      	uxtb	r2, r3
 8106938:	683b      	ldr	r3, [r7, #0]
 810693a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 810693e:	687b      	ldr	r3, [r7, #4]
 8106940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106942:	0a1b      	lsrs	r3, r3, #8
 8106944:	b2db      	uxtb	r3, r3
 8106946:	f003 0303 	and.w	r3, r3, #3
 810694a:	b2da      	uxtb	r2, r3
 810694c:	683b      	ldr	r3, [r7, #0]
 810694e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106956:	085b      	lsrs	r3, r3, #1
 8106958:	b2db      	uxtb	r3, r3
 810695a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810695e:	b2da      	uxtb	r2, r3
 8106960:	683b      	ldr	r3, [r7, #0]
 8106962:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8106966:	683b      	ldr	r3, [r7, #0]
 8106968:	2201      	movs	r2, #1
 810696a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 810696e:	2300      	movs	r3, #0
}
 8106970:	4618      	mov	r0, r3
 8106972:	370c      	adds	r7, #12
 8106974:	46bd      	mov	sp, r7
 8106976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810697a:	4770      	bx	lr
 810697c:	1fe00fff 	.word	0x1fe00fff

08106980 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8106980:	b580      	push	{r7, lr}
 8106982:	b094      	sub	sp, #80	@ 0x50
 8106984:	af00      	add	r7, sp, #0
 8106986:	6078      	str	r0, [r7, #4]
 8106988:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 810698a:	2300      	movs	r3, #0
 810698c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8106996:	b2db      	uxtb	r3, r3
 8106998:	2b03      	cmp	r3, #3
 810699a:	d101      	bne.n	81069a0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 810699c:	2301      	movs	r3, #1
 810699e:	e0a7      	b.n	8106af0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 81069a0:	f107 0308 	add.w	r3, r7, #8
 81069a4:	4619      	mov	r1, r3
 81069a6:	6878      	ldr	r0, [r7, #4]
 81069a8:	f000 fb62 	bl	8107070 <SD_SendSDStatus>
 81069ac:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81069ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81069b0:	2b00      	cmp	r3, #0
 81069b2:	d011      	beq.n	81069d8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81069b4:	687b      	ldr	r3, [r7, #4]
 81069b6:	681b      	ldr	r3, [r3, #0]
 81069b8:	4a4f      	ldr	r2, [pc, #316]	@ (8106af8 <HAL_SD_GetCardStatus+0x178>)
 81069ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81069c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81069c2:	431a      	orrs	r2, r3
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	2201      	movs	r2, #1
 81069cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 81069d0:	2301      	movs	r3, #1
 81069d2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 81069d6:	e070      	b.n	8106aba <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 81069d8:	68bb      	ldr	r3, [r7, #8]
 81069da:	099b      	lsrs	r3, r3, #6
 81069dc:	b2db      	uxtb	r3, r3
 81069de:	f003 0303 	and.w	r3, r3, #3
 81069e2:	b2da      	uxtb	r2, r3
 81069e4:	683b      	ldr	r3, [r7, #0]
 81069e6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 81069e8:	68bb      	ldr	r3, [r7, #8]
 81069ea:	095b      	lsrs	r3, r3, #5
 81069ec:	b2db      	uxtb	r3, r3
 81069ee:	f003 0301 	and.w	r3, r3, #1
 81069f2:	b2da      	uxtb	r2, r3
 81069f4:	683b      	ldr	r3, [r7, #0]
 81069f6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 81069f8:	68bb      	ldr	r3, [r7, #8]
 81069fa:	0a1b      	lsrs	r3, r3, #8
 81069fc:	b29b      	uxth	r3, r3
 81069fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8106a02:	b29a      	uxth	r2, r3
 8106a04:	68bb      	ldr	r3, [r7, #8]
 8106a06:	0e1b      	lsrs	r3, r3, #24
 8106a08:	b29b      	uxth	r3, r3
 8106a0a:	4313      	orrs	r3, r2
 8106a0c:	b29a      	uxth	r2, r3
 8106a0e:	683b      	ldr	r3, [r7, #0]
 8106a10:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8106a12:	68fb      	ldr	r3, [r7, #12]
 8106a14:	061a      	lsls	r2, r3, #24
 8106a16:	68fb      	ldr	r3, [r7, #12]
 8106a18:	021b      	lsls	r3, r3, #8
 8106a1a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8106a1e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8106a20:	68fb      	ldr	r3, [r7, #12]
 8106a22:	0a1b      	lsrs	r3, r3, #8
 8106a24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8106a28:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8106a2a:	68fb      	ldr	r3, [r7, #12]
 8106a2c:	0e1b      	lsrs	r3, r3, #24
 8106a2e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8106a30:	683b      	ldr	r3, [r7, #0]
 8106a32:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8106a34:	693b      	ldr	r3, [r7, #16]
 8106a36:	b2da      	uxtb	r2, r3
 8106a38:	683b      	ldr	r3, [r7, #0]
 8106a3a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8106a3c:	693b      	ldr	r3, [r7, #16]
 8106a3e:	0a1b      	lsrs	r3, r3, #8
 8106a40:	b2da      	uxtb	r2, r3
 8106a42:	683b      	ldr	r3, [r7, #0]
 8106a44:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8106a46:	693b      	ldr	r3, [r7, #16]
 8106a48:	0d1b      	lsrs	r3, r3, #20
 8106a4a:	b2db      	uxtb	r3, r3
 8106a4c:	f003 030f 	and.w	r3, r3, #15
 8106a50:	b2da      	uxtb	r2, r3
 8106a52:	683b      	ldr	r3, [r7, #0]
 8106a54:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8106a56:	693b      	ldr	r3, [r7, #16]
 8106a58:	0c1b      	lsrs	r3, r3, #16
 8106a5a:	b29b      	uxth	r3, r3
 8106a5c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8106a60:	b29a      	uxth	r2, r3
 8106a62:	697b      	ldr	r3, [r7, #20]
 8106a64:	b29b      	uxth	r3, r3
 8106a66:	b2db      	uxtb	r3, r3
 8106a68:	b29b      	uxth	r3, r3
 8106a6a:	4313      	orrs	r3, r2
 8106a6c:	b29a      	uxth	r2, r3
 8106a6e:	683b      	ldr	r3, [r7, #0]
 8106a70:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8106a72:	697b      	ldr	r3, [r7, #20]
 8106a74:	0a9b      	lsrs	r3, r3, #10
 8106a76:	b2db      	uxtb	r3, r3
 8106a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106a7c:	b2da      	uxtb	r2, r3
 8106a7e:	683b      	ldr	r3, [r7, #0]
 8106a80:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8106a82:	697b      	ldr	r3, [r7, #20]
 8106a84:	0a1b      	lsrs	r3, r3, #8
 8106a86:	b2db      	uxtb	r3, r3
 8106a88:	f003 0303 	and.w	r3, r3, #3
 8106a8c:	b2da      	uxtb	r2, r3
 8106a8e:	683b      	ldr	r3, [r7, #0]
 8106a90:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8106a92:	697b      	ldr	r3, [r7, #20]
 8106a94:	091b      	lsrs	r3, r3, #4
 8106a96:	b2db      	uxtb	r3, r3
 8106a98:	f003 030f 	and.w	r3, r3, #15
 8106a9c:	b2da      	uxtb	r2, r3
 8106a9e:	683b      	ldr	r3, [r7, #0]
 8106aa0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8106aa2:	697b      	ldr	r3, [r7, #20]
 8106aa4:	b2db      	uxtb	r3, r3
 8106aa6:	f003 030f 	and.w	r3, r3, #15
 8106aaa:	b2da      	uxtb	r2, r3
 8106aac:	683b      	ldr	r3, [r7, #0]
 8106aae:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8106ab0:	69bb      	ldr	r3, [r7, #24]
 8106ab2:	0e1b      	lsrs	r3, r3, #24
 8106ab4:	b2da      	uxtb	r2, r3
 8106ab6:	683b      	ldr	r3, [r7, #0]
 8106ab8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	681b      	ldr	r3, [r3, #0]
 8106abe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8106ac2:	4618      	mov	r0, r3
 8106ac4:	f000 ff62 	bl	810798c <SDMMC_CmdBlockLength>
 8106ac8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8106aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8106acc:	2b00      	cmp	r3, #0
 8106ace:	d00d      	beq.n	8106aec <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106ad0:	687b      	ldr	r3, [r7, #4]
 8106ad2:	681b      	ldr	r3, [r3, #0]
 8106ad4:	4a08      	ldr	r2, [pc, #32]	@ (8106af8 <HAL_SD_GetCardStatus+0x178>)
 8106ad6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106adc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8106ade:	687b      	ldr	r3, [r7, #4]
 8106ae0:	2201      	movs	r2, #1
 8106ae2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8106ae6:	2301      	movs	r3, #1
 8106ae8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8106aec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8106af0:	4618      	mov	r0, r3
 8106af2:	3750      	adds	r7, #80	@ 0x50
 8106af4:	46bd      	mov	sp, r7
 8106af6:	bd80      	pop	{r7, pc}
 8106af8:	1fe00fff 	.word	0x1fe00fff

08106afc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8106afc:	b480      	push	{r7}
 8106afe:	b083      	sub	sp, #12
 8106b00:	af00      	add	r7, sp, #0
 8106b02:	6078      	str	r0, [r7, #4]
 8106b04:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8106b06:	687b      	ldr	r3, [r7, #4]
 8106b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8106b0a:	683b      	ldr	r3, [r7, #0]
 8106b0c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8106b12:	683b      	ldr	r3, [r7, #0]
 8106b14:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8106b1a:	683b      	ldr	r3, [r7, #0]
 8106b1c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8106b1e:	687b      	ldr	r3, [r7, #4]
 8106b20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8106b22:	683b      	ldr	r3, [r7, #0]
 8106b24:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8106b26:	687b      	ldr	r3, [r7, #4]
 8106b28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8106b2a:	683b      	ldr	r3, [r7, #0]
 8106b2c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8106b32:	683b      	ldr	r3, [r7, #0]
 8106b34:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8106b3a:	683b      	ldr	r3, [r7, #0]
 8106b3c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8106b42:	683b      	ldr	r3, [r7, #0]
 8106b44:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8106b46:	2300      	movs	r3, #0
}
 8106b48:	4618      	mov	r0, r3
 8106b4a:	370c      	adds	r7, #12
 8106b4c:	46bd      	mov	sp, r7
 8106b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b52:	4770      	bx	lr

08106b54 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8106b54:	b590      	push	{r4, r7, lr}
 8106b56:	b08d      	sub	sp, #52	@ 0x34
 8106b58:	af02      	add	r7, sp, #8
 8106b5a:	6078      	str	r0, [r7, #4]
 8106b5c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8106b5e:	2300      	movs	r3, #0
 8106b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	2203      	movs	r2, #3
 8106b68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106b70:	2b03      	cmp	r3, #3
 8106b72:	d02e      	beq.n	8106bd2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8106b74:	683b      	ldr	r3, [r7, #0]
 8106b76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106b7a:	d106      	bne.n	8106b8a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106b80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	635a      	str	r2, [r3, #52]	@ 0x34
 8106b88:	e029      	b.n	8106bde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8106b8a:	683b      	ldr	r3, [r7, #0]
 8106b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106b90:	d10a      	bne.n	8106ba8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8106b92:	6878      	ldr	r0, [r7, #4]
 8106b94:	f000 fb64 	bl	8107260 <SD_WideBus_Enable>
 8106b98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106b9e:	6a3b      	ldr	r3, [r7, #32]
 8106ba0:	431a      	orrs	r2, r3
 8106ba2:	687b      	ldr	r3, [r7, #4]
 8106ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8106ba6:	e01a      	b.n	8106bde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8106ba8:	683b      	ldr	r3, [r7, #0]
 8106baa:	2b00      	cmp	r3, #0
 8106bac:	d10a      	bne.n	8106bc4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8106bae:	6878      	ldr	r0, [r7, #4]
 8106bb0:	f000 fba1 	bl	81072f6 <SD_WideBus_Disable>
 8106bb4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8106bb6:	687b      	ldr	r3, [r7, #4]
 8106bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106bba:	6a3b      	ldr	r3, [r7, #32]
 8106bbc:	431a      	orrs	r2, r3
 8106bbe:	687b      	ldr	r3, [r7, #4]
 8106bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8106bc2:	e00c      	b.n	8106bde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106bc8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	635a      	str	r2, [r3, #52]	@ 0x34
 8106bd0:	e005      	b.n	8106bde <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106bd6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106be2:	2b00      	cmp	r3, #0
 8106be4:	d007      	beq.n	8106bf6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106be6:	687b      	ldr	r3, [r7, #4]
 8106be8:	681b      	ldr	r3, [r3, #0]
 8106bea:	4a5f      	ldr	r2, [pc, #380]	@ (8106d68 <HAL_SD_ConfigWideBusOperation+0x214>)
 8106bec:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8106bee:	2301      	movs	r3, #1
 8106bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8106bf4:	e096      	b.n	8106d24 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8106bf6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8106bfa:	f04f 0100 	mov.w	r1, #0
 8106bfe:	f7fd ffa3 	bl	8104b48 <HAL_RCCEx_GetPeriphCLKFreq>
 8106c02:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8106c04:	69fb      	ldr	r3, [r7, #28]
 8106c06:	2b00      	cmp	r3, #0
 8106c08:	f000 8083 	beq.w	8106d12 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	685b      	ldr	r3, [r3, #4]
 8106c10:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	689b      	ldr	r3, [r3, #8]
 8106c16:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8106c18:	683b      	ldr	r3, [r7, #0]
 8106c1a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8106c1c:	687b      	ldr	r3, [r7, #4]
 8106c1e:	691b      	ldr	r3, [r3, #16]
 8106c20:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8106c22:	687b      	ldr	r3, [r7, #4]
 8106c24:	695a      	ldr	r2, [r3, #20]
 8106c26:	69fb      	ldr	r3, [r7, #28]
 8106c28:	4950      	ldr	r1, [pc, #320]	@ (8106d6c <HAL_SD_ConfigWideBusOperation+0x218>)
 8106c2a:	fba1 1303 	umull	r1, r3, r1, r3
 8106c2e:	0e1b      	lsrs	r3, r3, #24
 8106c30:	429a      	cmp	r2, r3
 8106c32:	d303      	bcc.n	8106c3c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	695b      	ldr	r3, [r3, #20]
 8106c38:	61bb      	str	r3, [r7, #24]
 8106c3a:	e05a      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8106c3c:	687b      	ldr	r3, [r7, #4]
 8106c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106c44:	d103      	bne.n	8106c4e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8106c46:	687b      	ldr	r3, [r7, #4]
 8106c48:	695b      	ldr	r3, [r3, #20]
 8106c4a:	61bb      	str	r3, [r7, #24]
 8106c4c:	e051      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8106c4e:	687b      	ldr	r3, [r7, #4]
 8106c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106c56:	d126      	bne.n	8106ca6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8106c58:	687b      	ldr	r3, [r7, #4]
 8106c5a:	695b      	ldr	r3, [r3, #20]
 8106c5c:	2b00      	cmp	r3, #0
 8106c5e:	d10e      	bne.n	8106c7e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8106c60:	69fb      	ldr	r3, [r7, #28]
 8106c62:	4a43      	ldr	r2, [pc, #268]	@ (8106d70 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8106c64:	4293      	cmp	r3, r2
 8106c66:	d906      	bls.n	8106c76 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8106c68:	69fb      	ldr	r3, [r7, #28]
 8106c6a:	4a40      	ldr	r2, [pc, #256]	@ (8106d6c <HAL_SD_ConfigWideBusOperation+0x218>)
 8106c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8106c70:	0e5b      	lsrs	r3, r3, #25
 8106c72:	61bb      	str	r3, [r7, #24]
 8106c74:	e03d      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	695b      	ldr	r3, [r3, #20]
 8106c7a:	61bb      	str	r3, [r7, #24]
 8106c7c:	e039      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	695b      	ldr	r3, [r3, #20]
 8106c82:	005b      	lsls	r3, r3, #1
 8106c84:	69fa      	ldr	r2, [r7, #28]
 8106c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8106c8a:	4a39      	ldr	r2, [pc, #228]	@ (8106d70 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8106c8c:	4293      	cmp	r3, r2
 8106c8e:	d906      	bls.n	8106c9e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8106c90:	69fb      	ldr	r3, [r7, #28]
 8106c92:	4a36      	ldr	r2, [pc, #216]	@ (8106d6c <HAL_SD_ConfigWideBusOperation+0x218>)
 8106c94:	fba2 2303 	umull	r2, r3, r2, r3
 8106c98:	0e5b      	lsrs	r3, r3, #25
 8106c9a:	61bb      	str	r3, [r7, #24]
 8106c9c:	e029      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	695b      	ldr	r3, [r3, #20]
 8106ca2:	61bb      	str	r3, [r7, #24]
 8106ca4:	e025      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	695b      	ldr	r3, [r3, #20]
 8106caa:	2b00      	cmp	r3, #0
 8106cac:	d10e      	bne.n	8106ccc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8106cae:	69fb      	ldr	r3, [r7, #28]
 8106cb0:	4a30      	ldr	r2, [pc, #192]	@ (8106d74 <HAL_SD_ConfigWideBusOperation+0x220>)
 8106cb2:	4293      	cmp	r3, r2
 8106cb4:	d906      	bls.n	8106cc4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8106cb6:	69fb      	ldr	r3, [r7, #28]
 8106cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8106d6c <HAL_SD_ConfigWideBusOperation+0x218>)
 8106cba:	fba2 2303 	umull	r2, r3, r2, r3
 8106cbe:	0e1b      	lsrs	r3, r3, #24
 8106cc0:	61bb      	str	r3, [r7, #24]
 8106cc2:	e016      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	695b      	ldr	r3, [r3, #20]
 8106cc8:	61bb      	str	r3, [r7, #24]
 8106cca:	e012      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	695b      	ldr	r3, [r3, #20]
 8106cd0:	005b      	lsls	r3, r3, #1
 8106cd2:	69fa      	ldr	r2, [r7, #28]
 8106cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8106cd8:	4a26      	ldr	r2, [pc, #152]	@ (8106d74 <HAL_SD_ConfigWideBusOperation+0x220>)
 8106cda:	4293      	cmp	r3, r2
 8106cdc:	d906      	bls.n	8106cec <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8106cde:	69fb      	ldr	r3, [r7, #28]
 8106ce0:	4a22      	ldr	r2, [pc, #136]	@ (8106d6c <HAL_SD_ConfigWideBusOperation+0x218>)
 8106ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8106ce6:	0e1b      	lsrs	r3, r3, #24
 8106ce8:	61bb      	str	r3, [r7, #24]
 8106cea:	e002      	b.n	8106cf2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	695b      	ldr	r3, [r3, #20]
 8106cf0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	681c      	ldr	r4, [r3, #0]
 8106cf6:	466a      	mov	r2, sp
 8106cf8:	f107 0314 	add.w	r3, r7, #20
 8106cfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8106d00:	e882 0003 	stmia.w	r2, {r0, r1}
 8106d04:	f107 0308 	add.w	r3, r7, #8
 8106d08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8106d0a:	4620      	mov	r0, r4
 8106d0c:	f000 fd72 	bl	81077f4 <SDMMC_Init>
 8106d10:	e008      	b.n	8106d24 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8106d12:	687b      	ldr	r3, [r7, #4]
 8106d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106d16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8106d1a:	687b      	ldr	r3, [r7, #4]
 8106d1c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8106d1e:	2301      	movs	r3, #1
 8106d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	681b      	ldr	r3, [r3, #0]
 8106d28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8106d2c:	4618      	mov	r0, r3
 8106d2e:	f000 fe2d 	bl	810798c <SDMMC_CmdBlockLength>
 8106d32:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8106d34:	6a3b      	ldr	r3, [r7, #32]
 8106d36:	2b00      	cmp	r3, #0
 8106d38:	d00c      	beq.n	8106d54 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	681b      	ldr	r3, [r3, #0]
 8106d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8106d68 <HAL_SD_ConfigWideBusOperation+0x214>)
 8106d40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8106d42:	687b      	ldr	r3, [r7, #4]
 8106d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106d46:	6a3b      	ldr	r3, [r7, #32]
 8106d48:	431a      	orrs	r2, r3
 8106d4a:	687b      	ldr	r3, [r7, #4]
 8106d4c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8106d4e:	2301      	movs	r3, #1
 8106d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8106d54:	687b      	ldr	r3, [r7, #4]
 8106d56:	2201      	movs	r2, #1
 8106d58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8106d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8106d60:	4618      	mov	r0, r3
 8106d62:	372c      	adds	r7, #44	@ 0x2c
 8106d64:	46bd      	mov	sp, r7
 8106d66:	bd90      	pop	{r4, r7, pc}
 8106d68:	1fe00fff 	.word	0x1fe00fff
 8106d6c:	55e63b89 	.word	0x55e63b89
 8106d70:	02faf080 	.word	0x02faf080
 8106d74:	017d7840 	.word	0x017d7840

08106d78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8106d78:	b580      	push	{r7, lr}
 8106d7a:	b086      	sub	sp, #24
 8106d7c:	af00      	add	r7, sp, #0
 8106d7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8106d80:	2300      	movs	r3, #0
 8106d82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8106d84:	f107 030c 	add.w	r3, r7, #12
 8106d88:	4619      	mov	r1, r3
 8106d8a:	6878      	ldr	r0, [r7, #4]
 8106d8c:	f000 fa40 	bl	8107210 <SD_SendStatus>
 8106d90:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8106d92:	697b      	ldr	r3, [r7, #20]
 8106d94:	2b00      	cmp	r3, #0
 8106d96:	d005      	beq.n	8106da4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106d9c:	697b      	ldr	r3, [r7, #20]
 8106d9e:	431a      	orrs	r2, r3
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8106da4:	68fb      	ldr	r3, [r7, #12]
 8106da6:	0a5b      	lsrs	r3, r3, #9
 8106da8:	f003 030f 	and.w	r3, r3, #15
 8106dac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8106dae:	693b      	ldr	r3, [r7, #16]
}
 8106db0:	4618      	mov	r0, r3
 8106db2:	3718      	adds	r7, #24
 8106db4:	46bd      	mov	sp, r7
 8106db6:	bd80      	pop	{r7, pc}

08106db8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8106db8:	b580      	push	{r7, lr}
 8106dba:	b090      	sub	sp, #64	@ 0x40
 8106dbc:	af00      	add	r7, sp, #0
 8106dbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8106dc0:	2300      	movs	r3, #0
 8106dc2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8106dc4:	f7f9 ffee 	bl	8100da4 <HAL_GetTick>
 8106dc8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	681b      	ldr	r3, [r3, #0]
 8106dce:	4618      	mov	r0, r3
 8106dd0:	f000 fd58 	bl	8107884 <SDMMC_GetPowerState>
 8106dd4:	4603      	mov	r3, r0
 8106dd6:	2b00      	cmp	r3, #0
 8106dd8:	d102      	bne.n	8106de0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8106dda:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8106dde:	e0b5      	b.n	8106f4c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8106de0:	687b      	ldr	r3, [r7, #4]
 8106de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106de4:	2b03      	cmp	r3, #3
 8106de6:	d02e      	beq.n	8106e46 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	4618      	mov	r0, r3
 8106dee:	f000 ff65 	bl	8107cbc <SDMMC_CmdSendCID>
 8106df2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8106df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	d001      	beq.n	8106dfe <SD_InitCard+0x46>
    {
      return errorstate;
 8106dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106dfc:	e0a6      	b.n	8106f4c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	681b      	ldr	r3, [r3, #0]
 8106e02:	2100      	movs	r1, #0
 8106e04:	4618      	mov	r0, r3
 8106e06:	f000 fd82 	bl	810790e <SDMMC_GetResponse>
 8106e0a:	4602      	mov	r2, r0
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	681b      	ldr	r3, [r3, #0]
 8106e14:	2104      	movs	r1, #4
 8106e16:	4618      	mov	r0, r3
 8106e18:	f000 fd79 	bl	810790e <SDMMC_GetResponse>
 8106e1c:	4602      	mov	r2, r0
 8106e1e:	687b      	ldr	r3, [r7, #4]
 8106e20:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	2108      	movs	r1, #8
 8106e28:	4618      	mov	r0, r3
 8106e2a:	f000 fd70 	bl	810790e <SDMMC_GetResponse>
 8106e2e:	4602      	mov	r2, r0
 8106e30:	687b      	ldr	r3, [r7, #4]
 8106e32:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	681b      	ldr	r3, [r3, #0]
 8106e38:	210c      	movs	r1, #12
 8106e3a:	4618      	mov	r0, r3
 8106e3c:	f000 fd67 	bl	810790e <SDMMC_GetResponse>
 8106e40:	4602      	mov	r2, r0
 8106e42:	687b      	ldr	r3, [r7, #4]
 8106e44:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8106e46:	687b      	ldr	r3, [r7, #4]
 8106e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106e4a:	2b03      	cmp	r3, #3
 8106e4c:	d01d      	beq.n	8106e8a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8106e4e:	e019      	b.n	8106e84 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	681b      	ldr	r3, [r3, #0]
 8106e54:	f107 020a 	add.w	r2, r7, #10
 8106e58:	4611      	mov	r1, r2
 8106e5a:	4618      	mov	r0, r3
 8106e5c:	f000 ff6d 	bl	8107d3a <SDMMC_CmdSetRelAdd>
 8106e60:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8106e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e64:	2b00      	cmp	r3, #0
 8106e66:	d001      	beq.n	8106e6c <SD_InitCard+0xb4>
      {
        return errorstate;
 8106e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106e6a:	e06f      	b.n	8106f4c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8106e6c:	f7f9 ff9a 	bl	8100da4 <HAL_GetTick>
 8106e70:	4602      	mov	r2, r0
 8106e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106e74:	1ad3      	subs	r3, r2, r3
 8106e76:	f241 3287 	movw	r2, #4999	@ 0x1387
 8106e7a:	4293      	cmp	r3, r2
 8106e7c:	d902      	bls.n	8106e84 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8106e7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8106e82:	e063      	b.n	8106f4c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8106e84:	897b      	ldrh	r3, [r7, #10]
 8106e86:	2b00      	cmp	r3, #0
 8106e88:	d0e2      	beq.n	8106e50 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8106e8a:	687b      	ldr	r3, [r7, #4]
 8106e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106e8e:	2b03      	cmp	r3, #3
 8106e90:	d036      	beq.n	8106f00 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8106e92:	897b      	ldrh	r3, [r7, #10]
 8106e94:	461a      	mov	r2, r3
 8106e96:	687b      	ldr	r3, [r7, #4]
 8106e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	681a      	ldr	r2, [r3, #0]
 8106e9e:	687b      	ldr	r3, [r7, #4]
 8106ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106ea2:	041b      	lsls	r3, r3, #16
 8106ea4:	4619      	mov	r1, r3
 8106ea6:	4610      	mov	r0, r2
 8106ea8:	f000 ff27 	bl	8107cfa <SDMMC_CmdSendCSD>
 8106eac:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8106eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106eb0:	2b00      	cmp	r3, #0
 8106eb2:	d001      	beq.n	8106eb8 <SD_InitCard+0x100>
    {
      return errorstate;
 8106eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106eb6:	e049      	b.n	8106f4c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	2100      	movs	r1, #0
 8106ebe:	4618      	mov	r0, r3
 8106ec0:	f000 fd25 	bl	810790e <SDMMC_GetResponse>
 8106ec4:	4602      	mov	r2, r0
 8106ec6:	687b      	ldr	r3, [r7, #4]
 8106ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8106eca:	687b      	ldr	r3, [r7, #4]
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	2104      	movs	r1, #4
 8106ed0:	4618      	mov	r0, r3
 8106ed2:	f000 fd1c 	bl	810790e <SDMMC_GetResponse>
 8106ed6:	4602      	mov	r2, r0
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	681b      	ldr	r3, [r3, #0]
 8106ee0:	2108      	movs	r1, #8
 8106ee2:	4618      	mov	r0, r3
 8106ee4:	f000 fd13 	bl	810790e <SDMMC_GetResponse>
 8106ee8:	4602      	mov	r2, r0
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8106eee:	687b      	ldr	r3, [r7, #4]
 8106ef0:	681b      	ldr	r3, [r3, #0]
 8106ef2:	210c      	movs	r1, #12
 8106ef4:	4618      	mov	r0, r3
 8106ef6:	f000 fd0a 	bl	810790e <SDMMC_GetResponse>
 8106efa:	4602      	mov	r2, r0
 8106efc:	687b      	ldr	r3, [r7, #4]
 8106efe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8106f00:	687b      	ldr	r3, [r7, #4]
 8106f02:	681b      	ldr	r3, [r3, #0]
 8106f04:	2104      	movs	r1, #4
 8106f06:	4618      	mov	r0, r3
 8106f08:	f000 fd01 	bl	810790e <SDMMC_GetResponse>
 8106f0c:	4603      	mov	r3, r0
 8106f0e:	0d1a      	lsrs	r2, r3, #20
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8106f14:	f107 030c 	add.w	r3, r7, #12
 8106f18:	4619      	mov	r1, r3
 8106f1a:	6878      	ldr	r0, [r7, #4]
 8106f1c:	f7ff fb8c 	bl	8106638 <HAL_SD_GetCardCSD>
 8106f20:	4603      	mov	r3, r0
 8106f22:	2b00      	cmp	r3, #0
 8106f24:	d002      	beq.n	8106f2c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106f26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8106f2a:	e00f      	b.n	8106f4c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8106f2c:	687b      	ldr	r3, [r7, #4]
 8106f2e:	681a      	ldr	r2, [r3, #0]
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106f34:	041b      	lsls	r3, r3, #16
 8106f36:	4619      	mov	r1, r3
 8106f38:	4610      	mov	r0, r2
 8106f3a:	f000 fdd6 	bl	8107aea <SDMMC_CmdSelDesel>
 8106f3e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8106f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f42:	2b00      	cmp	r3, #0
 8106f44:	d001      	beq.n	8106f4a <SD_InitCard+0x192>
  {
    return errorstate;
 8106f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106f48:	e000      	b.n	8106f4c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8106f4a:	2300      	movs	r3, #0
}
 8106f4c:	4618      	mov	r0, r3
 8106f4e:	3740      	adds	r7, #64	@ 0x40
 8106f50:	46bd      	mov	sp, r7
 8106f52:	bd80      	pop	{r7, pc}

08106f54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8106f54:	b580      	push	{r7, lr}
 8106f56:	b086      	sub	sp, #24
 8106f58:	af00      	add	r7, sp, #0
 8106f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8106f5c:	2300      	movs	r3, #0
 8106f5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8106f60:	2300      	movs	r3, #0
 8106f62:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8106f64:	2300      	movs	r3, #0
 8106f66:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8106f68:	687b      	ldr	r3, [r7, #4]
 8106f6a:	681b      	ldr	r3, [r3, #0]
 8106f6c:	4618      	mov	r0, r3
 8106f6e:	f000 fddf 	bl	8107b30 <SDMMC_CmdGoIdleState>
 8106f72:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8106f74:	68fb      	ldr	r3, [r7, #12]
 8106f76:	2b00      	cmp	r3, #0
 8106f78:	d001      	beq.n	8106f7e <SD_PowerON+0x2a>
  {
    return errorstate;
 8106f7a:	68fb      	ldr	r3, [r7, #12]
 8106f7c:	e072      	b.n	8107064 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	4618      	mov	r0, r3
 8106f84:	f000 fdf2 	bl	8107b6c <SDMMC_CmdOperCond>
 8106f88:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8106f8a:	68fb      	ldr	r3, [r7, #12]
 8106f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8106f90:	d10d      	bne.n	8106fae <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	2200      	movs	r2, #0
 8106f96:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8106f98:	687b      	ldr	r3, [r7, #4]
 8106f9a:	681b      	ldr	r3, [r3, #0]
 8106f9c:	4618      	mov	r0, r3
 8106f9e:	f000 fdc7 	bl	8107b30 <SDMMC_CmdGoIdleState>
 8106fa2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8106fa4:	68fb      	ldr	r3, [r7, #12]
 8106fa6:	2b00      	cmp	r3, #0
 8106fa8:	d004      	beq.n	8106fb4 <SD_PowerON+0x60>
    {
      return errorstate;
 8106faa:	68fb      	ldr	r3, [r7, #12]
 8106fac:	e05a      	b.n	8107064 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8106fae:	687b      	ldr	r3, [r7, #4]
 8106fb0:	2201      	movs	r2, #1
 8106fb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106fb8:	2b01      	cmp	r3, #1
 8106fba:	d137      	bne.n	810702c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	681b      	ldr	r3, [r3, #0]
 8106fc0:	2100      	movs	r1, #0
 8106fc2:	4618      	mov	r0, r3
 8106fc4:	f000 fdf2 	bl	8107bac <SDMMC_CmdAppCommand>
 8106fc8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8106fca:	68fb      	ldr	r3, [r7, #12]
 8106fcc:	2b00      	cmp	r3, #0
 8106fce:	d02d      	beq.n	810702c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106fd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8106fd4:	e046      	b.n	8107064 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	681b      	ldr	r3, [r3, #0]
 8106fda:	2100      	movs	r1, #0
 8106fdc:	4618      	mov	r0, r3
 8106fde:	f000 fde5 	bl	8107bac <SDMMC_CmdAppCommand>
 8106fe2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8106fe4:	68fb      	ldr	r3, [r7, #12]
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	d001      	beq.n	8106fee <SD_PowerON+0x9a>
    {
      return errorstate;
 8106fea:	68fb      	ldr	r3, [r7, #12]
 8106fec:	e03a      	b.n	8107064 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	681b      	ldr	r3, [r3, #0]
 8106ff2:	491e      	ldr	r1, [pc, #120]	@ (810706c <SD_PowerON+0x118>)
 8106ff4:	4618      	mov	r0, r3
 8106ff6:	f000 fdfc 	bl	8107bf2 <SDMMC_CmdAppOperCommand>
 8106ffa:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8106ffc:	68fb      	ldr	r3, [r7, #12]
 8106ffe:	2b00      	cmp	r3, #0
 8107000:	d002      	beq.n	8107008 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8107002:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8107006:	e02d      	b.n	8107064 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	681b      	ldr	r3, [r3, #0]
 810700c:	2100      	movs	r1, #0
 810700e:	4618      	mov	r0, r3
 8107010:	f000 fc7d 	bl	810790e <SDMMC_GetResponse>
 8107014:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8107016:	697b      	ldr	r3, [r7, #20]
 8107018:	0fdb      	lsrs	r3, r3, #31
 810701a:	2b01      	cmp	r3, #1
 810701c:	d101      	bne.n	8107022 <SD_PowerON+0xce>
 810701e:	2301      	movs	r3, #1
 8107020:	e000      	b.n	8107024 <SD_PowerON+0xd0>
 8107022:	2300      	movs	r3, #0
 8107024:	613b      	str	r3, [r7, #16]

    count++;
 8107026:	68bb      	ldr	r3, [r7, #8]
 8107028:	3301      	adds	r3, #1
 810702a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810702c:	68bb      	ldr	r3, [r7, #8]
 810702e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8107032:	4293      	cmp	r3, r2
 8107034:	d802      	bhi.n	810703c <SD_PowerON+0xe8>
 8107036:	693b      	ldr	r3, [r7, #16]
 8107038:	2b00      	cmp	r3, #0
 810703a:	d0cc      	beq.n	8106fd6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810703c:	68bb      	ldr	r3, [r7, #8]
 810703e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8107042:	4293      	cmp	r3, r2
 8107044:	d902      	bls.n	810704c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8107046:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810704a:	e00b      	b.n	8107064 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	2200      	movs	r2, #0
 8107050:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8107052:	697b      	ldr	r3, [r7, #20]
 8107054:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8107058:	2b00      	cmp	r3, #0
 810705a:	d002      	beq.n	8107062 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	2201      	movs	r2, #1
 8107060:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8107062:	2300      	movs	r3, #0
}
 8107064:	4618      	mov	r0, r3
 8107066:	3718      	adds	r7, #24
 8107068:	46bd      	mov	sp, r7
 810706a:	bd80      	pop	{r7, pc}
 810706c:	c1100000 	.word	0xc1100000

08107070 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8107070:	b580      	push	{r7, lr}
 8107072:	b08c      	sub	sp, #48	@ 0x30
 8107074:	af00      	add	r7, sp, #0
 8107076:	6078      	str	r0, [r7, #4]
 8107078:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810707a:	f7f9 fe93 	bl	8100da4 <HAL_GetTick>
 810707e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8107080:	683b      	ldr	r3, [r7, #0]
 8107082:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	681b      	ldr	r3, [r3, #0]
 8107088:	2100      	movs	r1, #0
 810708a:	4618      	mov	r0, r3
 810708c:	f000 fc3f 	bl	810790e <SDMMC_GetResponse>
 8107090:	4603      	mov	r3, r0
 8107092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107096:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810709a:	d102      	bne.n	81070a2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810709c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81070a0:	e0b0      	b.n	8107204 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 81070a2:	687b      	ldr	r3, [r7, #4]
 81070a4:	681b      	ldr	r3, [r3, #0]
 81070a6:	2140      	movs	r1, #64	@ 0x40
 81070a8:	4618      	mov	r0, r3
 81070aa:	f000 fc6f 	bl	810798c <SDMMC_CmdBlockLength>
 81070ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81070b0:	6a3b      	ldr	r3, [r7, #32]
 81070b2:	2b00      	cmp	r3, #0
 81070b4:	d005      	beq.n	81070c2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81070b6:	687b      	ldr	r3, [r7, #4]
 81070b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81070ba:	687b      	ldr	r3, [r7, #4]
 81070bc:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 81070be:	6a3b      	ldr	r3, [r7, #32]
 81070c0:	e0a0      	b.n	8107204 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	681a      	ldr	r2, [r3, #0]
 81070c6:	687b      	ldr	r3, [r7, #4]
 81070c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81070ca:	041b      	lsls	r3, r3, #16
 81070cc:	4619      	mov	r1, r3
 81070ce:	4610      	mov	r0, r2
 81070d0:	f000 fd6c 	bl	8107bac <SDMMC_CmdAppCommand>
 81070d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81070d6:	6a3b      	ldr	r3, [r7, #32]
 81070d8:	2b00      	cmp	r3, #0
 81070da:	d005      	beq.n	81070e8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81070e0:	687b      	ldr	r3, [r7, #4]
 81070e2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 81070e4:	6a3b      	ldr	r3, [r7, #32]
 81070e6:	e08d      	b.n	8107204 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81070e8:	f04f 33ff 	mov.w	r3, #4294967295
 81070ec:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 81070ee:	2340      	movs	r3, #64	@ 0x40
 81070f0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 81070f2:	2360      	movs	r3, #96	@ 0x60
 81070f4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81070f6:	2302      	movs	r3, #2
 81070f8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81070fa:	2300      	movs	r3, #0
 81070fc:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81070fe:	2301      	movs	r3, #1
 8107100:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	f107 0208 	add.w	r2, r7, #8
 810710a:	4611      	mov	r1, r2
 810710c:	4618      	mov	r0, r3
 810710e:	f000 fc11 	bl	8107934 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	681b      	ldr	r3, [r3, #0]
 8107116:	4618      	mov	r0, r3
 8107118:	f000 fe54 	bl	8107dc4 <SDMMC_CmdStatusRegister>
 810711c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810711e:	6a3b      	ldr	r3, [r7, #32]
 8107120:	2b00      	cmp	r3, #0
 8107122:	d02b      	beq.n	810717c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8107124:	687b      	ldr	r3, [r7, #4]
 8107126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810712c:	6a3b      	ldr	r3, [r7, #32]
 810712e:	e069      	b.n	8107204 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	681b      	ldr	r3, [r3, #0]
 8107134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107136:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810713a:	2b00      	cmp	r3, #0
 810713c:	d013      	beq.n	8107166 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810713e:	2300      	movs	r3, #0
 8107140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107142:	e00d      	b.n	8107160 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	681b      	ldr	r3, [r3, #0]
 8107148:	4618      	mov	r0, r3
 810714a:	f000 fb7d 	bl	8107848 <SDMMC_ReadFIFO>
 810714e:	4602      	mov	r2, r0
 8107150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107152:	601a      	str	r2, [r3, #0]
        pData++;
 8107154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107156:	3304      	adds	r3, #4
 8107158:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 810715a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810715c:	3301      	adds	r3, #1
 810715e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107162:	2b07      	cmp	r3, #7
 8107164:	d9ee      	bls.n	8107144 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8107166:	f7f9 fe1d 	bl	8100da4 <HAL_GetTick>
 810716a:	4602      	mov	r2, r0
 810716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810716e:	1ad3      	subs	r3, r2, r3
 8107170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107174:	d102      	bne.n	810717c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8107176:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810717a:	e043      	b.n	8107204 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107182:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8107186:	2b00      	cmp	r3, #0
 8107188:	d0d2      	beq.n	8107130 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	681b      	ldr	r3, [r3, #0]
 810718e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107190:	f003 0308 	and.w	r3, r3, #8
 8107194:	2b00      	cmp	r3, #0
 8107196:	d001      	beq.n	810719c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8107198:	2308      	movs	r3, #8
 810719a:	e033      	b.n	8107204 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810719c:	687b      	ldr	r3, [r7, #4]
 810719e:	681b      	ldr	r3, [r3, #0]
 81071a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81071a2:	f003 0302 	and.w	r3, r3, #2
 81071a6:	2b00      	cmp	r3, #0
 81071a8:	d001      	beq.n	81071ae <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81071aa:	2302      	movs	r3, #2
 81071ac:	e02a      	b.n	8107204 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81071ae:	687b      	ldr	r3, [r7, #4]
 81071b0:	681b      	ldr	r3, [r3, #0]
 81071b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81071b4:	f003 0320 	and.w	r3, r3, #32
 81071b8:	2b00      	cmp	r3, #0
 81071ba:	d017      	beq.n	81071ec <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 81071bc:	2320      	movs	r3, #32
 81071be:	e021      	b.n	8107204 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	681b      	ldr	r3, [r3, #0]
 81071c4:	4618      	mov	r0, r3
 81071c6:	f000 fb3f 	bl	8107848 <SDMMC_ReadFIFO>
 81071ca:	4602      	mov	r2, r0
 81071cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81071ce:	601a      	str	r2, [r3, #0]
    pData++;
 81071d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81071d2:	3304      	adds	r3, #4
 81071d4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81071d6:	f7f9 fde5 	bl	8100da4 <HAL_GetTick>
 81071da:	4602      	mov	r2, r0
 81071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81071de:	1ad3      	subs	r3, r2, r3
 81071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81071e4:	d102      	bne.n	81071ec <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81071e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81071ea:	e00b      	b.n	8107204 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	681b      	ldr	r3, [r3, #0]
 81071f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81071f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81071f6:	2b00      	cmp	r3, #0
 81071f8:	d1e2      	bne.n	81071c0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	681b      	ldr	r3, [r3, #0]
 81071fe:	4a03      	ldr	r2, [pc, #12]	@ (810720c <SD_SendSDStatus+0x19c>)
 8107200:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8107202:	2300      	movs	r3, #0
}
 8107204:	4618      	mov	r0, r3
 8107206:	3730      	adds	r7, #48	@ 0x30
 8107208:	46bd      	mov	sp, r7
 810720a:	bd80      	pop	{r7, pc}
 810720c:	18000f3a 	.word	0x18000f3a

08107210 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8107210:	b580      	push	{r7, lr}
 8107212:	b084      	sub	sp, #16
 8107214:	af00      	add	r7, sp, #0
 8107216:	6078      	str	r0, [r7, #4]
 8107218:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810721a:	683b      	ldr	r3, [r7, #0]
 810721c:	2b00      	cmp	r3, #0
 810721e:	d102      	bne.n	8107226 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8107220:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8107224:	e018      	b.n	8107258 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8107226:	687b      	ldr	r3, [r7, #4]
 8107228:	681a      	ldr	r2, [r3, #0]
 810722a:	687b      	ldr	r3, [r7, #4]
 810722c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810722e:	041b      	lsls	r3, r3, #16
 8107230:	4619      	mov	r1, r3
 8107232:	4610      	mov	r0, r2
 8107234:	f000 fda3 	bl	8107d7e <SDMMC_CmdSendStatus>
 8107238:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810723a:	68fb      	ldr	r3, [r7, #12]
 810723c:	2b00      	cmp	r3, #0
 810723e:	d001      	beq.n	8107244 <SD_SendStatus+0x34>
  {
    return errorstate;
 8107240:	68fb      	ldr	r3, [r7, #12]
 8107242:	e009      	b.n	8107258 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	2100      	movs	r1, #0
 810724a:	4618      	mov	r0, r3
 810724c:	f000 fb5f 	bl	810790e <SDMMC_GetResponse>
 8107250:	4602      	mov	r2, r0
 8107252:	683b      	ldr	r3, [r7, #0]
 8107254:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8107256:	2300      	movs	r3, #0
}
 8107258:	4618      	mov	r0, r3
 810725a:	3710      	adds	r7, #16
 810725c:	46bd      	mov	sp, r7
 810725e:	bd80      	pop	{r7, pc}

08107260 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8107260:	b580      	push	{r7, lr}
 8107262:	b086      	sub	sp, #24
 8107264:	af00      	add	r7, sp, #0
 8107266:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8107268:	2300      	movs	r3, #0
 810726a:	60fb      	str	r3, [r7, #12]
 810726c:	2300      	movs	r3, #0
 810726e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	681b      	ldr	r3, [r3, #0]
 8107274:	2100      	movs	r1, #0
 8107276:	4618      	mov	r0, r3
 8107278:	f000 fb49 	bl	810790e <SDMMC_GetResponse>
 810727c:	4603      	mov	r3, r0
 810727e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107286:	d102      	bne.n	810728e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8107288:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810728c:	e02f      	b.n	81072ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810728e:	f107 030c 	add.w	r3, r7, #12
 8107292:	4619      	mov	r1, r3
 8107294:	6878      	ldr	r0, [r7, #4]
 8107296:	f000 f879 	bl	810738c <SD_FindSCR>
 810729a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810729c:	697b      	ldr	r3, [r7, #20]
 810729e:	2b00      	cmp	r3, #0
 81072a0:	d001      	beq.n	81072a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 81072a2:	697b      	ldr	r3, [r7, #20]
 81072a4:	e023      	b.n	81072ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 81072a6:	693b      	ldr	r3, [r7, #16]
 81072a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81072ac:	2b00      	cmp	r3, #0
 81072ae:	d01c      	beq.n	81072ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81072b0:	687b      	ldr	r3, [r7, #4]
 81072b2:	681a      	ldr	r2, [r3, #0]
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81072b8:	041b      	lsls	r3, r3, #16
 81072ba:	4619      	mov	r1, r3
 81072bc:	4610      	mov	r0, r2
 81072be:	f000 fc75 	bl	8107bac <SDMMC_CmdAppCommand>
 81072c2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81072c4:	697b      	ldr	r3, [r7, #20]
 81072c6:	2b00      	cmp	r3, #0
 81072c8:	d001      	beq.n	81072ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 81072ca:	697b      	ldr	r3, [r7, #20]
 81072cc:	e00f      	b.n	81072ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	681b      	ldr	r3, [r3, #0]
 81072d2:	2102      	movs	r1, #2
 81072d4:	4618      	mov	r0, r3
 81072d6:	f000 fcac 	bl	8107c32 <SDMMC_CmdBusWidth>
 81072da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81072dc:	697b      	ldr	r3, [r7, #20]
 81072de:	2b00      	cmp	r3, #0
 81072e0:	d001      	beq.n	81072e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 81072e2:	697b      	ldr	r3, [r7, #20]
 81072e4:	e003      	b.n	81072ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 81072e6:	2300      	movs	r3, #0
 81072e8:	e001      	b.n	81072ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81072ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 81072ee:	4618      	mov	r0, r3
 81072f0:	3718      	adds	r7, #24
 81072f2:	46bd      	mov	sp, r7
 81072f4:	bd80      	pop	{r7, pc}

081072f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 81072f6:	b580      	push	{r7, lr}
 81072f8:	b086      	sub	sp, #24
 81072fa:	af00      	add	r7, sp, #0
 81072fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 81072fe:	2300      	movs	r3, #0
 8107300:	60fb      	str	r3, [r7, #12]
 8107302:	2300      	movs	r3, #0
 8107304:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	681b      	ldr	r3, [r3, #0]
 810730a:	2100      	movs	r1, #0
 810730c:	4618      	mov	r0, r3
 810730e:	f000 fafe 	bl	810790e <SDMMC_GetResponse>
 8107312:	4603      	mov	r3, r0
 8107314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810731c:	d102      	bne.n	8107324 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810731e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107322:	e02f      	b.n	8107384 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8107324:	f107 030c 	add.w	r3, r7, #12
 8107328:	4619      	mov	r1, r3
 810732a:	6878      	ldr	r0, [r7, #4]
 810732c:	f000 f82e 	bl	810738c <SD_FindSCR>
 8107330:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8107332:	697b      	ldr	r3, [r7, #20]
 8107334:	2b00      	cmp	r3, #0
 8107336:	d001      	beq.n	810733c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8107338:	697b      	ldr	r3, [r7, #20]
 810733a:	e023      	b.n	8107384 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810733c:	693b      	ldr	r3, [r7, #16]
 810733e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107342:	2b00      	cmp	r3, #0
 8107344:	d01c      	beq.n	8107380 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	681a      	ldr	r2, [r3, #0]
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810734e:	041b      	lsls	r3, r3, #16
 8107350:	4619      	mov	r1, r3
 8107352:	4610      	mov	r0, r2
 8107354:	f000 fc2a 	bl	8107bac <SDMMC_CmdAppCommand>
 8107358:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810735a:	697b      	ldr	r3, [r7, #20]
 810735c:	2b00      	cmp	r3, #0
 810735e:	d001      	beq.n	8107364 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8107360:	697b      	ldr	r3, [r7, #20]
 8107362:	e00f      	b.n	8107384 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	2100      	movs	r1, #0
 810736a:	4618      	mov	r0, r3
 810736c:	f000 fc61 	bl	8107c32 <SDMMC_CmdBusWidth>
 8107370:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8107372:	697b      	ldr	r3, [r7, #20]
 8107374:	2b00      	cmp	r3, #0
 8107376:	d001      	beq.n	810737c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8107378:	697b      	ldr	r3, [r7, #20]
 810737a:	e003      	b.n	8107384 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810737c:	2300      	movs	r3, #0
 810737e:	e001      	b.n	8107384 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8107380:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8107384:	4618      	mov	r0, r3
 8107386:	3718      	adds	r7, #24
 8107388:	46bd      	mov	sp, r7
 810738a:	bd80      	pop	{r7, pc}

0810738c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810738c:	b580      	push	{r7, lr}
 810738e:	b08e      	sub	sp, #56	@ 0x38
 8107390:	af00      	add	r7, sp, #0
 8107392:	6078      	str	r0, [r7, #4]
 8107394:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8107396:	f7f9 fd05 	bl	8100da4 <HAL_GetTick>
 810739a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 810739c:	2300      	movs	r3, #0
 810739e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 81073a0:	2300      	movs	r3, #0
 81073a2:	60bb      	str	r3, [r7, #8]
 81073a4:	2300      	movs	r3, #0
 81073a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 81073a8:	683b      	ldr	r3, [r7, #0]
 81073aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	681b      	ldr	r3, [r3, #0]
 81073b0:	2108      	movs	r1, #8
 81073b2:	4618      	mov	r0, r3
 81073b4:	f000 faea 	bl	810798c <SDMMC_CmdBlockLength>
 81073b8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81073bc:	2b00      	cmp	r3, #0
 81073be:	d001      	beq.n	81073c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 81073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81073c2:	e0ad      	b.n	8107520 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 81073c4:	687b      	ldr	r3, [r7, #4]
 81073c6:	681a      	ldr	r2, [r3, #0]
 81073c8:	687b      	ldr	r3, [r7, #4]
 81073ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81073cc:	041b      	lsls	r3, r3, #16
 81073ce:	4619      	mov	r1, r3
 81073d0:	4610      	mov	r0, r2
 81073d2:	f000 fbeb 	bl	8107bac <SDMMC_CmdAppCommand>
 81073d6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81073da:	2b00      	cmp	r3, #0
 81073dc:	d001      	beq.n	81073e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 81073de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81073e0:	e09e      	b.n	8107520 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81073e2:	f04f 33ff 	mov.w	r3, #4294967295
 81073e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 81073e8:	2308      	movs	r3, #8
 81073ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 81073ec:	2330      	movs	r3, #48	@ 0x30
 81073ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81073f0:	2302      	movs	r3, #2
 81073f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81073f4:	2300      	movs	r3, #0
 81073f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81073f8:	2301      	movs	r3, #1
 81073fa:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	f107 0210 	add.w	r2, r7, #16
 8107404:	4611      	mov	r1, r2
 8107406:	4618      	mov	r0, r3
 8107408:	f000 fa94 	bl	8107934 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810740c:	687b      	ldr	r3, [r7, #4]
 810740e:	681b      	ldr	r3, [r3, #0]
 8107410:	4618      	mov	r0, r3
 8107412:	f000 fc31 	bl	8107c78 <SDMMC_CmdSendSCR>
 8107416:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8107418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810741a:	2b00      	cmp	r3, #0
 810741c:	d027      	beq.n	810746e <SD_FindSCR+0xe2>
  {
    return errorstate;
 810741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107420:	e07e      	b.n	8107520 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8107422:	687b      	ldr	r3, [r7, #4]
 8107424:	681b      	ldr	r3, [r3, #0]
 8107426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107428:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810742c:	2b00      	cmp	r3, #0
 810742e:	d113      	bne.n	8107458 <SD_FindSCR+0xcc>
 8107430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107432:	2b00      	cmp	r3, #0
 8107434:	d110      	bne.n	8107458 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8107436:	687b      	ldr	r3, [r7, #4]
 8107438:	681b      	ldr	r3, [r3, #0]
 810743a:	4618      	mov	r0, r3
 810743c:	f000 fa04 	bl	8107848 <SDMMC_ReadFIFO>
 8107440:	4603      	mov	r3, r0
 8107442:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8107444:	687b      	ldr	r3, [r7, #4]
 8107446:	681b      	ldr	r3, [r3, #0]
 8107448:	4618      	mov	r0, r3
 810744a:	f000 f9fd 	bl	8107848 <SDMMC_ReadFIFO>
 810744e:	4603      	mov	r3, r0
 8107450:	60fb      	str	r3, [r7, #12]
      index++;
 8107452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107454:	3301      	adds	r3, #1
 8107456:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8107458:	f7f9 fca4 	bl	8100da4 <HAL_GetTick>
 810745c:	4602      	mov	r2, r0
 810745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107460:	1ad3      	subs	r3, r2, r3
 8107462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107466:	d102      	bne.n	810746e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8107468:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810746c:	e058      	b.n	8107520 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810746e:	687b      	ldr	r3, [r7, #4]
 8107470:	681b      	ldr	r3, [r3, #0]
 8107472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107474:	f240 532a 	movw	r3, #1322	@ 0x52a
 8107478:	4013      	ands	r3, r2
 810747a:	2b00      	cmp	r3, #0
 810747c:	d0d1      	beq.n	8107422 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810747e:	687b      	ldr	r3, [r7, #4]
 8107480:	681b      	ldr	r3, [r3, #0]
 8107482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107484:	f003 0308 	and.w	r3, r3, #8
 8107488:	2b00      	cmp	r3, #0
 810748a:	d005      	beq.n	8107498 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810748c:	687b      	ldr	r3, [r7, #4]
 810748e:	681b      	ldr	r3, [r3, #0]
 8107490:	2208      	movs	r2, #8
 8107492:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8107494:	2308      	movs	r3, #8
 8107496:	e043      	b.n	8107520 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8107498:	687b      	ldr	r3, [r7, #4]
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810749e:	f003 0302 	and.w	r3, r3, #2
 81074a2:	2b00      	cmp	r3, #0
 81074a4:	d005      	beq.n	81074b2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	2202      	movs	r2, #2
 81074ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81074ae:	2302      	movs	r3, #2
 81074b0:	e036      	b.n	8107520 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81074b8:	f003 0320 	and.w	r3, r3, #32
 81074bc:	2b00      	cmp	r3, #0
 81074be:	d005      	beq.n	81074cc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	2220      	movs	r2, #32
 81074c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 81074c8:	2320      	movs	r3, #32
 81074ca:	e029      	b.n	8107520 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	4a15      	ldr	r2, [pc, #84]	@ (8107528 <SD_FindSCR+0x19c>)
 81074d2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81074d4:	68fb      	ldr	r3, [r7, #12]
 81074d6:	061a      	lsls	r2, r3, #24
 81074d8:	68fb      	ldr	r3, [r7, #12]
 81074da:	021b      	lsls	r3, r3, #8
 81074dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 81074e0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 81074e2:	68fb      	ldr	r3, [r7, #12]
 81074e4:	0a1b      	lsrs	r3, r3, #8
 81074e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81074ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 81074ec:	68fb      	ldr	r3, [r7, #12]
 81074ee:	0e1b      	lsrs	r3, r3, #24
 81074f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81074f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81074f4:	601a      	str	r2, [r3, #0]
    scr++;
 81074f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81074f8:	3304      	adds	r3, #4
 81074fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 81074fc:	68bb      	ldr	r3, [r7, #8]
 81074fe:	061a      	lsls	r2, r3, #24
 8107500:	68bb      	ldr	r3, [r7, #8]
 8107502:	021b      	lsls	r3, r3, #8
 8107504:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8107508:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810750a:	68bb      	ldr	r3, [r7, #8]
 810750c:	0a1b      	lsrs	r3, r3, #8
 810750e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8107512:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8107514:	68bb      	ldr	r3, [r7, #8]
 8107516:	0e1b      	lsrs	r3, r3, #24
 8107518:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810751a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810751c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810751e:	2300      	movs	r3, #0
}
 8107520:	4618      	mov	r0, r3
 8107522:	3738      	adds	r7, #56	@ 0x38
 8107524:	46bd      	mov	sp, r7
 8107526:	bd80      	pop	{r7, pc}
 8107528:	18000f3a 	.word	0x18000f3a

0810752c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810752c:	b580      	push	{r7, lr}
 810752e:	b084      	sub	sp, #16
 8107530:	af00      	add	r7, sp, #0
 8107532:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	2b00      	cmp	r3, #0
 8107538:	d101      	bne.n	810753e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810753a:	2301      	movs	r3, #1
 810753c:	e10f      	b.n	810775e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	2200      	movs	r2, #0
 8107542:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8107544:	687b      	ldr	r3, [r7, #4]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	4a87      	ldr	r2, [pc, #540]	@ (8107768 <HAL_SPI_Init+0x23c>)
 810754a:	4293      	cmp	r3, r2
 810754c:	d00f      	beq.n	810756e <HAL_SPI_Init+0x42>
 810754e:	687b      	ldr	r3, [r7, #4]
 8107550:	681b      	ldr	r3, [r3, #0]
 8107552:	4a86      	ldr	r2, [pc, #536]	@ (810776c <HAL_SPI_Init+0x240>)
 8107554:	4293      	cmp	r3, r2
 8107556:	d00a      	beq.n	810756e <HAL_SPI_Init+0x42>
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	681b      	ldr	r3, [r3, #0]
 810755c:	4a84      	ldr	r2, [pc, #528]	@ (8107770 <HAL_SPI_Init+0x244>)
 810755e:	4293      	cmp	r3, r2
 8107560:	d005      	beq.n	810756e <HAL_SPI_Init+0x42>
 8107562:	687b      	ldr	r3, [r7, #4]
 8107564:	68db      	ldr	r3, [r3, #12]
 8107566:	2b0f      	cmp	r3, #15
 8107568:	d901      	bls.n	810756e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810756a:	2301      	movs	r3, #1
 810756c:	e0f7      	b.n	810775e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810756e:	6878      	ldr	r0, [r7, #4]
 8107570:	f000 f900 	bl	8107774 <SPI_GetPacketSize>
 8107574:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107576:	687b      	ldr	r3, [r7, #4]
 8107578:	681b      	ldr	r3, [r3, #0]
 810757a:	4a7b      	ldr	r2, [pc, #492]	@ (8107768 <HAL_SPI_Init+0x23c>)
 810757c:	4293      	cmp	r3, r2
 810757e:	d00c      	beq.n	810759a <HAL_SPI_Init+0x6e>
 8107580:	687b      	ldr	r3, [r7, #4]
 8107582:	681b      	ldr	r3, [r3, #0]
 8107584:	4a79      	ldr	r2, [pc, #484]	@ (810776c <HAL_SPI_Init+0x240>)
 8107586:	4293      	cmp	r3, r2
 8107588:	d007      	beq.n	810759a <HAL_SPI_Init+0x6e>
 810758a:	687b      	ldr	r3, [r7, #4]
 810758c:	681b      	ldr	r3, [r3, #0]
 810758e:	4a78      	ldr	r2, [pc, #480]	@ (8107770 <HAL_SPI_Init+0x244>)
 8107590:	4293      	cmp	r3, r2
 8107592:	d002      	beq.n	810759a <HAL_SPI_Init+0x6e>
 8107594:	68fb      	ldr	r3, [r7, #12]
 8107596:	2b08      	cmp	r3, #8
 8107598:	d811      	bhi.n	81075be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810759e:	4a72      	ldr	r2, [pc, #456]	@ (8107768 <HAL_SPI_Init+0x23c>)
 81075a0:	4293      	cmp	r3, r2
 81075a2:	d009      	beq.n	81075b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81075a4:	687b      	ldr	r3, [r7, #4]
 81075a6:	681b      	ldr	r3, [r3, #0]
 81075a8:	4a70      	ldr	r2, [pc, #448]	@ (810776c <HAL_SPI_Init+0x240>)
 81075aa:	4293      	cmp	r3, r2
 81075ac:	d004      	beq.n	81075b8 <HAL_SPI_Init+0x8c>
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	681b      	ldr	r3, [r3, #0]
 81075b2:	4a6f      	ldr	r2, [pc, #444]	@ (8107770 <HAL_SPI_Init+0x244>)
 81075b4:	4293      	cmp	r3, r2
 81075b6:	d104      	bne.n	81075c2 <HAL_SPI_Init+0x96>
 81075b8:	68fb      	ldr	r3, [r7, #12]
 81075ba:	2b10      	cmp	r3, #16
 81075bc:	d901      	bls.n	81075c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81075be:	2301      	movs	r3, #1
 81075c0:	e0cd      	b.n	810775e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81075c8:	b2db      	uxtb	r3, r3
 81075ca:	2b00      	cmp	r3, #0
 81075cc:	d106      	bne.n	81075dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81075ce:	687b      	ldr	r3, [r7, #4]
 81075d0:	2200      	movs	r2, #0
 81075d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81075d6:	6878      	ldr	r0, [r7, #4]
 81075d8:	f7f9 fa8c 	bl	8100af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	2202      	movs	r2, #2
 81075e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81075e4:	687b      	ldr	r3, [r7, #4]
 81075e6:	681b      	ldr	r3, [r3, #0]
 81075e8:	681a      	ldr	r2, [r3, #0]
 81075ea:	687b      	ldr	r3, [r7, #4]
 81075ec:	681b      	ldr	r3, [r3, #0]
 81075ee:	f022 0201 	bic.w	r2, r2, #1
 81075f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	681b      	ldr	r3, [r3, #0]
 81075f8:	689b      	ldr	r3, [r3, #8]
 81075fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 81075fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	699b      	ldr	r3, [r3, #24]
 8107604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107608:	d119      	bne.n	810763e <HAL_SPI_Init+0x112>
 810760a:	687b      	ldr	r3, [r7, #4]
 810760c:	685b      	ldr	r3, [r3, #4]
 810760e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107612:	d103      	bne.n	810761c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8107618:	2b00      	cmp	r3, #0
 810761a:	d008      	beq.n	810762e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810761c:	687b      	ldr	r3, [r7, #4]
 810761e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107620:	2b00      	cmp	r3, #0
 8107622:	d10c      	bne.n	810763e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8107624:	687b      	ldr	r3, [r7, #4]
 8107626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8107628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810762c:	d107      	bne.n	810763e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	681b      	ldr	r3, [r3, #0]
 8107632:	681a      	ldr	r2, [r3, #0]
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 810763c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810763e:	687b      	ldr	r3, [r7, #4]
 8107640:	685b      	ldr	r3, [r3, #4]
 8107642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107646:	2b00      	cmp	r3, #0
 8107648:	d00f      	beq.n	810766a <HAL_SPI_Init+0x13e>
 810764a:	687b      	ldr	r3, [r7, #4]
 810764c:	68db      	ldr	r3, [r3, #12]
 810764e:	2b06      	cmp	r3, #6
 8107650:	d90b      	bls.n	810766a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8107652:	687b      	ldr	r3, [r7, #4]
 8107654:	681b      	ldr	r3, [r3, #0]
 8107656:	681b      	ldr	r3, [r3, #0]
 8107658:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810765c:	687b      	ldr	r3, [r7, #4]
 810765e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8107660:	687b      	ldr	r3, [r7, #4]
 8107662:	681b      	ldr	r3, [r3, #0]
 8107664:	430a      	orrs	r2, r1
 8107666:	601a      	str	r2, [r3, #0]
 8107668:	e007      	b.n	810767a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810766a:	687b      	ldr	r3, [r7, #4]
 810766c:	681b      	ldr	r3, [r3, #0]
 810766e:	681a      	ldr	r2, [r3, #0]
 8107670:	687b      	ldr	r3, [r7, #4]
 8107672:	681b      	ldr	r3, [r3, #0]
 8107674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107678:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810767a:	687b      	ldr	r3, [r7, #4]
 810767c:	69da      	ldr	r2, [r3, #28]
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107682:	431a      	orrs	r2, r3
 8107684:	68bb      	ldr	r3, [r7, #8]
 8107686:	431a      	orrs	r2, r3
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810768c:	ea42 0103 	orr.w	r1, r2, r3
 8107690:	687b      	ldr	r3, [r7, #4]
 8107692:	68da      	ldr	r2, [r3, #12]
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	430a      	orrs	r2, r1
 810769a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810769c:	687b      	ldr	r3, [r7, #4]
 810769e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81076a0:	687b      	ldr	r3, [r7, #4]
 81076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81076a4:	431a      	orrs	r2, r3
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81076aa:	431a      	orrs	r2, r3
 81076ac:	687b      	ldr	r3, [r7, #4]
 81076ae:	699b      	ldr	r3, [r3, #24]
 81076b0:	431a      	orrs	r2, r3
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	691b      	ldr	r3, [r3, #16]
 81076b6:	431a      	orrs	r2, r3
 81076b8:	687b      	ldr	r3, [r7, #4]
 81076ba:	695b      	ldr	r3, [r3, #20]
 81076bc:	431a      	orrs	r2, r3
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	6a1b      	ldr	r3, [r3, #32]
 81076c2:	431a      	orrs	r2, r3
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	685b      	ldr	r3, [r3, #4]
 81076c8:	431a      	orrs	r2, r3
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81076ce:	431a      	orrs	r2, r3
 81076d0:	687b      	ldr	r3, [r7, #4]
 81076d2:	689b      	ldr	r3, [r3, #8]
 81076d4:	431a      	orrs	r2, r3
 81076d6:	687b      	ldr	r3, [r7, #4]
 81076d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81076da:	ea42 0103 	orr.w	r1, r2, r3
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 81076e2:	687b      	ldr	r3, [r7, #4]
 81076e4:	681b      	ldr	r3, [r3, #0]
 81076e6:	430a      	orrs	r2, r1
 81076e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81076ea:	687b      	ldr	r3, [r7, #4]
 81076ec:	685b      	ldr	r3, [r3, #4]
 81076ee:	2b00      	cmp	r3, #0
 81076f0:	d113      	bne.n	810771a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	689b      	ldr	r3, [r3, #8]
 81076f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107704:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107706:	687b      	ldr	r3, [r7, #4]
 8107708:	681b      	ldr	r3, [r3, #0]
 810770a:	689b      	ldr	r3, [r3, #8]
 810770c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	681b      	ldr	r3, [r3, #0]
 8107714:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8107718:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810771a:	687b      	ldr	r3, [r7, #4]
 810771c:	681b      	ldr	r3, [r3, #0]
 810771e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	f022 0201 	bic.w	r2, r2, #1
 8107728:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810772a:	687b      	ldr	r3, [r7, #4]
 810772c:	685b      	ldr	r3, [r3, #4]
 810772e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107732:	2b00      	cmp	r3, #0
 8107734:	d00a      	beq.n	810774c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107736:	687b      	ldr	r3, [r7, #4]
 8107738:	681b      	ldr	r3, [r3, #0]
 810773a:	68db      	ldr	r3, [r3, #12]
 810773c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107740:	687b      	ldr	r3, [r7, #4]
 8107742:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	681b      	ldr	r3, [r3, #0]
 8107748:	430a      	orrs	r2, r1
 810774a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	2200      	movs	r2, #0
 8107750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107754:	687b      	ldr	r3, [r7, #4]
 8107756:	2201      	movs	r2, #1
 8107758:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 810775c:	2300      	movs	r3, #0
}
 810775e:	4618      	mov	r0, r3
 8107760:	3710      	adds	r7, #16
 8107762:	46bd      	mov	sp, r7
 8107764:	bd80      	pop	{r7, pc}
 8107766:	bf00      	nop
 8107768:	40013000 	.word	0x40013000
 810776c:	40003800 	.word	0x40003800
 8107770:	40003c00 	.word	0x40003c00

08107774 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8107774:	b480      	push	{r7}
 8107776:	b085      	sub	sp, #20
 8107778:	af00      	add	r7, sp, #0
 810777a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810777c:	687b      	ldr	r3, [r7, #4]
 810777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107780:	095b      	lsrs	r3, r3, #5
 8107782:	3301      	adds	r3, #1
 8107784:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8107786:	687b      	ldr	r3, [r7, #4]
 8107788:	68db      	ldr	r3, [r3, #12]
 810778a:	3301      	adds	r3, #1
 810778c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810778e:	68bb      	ldr	r3, [r7, #8]
 8107790:	3307      	adds	r3, #7
 8107792:	08db      	lsrs	r3, r3, #3
 8107794:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8107796:	68bb      	ldr	r3, [r7, #8]
 8107798:	68fa      	ldr	r2, [r7, #12]
 810779a:	fb02 f303 	mul.w	r3, r2, r3
}
 810779e:	4618      	mov	r0, r3
 81077a0:	3714      	adds	r7, #20
 81077a2:	46bd      	mov	sp, r7
 81077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077a8:	4770      	bx	lr

081077aa <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 81077aa:	b580      	push	{r7, lr}
 81077ac:	b082      	sub	sp, #8
 81077ae:	af00      	add	r7, sp, #0
 81077b0:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 81077b2:	687b      	ldr	r3, [r7, #4]
 81077b4:	2b00      	cmp	r3, #0
 81077b6:	d101      	bne.n	81077bc <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 81077b8:	2301      	movs	r3, #1
 81077ba:	e016      	b.n	81077ea <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 81077bc:	6878      	ldr	r0, [r7, #4]
 81077be:	f7f9 f9d3 	bl	8100b68 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	68da      	ldr	r2, [r3, #12]
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	681b      	ldr	r3, [r3, #0]
 81077ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 81077ce:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 81077d0:	687b      	ldr	r3, [r7, #4]
 81077d2:	691a      	ldr	r2, [r3, #16]
 81077d4:	687b      	ldr	r3, [r7, #4]
 81077d6:	685b      	ldr	r3, [r3, #4]
 81077d8:	ea42 0103 	orr.w	r1, r2, r3
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	689a      	ldr	r2, [r3, #8]
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	681b      	ldr	r3, [r3, #0]
 81077e4:	430a      	orrs	r2, r1
 81077e6:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 81077e8:	2300      	movs	r3, #0
}
 81077ea:	4618      	mov	r0, r3
 81077ec:	3708      	adds	r7, #8
 81077ee:	46bd      	mov	sp, r7
 81077f0:	bd80      	pop	{r7, pc}
	...

081077f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 81077f4:	b084      	sub	sp, #16
 81077f6:	b480      	push	{r7}
 81077f8:	b085      	sub	sp, #20
 81077fa:	af00      	add	r7, sp, #0
 81077fc:	6078      	str	r0, [r7, #4]
 81077fe:	f107 001c 	add.w	r0, r7, #28
 8107802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8107806:	2300      	movs	r3, #0
 8107808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810780a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810780c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810780e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8107810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8107812:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8107814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8107816:	431a      	orrs	r2, r3
             Init.ClockDiv
 8107818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 810781a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810781c:	68fa      	ldr	r2, [r7, #12]
 810781e:	4313      	orrs	r3, r2
 8107820:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8107822:	687b      	ldr	r3, [r7, #4]
 8107824:	685a      	ldr	r2, [r3, #4]
 8107826:	4b07      	ldr	r3, [pc, #28]	@ (8107844 <SDMMC_Init+0x50>)
 8107828:	4013      	ands	r3, r2
 810782a:	68fa      	ldr	r2, [r7, #12]
 810782c:	431a      	orrs	r2, r3
 810782e:	687b      	ldr	r3, [r7, #4]
 8107830:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8107832:	2300      	movs	r3, #0
}
 8107834:	4618      	mov	r0, r3
 8107836:	3714      	adds	r7, #20
 8107838:	46bd      	mov	sp, r7
 810783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810783e:	b004      	add	sp, #16
 8107840:	4770      	bx	lr
 8107842:	bf00      	nop
 8107844:	ffc02c00 	.word	0xffc02c00

08107848 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8107848:	b480      	push	{r7}
 810784a:	b083      	sub	sp, #12
 810784c:	af00      	add	r7, sp, #0
 810784e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8107856:	4618      	mov	r0, r3
 8107858:	370c      	adds	r7, #12
 810785a:	46bd      	mov	sp, r7
 810785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107860:	4770      	bx	lr

08107862 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8107862:	b480      	push	{r7}
 8107864:	b083      	sub	sp, #12
 8107866:	af00      	add	r7, sp, #0
 8107868:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	681b      	ldr	r3, [r3, #0]
 810786e:	f043 0203 	orr.w	r2, r3, #3
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8107876:	2300      	movs	r3, #0
}
 8107878:	4618      	mov	r0, r3
 810787a:	370c      	adds	r7, #12
 810787c:	46bd      	mov	sp, r7
 810787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107882:	4770      	bx	lr

08107884 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8107884:	b480      	push	{r7}
 8107886:	b083      	sub	sp, #12
 8107888:	af00      	add	r7, sp, #0
 810788a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	681b      	ldr	r3, [r3, #0]
 8107890:	f003 0303 	and.w	r3, r3, #3
}
 8107894:	4618      	mov	r0, r3
 8107896:	370c      	adds	r7, #12
 8107898:	46bd      	mov	sp, r7
 810789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810789e:	4770      	bx	lr

081078a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 81078a0:	b480      	push	{r7}
 81078a2:	b085      	sub	sp, #20
 81078a4:	af00      	add	r7, sp, #0
 81078a6:	6078      	str	r0, [r7, #4]
 81078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 81078aa:	2300      	movs	r3, #0
 81078ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 81078ae:	683b      	ldr	r3, [r7, #0]
 81078b0:	681a      	ldr	r2, [r3, #0]
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81078b6:	683b      	ldr	r3, [r7, #0]
 81078b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 81078ba:	683b      	ldr	r3, [r7, #0]
 81078bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81078be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 81078c0:	683b      	ldr	r3, [r7, #0]
 81078c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 81078c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 81078c6:	683b      	ldr	r3, [r7, #0]
 81078c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 81078ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 81078cc:	68fa      	ldr	r2, [r7, #12]
 81078ce:	4313      	orrs	r3, r2
 81078d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	68da      	ldr	r2, [r3, #12]
 81078d6:	4b06      	ldr	r3, [pc, #24]	@ (81078f0 <SDMMC_SendCommand+0x50>)
 81078d8:	4013      	ands	r3, r2
 81078da:	68fa      	ldr	r2, [r7, #12]
 81078dc:	431a      	orrs	r2, r3
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 81078e2:	2300      	movs	r3, #0
}
 81078e4:	4618      	mov	r0, r3
 81078e6:	3714      	adds	r7, #20
 81078e8:	46bd      	mov	sp, r7
 81078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078ee:	4770      	bx	lr
 81078f0:	fffee0c0 	.word	0xfffee0c0

081078f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 81078f4:	b480      	push	{r7}
 81078f6:	b083      	sub	sp, #12
 81078f8:	af00      	add	r7, sp, #0
 81078fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 81078fc:	687b      	ldr	r3, [r7, #4]
 81078fe:	691b      	ldr	r3, [r3, #16]
 8107900:	b2db      	uxtb	r3, r3
}
 8107902:	4618      	mov	r0, r3
 8107904:	370c      	adds	r7, #12
 8107906:	46bd      	mov	sp, r7
 8107908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810790c:	4770      	bx	lr

0810790e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810790e:	b480      	push	{r7}
 8107910:	b085      	sub	sp, #20
 8107912:	af00      	add	r7, sp, #0
 8107914:	6078      	str	r0, [r7, #4]
 8107916:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	3314      	adds	r3, #20
 810791c:	461a      	mov	r2, r3
 810791e:	683b      	ldr	r3, [r7, #0]
 8107920:	4413      	add	r3, r2
 8107922:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8107924:	68fb      	ldr	r3, [r7, #12]
 8107926:	681b      	ldr	r3, [r3, #0]
}
 8107928:	4618      	mov	r0, r3
 810792a:	3714      	adds	r7, #20
 810792c:	46bd      	mov	sp, r7
 810792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107932:	4770      	bx	lr

08107934 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8107934:	b480      	push	{r7}
 8107936:	b085      	sub	sp, #20
 8107938:	af00      	add	r7, sp, #0
 810793a:	6078      	str	r0, [r7, #4]
 810793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810793e:	2300      	movs	r3, #0
 8107940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8107942:	683b      	ldr	r3, [r7, #0]
 8107944:	681a      	ldr	r2, [r3, #0]
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810794a:	683b      	ldr	r3, [r7, #0]
 810794c:	685a      	ldr	r2, [r3, #4]
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8107952:	683b      	ldr	r3, [r7, #0]
 8107954:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8107956:	683b      	ldr	r3, [r7, #0]
 8107958:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810795a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810795c:	683b      	ldr	r3, [r7, #0]
 810795e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8107960:	431a      	orrs	r2, r3
                       Data->DPSM);
 8107962:	683b      	ldr	r3, [r7, #0]
 8107964:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8107966:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8107968:	68fa      	ldr	r2, [r7, #12]
 810796a:	4313      	orrs	r3, r2
 810796c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810796e:	687b      	ldr	r3, [r7, #4]
 8107970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107972:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8107976:	68fb      	ldr	r3, [r7, #12]
 8107978:	431a      	orrs	r2, r3
 810797a:	687b      	ldr	r3, [r7, #4]
 810797c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810797e:	2300      	movs	r3, #0

}
 8107980:	4618      	mov	r0, r3
 8107982:	3714      	adds	r7, #20
 8107984:	46bd      	mov	sp, r7
 8107986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810798a:	4770      	bx	lr

0810798c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810798c:	b580      	push	{r7, lr}
 810798e:	b088      	sub	sp, #32
 8107990:	af00      	add	r7, sp, #0
 8107992:	6078      	str	r0, [r7, #4]
 8107994:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8107996:	683b      	ldr	r3, [r7, #0]
 8107998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810799a:	2310      	movs	r3, #16
 810799c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810799e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81079a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81079a4:	2300      	movs	r3, #0
 81079a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81079a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81079ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81079ae:	f107 0308 	add.w	r3, r7, #8
 81079b2:	4619      	mov	r1, r3
 81079b4:	6878      	ldr	r0, [r7, #4]
 81079b6:	f7ff ff73 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 81079ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 81079be:	2110      	movs	r1, #16
 81079c0:	6878      	ldr	r0, [r7, #4]
 81079c2:	f000 fa21 	bl	8107e08 <SDMMC_GetCmdResp1>
 81079c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81079c8:	69fb      	ldr	r3, [r7, #28]
}
 81079ca:	4618      	mov	r0, r3
 81079cc:	3720      	adds	r7, #32
 81079ce:	46bd      	mov	sp, r7
 81079d0:	bd80      	pop	{r7, pc}

081079d2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 81079d2:	b580      	push	{r7, lr}
 81079d4:	b088      	sub	sp, #32
 81079d6:	af00      	add	r7, sp, #0
 81079d8:	6078      	str	r0, [r7, #4]
 81079da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 81079dc:	683b      	ldr	r3, [r7, #0]
 81079de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 81079e0:	2311      	movs	r3, #17
 81079e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81079e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81079e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81079ea:	2300      	movs	r3, #0
 81079ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81079ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81079f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81079f4:	f107 0308 	add.w	r3, r7, #8
 81079f8:	4619      	mov	r1, r3
 81079fa:	6878      	ldr	r0, [r7, #4]
 81079fc:	f7ff ff50 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8107a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107a04:	2111      	movs	r1, #17
 8107a06:	6878      	ldr	r0, [r7, #4]
 8107a08:	f000 f9fe 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107a0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107a0e:	69fb      	ldr	r3, [r7, #28]
}
 8107a10:	4618      	mov	r0, r3
 8107a12:	3720      	adds	r7, #32
 8107a14:	46bd      	mov	sp, r7
 8107a16:	bd80      	pop	{r7, pc}

08107a18 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8107a18:	b580      	push	{r7, lr}
 8107a1a:	b088      	sub	sp, #32
 8107a1c:	af00      	add	r7, sp, #0
 8107a1e:	6078      	str	r0, [r7, #4]
 8107a20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8107a22:	683b      	ldr	r3, [r7, #0]
 8107a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8107a26:	2312      	movs	r3, #18
 8107a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107a30:	2300      	movs	r3, #0
 8107a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107a38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107a3a:	f107 0308 	add.w	r3, r7, #8
 8107a3e:	4619      	mov	r1, r3
 8107a40:	6878      	ldr	r0, [r7, #4]
 8107a42:	f7ff ff2d 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8107a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107a4a:	2112      	movs	r1, #18
 8107a4c:	6878      	ldr	r0, [r7, #4]
 8107a4e:	f000 f9db 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107a54:	69fb      	ldr	r3, [r7, #28]
}
 8107a56:	4618      	mov	r0, r3
 8107a58:	3720      	adds	r7, #32
 8107a5a:	46bd      	mov	sp, r7
 8107a5c:	bd80      	pop	{r7, pc}

08107a5e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8107a5e:	b580      	push	{r7, lr}
 8107a60:	b088      	sub	sp, #32
 8107a62:	af00      	add	r7, sp, #0
 8107a64:	6078      	str	r0, [r7, #4]
 8107a66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8107a68:	683b      	ldr	r3, [r7, #0]
 8107a6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8107a6c:	2318      	movs	r3, #24
 8107a6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107a76:	2300      	movs	r3, #0
 8107a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107a7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107a80:	f107 0308 	add.w	r3, r7, #8
 8107a84:	4619      	mov	r1, r3
 8107a86:	6878      	ldr	r0, [r7, #4]
 8107a88:	f7ff ff0a 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8107a8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107a90:	2118      	movs	r1, #24
 8107a92:	6878      	ldr	r0, [r7, #4]
 8107a94:	f000 f9b8 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107a9a:	69fb      	ldr	r3, [r7, #28]
}
 8107a9c:	4618      	mov	r0, r3
 8107a9e:	3720      	adds	r7, #32
 8107aa0:	46bd      	mov	sp, r7
 8107aa2:	bd80      	pop	{r7, pc}

08107aa4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8107aa4:	b580      	push	{r7, lr}
 8107aa6:	b088      	sub	sp, #32
 8107aa8:	af00      	add	r7, sp, #0
 8107aaa:	6078      	str	r0, [r7, #4]
 8107aac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8107aae:	683b      	ldr	r3, [r7, #0]
 8107ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8107ab2:	2319      	movs	r3, #25
 8107ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107aba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107abc:	2300      	movs	r3, #0
 8107abe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107ac4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107ac6:	f107 0308 	add.w	r3, r7, #8
 8107aca:	4619      	mov	r1, r3
 8107acc:	6878      	ldr	r0, [r7, #4]
 8107ace:	f7ff fee7 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8107ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107ad6:	2119      	movs	r1, #25
 8107ad8:	6878      	ldr	r0, [r7, #4]
 8107ada:	f000 f995 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107ade:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107ae0:	69fb      	ldr	r3, [r7, #28]
}
 8107ae2:	4618      	mov	r0, r3
 8107ae4:	3720      	adds	r7, #32
 8107ae6:	46bd      	mov	sp, r7
 8107ae8:	bd80      	pop	{r7, pc}

08107aea <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8107aea:	b580      	push	{r7, lr}
 8107aec:	b088      	sub	sp, #32
 8107aee:	af00      	add	r7, sp, #0
 8107af0:	6078      	str	r0, [r7, #4]
 8107af2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8107af4:	683b      	ldr	r3, [r7, #0]
 8107af6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8107af8:	2307      	movs	r3, #7
 8107afa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107afc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107b02:	2300      	movs	r3, #0
 8107b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107b0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107b0c:	f107 0308 	add.w	r3, r7, #8
 8107b10:	4619      	mov	r1, r3
 8107b12:	6878      	ldr	r0, [r7, #4]
 8107b14:	f7ff fec4 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8107b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107b1c:	2107      	movs	r1, #7
 8107b1e:	6878      	ldr	r0, [r7, #4]
 8107b20:	f000 f972 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107b26:	69fb      	ldr	r3, [r7, #28]
}
 8107b28:	4618      	mov	r0, r3
 8107b2a:	3720      	adds	r7, #32
 8107b2c:	46bd      	mov	sp, r7
 8107b2e:	bd80      	pop	{r7, pc}

08107b30 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8107b30:	b580      	push	{r7, lr}
 8107b32:	b088      	sub	sp, #32
 8107b34:	af00      	add	r7, sp, #0
 8107b36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8107b38:	2300      	movs	r3, #0
 8107b3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8107b3c:	2300      	movs	r3, #0
 8107b3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8107b40:	2300      	movs	r3, #0
 8107b42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107b44:	2300      	movs	r3, #0
 8107b46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107b48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107b4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107b4e:	f107 0308 	add.w	r3, r7, #8
 8107b52:	4619      	mov	r1, r3
 8107b54:	6878      	ldr	r0, [r7, #4]
 8107b56:	f7ff fea3 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8107b5a:	6878      	ldr	r0, [r7, #4]
 8107b5c:	f000 fb96 	bl	810828c <SDMMC_GetCmdError>
 8107b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107b62:	69fb      	ldr	r3, [r7, #28]
}
 8107b64:	4618      	mov	r0, r3
 8107b66:	3720      	adds	r7, #32
 8107b68:	46bd      	mov	sp, r7
 8107b6a:	bd80      	pop	{r7, pc}

08107b6c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8107b6c:	b580      	push	{r7, lr}
 8107b6e:	b088      	sub	sp, #32
 8107b70:	af00      	add	r7, sp, #0
 8107b72:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8107b74:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8107b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8107b7a:	2308      	movs	r3, #8
 8107b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107b82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107b84:	2300      	movs	r3, #0
 8107b86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107b8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107b8e:	f107 0308 	add.w	r3, r7, #8
 8107b92:	4619      	mov	r1, r3
 8107b94:	6878      	ldr	r0, [r7, #4]
 8107b96:	f7ff fe83 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8107b9a:	6878      	ldr	r0, [r7, #4]
 8107b9c:	f000 fb28 	bl	81081f0 <SDMMC_GetCmdResp7>
 8107ba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107ba2:	69fb      	ldr	r3, [r7, #28]
}
 8107ba4:	4618      	mov	r0, r3
 8107ba6:	3720      	adds	r7, #32
 8107ba8:	46bd      	mov	sp, r7
 8107baa:	bd80      	pop	{r7, pc}

08107bac <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8107bac:	b580      	push	{r7, lr}
 8107bae:	b088      	sub	sp, #32
 8107bb0:	af00      	add	r7, sp, #0
 8107bb2:	6078      	str	r0, [r7, #4]
 8107bb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8107bb6:	683b      	ldr	r3, [r7, #0]
 8107bb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8107bba:	2337      	movs	r3, #55	@ 0x37
 8107bbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107bbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107bc4:	2300      	movs	r3, #0
 8107bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107bcc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107bce:	f107 0308 	add.w	r3, r7, #8
 8107bd2:	4619      	mov	r1, r3
 8107bd4:	6878      	ldr	r0, [r7, #4]
 8107bd6:	f7ff fe63 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8107bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107bde:	2137      	movs	r1, #55	@ 0x37
 8107be0:	6878      	ldr	r0, [r7, #4]
 8107be2:	f000 f911 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107be6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107be8:	69fb      	ldr	r3, [r7, #28]
}
 8107bea:	4618      	mov	r0, r3
 8107bec:	3720      	adds	r7, #32
 8107bee:	46bd      	mov	sp, r7
 8107bf0:	bd80      	pop	{r7, pc}

08107bf2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8107bf2:	b580      	push	{r7, lr}
 8107bf4:	b088      	sub	sp, #32
 8107bf6:	af00      	add	r7, sp, #0
 8107bf8:	6078      	str	r0, [r7, #4]
 8107bfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8107bfc:	683b      	ldr	r3, [r7, #0]
 8107bfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8107c00:	2329      	movs	r3, #41	@ 0x29
 8107c02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107c04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107c0a:	2300      	movs	r3, #0
 8107c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107c0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107c12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107c14:	f107 0308 	add.w	r3, r7, #8
 8107c18:	4619      	mov	r1, r3
 8107c1a:	6878      	ldr	r0, [r7, #4]
 8107c1c:	f7ff fe40 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8107c20:	6878      	ldr	r0, [r7, #4]
 8107c22:	f000 fa2d 	bl	8108080 <SDMMC_GetCmdResp3>
 8107c26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107c28:	69fb      	ldr	r3, [r7, #28]
}
 8107c2a:	4618      	mov	r0, r3
 8107c2c:	3720      	adds	r7, #32
 8107c2e:	46bd      	mov	sp, r7
 8107c30:	bd80      	pop	{r7, pc}

08107c32 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8107c32:	b580      	push	{r7, lr}
 8107c34:	b088      	sub	sp, #32
 8107c36:	af00      	add	r7, sp, #0
 8107c38:	6078      	str	r0, [r7, #4]
 8107c3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8107c3c:	683b      	ldr	r3, [r7, #0]
 8107c3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8107c40:	2306      	movs	r3, #6
 8107c42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107c44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107c48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107c4a:	2300      	movs	r3, #0
 8107c4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107c52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107c54:	f107 0308 	add.w	r3, r7, #8
 8107c58:	4619      	mov	r1, r3
 8107c5a:	6878      	ldr	r0, [r7, #4]
 8107c5c:	f7ff fe20 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8107c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107c64:	2106      	movs	r1, #6
 8107c66:	6878      	ldr	r0, [r7, #4]
 8107c68:	f000 f8ce 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107c6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107c6e:	69fb      	ldr	r3, [r7, #28]
}
 8107c70:	4618      	mov	r0, r3
 8107c72:	3720      	adds	r7, #32
 8107c74:	46bd      	mov	sp, r7
 8107c76:	bd80      	pop	{r7, pc}

08107c78 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8107c78:	b580      	push	{r7, lr}
 8107c7a:	b088      	sub	sp, #32
 8107c7c:	af00      	add	r7, sp, #0
 8107c7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8107c80:	2300      	movs	r3, #0
 8107c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8107c84:	2333      	movs	r3, #51	@ 0x33
 8107c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107c8e:	2300      	movs	r3, #0
 8107c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107c96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107c98:	f107 0308 	add.w	r3, r7, #8
 8107c9c:	4619      	mov	r1, r3
 8107c9e:	6878      	ldr	r0, [r7, #4]
 8107ca0:	f7ff fdfe 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8107ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107ca8:	2133      	movs	r1, #51	@ 0x33
 8107caa:	6878      	ldr	r0, [r7, #4]
 8107cac:	f000 f8ac 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107cb2:	69fb      	ldr	r3, [r7, #28]
}
 8107cb4:	4618      	mov	r0, r3
 8107cb6:	3720      	adds	r7, #32
 8107cb8:	46bd      	mov	sp, r7
 8107cba:	bd80      	pop	{r7, pc}

08107cbc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8107cbc:	b580      	push	{r7, lr}
 8107cbe:	b088      	sub	sp, #32
 8107cc0:	af00      	add	r7, sp, #0
 8107cc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8107cc4:	2300      	movs	r3, #0
 8107cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8107cc8:	2302      	movs	r3, #2
 8107cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8107ccc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8107cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107cd2:	2300      	movs	r3, #0
 8107cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107cdc:	f107 0308 	add.w	r3, r7, #8
 8107ce0:	4619      	mov	r1, r3
 8107ce2:	6878      	ldr	r0, [r7, #4]
 8107ce4:	f7ff fddc 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8107ce8:	6878      	ldr	r0, [r7, #4]
 8107cea:	f000 f97f 	bl	8107fec <SDMMC_GetCmdResp2>
 8107cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107cf0:	69fb      	ldr	r3, [r7, #28]
}
 8107cf2:	4618      	mov	r0, r3
 8107cf4:	3720      	adds	r7, #32
 8107cf6:	46bd      	mov	sp, r7
 8107cf8:	bd80      	pop	{r7, pc}

08107cfa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8107cfa:	b580      	push	{r7, lr}
 8107cfc:	b088      	sub	sp, #32
 8107cfe:	af00      	add	r7, sp, #0
 8107d00:	6078      	str	r0, [r7, #4]
 8107d02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8107d04:	683b      	ldr	r3, [r7, #0]
 8107d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8107d08:	2309      	movs	r3, #9
 8107d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8107d0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8107d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107d12:	2300      	movs	r3, #0
 8107d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107d1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107d1c:	f107 0308 	add.w	r3, r7, #8
 8107d20:	4619      	mov	r1, r3
 8107d22:	6878      	ldr	r0, [r7, #4]
 8107d24:	f7ff fdbc 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8107d28:	6878      	ldr	r0, [r7, #4]
 8107d2a:	f000 f95f 	bl	8107fec <SDMMC_GetCmdResp2>
 8107d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107d30:	69fb      	ldr	r3, [r7, #28]
}
 8107d32:	4618      	mov	r0, r3
 8107d34:	3720      	adds	r7, #32
 8107d36:	46bd      	mov	sp, r7
 8107d38:	bd80      	pop	{r7, pc}

08107d3a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8107d3a:	b580      	push	{r7, lr}
 8107d3c:	b088      	sub	sp, #32
 8107d3e:	af00      	add	r7, sp, #0
 8107d40:	6078      	str	r0, [r7, #4]
 8107d42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8107d44:	2300      	movs	r3, #0
 8107d46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8107d48:	2303      	movs	r3, #3
 8107d4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107d52:	2300      	movs	r3, #0
 8107d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107d56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107d5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107d5c:	f107 0308 	add.w	r3, r7, #8
 8107d60:	4619      	mov	r1, r3
 8107d62:	6878      	ldr	r0, [r7, #4]
 8107d64:	f7ff fd9c 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8107d68:	683a      	ldr	r2, [r7, #0]
 8107d6a:	2103      	movs	r1, #3
 8107d6c:	6878      	ldr	r0, [r7, #4]
 8107d6e:	f000 f9c7 	bl	8108100 <SDMMC_GetCmdResp6>
 8107d72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107d74:	69fb      	ldr	r3, [r7, #28]
}
 8107d76:	4618      	mov	r0, r3
 8107d78:	3720      	adds	r7, #32
 8107d7a:	46bd      	mov	sp, r7
 8107d7c:	bd80      	pop	{r7, pc}

08107d7e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8107d7e:	b580      	push	{r7, lr}
 8107d80:	b088      	sub	sp, #32
 8107d82:	af00      	add	r7, sp, #0
 8107d84:	6078      	str	r0, [r7, #4]
 8107d86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8107d88:	683b      	ldr	r3, [r7, #0]
 8107d8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8107d8c:	230d      	movs	r3, #13
 8107d8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107d96:	2300      	movs	r3, #0
 8107d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107d9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107da0:	f107 0308 	add.w	r3, r7, #8
 8107da4:	4619      	mov	r1, r3
 8107da6:	6878      	ldr	r0, [r7, #4]
 8107da8:	f7ff fd7a 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8107dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107db0:	210d      	movs	r1, #13
 8107db2:	6878      	ldr	r0, [r7, #4]
 8107db4:	f000 f828 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107dba:	69fb      	ldr	r3, [r7, #28]
}
 8107dbc:	4618      	mov	r0, r3
 8107dbe:	3720      	adds	r7, #32
 8107dc0:	46bd      	mov	sp, r7
 8107dc2:	bd80      	pop	{r7, pc}

08107dc4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8107dc4:	b580      	push	{r7, lr}
 8107dc6:	b088      	sub	sp, #32
 8107dc8:	af00      	add	r7, sp, #0
 8107dca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8107dcc:	2300      	movs	r3, #0
 8107dce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8107dd0:	230d      	movs	r3, #13
 8107dd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107dda:	2300      	movs	r3, #0
 8107ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107de4:	f107 0308 	add.w	r3, r7, #8
 8107de8:	4619      	mov	r1, r3
 8107dea:	6878      	ldr	r0, [r7, #4]
 8107dec:	f7ff fd58 	bl	81078a0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8107df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107df4:	210d      	movs	r1, #13
 8107df6:	6878      	ldr	r0, [r7, #4]
 8107df8:	f000 f806 	bl	8107e08 <SDMMC_GetCmdResp1>
 8107dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107dfe:	69fb      	ldr	r3, [r7, #28]
}
 8107e00:	4618      	mov	r0, r3
 8107e02:	3720      	adds	r7, #32
 8107e04:	46bd      	mov	sp, r7
 8107e06:	bd80      	pop	{r7, pc}

08107e08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8107e08:	b580      	push	{r7, lr}
 8107e0a:	b088      	sub	sp, #32
 8107e0c:	af00      	add	r7, sp, #0
 8107e0e:	60f8      	str	r0, [r7, #12]
 8107e10:	460b      	mov	r3, r1
 8107e12:	607a      	str	r2, [r7, #4]
 8107e14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8107e16:	4b70      	ldr	r3, [pc, #448]	@ (8107fd8 <SDMMC_GetCmdResp1+0x1d0>)
 8107e18:	681b      	ldr	r3, [r3, #0]
 8107e1a:	4a70      	ldr	r2, [pc, #448]	@ (8107fdc <SDMMC_GetCmdResp1+0x1d4>)
 8107e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8107e20:	0a5a      	lsrs	r2, r3, #9
 8107e22:	687b      	ldr	r3, [r7, #4]
 8107e24:	fb02 f303 	mul.w	r3, r2, r3
 8107e28:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8107e2a:	69fb      	ldr	r3, [r7, #28]
 8107e2c:	1e5a      	subs	r2, r3, #1
 8107e2e:	61fa      	str	r2, [r7, #28]
 8107e30:	2b00      	cmp	r3, #0
 8107e32:	d102      	bne.n	8107e3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8107e34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8107e38:	e0c9      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8107e3a:	68fb      	ldr	r3, [r7, #12]
 8107e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107e3e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8107e40:	69ba      	ldr	r2, [r7, #24]
 8107e42:	4b67      	ldr	r3, [pc, #412]	@ (8107fe0 <SDMMC_GetCmdResp1+0x1d8>)
 8107e44:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8107e46:	2b00      	cmp	r3, #0
 8107e48:	d0ef      	beq.n	8107e2a <SDMMC_GetCmdResp1+0x22>
 8107e4a:	69bb      	ldr	r3, [r7, #24]
 8107e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8107e50:	2b00      	cmp	r3, #0
 8107e52:	d1ea      	bne.n	8107e2a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8107e54:	68fb      	ldr	r3, [r7, #12]
 8107e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107e58:	f003 0304 	and.w	r3, r3, #4
 8107e5c:	2b00      	cmp	r3, #0
 8107e5e:	d004      	beq.n	8107e6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8107e60:	68fb      	ldr	r3, [r7, #12]
 8107e62:	2204      	movs	r2, #4
 8107e64:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8107e66:	2304      	movs	r3, #4
 8107e68:	e0b1      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8107e6a:	68fb      	ldr	r3, [r7, #12]
 8107e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107e6e:	f003 0301 	and.w	r3, r3, #1
 8107e72:	2b00      	cmp	r3, #0
 8107e74:	d004      	beq.n	8107e80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8107e76:	68fb      	ldr	r3, [r7, #12]
 8107e78:	2201      	movs	r2, #1
 8107e7a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8107e7c:	2301      	movs	r3, #1
 8107e7e:	e0a6      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8107e80:	68fb      	ldr	r3, [r7, #12]
 8107e82:	4a58      	ldr	r2, [pc, #352]	@ (8107fe4 <SDMMC_GetCmdResp1+0x1dc>)
 8107e84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8107e86:	68f8      	ldr	r0, [r7, #12]
 8107e88:	f7ff fd34 	bl	81078f4 <SDMMC_GetCommandResponse>
 8107e8c:	4603      	mov	r3, r0
 8107e8e:	461a      	mov	r2, r3
 8107e90:	7afb      	ldrb	r3, [r7, #11]
 8107e92:	4293      	cmp	r3, r2
 8107e94:	d001      	beq.n	8107e9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8107e96:	2301      	movs	r3, #1
 8107e98:	e099      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8107e9a:	2100      	movs	r1, #0
 8107e9c:	68f8      	ldr	r0, [r7, #12]
 8107e9e:	f7ff fd36 	bl	810790e <SDMMC_GetResponse>
 8107ea2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8107ea4:	697a      	ldr	r2, [r7, #20]
 8107ea6:	4b50      	ldr	r3, [pc, #320]	@ (8107fe8 <SDMMC_GetCmdResp1+0x1e0>)
 8107ea8:	4013      	ands	r3, r2
 8107eaa:	2b00      	cmp	r3, #0
 8107eac:	d101      	bne.n	8107eb2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8107eae:	2300      	movs	r3, #0
 8107eb0:	e08d      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8107eb2:	697b      	ldr	r3, [r7, #20]
 8107eb4:	2b00      	cmp	r3, #0
 8107eb6:	da02      	bge.n	8107ebe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8107eb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8107ebc:	e087      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8107ebe:	697b      	ldr	r3, [r7, #20]
 8107ec0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8107ec4:	2b00      	cmp	r3, #0
 8107ec6:	d001      	beq.n	8107ecc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8107ec8:	2340      	movs	r3, #64	@ 0x40
 8107eca:	e080      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8107ecc:	697b      	ldr	r3, [r7, #20]
 8107ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107ed2:	2b00      	cmp	r3, #0
 8107ed4:	d001      	beq.n	8107eda <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8107ed6:	2380      	movs	r3, #128	@ 0x80
 8107ed8:	e079      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8107eda:	697b      	ldr	r3, [r7, #20]
 8107edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8107ee0:	2b00      	cmp	r3, #0
 8107ee2:	d002      	beq.n	8107eea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8107ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107ee8:	e071      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8107eea:	697b      	ldr	r3, [r7, #20]
 8107eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107ef0:	2b00      	cmp	r3, #0
 8107ef2:	d002      	beq.n	8107efa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8107ef4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8107ef8:	e069      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8107efa:	697b      	ldr	r3, [r7, #20]
 8107efc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8107f00:	2b00      	cmp	r3, #0
 8107f02:	d002      	beq.n	8107f0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8107f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8107f08:	e061      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8107f0a:	697b      	ldr	r3, [r7, #20]
 8107f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8107f10:	2b00      	cmp	r3, #0
 8107f12:	d002      	beq.n	8107f1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8107f14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107f18:	e059      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8107f1a:	697b      	ldr	r3, [r7, #20]
 8107f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8107f20:	2b00      	cmp	r3, #0
 8107f22:	d002      	beq.n	8107f2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8107f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107f28:	e051      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8107f2a:	697b      	ldr	r3, [r7, #20]
 8107f2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107f30:	2b00      	cmp	r3, #0
 8107f32:	d002      	beq.n	8107f3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8107f34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8107f38:	e049      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8107f3a:	697b      	ldr	r3, [r7, #20]
 8107f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8107f40:	2b00      	cmp	r3, #0
 8107f42:	d002      	beq.n	8107f4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8107f44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8107f48:	e041      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8107f4a:	697b      	ldr	r3, [r7, #20]
 8107f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8107f50:	2b00      	cmp	r3, #0
 8107f52:	d002      	beq.n	8107f5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8107f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8107f58:	e039      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8107f5a:	697b      	ldr	r3, [r7, #20]
 8107f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8107f60:	2b00      	cmp	r3, #0
 8107f62:	d002      	beq.n	8107f6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8107f64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8107f68:	e031      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8107f6a:	697b      	ldr	r3, [r7, #20]
 8107f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107f70:	2b00      	cmp	r3, #0
 8107f72:	d002      	beq.n	8107f7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8107f74:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8107f78:	e029      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8107f7a:	697b      	ldr	r3, [r7, #20]
 8107f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107f80:	2b00      	cmp	r3, #0
 8107f82:	d002      	beq.n	8107f8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8107f84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8107f88:	e021      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8107f8a:	697b      	ldr	r3, [r7, #20]
 8107f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8107f90:	2b00      	cmp	r3, #0
 8107f92:	d002      	beq.n	8107f9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8107f94:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8107f98:	e019      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8107f9a:	697b      	ldr	r3, [r7, #20]
 8107f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8107fa0:	2b00      	cmp	r3, #0
 8107fa2:	d002      	beq.n	8107faa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8107fa4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8107fa8:	e011      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8107faa:	697b      	ldr	r3, [r7, #20]
 8107fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8107fb0:	2b00      	cmp	r3, #0
 8107fb2:	d002      	beq.n	8107fba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8107fb4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8107fb8:	e009      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8107fba:	697b      	ldr	r3, [r7, #20]
 8107fbc:	f003 0308 	and.w	r3, r3, #8
 8107fc0:	2b00      	cmp	r3, #0
 8107fc2:	d002      	beq.n	8107fca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8107fc4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8107fc8:	e001      	b.n	8107fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8107fca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8107fce:	4618      	mov	r0, r3
 8107fd0:	3720      	adds	r7, #32
 8107fd2:	46bd      	mov	sp, r7
 8107fd4:	bd80      	pop	{r7, pc}
 8107fd6:	bf00      	nop
 8107fd8:	10000000 	.word	0x10000000
 8107fdc:	10624dd3 	.word	0x10624dd3
 8107fe0:	00200045 	.word	0x00200045
 8107fe4:	002000c5 	.word	0x002000c5
 8107fe8:	fdffe008 	.word	0xfdffe008

08107fec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8107fec:	b480      	push	{r7}
 8107fee:	b085      	sub	sp, #20
 8107ff0:	af00      	add	r7, sp, #0
 8107ff2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8107ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8108074 <SDMMC_GetCmdResp2+0x88>)
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8108078 <SDMMC_GetCmdResp2+0x8c>)
 8107ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8107ffe:	0a5b      	lsrs	r3, r3, #9
 8108000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108004:	fb02 f303 	mul.w	r3, r2, r3
 8108008:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810800a:	68fb      	ldr	r3, [r7, #12]
 810800c:	1e5a      	subs	r2, r3, #1
 810800e:	60fa      	str	r2, [r7, #12]
 8108010:	2b00      	cmp	r3, #0
 8108012:	d102      	bne.n	810801a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8108014:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108018:	e026      	b.n	8108068 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810801e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108020:	68bb      	ldr	r3, [r7, #8]
 8108022:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8108026:	2b00      	cmp	r3, #0
 8108028:	d0ef      	beq.n	810800a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810802a:	68bb      	ldr	r3, [r7, #8]
 810802c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108030:	2b00      	cmp	r3, #0
 8108032:	d1ea      	bne.n	810800a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8108034:	687b      	ldr	r3, [r7, #4]
 8108036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108038:	f003 0304 	and.w	r3, r3, #4
 810803c:	2b00      	cmp	r3, #0
 810803e:	d004      	beq.n	810804a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	2204      	movs	r2, #4
 8108044:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8108046:	2304      	movs	r3, #4
 8108048:	e00e      	b.n	8108068 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810804e:	f003 0301 	and.w	r3, r3, #1
 8108052:	2b00      	cmp	r3, #0
 8108054:	d004      	beq.n	8108060 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8108056:	687b      	ldr	r3, [r7, #4]
 8108058:	2201      	movs	r2, #1
 810805a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810805c:	2301      	movs	r3, #1
 810805e:	e003      	b.n	8108068 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8108060:	687b      	ldr	r3, [r7, #4]
 8108062:	4a06      	ldr	r2, [pc, #24]	@ (810807c <SDMMC_GetCmdResp2+0x90>)
 8108064:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8108066:	2300      	movs	r3, #0
}
 8108068:	4618      	mov	r0, r3
 810806a:	3714      	adds	r7, #20
 810806c:	46bd      	mov	sp, r7
 810806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108072:	4770      	bx	lr
 8108074:	10000000 	.word	0x10000000
 8108078:	10624dd3 	.word	0x10624dd3
 810807c:	002000c5 	.word	0x002000c5

08108080 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8108080:	b480      	push	{r7}
 8108082:	b085      	sub	sp, #20
 8108084:	af00      	add	r7, sp, #0
 8108086:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8108088:	4b1a      	ldr	r3, [pc, #104]	@ (81080f4 <SDMMC_GetCmdResp3+0x74>)
 810808a:	681b      	ldr	r3, [r3, #0]
 810808c:	4a1a      	ldr	r2, [pc, #104]	@ (81080f8 <SDMMC_GetCmdResp3+0x78>)
 810808e:	fba2 2303 	umull	r2, r3, r2, r3
 8108092:	0a5b      	lsrs	r3, r3, #9
 8108094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108098:	fb02 f303 	mul.w	r3, r2, r3
 810809c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810809e:	68fb      	ldr	r3, [r7, #12]
 81080a0:	1e5a      	subs	r2, r3, #1
 81080a2:	60fa      	str	r2, [r7, #12]
 81080a4:	2b00      	cmp	r3, #0
 81080a6:	d102      	bne.n	81080ae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81080a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81080ac:	e01b      	b.n	81080e6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 81080ae:	687b      	ldr	r3, [r7, #4]
 81080b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81080b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81080b4:	68bb      	ldr	r3, [r7, #8]
 81080b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 81080ba:	2b00      	cmp	r3, #0
 81080bc:	d0ef      	beq.n	810809e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81080be:	68bb      	ldr	r3, [r7, #8]
 81080c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81080c4:	2b00      	cmp	r3, #0
 81080c6:	d1ea      	bne.n	810809e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81080c8:	687b      	ldr	r3, [r7, #4]
 81080ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81080cc:	f003 0304 	and.w	r3, r3, #4
 81080d0:	2b00      	cmp	r3, #0
 81080d2:	d004      	beq.n	81080de <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	2204      	movs	r2, #4
 81080d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81080da:	2304      	movs	r3, #4
 81080dc:	e003      	b.n	81080e6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81080de:	687b      	ldr	r3, [r7, #4]
 81080e0:	4a06      	ldr	r2, [pc, #24]	@ (81080fc <SDMMC_GetCmdResp3+0x7c>)
 81080e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 81080e4:	2300      	movs	r3, #0
}
 81080e6:	4618      	mov	r0, r3
 81080e8:	3714      	adds	r7, #20
 81080ea:	46bd      	mov	sp, r7
 81080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080f0:	4770      	bx	lr
 81080f2:	bf00      	nop
 81080f4:	10000000 	.word	0x10000000
 81080f8:	10624dd3 	.word	0x10624dd3
 81080fc:	002000c5 	.word	0x002000c5

08108100 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8108100:	b580      	push	{r7, lr}
 8108102:	b088      	sub	sp, #32
 8108104:	af00      	add	r7, sp, #0
 8108106:	60f8      	str	r0, [r7, #12]
 8108108:	460b      	mov	r3, r1
 810810a:	607a      	str	r2, [r7, #4]
 810810c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810810e:	4b35      	ldr	r3, [pc, #212]	@ (81081e4 <SDMMC_GetCmdResp6+0xe4>)
 8108110:	681b      	ldr	r3, [r3, #0]
 8108112:	4a35      	ldr	r2, [pc, #212]	@ (81081e8 <SDMMC_GetCmdResp6+0xe8>)
 8108114:	fba2 2303 	umull	r2, r3, r2, r3
 8108118:	0a5b      	lsrs	r3, r3, #9
 810811a:	f241 3288 	movw	r2, #5000	@ 0x1388
 810811e:	fb02 f303 	mul.w	r3, r2, r3
 8108122:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8108124:	69fb      	ldr	r3, [r7, #28]
 8108126:	1e5a      	subs	r2, r3, #1
 8108128:	61fa      	str	r2, [r7, #28]
 810812a:	2b00      	cmp	r3, #0
 810812c:	d102      	bne.n	8108134 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810812e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108132:	e052      	b.n	81081da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8108134:	68fb      	ldr	r3, [r7, #12]
 8108136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108138:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810813a:	69bb      	ldr	r3, [r7, #24]
 810813c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8108140:	2b00      	cmp	r3, #0
 8108142:	d0ef      	beq.n	8108124 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8108144:	69bb      	ldr	r3, [r7, #24]
 8108146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810814a:	2b00      	cmp	r3, #0
 810814c:	d1ea      	bne.n	8108124 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810814e:	68fb      	ldr	r3, [r7, #12]
 8108150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108152:	f003 0304 	and.w	r3, r3, #4
 8108156:	2b00      	cmp	r3, #0
 8108158:	d004      	beq.n	8108164 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810815a:	68fb      	ldr	r3, [r7, #12]
 810815c:	2204      	movs	r2, #4
 810815e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8108160:	2304      	movs	r3, #4
 8108162:	e03a      	b.n	81081da <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8108164:	68fb      	ldr	r3, [r7, #12]
 8108166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108168:	f003 0301 	and.w	r3, r3, #1
 810816c:	2b00      	cmp	r3, #0
 810816e:	d004      	beq.n	810817a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8108170:	68fb      	ldr	r3, [r7, #12]
 8108172:	2201      	movs	r2, #1
 8108174:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8108176:	2301      	movs	r3, #1
 8108178:	e02f      	b.n	81081da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810817a:	68f8      	ldr	r0, [r7, #12]
 810817c:	f7ff fbba 	bl	81078f4 <SDMMC_GetCommandResponse>
 8108180:	4603      	mov	r3, r0
 8108182:	461a      	mov	r2, r3
 8108184:	7afb      	ldrb	r3, [r7, #11]
 8108186:	4293      	cmp	r3, r2
 8108188:	d001      	beq.n	810818e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810818a:	2301      	movs	r3, #1
 810818c:	e025      	b.n	81081da <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810818e:	68fb      	ldr	r3, [r7, #12]
 8108190:	4a16      	ldr	r2, [pc, #88]	@ (81081ec <SDMMC_GetCmdResp6+0xec>)
 8108192:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8108194:	2100      	movs	r1, #0
 8108196:	68f8      	ldr	r0, [r7, #12]
 8108198:	f7ff fbb9 	bl	810790e <SDMMC_GetResponse>
 810819c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810819e:	697b      	ldr	r3, [r7, #20]
 81081a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 81081a4:	2b00      	cmp	r3, #0
 81081a6:	d106      	bne.n	81081b6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 81081a8:	697b      	ldr	r3, [r7, #20]
 81081aa:	0c1b      	lsrs	r3, r3, #16
 81081ac:	b29a      	uxth	r2, r3
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 81081b2:	2300      	movs	r3, #0
 81081b4:	e011      	b.n	81081da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 81081b6:	697b      	ldr	r3, [r7, #20]
 81081b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81081bc:	2b00      	cmp	r3, #0
 81081be:	d002      	beq.n	81081c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 81081c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81081c4:	e009      	b.n	81081da <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 81081c6:	697b      	ldr	r3, [r7, #20]
 81081c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	d002      	beq.n	81081d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 81081d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81081d4:	e001      	b.n	81081da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 81081d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 81081da:	4618      	mov	r0, r3
 81081dc:	3720      	adds	r7, #32
 81081de:	46bd      	mov	sp, r7
 81081e0:	bd80      	pop	{r7, pc}
 81081e2:	bf00      	nop
 81081e4:	10000000 	.word	0x10000000
 81081e8:	10624dd3 	.word	0x10624dd3
 81081ec:	002000c5 	.word	0x002000c5

081081f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 81081f0:	b480      	push	{r7}
 81081f2:	b085      	sub	sp, #20
 81081f4:	af00      	add	r7, sp, #0
 81081f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81081f8:	4b22      	ldr	r3, [pc, #136]	@ (8108284 <SDMMC_GetCmdResp7+0x94>)
 81081fa:	681b      	ldr	r3, [r3, #0]
 81081fc:	4a22      	ldr	r2, [pc, #136]	@ (8108288 <SDMMC_GetCmdResp7+0x98>)
 81081fe:	fba2 2303 	umull	r2, r3, r2, r3
 8108202:	0a5b      	lsrs	r3, r3, #9
 8108204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108208:	fb02 f303 	mul.w	r3, r2, r3
 810820c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810820e:	68fb      	ldr	r3, [r7, #12]
 8108210:	1e5a      	subs	r2, r3, #1
 8108212:	60fa      	str	r2, [r7, #12]
 8108214:	2b00      	cmp	r3, #0
 8108216:	d102      	bne.n	810821e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8108218:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810821c:	e02c      	b.n	8108278 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108222:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108224:	68bb      	ldr	r3, [r7, #8]
 8108226:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810822a:	2b00      	cmp	r3, #0
 810822c:	d0ef      	beq.n	810820e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810822e:	68bb      	ldr	r3, [r7, #8]
 8108230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108234:	2b00      	cmp	r3, #0
 8108236:	d1ea      	bne.n	810820e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810823c:	f003 0304 	and.w	r3, r3, #4
 8108240:	2b00      	cmp	r3, #0
 8108242:	d004      	beq.n	810824e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8108244:	687b      	ldr	r3, [r7, #4]
 8108246:	2204      	movs	r2, #4
 8108248:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810824a:	2304      	movs	r3, #4
 810824c:	e014      	b.n	8108278 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108252:	f003 0301 	and.w	r3, r3, #1
 8108256:	2b00      	cmp	r3, #0
 8108258:	d004      	beq.n	8108264 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810825a:	687b      	ldr	r3, [r7, #4]
 810825c:	2201      	movs	r2, #1
 810825e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8108260:	2301      	movs	r3, #1
 8108262:	e009      	b.n	8108278 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8108264:	687b      	ldr	r3, [r7, #4]
 8108266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810826c:	2b00      	cmp	r3, #0
 810826e:	d002      	beq.n	8108276 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	2240      	movs	r2, #64	@ 0x40
 8108274:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8108276:	2300      	movs	r3, #0

}
 8108278:	4618      	mov	r0, r3
 810827a:	3714      	adds	r7, #20
 810827c:	46bd      	mov	sp, r7
 810827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108282:	4770      	bx	lr
 8108284:	10000000 	.word	0x10000000
 8108288:	10624dd3 	.word	0x10624dd3

0810828c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810828c:	b480      	push	{r7}
 810828e:	b085      	sub	sp, #20
 8108290:	af00      	add	r7, sp, #0
 8108292:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8108294:	4b11      	ldr	r3, [pc, #68]	@ (81082dc <SDMMC_GetCmdError+0x50>)
 8108296:	681b      	ldr	r3, [r3, #0]
 8108298:	4a11      	ldr	r2, [pc, #68]	@ (81082e0 <SDMMC_GetCmdError+0x54>)
 810829a:	fba2 2303 	umull	r2, r3, r2, r3
 810829e:	0a5b      	lsrs	r3, r3, #9
 81082a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 81082a4:	fb02 f303 	mul.w	r3, r2, r3
 81082a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81082aa:	68fb      	ldr	r3, [r7, #12]
 81082ac:	1e5a      	subs	r2, r3, #1
 81082ae:	60fa      	str	r2, [r7, #12]
 81082b0:	2b00      	cmp	r3, #0
 81082b2:	d102      	bne.n	81082ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81082b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81082b8:	e009      	b.n	81082ce <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81082be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81082c2:	2b00      	cmp	r3, #0
 81082c4:	d0f1      	beq.n	81082aa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	4a06      	ldr	r2, [pc, #24]	@ (81082e4 <SDMMC_GetCmdError+0x58>)
 81082ca:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 81082cc:	2300      	movs	r3, #0
}
 81082ce:	4618      	mov	r0, r3
 81082d0:	3714      	adds	r7, #20
 81082d2:	46bd      	mov	sp, r7
 81082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082d8:	4770      	bx	lr
 81082da:	bf00      	nop
 81082dc:	10000000 	.word	0x10000000
 81082e0:	10624dd3 	.word	0x10624dd3
 81082e4:	002000c5 	.word	0x002000c5

081082e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 81082e8:	b580      	push	{r7, lr}
 81082ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 81082ec:	4904      	ldr	r1, [pc, #16]	@ (8108300 <MX_FATFS_Init+0x18>)
 81082ee:	4805      	ldr	r0, [pc, #20]	@ (8108304 <MX_FATFS_Init+0x1c>)
 81082f0:	f000 fa52 	bl	8108798 <FATFS_LinkDriver>
 81082f4:	4603      	mov	r3, r0
 81082f6:	461a      	mov	r2, r3
 81082f8:	4b03      	ldr	r3, [pc, #12]	@ (8108308 <MX_FATFS_Init+0x20>)
 81082fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 81082fc:	bf00      	nop
 81082fe:	bd80      	pop	{r7, pc}
 8108300:	1000056c 	.word	0x1000056c
 8108304:	0810c084 	.word	0x0810c084
 8108308:	10000568 	.word	0x10000568

0810830c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 810830c:	b580      	push	{r7, lr}
 810830e:	b082      	sub	sp, #8
 8108310:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8108312:	2300      	movs	r3, #0
 8108314:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8108316:	f000 f871 	bl	81083fc <BSP_SD_IsDetected>
 810831a:	4603      	mov	r3, r0
 810831c:	2b01      	cmp	r3, #1
 810831e:	d001      	beq.n	8108324 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8108320:	2302      	movs	r3, #2
 8108322:	e012      	b.n	810834a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8108324:	480b      	ldr	r0, [pc, #44]	@ (8108354 <BSP_SD_Init+0x48>)
 8108326:	f7fd ff17 	bl	8106158 <HAL_SD_Init>
 810832a:	4603      	mov	r3, r0
 810832c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 810832e:	79fb      	ldrb	r3, [r7, #7]
 8108330:	2b00      	cmp	r3, #0
 8108332:	d109      	bne.n	8108348 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8108334:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8108338:	4806      	ldr	r0, [pc, #24]	@ (8108354 <BSP_SD_Init+0x48>)
 810833a:	f7fe fc0b 	bl	8106b54 <HAL_SD_ConfigWideBusOperation>
 810833e:	4603      	mov	r3, r0
 8108340:	2b00      	cmp	r3, #0
 8108342:	d001      	beq.n	8108348 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8108344:	2301      	movs	r3, #1
 8108346:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8108348:	79fb      	ldrb	r3, [r7, #7]
}
 810834a:	4618      	mov	r0, r3
 810834c:	3708      	adds	r7, #8
 810834e:	46bd      	mov	sp, r7
 8108350:	bd80      	pop	{r7, pc}
 8108352:	bf00      	nop
 8108354:	10000444 	.word	0x10000444

08108358 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8108358:	b580      	push	{r7, lr}
 810835a:	b086      	sub	sp, #24
 810835c:	af00      	add	r7, sp, #0
 810835e:	60f8      	str	r0, [r7, #12]
 8108360:	60b9      	str	r1, [r7, #8]
 8108362:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8108364:	2300      	movs	r3, #0
 8108366:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8108368:	687b      	ldr	r3, [r7, #4]
 810836a:	68ba      	ldr	r2, [r7, #8]
 810836c:	68f9      	ldr	r1, [r7, #12]
 810836e:	4806      	ldr	r0, [pc, #24]	@ (8108388 <BSP_SD_ReadBlocks_DMA+0x30>)
 8108370:	f7fe f812 	bl	8106398 <HAL_SD_ReadBlocks_DMA>
 8108374:	4603      	mov	r3, r0
 8108376:	2b00      	cmp	r3, #0
 8108378:	d001      	beq.n	810837e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 810837a:	2301      	movs	r3, #1
 810837c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 810837e:	7dfb      	ldrb	r3, [r7, #23]
}
 8108380:	4618      	mov	r0, r3
 8108382:	3718      	adds	r7, #24
 8108384:	46bd      	mov	sp, r7
 8108386:	bd80      	pop	{r7, pc}
 8108388:	10000444 	.word	0x10000444

0810838c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 810838c:	b580      	push	{r7, lr}
 810838e:	b086      	sub	sp, #24
 8108390:	af00      	add	r7, sp, #0
 8108392:	60f8      	str	r0, [r7, #12]
 8108394:	60b9      	str	r1, [r7, #8]
 8108396:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8108398:	2300      	movs	r3, #0
 810839a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 810839c:	687b      	ldr	r3, [r7, #4]
 810839e:	68ba      	ldr	r2, [r7, #8]
 81083a0:	68f9      	ldr	r1, [r7, #12]
 81083a2:	4806      	ldr	r0, [pc, #24]	@ (81083bc <BSP_SD_WriteBlocks_DMA+0x30>)
 81083a4:	f7fe f8a0 	bl	81064e8 <HAL_SD_WriteBlocks_DMA>
 81083a8:	4603      	mov	r3, r0
 81083aa:	2b00      	cmp	r3, #0
 81083ac:	d001      	beq.n	81083b2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 81083ae:	2301      	movs	r3, #1
 81083b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 81083b2:	7dfb      	ldrb	r3, [r7, #23]
}
 81083b4:	4618      	mov	r0, r3
 81083b6:	3718      	adds	r7, #24
 81083b8:	46bd      	mov	sp, r7
 81083ba:	bd80      	pop	{r7, pc}
 81083bc:	10000444 	.word	0x10000444

081083c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 81083c0:	b580      	push	{r7, lr}
 81083c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 81083c4:	4805      	ldr	r0, [pc, #20]	@ (81083dc <BSP_SD_GetCardState+0x1c>)
 81083c6:	f7fe fcd7 	bl	8106d78 <HAL_SD_GetCardState>
 81083ca:	4603      	mov	r3, r0
 81083cc:	2b04      	cmp	r3, #4
 81083ce:	bf14      	ite	ne
 81083d0:	2301      	movne	r3, #1
 81083d2:	2300      	moveq	r3, #0
 81083d4:	b2db      	uxtb	r3, r3
}
 81083d6:	4618      	mov	r0, r3
 81083d8:	bd80      	pop	{r7, pc}
 81083da:	bf00      	nop
 81083dc:	10000444 	.word	0x10000444

081083e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 81083e0:	b580      	push	{r7, lr}
 81083e2:	b082      	sub	sp, #8
 81083e4:	af00      	add	r7, sp, #0
 81083e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 81083e8:	6879      	ldr	r1, [r7, #4]
 81083ea:	4803      	ldr	r0, [pc, #12]	@ (81083f8 <BSP_SD_GetCardInfo+0x18>)
 81083ec:	f7fe fb86 	bl	8106afc <HAL_SD_GetCardInfo>
}
 81083f0:	bf00      	nop
 81083f2:	3708      	adds	r7, #8
 81083f4:	46bd      	mov	sp, r7
 81083f6:	bd80      	pop	{r7, pc}
 81083f8:	10000444 	.word	0x10000444

081083fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 81083fc:	b480      	push	{r7}
 81083fe:	b083      	sub	sp, #12
 8108400:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8108402:	2301      	movs	r3, #1
 8108404:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8108406:	79fb      	ldrb	r3, [r7, #7]
 8108408:	b2db      	uxtb	r3, r3
}
 810840a:	4618      	mov	r0, r3
 810840c:	370c      	adds	r7, #12
 810840e:	46bd      	mov	sp, r7
 8108410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108414:	4770      	bx	lr

08108416 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8108416:	b580      	push	{r7, lr}
 8108418:	b084      	sub	sp, #16
 810841a:	af00      	add	r7, sp, #0
 810841c:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 810841e:	f000 fa6b 	bl	81088f8 <osKernelGetTickCount>
 8108422:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8108424:	e006      	b.n	8108434 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8108426:	f7ff ffcb 	bl	81083c0 <BSP_SD_GetCardState>
 810842a:	4603      	mov	r3, r0
 810842c:	2b00      	cmp	r3, #0
 810842e:	d101      	bne.n	8108434 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8108430:	2300      	movs	r3, #0
 8108432:	e009      	b.n	8108448 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8108434:	f000 fa60 	bl	81088f8 <osKernelGetTickCount>
 8108438:	4602      	mov	r2, r0
 810843a:	68fb      	ldr	r3, [r7, #12]
 810843c:	1ad3      	subs	r3, r2, r3
 810843e:	687a      	ldr	r2, [r7, #4]
 8108440:	429a      	cmp	r2, r3
 8108442:	d8f0      	bhi.n	8108426 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8108444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8108448:	4618      	mov	r0, r3
 810844a:	3710      	adds	r7, #16
 810844c:	46bd      	mov	sp, r7
 810844e:	bd80      	pop	{r7, pc}

08108450 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8108450:	b580      	push	{r7, lr}
 8108452:	b082      	sub	sp, #8
 8108454:	af00      	add	r7, sp, #0
 8108456:	4603      	mov	r3, r0
 8108458:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 810845a:	4b0b      	ldr	r3, [pc, #44]	@ (8108488 <SD_CheckStatus+0x38>)
 810845c:	2201      	movs	r2, #1
 810845e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8108460:	f7ff ffae 	bl	81083c0 <BSP_SD_GetCardState>
 8108464:	4603      	mov	r3, r0
 8108466:	2b00      	cmp	r3, #0
 8108468:	d107      	bne.n	810847a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 810846a:	4b07      	ldr	r3, [pc, #28]	@ (8108488 <SD_CheckStatus+0x38>)
 810846c:	781b      	ldrb	r3, [r3, #0]
 810846e:	b2db      	uxtb	r3, r3
 8108470:	f023 0301 	bic.w	r3, r3, #1
 8108474:	b2da      	uxtb	r2, r3
 8108476:	4b04      	ldr	r3, [pc, #16]	@ (8108488 <SD_CheckStatus+0x38>)
 8108478:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 810847a:	4b03      	ldr	r3, [pc, #12]	@ (8108488 <SD_CheckStatus+0x38>)
 810847c:	781b      	ldrb	r3, [r3, #0]
 810847e:	b2db      	uxtb	r3, r3
}
 8108480:	4618      	mov	r0, r3
 8108482:	3708      	adds	r7, #8
 8108484:	46bd      	mov	sp, r7
 8108486:	bd80      	pop	{r7, pc}
 8108488:	1000000d 	.word	0x1000000d

0810848c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 810848c:	b580      	push	{r7, lr}
 810848e:	b082      	sub	sp, #8
 8108490:	af00      	add	r7, sp, #0
 8108492:	4603      	mov	r3, r0
 8108494:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8108496:	4b1c      	ldr	r3, [pc, #112]	@ (8108508 <SD_initialize+0x7c>)
 8108498:	2201      	movs	r2, #1
 810849a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 810849c:	f000 f9e4 	bl	8108868 <osKernelGetState>
 81084a0:	4603      	mov	r3, r0
 81084a2:	2b02      	cmp	r3, #2
 81084a4:	d129      	bne.n	81084fa <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 81084a6:	f7ff ff31 	bl	810830c <BSP_SD_Init>
 81084aa:	4603      	mov	r3, r0
 81084ac:	2b00      	cmp	r3, #0
 81084ae:	d107      	bne.n	81084c0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 81084b0:	79fb      	ldrb	r3, [r7, #7]
 81084b2:	4618      	mov	r0, r3
 81084b4:	f7ff ffcc 	bl	8108450 <SD_CheckStatus>
 81084b8:	4603      	mov	r3, r0
 81084ba:	461a      	mov	r2, r3
 81084bc:	4b12      	ldr	r3, [pc, #72]	@ (8108508 <SD_initialize+0x7c>)
 81084be:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 81084c0:	4b11      	ldr	r3, [pc, #68]	@ (8108508 <SD_initialize+0x7c>)
 81084c2:	781b      	ldrb	r3, [r3, #0]
 81084c4:	b2db      	uxtb	r3, r3
 81084c6:	2b01      	cmp	r3, #1
 81084c8:	d017      	beq.n	81084fa <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 81084ca:	4b10      	ldr	r3, [pc, #64]	@ (810850c <SD_initialize+0x80>)
 81084cc:	681b      	ldr	r3, [r3, #0]
 81084ce:	2b00      	cmp	r3, #0
 81084d0:	d107      	bne.n	81084e2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 81084d2:	2200      	movs	r2, #0
 81084d4:	2102      	movs	r1, #2
 81084d6:	200a      	movs	r0, #10
 81084d8:	f000 fad0 	bl	8108a7c <osMessageQueueNew>
 81084dc:	4603      	mov	r3, r0
 81084de:	4a0b      	ldr	r2, [pc, #44]	@ (810850c <SD_initialize+0x80>)
 81084e0:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 81084e2:	4b0a      	ldr	r3, [pc, #40]	@ (810850c <SD_initialize+0x80>)
 81084e4:	681b      	ldr	r3, [r3, #0]
 81084e6:	2b00      	cmp	r3, #0
 81084e8:	d107      	bne.n	81084fa <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 81084ea:	4b07      	ldr	r3, [pc, #28]	@ (8108508 <SD_initialize+0x7c>)
 81084ec:	781b      	ldrb	r3, [r3, #0]
 81084ee:	b2db      	uxtb	r3, r3
 81084f0:	f043 0301 	orr.w	r3, r3, #1
 81084f4:	b2da      	uxtb	r2, r3
 81084f6:	4b04      	ldr	r3, [pc, #16]	@ (8108508 <SD_initialize+0x7c>)
 81084f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 81084fa:	4b03      	ldr	r3, [pc, #12]	@ (8108508 <SD_initialize+0x7c>)
 81084fc:	781b      	ldrb	r3, [r3, #0]
 81084fe:	b2db      	uxtb	r3, r3
}
 8108500:	4618      	mov	r0, r3
 8108502:	3708      	adds	r7, #8
 8108504:	46bd      	mov	sp, r7
 8108506:	bd80      	pop	{r7, pc}
 8108508:	1000000d 	.word	0x1000000d
 810850c:	10000570 	.word	0x10000570

08108510 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8108510:	b580      	push	{r7, lr}
 8108512:	b082      	sub	sp, #8
 8108514:	af00      	add	r7, sp, #0
 8108516:	4603      	mov	r3, r0
 8108518:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 810851a:	79fb      	ldrb	r3, [r7, #7]
 810851c:	4618      	mov	r0, r3
 810851e:	f7ff ff97 	bl	8108450 <SD_CheckStatus>
 8108522:	4603      	mov	r3, r0
}
 8108524:	4618      	mov	r0, r3
 8108526:	3708      	adds	r7, #8
 8108528:	46bd      	mov	sp, r7
 810852a:	bd80      	pop	{r7, pc}

0810852c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 810852c:	b580      	push	{r7, lr}
 810852e:	b088      	sub	sp, #32
 8108530:	af00      	add	r7, sp, #0
 8108532:	60b9      	str	r1, [r7, #8]
 8108534:	607a      	str	r2, [r7, #4]
 8108536:	603b      	str	r3, [r7, #0]
 8108538:	4603      	mov	r3, r0
 810853a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 810853c:	2301      	movs	r3, #1
 810853e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8108540:	f247 5030 	movw	r0, #30000	@ 0x7530
 8108544:	f7ff ff67 	bl	8108416 <SD_CheckStatusWithTimeout>
 8108548:	4603      	mov	r3, r0
 810854a:	2b00      	cmp	r3, #0
 810854c:	da01      	bge.n	8108552 <SD_read+0x26>
  {
    return res;
 810854e:	7ffb      	ldrb	r3, [r7, #31]
 8108550:	e02f      	b.n	81085b2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8108552:	683a      	ldr	r2, [r7, #0]
 8108554:	6879      	ldr	r1, [r7, #4]
 8108556:	68b8      	ldr	r0, [r7, #8]
 8108558:	f7ff fefe 	bl	8108358 <BSP_SD_ReadBlocks_DMA>
 810855c:	4603      	mov	r3, r0
 810855e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8108560:	7fbb      	ldrb	r3, [r7, #30]
 8108562:	2b00      	cmp	r3, #0
 8108564:	d124      	bne.n	81085b0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8108566:	4b15      	ldr	r3, [pc, #84]	@ (81085bc <SD_read+0x90>)
 8108568:	6818      	ldr	r0, [r3, #0]
 810856a:	f107 0112 	add.w	r1, r7, #18
 810856e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8108572:	2200      	movs	r2, #0
 8108574:	f000 faf6 	bl	8108b64 <osMessageQueueGet>
 8108578:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 810857a:	69bb      	ldr	r3, [r7, #24]
 810857c:	2b00      	cmp	r3, #0
 810857e:	d117      	bne.n	81085b0 <SD_read+0x84>
 8108580:	8a7b      	ldrh	r3, [r7, #18]
 8108582:	2b01      	cmp	r3, #1
 8108584:	d114      	bne.n	81085b0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8108586:	f000 f9b7 	bl	81088f8 <osKernelGetTickCount>
 810858a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 810858c:	e007      	b.n	810859e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 810858e:	f7ff ff17 	bl	81083c0 <BSP_SD_GetCardState>
 8108592:	4603      	mov	r3, r0
 8108594:	2b00      	cmp	r3, #0
 8108596:	d102      	bne.n	810859e <SD_read+0x72>
              {
                res = RES_OK;
 8108598:	2300      	movs	r3, #0
 810859a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 810859c:	e008      	b.n	81085b0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 810859e:	f000 f9ab 	bl	81088f8 <osKernelGetTickCount>
 81085a2:	4602      	mov	r2, r0
 81085a4:	697b      	ldr	r3, [r7, #20]
 81085a6:	1ad3      	subs	r3, r2, r3
 81085a8:	f247 522f 	movw	r2, #29999	@ 0x752f
 81085ac:	4293      	cmp	r3, r2
 81085ae:	d9ee      	bls.n	810858e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 81085b0:	7ffb      	ldrb	r3, [r7, #31]
}
 81085b2:	4618      	mov	r0, r3
 81085b4:	3720      	adds	r7, #32
 81085b6:	46bd      	mov	sp, r7
 81085b8:	bd80      	pop	{r7, pc}
 81085ba:	bf00      	nop
 81085bc:	10000570 	.word	0x10000570

081085c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 81085c0:	b580      	push	{r7, lr}
 81085c2:	b088      	sub	sp, #32
 81085c4:	af00      	add	r7, sp, #0
 81085c6:	60b9      	str	r1, [r7, #8]
 81085c8:	607a      	str	r2, [r7, #4]
 81085ca:	603b      	str	r3, [r7, #0]
 81085cc:	4603      	mov	r3, r0
 81085ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 81085d0:	2301      	movs	r3, #1
 81085d2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 81085d4:	f247 5030 	movw	r0, #30000	@ 0x7530
 81085d8:	f7ff ff1d 	bl	8108416 <SD_CheckStatusWithTimeout>
 81085dc:	4603      	mov	r3, r0
 81085de:	2b00      	cmp	r3, #0
 81085e0:	da01      	bge.n	81085e6 <SD_write+0x26>
  {
    return res;
 81085e2:	7ffb      	ldrb	r3, [r7, #31]
 81085e4:	e02d      	b.n	8108642 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 81085e6:	683a      	ldr	r2, [r7, #0]
 81085e8:	6879      	ldr	r1, [r7, #4]
 81085ea:	68b8      	ldr	r0, [r7, #8]
 81085ec:	f7ff fece 	bl	810838c <BSP_SD_WriteBlocks_DMA>
 81085f0:	4603      	mov	r3, r0
 81085f2:	2b00      	cmp	r3, #0
 81085f4:	d124      	bne.n	8108640 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 81085f6:	4b15      	ldr	r3, [pc, #84]	@ (810864c <SD_write+0x8c>)
 81085f8:	6818      	ldr	r0, [r3, #0]
 81085fa:	f107 0112 	add.w	r1, r7, #18
 81085fe:	f247 5330 	movw	r3, #30000	@ 0x7530
 8108602:	2200      	movs	r2, #0
 8108604:	f000 faae 	bl	8108b64 <osMessageQueueGet>
 8108608:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 810860a:	69bb      	ldr	r3, [r7, #24]
 810860c:	2b00      	cmp	r3, #0
 810860e:	d117      	bne.n	8108640 <SD_write+0x80>
 8108610:	8a7b      	ldrh	r3, [r7, #18]
 8108612:	2b02      	cmp	r3, #2
 8108614:	d114      	bne.n	8108640 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8108616:	f000 f96f 	bl	81088f8 <osKernelGetTickCount>
 810861a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 810861c:	e007      	b.n	810862e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 810861e:	f7ff fecf 	bl	81083c0 <BSP_SD_GetCardState>
 8108622:	4603      	mov	r3, r0
 8108624:	2b00      	cmp	r3, #0
 8108626:	d102      	bne.n	810862e <SD_write+0x6e>
          {
            res = RES_OK;
 8108628:	2300      	movs	r3, #0
 810862a:	77fb      	strb	r3, [r7, #31]
            break;
 810862c:	e008      	b.n	8108640 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 810862e:	f000 f963 	bl	81088f8 <osKernelGetTickCount>
 8108632:	4602      	mov	r2, r0
 8108634:	697b      	ldr	r3, [r7, #20]
 8108636:	1ad3      	subs	r3, r2, r3
 8108638:	f247 522f 	movw	r2, #29999	@ 0x752f
 810863c:	4293      	cmp	r3, r2
 810863e:	d9ee      	bls.n	810861e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8108640:	7ffb      	ldrb	r3, [r7, #31]
}
 8108642:	4618      	mov	r0, r3
 8108644:	3720      	adds	r7, #32
 8108646:	46bd      	mov	sp, r7
 8108648:	bd80      	pop	{r7, pc}
 810864a:	bf00      	nop
 810864c:	10000570 	.word	0x10000570

08108650 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8108650:	b580      	push	{r7, lr}
 8108652:	b08c      	sub	sp, #48	@ 0x30
 8108654:	af00      	add	r7, sp, #0
 8108656:	4603      	mov	r3, r0
 8108658:	603a      	str	r2, [r7, #0]
 810865a:	71fb      	strb	r3, [r7, #7]
 810865c:	460b      	mov	r3, r1
 810865e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8108660:	2301      	movs	r3, #1
 8108662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8108666:	4b25      	ldr	r3, [pc, #148]	@ (81086fc <SD_ioctl+0xac>)
 8108668:	781b      	ldrb	r3, [r3, #0]
 810866a:	b2db      	uxtb	r3, r3
 810866c:	f003 0301 	and.w	r3, r3, #1
 8108670:	2b00      	cmp	r3, #0
 8108672:	d001      	beq.n	8108678 <SD_ioctl+0x28>
 8108674:	2303      	movs	r3, #3
 8108676:	e03c      	b.n	81086f2 <SD_ioctl+0xa2>

  switch (cmd)
 8108678:	79bb      	ldrb	r3, [r7, #6]
 810867a:	2b03      	cmp	r3, #3
 810867c:	d834      	bhi.n	81086e8 <SD_ioctl+0x98>
 810867e:	a201      	add	r2, pc, #4	@ (adr r2, 8108684 <SD_ioctl+0x34>)
 8108680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108684:	08108695 	.word	0x08108695
 8108688:	0810869d 	.word	0x0810869d
 810868c:	081086b5 	.word	0x081086b5
 8108690:	081086cf 	.word	0x081086cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8108694:	2300      	movs	r3, #0
 8108696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 810869a:	e028      	b.n	81086ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 810869c:	f107 0308 	add.w	r3, r7, #8
 81086a0:	4618      	mov	r0, r3
 81086a2:	f7ff fe9d 	bl	81083e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 81086a6:	6a3a      	ldr	r2, [r7, #32]
 81086a8:	683b      	ldr	r3, [r7, #0]
 81086aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 81086ac:	2300      	movs	r3, #0
 81086ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 81086b2:	e01c      	b.n	81086ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 81086b4:	f107 0308 	add.w	r3, r7, #8
 81086b8:	4618      	mov	r0, r3
 81086ba:	f7ff fe91 	bl	81083e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 81086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81086c0:	b29a      	uxth	r2, r3
 81086c2:	683b      	ldr	r3, [r7, #0]
 81086c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 81086c6:	2300      	movs	r3, #0
 81086c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 81086cc:	e00f      	b.n	81086ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 81086ce:	f107 0308 	add.w	r3, r7, #8
 81086d2:	4618      	mov	r0, r3
 81086d4:	f7ff fe84 	bl	81083e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 81086d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81086da:	0a5a      	lsrs	r2, r3, #9
 81086dc:	683b      	ldr	r3, [r7, #0]
 81086de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 81086e0:	2300      	movs	r3, #0
 81086e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 81086e6:	e002      	b.n	81086ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 81086e8:	2304      	movs	r3, #4
 81086ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 81086ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 81086f2:	4618      	mov	r0, r3
 81086f4:	3730      	adds	r7, #48	@ 0x30
 81086f6:	46bd      	mov	sp, r7
 81086f8:	bd80      	pop	{r7, pc}
 81086fa:	bf00      	nop
 81086fc:	1000000d 	.word	0x1000000d

08108700 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8108700:	b480      	push	{r7}
 8108702:	b087      	sub	sp, #28
 8108704:	af00      	add	r7, sp, #0
 8108706:	60f8      	str	r0, [r7, #12]
 8108708:	60b9      	str	r1, [r7, #8]
 810870a:	4613      	mov	r3, r2
 810870c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 810870e:	2301      	movs	r3, #1
 8108710:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8108712:	2300      	movs	r3, #0
 8108714:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8108716:	4b1f      	ldr	r3, [pc, #124]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 8108718:	7a5b      	ldrb	r3, [r3, #9]
 810871a:	b2db      	uxtb	r3, r3
 810871c:	2b00      	cmp	r3, #0
 810871e:	d131      	bne.n	8108784 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8108720:	4b1c      	ldr	r3, [pc, #112]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 8108722:	7a5b      	ldrb	r3, [r3, #9]
 8108724:	b2db      	uxtb	r3, r3
 8108726:	461a      	mov	r2, r3
 8108728:	4b1a      	ldr	r3, [pc, #104]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 810872a:	2100      	movs	r1, #0
 810872c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 810872e:	4b19      	ldr	r3, [pc, #100]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 8108730:	7a5b      	ldrb	r3, [r3, #9]
 8108732:	b2db      	uxtb	r3, r3
 8108734:	4a17      	ldr	r2, [pc, #92]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 8108736:	009b      	lsls	r3, r3, #2
 8108738:	4413      	add	r3, r2
 810873a:	68fa      	ldr	r2, [r7, #12]
 810873c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 810873e:	4b15      	ldr	r3, [pc, #84]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 8108740:	7a5b      	ldrb	r3, [r3, #9]
 8108742:	b2db      	uxtb	r3, r3
 8108744:	461a      	mov	r2, r3
 8108746:	4b13      	ldr	r3, [pc, #76]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 8108748:	4413      	add	r3, r2
 810874a:	79fa      	ldrb	r2, [r7, #7]
 810874c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 810874e:	4b11      	ldr	r3, [pc, #68]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 8108750:	7a5b      	ldrb	r3, [r3, #9]
 8108752:	b2db      	uxtb	r3, r3
 8108754:	1c5a      	adds	r2, r3, #1
 8108756:	b2d1      	uxtb	r1, r2
 8108758:	4a0e      	ldr	r2, [pc, #56]	@ (8108794 <FATFS_LinkDriverEx+0x94>)
 810875a:	7251      	strb	r1, [r2, #9]
 810875c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 810875e:	7dbb      	ldrb	r3, [r7, #22]
 8108760:	3330      	adds	r3, #48	@ 0x30
 8108762:	b2da      	uxtb	r2, r3
 8108764:	68bb      	ldr	r3, [r7, #8]
 8108766:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8108768:	68bb      	ldr	r3, [r7, #8]
 810876a:	3301      	adds	r3, #1
 810876c:	223a      	movs	r2, #58	@ 0x3a
 810876e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8108770:	68bb      	ldr	r3, [r7, #8]
 8108772:	3302      	adds	r3, #2
 8108774:	222f      	movs	r2, #47	@ 0x2f
 8108776:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8108778:	68bb      	ldr	r3, [r7, #8]
 810877a:	3303      	adds	r3, #3
 810877c:	2200      	movs	r2, #0
 810877e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8108780:	2300      	movs	r3, #0
 8108782:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8108784:	7dfb      	ldrb	r3, [r7, #23]
}
 8108786:	4618      	mov	r0, r3
 8108788:	371c      	adds	r7, #28
 810878a:	46bd      	mov	sp, r7
 810878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108790:	4770      	bx	lr
 8108792:	bf00      	nop
 8108794:	10000574 	.word	0x10000574

08108798 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8108798:	b580      	push	{r7, lr}
 810879a:	b082      	sub	sp, #8
 810879c:	af00      	add	r7, sp, #0
 810879e:	6078      	str	r0, [r7, #4]
 81087a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 81087a2:	2200      	movs	r2, #0
 81087a4:	6839      	ldr	r1, [r7, #0]
 81087a6:	6878      	ldr	r0, [r7, #4]
 81087a8:	f7ff ffaa 	bl	8108700 <FATFS_LinkDriverEx>
 81087ac:	4603      	mov	r3, r0
}
 81087ae:	4618      	mov	r0, r3
 81087b0:	3708      	adds	r7, #8
 81087b2:	46bd      	mov	sp, r7
 81087b4:	bd80      	pop	{r7, pc}
	...

081087b8 <__NVIC_SetPriority>:
{
 81087b8:	b480      	push	{r7}
 81087ba:	b083      	sub	sp, #12
 81087bc:	af00      	add	r7, sp, #0
 81087be:	4603      	mov	r3, r0
 81087c0:	6039      	str	r1, [r7, #0]
 81087c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81087c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81087c8:	2b00      	cmp	r3, #0
 81087ca:	db0a      	blt.n	81087e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81087cc:	683b      	ldr	r3, [r7, #0]
 81087ce:	b2da      	uxtb	r2, r3
 81087d0:	490c      	ldr	r1, [pc, #48]	@ (8108804 <__NVIC_SetPriority+0x4c>)
 81087d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81087d6:	0112      	lsls	r2, r2, #4
 81087d8:	b2d2      	uxtb	r2, r2
 81087da:	440b      	add	r3, r1
 81087dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81087e0:	e00a      	b.n	81087f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81087e2:	683b      	ldr	r3, [r7, #0]
 81087e4:	b2da      	uxtb	r2, r3
 81087e6:	4908      	ldr	r1, [pc, #32]	@ (8108808 <__NVIC_SetPriority+0x50>)
 81087e8:	88fb      	ldrh	r3, [r7, #6]
 81087ea:	f003 030f 	and.w	r3, r3, #15
 81087ee:	3b04      	subs	r3, #4
 81087f0:	0112      	lsls	r2, r2, #4
 81087f2:	b2d2      	uxtb	r2, r2
 81087f4:	440b      	add	r3, r1
 81087f6:	761a      	strb	r2, [r3, #24]
}
 81087f8:	bf00      	nop
 81087fa:	370c      	adds	r7, #12
 81087fc:	46bd      	mov	sp, r7
 81087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108802:	4770      	bx	lr
 8108804:	e000e100 	.word	0xe000e100
 8108808:	e000ed00 	.word	0xe000ed00

0810880c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810880c:	b580      	push	{r7, lr}
 810880e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8108810:	2100      	movs	r1, #0
 8108812:	f06f 0004 	mvn.w	r0, #4
 8108816:	f7ff ffcf 	bl	81087b8 <__NVIC_SetPriority>
#endif
}
 810881a:	bf00      	nop
 810881c:	bd80      	pop	{r7, pc}
	...

08108820 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8108820:	b480      	push	{r7}
 8108822:	b083      	sub	sp, #12
 8108824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108826:	f3ef 8305 	mrs	r3, IPSR
 810882a:	603b      	str	r3, [r7, #0]
  return(result);
 810882c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810882e:	2b00      	cmp	r3, #0
 8108830:	d003      	beq.n	810883a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8108832:	f06f 0305 	mvn.w	r3, #5
 8108836:	607b      	str	r3, [r7, #4]
 8108838:	e00c      	b.n	8108854 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810883a:	4b0a      	ldr	r3, [pc, #40]	@ (8108864 <osKernelInitialize+0x44>)
 810883c:	681b      	ldr	r3, [r3, #0]
 810883e:	2b00      	cmp	r3, #0
 8108840:	d105      	bne.n	810884e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8108842:	4b08      	ldr	r3, [pc, #32]	@ (8108864 <osKernelInitialize+0x44>)
 8108844:	2201      	movs	r2, #1
 8108846:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8108848:	2300      	movs	r3, #0
 810884a:	607b      	str	r3, [r7, #4]
 810884c:	e002      	b.n	8108854 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810884e:	f04f 33ff 	mov.w	r3, #4294967295
 8108852:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8108854:	687b      	ldr	r3, [r7, #4]
}
 8108856:	4618      	mov	r0, r3
 8108858:	370c      	adds	r7, #12
 810885a:	46bd      	mov	sp, r7
 810885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108860:	4770      	bx	lr
 8108862:	bf00      	nop
 8108864:	10000580 	.word	0x10000580

08108868 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8108868:	b580      	push	{r7, lr}
 810886a:	b082      	sub	sp, #8
 810886c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 810886e:	f002 fb1f 	bl	810aeb0 <xTaskGetSchedulerState>
 8108872:	4603      	mov	r3, r0
 8108874:	2b00      	cmp	r3, #0
 8108876:	d004      	beq.n	8108882 <osKernelGetState+0x1a>
 8108878:	2b02      	cmp	r3, #2
 810887a:	d105      	bne.n	8108888 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 810887c:	2302      	movs	r3, #2
 810887e:	607b      	str	r3, [r7, #4]
      break;
 8108880:	e00c      	b.n	810889c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8108882:	2303      	movs	r3, #3
 8108884:	607b      	str	r3, [r7, #4]
      break;
 8108886:	e009      	b.n	810889c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8108888:	4b07      	ldr	r3, [pc, #28]	@ (81088a8 <osKernelGetState+0x40>)
 810888a:	681b      	ldr	r3, [r3, #0]
 810888c:	2b01      	cmp	r3, #1
 810888e:	d102      	bne.n	8108896 <osKernelGetState+0x2e>
        state = osKernelReady;
 8108890:	2301      	movs	r3, #1
 8108892:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8108894:	e001      	b.n	810889a <osKernelGetState+0x32>
        state = osKernelInactive;
 8108896:	2300      	movs	r3, #0
 8108898:	607b      	str	r3, [r7, #4]
      break;
 810889a:	bf00      	nop
  }

  return (state);
 810889c:	687b      	ldr	r3, [r7, #4]
}
 810889e:	4618      	mov	r0, r3
 81088a0:	3708      	adds	r7, #8
 81088a2:	46bd      	mov	sp, r7
 81088a4:	bd80      	pop	{r7, pc}
 81088a6:	bf00      	nop
 81088a8:	10000580 	.word	0x10000580

081088ac <osKernelStart>:

osStatus_t osKernelStart (void) {
 81088ac:	b580      	push	{r7, lr}
 81088ae:	b082      	sub	sp, #8
 81088b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81088b2:	f3ef 8305 	mrs	r3, IPSR
 81088b6:	603b      	str	r3, [r7, #0]
  return(result);
 81088b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81088ba:	2b00      	cmp	r3, #0
 81088bc:	d003      	beq.n	81088c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 81088be:	f06f 0305 	mvn.w	r3, #5
 81088c2:	607b      	str	r3, [r7, #4]
 81088c4:	e010      	b.n	81088e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 81088c6:	4b0b      	ldr	r3, [pc, #44]	@ (81088f4 <osKernelStart+0x48>)
 81088c8:	681b      	ldr	r3, [r3, #0]
 81088ca:	2b01      	cmp	r3, #1
 81088cc:	d109      	bne.n	81088e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81088ce:	f7ff ff9d 	bl	810880c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81088d2:	4b08      	ldr	r3, [pc, #32]	@ (81088f4 <osKernelStart+0x48>)
 81088d4:	2202      	movs	r2, #2
 81088d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81088d8:	f001 fe74 	bl	810a5c4 <vTaskStartScheduler>
      stat = osOK;
 81088dc:	2300      	movs	r3, #0
 81088de:	607b      	str	r3, [r7, #4]
 81088e0:	e002      	b.n	81088e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 81088e2:	f04f 33ff 	mov.w	r3, #4294967295
 81088e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81088e8:	687b      	ldr	r3, [r7, #4]
}
 81088ea:	4618      	mov	r0, r3
 81088ec:	3708      	adds	r7, #8
 81088ee:	46bd      	mov	sp, r7
 81088f0:	bd80      	pop	{r7, pc}
 81088f2:	bf00      	nop
 81088f4:	10000580 	.word	0x10000580

081088f8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 81088f8:	b580      	push	{r7, lr}
 81088fa:	b082      	sub	sp, #8
 81088fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81088fe:	f3ef 8305 	mrs	r3, IPSR
 8108902:	603b      	str	r3, [r7, #0]
  return(result);
 8108904:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8108906:	2b00      	cmp	r3, #0
 8108908:	d003      	beq.n	8108912 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810890a:	f001 ff87 	bl	810a81c <xTaskGetTickCountFromISR>
 810890e:	6078      	str	r0, [r7, #4]
 8108910:	e002      	b.n	8108918 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8108912:	f001 ff73 	bl	810a7fc <xTaskGetTickCount>
 8108916:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8108918:	687b      	ldr	r3, [r7, #4]
}
 810891a:	4618      	mov	r0, r3
 810891c:	3708      	adds	r7, #8
 810891e:	46bd      	mov	sp, r7
 8108920:	bd80      	pop	{r7, pc}

08108922 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8108922:	b580      	push	{r7, lr}
 8108924:	b08e      	sub	sp, #56	@ 0x38
 8108926:	af04      	add	r7, sp, #16
 8108928:	60f8      	str	r0, [r7, #12]
 810892a:	60b9      	str	r1, [r7, #8]
 810892c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810892e:	2300      	movs	r3, #0
 8108930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108932:	f3ef 8305 	mrs	r3, IPSR
 8108936:	617b      	str	r3, [r7, #20]
  return(result);
 8108938:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810893a:	2b00      	cmp	r3, #0
 810893c:	d17e      	bne.n	8108a3c <osThreadNew+0x11a>
 810893e:	68fb      	ldr	r3, [r7, #12]
 8108940:	2b00      	cmp	r3, #0
 8108942:	d07b      	beq.n	8108a3c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8108944:	2380      	movs	r3, #128	@ 0x80
 8108946:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8108948:	2318      	movs	r3, #24
 810894a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810894c:	2300      	movs	r3, #0
 810894e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8108950:	f04f 33ff 	mov.w	r3, #4294967295
 8108954:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	2b00      	cmp	r3, #0
 810895a:	d045      	beq.n	81089e8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810895c:	687b      	ldr	r3, [r7, #4]
 810895e:	681b      	ldr	r3, [r3, #0]
 8108960:	2b00      	cmp	r3, #0
 8108962:	d002      	beq.n	810896a <osThreadNew+0x48>
        name = attr->name;
 8108964:	687b      	ldr	r3, [r7, #4]
 8108966:	681b      	ldr	r3, [r3, #0]
 8108968:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	699b      	ldr	r3, [r3, #24]
 810896e:	2b00      	cmp	r3, #0
 8108970:	d002      	beq.n	8108978 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	699b      	ldr	r3, [r3, #24]
 8108976:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8108978:	69fb      	ldr	r3, [r7, #28]
 810897a:	2b00      	cmp	r3, #0
 810897c:	d008      	beq.n	8108990 <osThreadNew+0x6e>
 810897e:	69fb      	ldr	r3, [r7, #28]
 8108980:	2b38      	cmp	r3, #56	@ 0x38
 8108982:	d805      	bhi.n	8108990 <osThreadNew+0x6e>
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	685b      	ldr	r3, [r3, #4]
 8108988:	f003 0301 	and.w	r3, r3, #1
 810898c:	2b00      	cmp	r3, #0
 810898e:	d001      	beq.n	8108994 <osThreadNew+0x72>
        return (NULL);
 8108990:	2300      	movs	r3, #0
 8108992:	e054      	b.n	8108a3e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8108994:	687b      	ldr	r3, [r7, #4]
 8108996:	695b      	ldr	r3, [r3, #20]
 8108998:	2b00      	cmp	r3, #0
 810899a:	d003      	beq.n	81089a4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	695b      	ldr	r3, [r3, #20]
 81089a0:	089b      	lsrs	r3, r3, #2
 81089a2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81089a4:	687b      	ldr	r3, [r7, #4]
 81089a6:	689b      	ldr	r3, [r3, #8]
 81089a8:	2b00      	cmp	r3, #0
 81089aa:	d00e      	beq.n	81089ca <osThreadNew+0xa8>
 81089ac:	687b      	ldr	r3, [r7, #4]
 81089ae:	68db      	ldr	r3, [r3, #12]
 81089b0:	2ba7      	cmp	r3, #167	@ 0xa7
 81089b2:	d90a      	bls.n	81089ca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81089b4:	687b      	ldr	r3, [r7, #4]
 81089b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81089b8:	2b00      	cmp	r3, #0
 81089ba:	d006      	beq.n	81089ca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	695b      	ldr	r3, [r3, #20]
 81089c0:	2b00      	cmp	r3, #0
 81089c2:	d002      	beq.n	81089ca <osThreadNew+0xa8>
        mem = 1;
 81089c4:	2301      	movs	r3, #1
 81089c6:	61bb      	str	r3, [r7, #24]
 81089c8:	e010      	b.n	81089ec <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	689b      	ldr	r3, [r3, #8]
 81089ce:	2b00      	cmp	r3, #0
 81089d0:	d10c      	bne.n	81089ec <osThreadNew+0xca>
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	68db      	ldr	r3, [r3, #12]
 81089d6:	2b00      	cmp	r3, #0
 81089d8:	d108      	bne.n	81089ec <osThreadNew+0xca>
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	691b      	ldr	r3, [r3, #16]
 81089de:	2b00      	cmp	r3, #0
 81089e0:	d104      	bne.n	81089ec <osThreadNew+0xca>
          mem = 0;
 81089e2:	2300      	movs	r3, #0
 81089e4:	61bb      	str	r3, [r7, #24]
 81089e6:	e001      	b.n	81089ec <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81089e8:	2300      	movs	r3, #0
 81089ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81089ec:	69bb      	ldr	r3, [r7, #24]
 81089ee:	2b01      	cmp	r3, #1
 81089f0:	d110      	bne.n	8108a14 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 81089f6:	687a      	ldr	r2, [r7, #4]
 81089f8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81089fa:	9202      	str	r2, [sp, #8]
 81089fc:	9301      	str	r3, [sp, #4]
 81089fe:	69fb      	ldr	r3, [r7, #28]
 8108a00:	9300      	str	r3, [sp, #0]
 8108a02:	68bb      	ldr	r3, [r7, #8]
 8108a04:	6a3a      	ldr	r2, [r7, #32]
 8108a06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108a08:	68f8      	ldr	r0, [r7, #12]
 8108a0a:	f001 fbe7 	bl	810a1dc <xTaskCreateStatic>
 8108a0e:	4603      	mov	r3, r0
 8108a10:	613b      	str	r3, [r7, #16]
 8108a12:	e013      	b.n	8108a3c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8108a14:	69bb      	ldr	r3, [r7, #24]
 8108a16:	2b00      	cmp	r3, #0
 8108a18:	d110      	bne.n	8108a3c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8108a1a:	6a3b      	ldr	r3, [r7, #32]
 8108a1c:	b29a      	uxth	r2, r3
 8108a1e:	f107 0310 	add.w	r3, r7, #16
 8108a22:	9301      	str	r3, [sp, #4]
 8108a24:	69fb      	ldr	r3, [r7, #28]
 8108a26:	9300      	str	r3, [sp, #0]
 8108a28:	68bb      	ldr	r3, [r7, #8]
 8108a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108a2c:	68f8      	ldr	r0, [r7, #12]
 8108a2e:	f001 fc35 	bl	810a29c <xTaskCreate>
 8108a32:	4603      	mov	r3, r0
 8108a34:	2b01      	cmp	r3, #1
 8108a36:	d001      	beq.n	8108a3c <osThreadNew+0x11a>
            hTask = NULL;
 8108a38:	2300      	movs	r3, #0
 8108a3a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8108a3c:	693b      	ldr	r3, [r7, #16]
}
 8108a3e:	4618      	mov	r0, r3
 8108a40:	3728      	adds	r7, #40	@ 0x28
 8108a42:	46bd      	mov	sp, r7
 8108a44:	bd80      	pop	{r7, pc}

08108a46 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8108a46:	b580      	push	{r7, lr}
 8108a48:	b084      	sub	sp, #16
 8108a4a:	af00      	add	r7, sp, #0
 8108a4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108a4e:	f3ef 8305 	mrs	r3, IPSR
 8108a52:	60bb      	str	r3, [r7, #8]
  return(result);
 8108a54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8108a56:	2b00      	cmp	r3, #0
 8108a58:	d003      	beq.n	8108a62 <osDelay+0x1c>
    stat = osErrorISR;
 8108a5a:	f06f 0305 	mvn.w	r3, #5
 8108a5e:	60fb      	str	r3, [r7, #12]
 8108a60:	e007      	b.n	8108a72 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8108a62:	2300      	movs	r3, #0
 8108a64:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8108a66:	687b      	ldr	r3, [r7, #4]
 8108a68:	2b00      	cmp	r3, #0
 8108a6a:	d002      	beq.n	8108a72 <osDelay+0x2c>
      vTaskDelay(ticks);
 8108a6c:	6878      	ldr	r0, [r7, #4]
 8108a6e:	f001 fd73 	bl	810a558 <vTaskDelay>
    }
  }

  return (stat);
 8108a72:	68fb      	ldr	r3, [r7, #12]
}
 8108a74:	4618      	mov	r0, r3
 8108a76:	3710      	adds	r7, #16
 8108a78:	46bd      	mov	sp, r7
 8108a7a:	bd80      	pop	{r7, pc}

08108a7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8108a7c:	b580      	push	{r7, lr}
 8108a7e:	b08a      	sub	sp, #40	@ 0x28
 8108a80:	af02      	add	r7, sp, #8
 8108a82:	60f8      	str	r0, [r7, #12]
 8108a84:	60b9      	str	r1, [r7, #8]
 8108a86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8108a88:	2300      	movs	r3, #0
 8108a8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108a8c:	f3ef 8305 	mrs	r3, IPSR
 8108a90:	613b      	str	r3, [r7, #16]
  return(result);
 8108a92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8108a94:	2b00      	cmp	r3, #0
 8108a96:	d15f      	bne.n	8108b58 <osMessageQueueNew+0xdc>
 8108a98:	68fb      	ldr	r3, [r7, #12]
 8108a9a:	2b00      	cmp	r3, #0
 8108a9c:	d05c      	beq.n	8108b58 <osMessageQueueNew+0xdc>
 8108a9e:	68bb      	ldr	r3, [r7, #8]
 8108aa0:	2b00      	cmp	r3, #0
 8108aa2:	d059      	beq.n	8108b58 <osMessageQueueNew+0xdc>
    mem = -1;
 8108aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8108aa8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8108aaa:	687b      	ldr	r3, [r7, #4]
 8108aac:	2b00      	cmp	r3, #0
 8108aae:	d029      	beq.n	8108b04 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8108ab0:	687b      	ldr	r3, [r7, #4]
 8108ab2:	689b      	ldr	r3, [r3, #8]
 8108ab4:	2b00      	cmp	r3, #0
 8108ab6:	d012      	beq.n	8108ade <osMessageQueueNew+0x62>
 8108ab8:	687b      	ldr	r3, [r7, #4]
 8108aba:	68db      	ldr	r3, [r3, #12]
 8108abc:	2b4f      	cmp	r3, #79	@ 0x4f
 8108abe:	d90e      	bls.n	8108ade <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8108ac0:	687b      	ldr	r3, [r7, #4]
 8108ac2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8108ac4:	2b00      	cmp	r3, #0
 8108ac6:	d00a      	beq.n	8108ade <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8108ac8:	687b      	ldr	r3, [r7, #4]
 8108aca:	695a      	ldr	r2, [r3, #20]
 8108acc:	68fb      	ldr	r3, [r7, #12]
 8108ace:	68b9      	ldr	r1, [r7, #8]
 8108ad0:	fb01 f303 	mul.w	r3, r1, r3
 8108ad4:	429a      	cmp	r2, r3
 8108ad6:	d302      	bcc.n	8108ade <osMessageQueueNew+0x62>
        mem = 1;
 8108ad8:	2301      	movs	r3, #1
 8108ada:	61bb      	str	r3, [r7, #24]
 8108adc:	e014      	b.n	8108b08 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8108ade:	687b      	ldr	r3, [r7, #4]
 8108ae0:	689b      	ldr	r3, [r3, #8]
 8108ae2:	2b00      	cmp	r3, #0
 8108ae4:	d110      	bne.n	8108b08 <osMessageQueueNew+0x8c>
 8108ae6:	687b      	ldr	r3, [r7, #4]
 8108ae8:	68db      	ldr	r3, [r3, #12]
 8108aea:	2b00      	cmp	r3, #0
 8108aec:	d10c      	bne.n	8108b08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8108aee:	687b      	ldr	r3, [r7, #4]
 8108af0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8108af2:	2b00      	cmp	r3, #0
 8108af4:	d108      	bne.n	8108b08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8108af6:	687b      	ldr	r3, [r7, #4]
 8108af8:	695b      	ldr	r3, [r3, #20]
 8108afa:	2b00      	cmp	r3, #0
 8108afc:	d104      	bne.n	8108b08 <osMessageQueueNew+0x8c>
          mem = 0;
 8108afe:	2300      	movs	r3, #0
 8108b00:	61bb      	str	r3, [r7, #24]
 8108b02:	e001      	b.n	8108b08 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8108b04:	2300      	movs	r3, #0
 8108b06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8108b08:	69bb      	ldr	r3, [r7, #24]
 8108b0a:	2b01      	cmp	r3, #1
 8108b0c:	d10b      	bne.n	8108b26 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8108b0e:	687b      	ldr	r3, [r7, #4]
 8108b10:	691a      	ldr	r2, [r3, #16]
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	689b      	ldr	r3, [r3, #8]
 8108b16:	2100      	movs	r1, #0
 8108b18:	9100      	str	r1, [sp, #0]
 8108b1a:	68b9      	ldr	r1, [r7, #8]
 8108b1c:	68f8      	ldr	r0, [r7, #12]
 8108b1e:	f000 fe0f 	bl	8109740 <xQueueGenericCreateStatic>
 8108b22:	61f8      	str	r0, [r7, #28]
 8108b24:	e008      	b.n	8108b38 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8108b26:	69bb      	ldr	r3, [r7, #24]
 8108b28:	2b00      	cmp	r3, #0
 8108b2a:	d105      	bne.n	8108b38 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8108b2c:	2200      	movs	r2, #0
 8108b2e:	68b9      	ldr	r1, [r7, #8]
 8108b30:	68f8      	ldr	r0, [r7, #12]
 8108b32:	f000 fe82 	bl	810983a <xQueueGenericCreate>
 8108b36:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8108b38:	69fb      	ldr	r3, [r7, #28]
 8108b3a:	2b00      	cmp	r3, #0
 8108b3c:	d00c      	beq.n	8108b58 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	2b00      	cmp	r3, #0
 8108b42:	d003      	beq.n	8108b4c <osMessageQueueNew+0xd0>
        name = attr->name;
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	681b      	ldr	r3, [r3, #0]
 8108b48:	617b      	str	r3, [r7, #20]
 8108b4a:	e001      	b.n	8108b50 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8108b4c:	2300      	movs	r3, #0
 8108b4e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8108b50:	6979      	ldr	r1, [r7, #20]
 8108b52:	69f8      	ldr	r0, [r7, #28]
 8108b54:	f001 fae4 	bl	810a120 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8108b58:	69fb      	ldr	r3, [r7, #28]
}
 8108b5a:	4618      	mov	r0, r3
 8108b5c:	3720      	adds	r7, #32
 8108b5e:	46bd      	mov	sp, r7
 8108b60:	bd80      	pop	{r7, pc}
	...

08108b64 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8108b64:	b580      	push	{r7, lr}
 8108b66:	b088      	sub	sp, #32
 8108b68:	af00      	add	r7, sp, #0
 8108b6a:	60f8      	str	r0, [r7, #12]
 8108b6c:	60b9      	str	r1, [r7, #8]
 8108b6e:	607a      	str	r2, [r7, #4]
 8108b70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8108b72:	68fb      	ldr	r3, [r7, #12]
 8108b74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8108b76:	2300      	movs	r3, #0
 8108b78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108b7a:	f3ef 8305 	mrs	r3, IPSR
 8108b7e:	617b      	str	r3, [r7, #20]
  return(result);
 8108b80:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8108b82:	2b00      	cmp	r3, #0
 8108b84:	d028      	beq.n	8108bd8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8108b86:	69bb      	ldr	r3, [r7, #24]
 8108b88:	2b00      	cmp	r3, #0
 8108b8a:	d005      	beq.n	8108b98 <osMessageQueueGet+0x34>
 8108b8c:	68bb      	ldr	r3, [r7, #8]
 8108b8e:	2b00      	cmp	r3, #0
 8108b90:	d002      	beq.n	8108b98 <osMessageQueueGet+0x34>
 8108b92:	683b      	ldr	r3, [r7, #0]
 8108b94:	2b00      	cmp	r3, #0
 8108b96:	d003      	beq.n	8108ba0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8108b98:	f06f 0303 	mvn.w	r3, #3
 8108b9c:	61fb      	str	r3, [r7, #28]
 8108b9e:	e037      	b.n	8108c10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8108ba0:	2300      	movs	r3, #0
 8108ba2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8108ba4:	f107 0310 	add.w	r3, r7, #16
 8108ba8:	461a      	mov	r2, r3
 8108baa:	68b9      	ldr	r1, [r7, #8]
 8108bac:	69b8      	ldr	r0, [r7, #24]
 8108bae:	f001 f925 	bl	8109dfc <xQueueReceiveFromISR>
 8108bb2:	4603      	mov	r3, r0
 8108bb4:	2b01      	cmp	r3, #1
 8108bb6:	d003      	beq.n	8108bc0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8108bb8:	f06f 0302 	mvn.w	r3, #2
 8108bbc:	61fb      	str	r3, [r7, #28]
 8108bbe:	e027      	b.n	8108c10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8108bc0:	693b      	ldr	r3, [r7, #16]
 8108bc2:	2b00      	cmp	r3, #0
 8108bc4:	d024      	beq.n	8108c10 <osMessageQueueGet+0xac>
 8108bc6:	4b15      	ldr	r3, [pc, #84]	@ (8108c1c <osMessageQueueGet+0xb8>)
 8108bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8108bcc:	601a      	str	r2, [r3, #0]
 8108bce:	f3bf 8f4f 	dsb	sy
 8108bd2:	f3bf 8f6f 	isb	sy
 8108bd6:	e01b      	b.n	8108c10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8108bd8:	69bb      	ldr	r3, [r7, #24]
 8108bda:	2b00      	cmp	r3, #0
 8108bdc:	d002      	beq.n	8108be4 <osMessageQueueGet+0x80>
 8108bde:	68bb      	ldr	r3, [r7, #8]
 8108be0:	2b00      	cmp	r3, #0
 8108be2:	d103      	bne.n	8108bec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8108be4:	f06f 0303 	mvn.w	r3, #3
 8108be8:	61fb      	str	r3, [r7, #28]
 8108bea:	e011      	b.n	8108c10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8108bec:	683a      	ldr	r2, [r7, #0]
 8108bee:	68b9      	ldr	r1, [r7, #8]
 8108bf0:	69b8      	ldr	r0, [r7, #24]
 8108bf2:	f001 f821 	bl	8109c38 <xQueueReceive>
 8108bf6:	4603      	mov	r3, r0
 8108bf8:	2b01      	cmp	r3, #1
 8108bfa:	d009      	beq.n	8108c10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8108bfc:	683b      	ldr	r3, [r7, #0]
 8108bfe:	2b00      	cmp	r3, #0
 8108c00:	d003      	beq.n	8108c0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8108c02:	f06f 0301 	mvn.w	r3, #1
 8108c06:	61fb      	str	r3, [r7, #28]
 8108c08:	e002      	b.n	8108c10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8108c0a:	f06f 0302 	mvn.w	r3, #2
 8108c0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8108c10:	69fb      	ldr	r3, [r7, #28]
}
 8108c12:	4618      	mov	r0, r3
 8108c14:	3720      	adds	r7, #32
 8108c16:	46bd      	mov	sp, r7
 8108c18:	bd80      	pop	{r7, pc}
 8108c1a:	bf00      	nop
 8108c1c:	e000ed04 	.word	0xe000ed04

08108c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8108c20:	b480      	push	{r7}
 8108c22:	b085      	sub	sp, #20
 8108c24:	af00      	add	r7, sp, #0
 8108c26:	60f8      	str	r0, [r7, #12]
 8108c28:	60b9      	str	r1, [r7, #8]
 8108c2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8108c2c:	68fb      	ldr	r3, [r7, #12]
 8108c2e:	4a07      	ldr	r2, [pc, #28]	@ (8108c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8108c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8108c32:	68bb      	ldr	r3, [r7, #8]
 8108c34:	4a06      	ldr	r2, [pc, #24]	@ (8108c50 <vApplicationGetIdleTaskMemory+0x30>)
 8108c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8108c38:	687b      	ldr	r3, [r7, #4]
 8108c3a:	2280      	movs	r2, #128	@ 0x80
 8108c3c:	601a      	str	r2, [r3, #0]
}
 8108c3e:	bf00      	nop
 8108c40:	3714      	adds	r7, #20
 8108c42:	46bd      	mov	sp, r7
 8108c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c48:	4770      	bx	lr
 8108c4a:	bf00      	nop
 8108c4c:	10000584 	.word	0x10000584
 8108c50:	1000062c 	.word	0x1000062c

08108c54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8108c54:	b480      	push	{r7}
 8108c56:	b085      	sub	sp, #20
 8108c58:	af00      	add	r7, sp, #0
 8108c5a:	60f8      	str	r0, [r7, #12]
 8108c5c:	60b9      	str	r1, [r7, #8]
 8108c5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8108c60:	68fb      	ldr	r3, [r7, #12]
 8108c62:	4a07      	ldr	r2, [pc, #28]	@ (8108c80 <vApplicationGetTimerTaskMemory+0x2c>)
 8108c64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8108c66:	68bb      	ldr	r3, [r7, #8]
 8108c68:	4a06      	ldr	r2, [pc, #24]	@ (8108c84 <vApplicationGetTimerTaskMemory+0x30>)
 8108c6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8108c6c:	687b      	ldr	r3, [r7, #4]
 8108c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8108c72:	601a      	str	r2, [r3, #0]
}
 8108c74:	bf00      	nop
 8108c76:	3714      	adds	r7, #20
 8108c78:	46bd      	mov	sp, r7
 8108c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c7e:	4770      	bx	lr
 8108c80:	1000082c 	.word	0x1000082c
 8108c84:	100008d4 	.word	0x100008d4

08108c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8108c88:	b580      	push	{r7, lr}
 8108c8a:	b08a      	sub	sp, #40	@ 0x28
 8108c8c:	af00      	add	r7, sp, #0
 8108c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8108c90:	2300      	movs	r3, #0
 8108c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8108c94:	f001 fd06 	bl	810a6a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8108c98:	4b5c      	ldr	r3, [pc, #368]	@ (8108e0c <pvPortMalloc+0x184>)
 8108c9a:	681b      	ldr	r3, [r3, #0]
 8108c9c:	2b00      	cmp	r3, #0
 8108c9e:	d101      	bne.n	8108ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8108ca0:	f000 f924 	bl	8108eec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8108ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8108e10 <pvPortMalloc+0x188>)
 8108ca6:	681a      	ldr	r2, [r3, #0]
 8108ca8:	687b      	ldr	r3, [r7, #4]
 8108caa:	4013      	ands	r3, r2
 8108cac:	2b00      	cmp	r3, #0
 8108cae:	f040 8095 	bne.w	8108ddc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8108cb2:	687b      	ldr	r3, [r7, #4]
 8108cb4:	2b00      	cmp	r3, #0
 8108cb6:	d01e      	beq.n	8108cf6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8108cb8:	2208      	movs	r2, #8
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	4413      	add	r3, r2
 8108cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	f003 0307 	and.w	r3, r3, #7
 8108cc6:	2b00      	cmp	r3, #0
 8108cc8:	d015      	beq.n	8108cf6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8108cca:	687b      	ldr	r3, [r7, #4]
 8108ccc:	f023 0307 	bic.w	r3, r3, #7
 8108cd0:	3308      	adds	r3, #8
 8108cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	f003 0307 	and.w	r3, r3, #7
 8108cda:	2b00      	cmp	r3, #0
 8108cdc:	d00b      	beq.n	8108cf6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8108cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108ce2:	f383 8811 	msr	BASEPRI, r3
 8108ce6:	f3bf 8f6f 	isb	sy
 8108cea:	f3bf 8f4f 	dsb	sy
 8108cee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8108cf0:	bf00      	nop
 8108cf2:	bf00      	nop
 8108cf4:	e7fd      	b.n	8108cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	2b00      	cmp	r3, #0
 8108cfa:	d06f      	beq.n	8108ddc <pvPortMalloc+0x154>
 8108cfc:	4b45      	ldr	r3, [pc, #276]	@ (8108e14 <pvPortMalloc+0x18c>)
 8108cfe:	681b      	ldr	r3, [r3, #0]
 8108d00:	687a      	ldr	r2, [r7, #4]
 8108d02:	429a      	cmp	r2, r3
 8108d04:	d86a      	bhi.n	8108ddc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8108d06:	4b44      	ldr	r3, [pc, #272]	@ (8108e18 <pvPortMalloc+0x190>)
 8108d08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8108d0a:	4b43      	ldr	r3, [pc, #268]	@ (8108e18 <pvPortMalloc+0x190>)
 8108d0c:	681b      	ldr	r3, [r3, #0]
 8108d0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108d10:	e004      	b.n	8108d1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8108d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8108d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d18:	681b      	ldr	r3, [r3, #0]
 8108d1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d1e:	685b      	ldr	r3, [r3, #4]
 8108d20:	687a      	ldr	r2, [r7, #4]
 8108d22:	429a      	cmp	r2, r3
 8108d24:	d903      	bls.n	8108d2e <pvPortMalloc+0xa6>
 8108d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d28:	681b      	ldr	r3, [r3, #0]
 8108d2a:	2b00      	cmp	r3, #0
 8108d2c:	d1f1      	bne.n	8108d12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8108d2e:	4b37      	ldr	r3, [pc, #220]	@ (8108e0c <pvPortMalloc+0x184>)
 8108d30:	681b      	ldr	r3, [r3, #0]
 8108d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108d34:	429a      	cmp	r2, r3
 8108d36:	d051      	beq.n	8108ddc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8108d38:	6a3b      	ldr	r3, [r7, #32]
 8108d3a:	681b      	ldr	r3, [r3, #0]
 8108d3c:	2208      	movs	r2, #8
 8108d3e:	4413      	add	r3, r2
 8108d40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8108d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d44:	681a      	ldr	r2, [r3, #0]
 8108d46:	6a3b      	ldr	r3, [r7, #32]
 8108d48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8108d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d4c:	685a      	ldr	r2, [r3, #4]
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	1ad2      	subs	r2, r2, r3
 8108d52:	2308      	movs	r3, #8
 8108d54:	005b      	lsls	r3, r3, #1
 8108d56:	429a      	cmp	r2, r3
 8108d58:	d920      	bls.n	8108d9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8108d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108d5c:	687b      	ldr	r3, [r7, #4]
 8108d5e:	4413      	add	r3, r2
 8108d60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108d62:	69bb      	ldr	r3, [r7, #24]
 8108d64:	f003 0307 	and.w	r3, r3, #7
 8108d68:	2b00      	cmp	r3, #0
 8108d6a:	d00b      	beq.n	8108d84 <pvPortMalloc+0xfc>
	__asm volatile
 8108d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108d70:	f383 8811 	msr	BASEPRI, r3
 8108d74:	f3bf 8f6f 	isb	sy
 8108d78:	f3bf 8f4f 	dsb	sy
 8108d7c:	613b      	str	r3, [r7, #16]
}
 8108d7e:	bf00      	nop
 8108d80:	bf00      	nop
 8108d82:	e7fd      	b.n	8108d80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8108d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d86:	685a      	ldr	r2, [r3, #4]
 8108d88:	687b      	ldr	r3, [r7, #4]
 8108d8a:	1ad2      	subs	r2, r2, r3
 8108d8c:	69bb      	ldr	r3, [r7, #24]
 8108d8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8108d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108d92:	687a      	ldr	r2, [r7, #4]
 8108d94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8108d96:	69b8      	ldr	r0, [r7, #24]
 8108d98:	f000 f90a 	bl	8108fb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8108d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8108e14 <pvPortMalloc+0x18c>)
 8108d9e:	681a      	ldr	r2, [r3, #0]
 8108da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108da2:	685b      	ldr	r3, [r3, #4]
 8108da4:	1ad3      	subs	r3, r2, r3
 8108da6:	4a1b      	ldr	r2, [pc, #108]	@ (8108e14 <pvPortMalloc+0x18c>)
 8108da8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8108daa:	4b1a      	ldr	r3, [pc, #104]	@ (8108e14 <pvPortMalloc+0x18c>)
 8108dac:	681a      	ldr	r2, [r3, #0]
 8108dae:	4b1b      	ldr	r3, [pc, #108]	@ (8108e1c <pvPortMalloc+0x194>)
 8108db0:	681b      	ldr	r3, [r3, #0]
 8108db2:	429a      	cmp	r2, r3
 8108db4:	d203      	bcs.n	8108dbe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8108db6:	4b17      	ldr	r3, [pc, #92]	@ (8108e14 <pvPortMalloc+0x18c>)
 8108db8:	681b      	ldr	r3, [r3, #0]
 8108dba:	4a18      	ldr	r2, [pc, #96]	@ (8108e1c <pvPortMalloc+0x194>)
 8108dbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8108dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108dc0:	685a      	ldr	r2, [r3, #4]
 8108dc2:	4b13      	ldr	r3, [pc, #76]	@ (8108e10 <pvPortMalloc+0x188>)
 8108dc4:	681b      	ldr	r3, [r3, #0]
 8108dc6:	431a      	orrs	r2, r3
 8108dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108dca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8108dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108dce:	2200      	movs	r2, #0
 8108dd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8108dd2:	4b13      	ldr	r3, [pc, #76]	@ (8108e20 <pvPortMalloc+0x198>)
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	3301      	adds	r3, #1
 8108dd8:	4a11      	ldr	r2, [pc, #68]	@ (8108e20 <pvPortMalloc+0x198>)
 8108dda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8108ddc:	f001 fc70 	bl	810a6c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8108de0:	69fb      	ldr	r3, [r7, #28]
 8108de2:	f003 0307 	and.w	r3, r3, #7
 8108de6:	2b00      	cmp	r3, #0
 8108de8:	d00b      	beq.n	8108e02 <pvPortMalloc+0x17a>
	__asm volatile
 8108dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108dee:	f383 8811 	msr	BASEPRI, r3
 8108df2:	f3bf 8f6f 	isb	sy
 8108df6:	f3bf 8f4f 	dsb	sy
 8108dfa:	60fb      	str	r3, [r7, #12]
}
 8108dfc:	bf00      	nop
 8108dfe:	bf00      	nop
 8108e00:	e7fd      	b.n	8108dfe <pvPortMalloc+0x176>
	return pvReturn;
 8108e02:	69fb      	ldr	r3, [r7, #28]
}
 8108e04:	4618      	mov	r0, r3
 8108e06:	3728      	adds	r7, #40	@ 0x28
 8108e08:	46bd      	mov	sp, r7
 8108e0a:	bd80      	pop	{r7, pc}
 8108e0c:	100048dc 	.word	0x100048dc
 8108e10:	100048f0 	.word	0x100048f0
 8108e14:	100048e0 	.word	0x100048e0
 8108e18:	100048d4 	.word	0x100048d4
 8108e1c:	100048e4 	.word	0x100048e4
 8108e20:	100048e8 	.word	0x100048e8

08108e24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8108e24:	b580      	push	{r7, lr}
 8108e26:	b086      	sub	sp, #24
 8108e28:	af00      	add	r7, sp, #0
 8108e2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8108e30:	687b      	ldr	r3, [r7, #4]
 8108e32:	2b00      	cmp	r3, #0
 8108e34:	d04f      	beq.n	8108ed6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8108e36:	2308      	movs	r3, #8
 8108e38:	425b      	negs	r3, r3
 8108e3a:	697a      	ldr	r2, [r7, #20]
 8108e3c:	4413      	add	r3, r2
 8108e3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8108e40:	697b      	ldr	r3, [r7, #20]
 8108e42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8108e44:	693b      	ldr	r3, [r7, #16]
 8108e46:	685a      	ldr	r2, [r3, #4]
 8108e48:	4b25      	ldr	r3, [pc, #148]	@ (8108ee0 <vPortFree+0xbc>)
 8108e4a:	681b      	ldr	r3, [r3, #0]
 8108e4c:	4013      	ands	r3, r2
 8108e4e:	2b00      	cmp	r3, #0
 8108e50:	d10b      	bne.n	8108e6a <vPortFree+0x46>
	__asm volatile
 8108e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108e56:	f383 8811 	msr	BASEPRI, r3
 8108e5a:	f3bf 8f6f 	isb	sy
 8108e5e:	f3bf 8f4f 	dsb	sy
 8108e62:	60fb      	str	r3, [r7, #12]
}
 8108e64:	bf00      	nop
 8108e66:	bf00      	nop
 8108e68:	e7fd      	b.n	8108e66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8108e6a:	693b      	ldr	r3, [r7, #16]
 8108e6c:	681b      	ldr	r3, [r3, #0]
 8108e6e:	2b00      	cmp	r3, #0
 8108e70:	d00b      	beq.n	8108e8a <vPortFree+0x66>
	__asm volatile
 8108e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108e76:	f383 8811 	msr	BASEPRI, r3
 8108e7a:	f3bf 8f6f 	isb	sy
 8108e7e:	f3bf 8f4f 	dsb	sy
 8108e82:	60bb      	str	r3, [r7, #8]
}
 8108e84:	bf00      	nop
 8108e86:	bf00      	nop
 8108e88:	e7fd      	b.n	8108e86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8108e8a:	693b      	ldr	r3, [r7, #16]
 8108e8c:	685a      	ldr	r2, [r3, #4]
 8108e8e:	4b14      	ldr	r3, [pc, #80]	@ (8108ee0 <vPortFree+0xbc>)
 8108e90:	681b      	ldr	r3, [r3, #0]
 8108e92:	4013      	ands	r3, r2
 8108e94:	2b00      	cmp	r3, #0
 8108e96:	d01e      	beq.n	8108ed6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8108e98:	693b      	ldr	r3, [r7, #16]
 8108e9a:	681b      	ldr	r3, [r3, #0]
 8108e9c:	2b00      	cmp	r3, #0
 8108e9e:	d11a      	bne.n	8108ed6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8108ea0:	693b      	ldr	r3, [r7, #16]
 8108ea2:	685a      	ldr	r2, [r3, #4]
 8108ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8108ee0 <vPortFree+0xbc>)
 8108ea6:	681b      	ldr	r3, [r3, #0]
 8108ea8:	43db      	mvns	r3, r3
 8108eaa:	401a      	ands	r2, r3
 8108eac:	693b      	ldr	r3, [r7, #16]
 8108eae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8108eb0:	f001 fbf8 	bl	810a6a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8108eb4:	693b      	ldr	r3, [r7, #16]
 8108eb6:	685a      	ldr	r2, [r3, #4]
 8108eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8108ee4 <vPortFree+0xc0>)
 8108eba:	681b      	ldr	r3, [r3, #0]
 8108ebc:	4413      	add	r3, r2
 8108ebe:	4a09      	ldr	r2, [pc, #36]	@ (8108ee4 <vPortFree+0xc0>)
 8108ec0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8108ec2:	6938      	ldr	r0, [r7, #16]
 8108ec4:	f000 f874 	bl	8108fb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8108ec8:	4b07      	ldr	r3, [pc, #28]	@ (8108ee8 <vPortFree+0xc4>)
 8108eca:	681b      	ldr	r3, [r3, #0]
 8108ecc:	3301      	adds	r3, #1
 8108ece:	4a06      	ldr	r2, [pc, #24]	@ (8108ee8 <vPortFree+0xc4>)
 8108ed0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8108ed2:	f001 fbf5 	bl	810a6c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8108ed6:	bf00      	nop
 8108ed8:	3718      	adds	r7, #24
 8108eda:	46bd      	mov	sp, r7
 8108edc:	bd80      	pop	{r7, pc}
 8108ede:	bf00      	nop
 8108ee0:	100048f0 	.word	0x100048f0
 8108ee4:	100048e0 	.word	0x100048e0
 8108ee8:	100048ec 	.word	0x100048ec

08108eec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8108eec:	b480      	push	{r7}
 8108eee:	b085      	sub	sp, #20
 8108ef0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8108ef2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8108ef6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8108ef8:	4b27      	ldr	r3, [pc, #156]	@ (8108f98 <prvHeapInit+0xac>)
 8108efa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8108efc:	68fb      	ldr	r3, [r7, #12]
 8108efe:	f003 0307 	and.w	r3, r3, #7
 8108f02:	2b00      	cmp	r3, #0
 8108f04:	d00c      	beq.n	8108f20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8108f06:	68fb      	ldr	r3, [r7, #12]
 8108f08:	3307      	adds	r3, #7
 8108f0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108f0c:	68fb      	ldr	r3, [r7, #12]
 8108f0e:	f023 0307 	bic.w	r3, r3, #7
 8108f12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8108f14:	68ba      	ldr	r2, [r7, #8]
 8108f16:	68fb      	ldr	r3, [r7, #12]
 8108f18:	1ad3      	subs	r3, r2, r3
 8108f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8108f98 <prvHeapInit+0xac>)
 8108f1c:	4413      	add	r3, r2
 8108f1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8108f20:	68fb      	ldr	r3, [r7, #12]
 8108f22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8108f24:	4a1d      	ldr	r2, [pc, #116]	@ (8108f9c <prvHeapInit+0xb0>)
 8108f26:	687b      	ldr	r3, [r7, #4]
 8108f28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8108f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8108f9c <prvHeapInit+0xb0>)
 8108f2c:	2200      	movs	r2, #0
 8108f2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	68ba      	ldr	r2, [r7, #8]
 8108f34:	4413      	add	r3, r2
 8108f36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8108f38:	2208      	movs	r2, #8
 8108f3a:	68fb      	ldr	r3, [r7, #12]
 8108f3c:	1a9b      	subs	r3, r3, r2
 8108f3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108f40:	68fb      	ldr	r3, [r7, #12]
 8108f42:	f023 0307 	bic.w	r3, r3, #7
 8108f46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8108f48:	68fb      	ldr	r3, [r7, #12]
 8108f4a:	4a15      	ldr	r2, [pc, #84]	@ (8108fa0 <prvHeapInit+0xb4>)
 8108f4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8108f4e:	4b14      	ldr	r3, [pc, #80]	@ (8108fa0 <prvHeapInit+0xb4>)
 8108f50:	681b      	ldr	r3, [r3, #0]
 8108f52:	2200      	movs	r2, #0
 8108f54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8108f56:	4b12      	ldr	r3, [pc, #72]	@ (8108fa0 <prvHeapInit+0xb4>)
 8108f58:	681b      	ldr	r3, [r3, #0]
 8108f5a:	2200      	movs	r2, #0
 8108f5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8108f5e:	687b      	ldr	r3, [r7, #4]
 8108f60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8108f62:	683b      	ldr	r3, [r7, #0]
 8108f64:	68fa      	ldr	r2, [r7, #12]
 8108f66:	1ad2      	subs	r2, r2, r3
 8108f68:	683b      	ldr	r3, [r7, #0]
 8108f6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8108f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8108fa0 <prvHeapInit+0xb4>)
 8108f6e:	681a      	ldr	r2, [r3, #0]
 8108f70:	683b      	ldr	r3, [r7, #0]
 8108f72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108f74:	683b      	ldr	r3, [r7, #0]
 8108f76:	685b      	ldr	r3, [r3, #4]
 8108f78:	4a0a      	ldr	r2, [pc, #40]	@ (8108fa4 <prvHeapInit+0xb8>)
 8108f7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108f7c:	683b      	ldr	r3, [r7, #0]
 8108f7e:	685b      	ldr	r3, [r3, #4]
 8108f80:	4a09      	ldr	r2, [pc, #36]	@ (8108fa8 <prvHeapInit+0xbc>)
 8108f82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8108f84:	4b09      	ldr	r3, [pc, #36]	@ (8108fac <prvHeapInit+0xc0>)
 8108f86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8108f8a:	601a      	str	r2, [r3, #0]
}
 8108f8c:	bf00      	nop
 8108f8e:	3714      	adds	r7, #20
 8108f90:	46bd      	mov	sp, r7
 8108f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f96:	4770      	bx	lr
 8108f98:	10000cd4 	.word	0x10000cd4
 8108f9c:	100048d4 	.word	0x100048d4
 8108fa0:	100048dc 	.word	0x100048dc
 8108fa4:	100048e4 	.word	0x100048e4
 8108fa8:	100048e0 	.word	0x100048e0
 8108fac:	100048f0 	.word	0x100048f0

08108fb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8108fb0:	b480      	push	{r7}
 8108fb2:	b085      	sub	sp, #20
 8108fb4:	af00      	add	r7, sp, #0
 8108fb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8108fb8:	4b28      	ldr	r3, [pc, #160]	@ (810905c <prvInsertBlockIntoFreeList+0xac>)
 8108fba:	60fb      	str	r3, [r7, #12]
 8108fbc:	e002      	b.n	8108fc4 <prvInsertBlockIntoFreeList+0x14>
 8108fbe:	68fb      	ldr	r3, [r7, #12]
 8108fc0:	681b      	ldr	r3, [r3, #0]
 8108fc2:	60fb      	str	r3, [r7, #12]
 8108fc4:	68fb      	ldr	r3, [r7, #12]
 8108fc6:	681b      	ldr	r3, [r3, #0]
 8108fc8:	687a      	ldr	r2, [r7, #4]
 8108fca:	429a      	cmp	r2, r3
 8108fcc:	d8f7      	bhi.n	8108fbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8108fce:	68fb      	ldr	r3, [r7, #12]
 8108fd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8108fd2:	68fb      	ldr	r3, [r7, #12]
 8108fd4:	685b      	ldr	r3, [r3, #4]
 8108fd6:	68ba      	ldr	r2, [r7, #8]
 8108fd8:	4413      	add	r3, r2
 8108fda:	687a      	ldr	r2, [r7, #4]
 8108fdc:	429a      	cmp	r2, r3
 8108fde:	d108      	bne.n	8108ff2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8108fe0:	68fb      	ldr	r3, [r7, #12]
 8108fe2:	685a      	ldr	r2, [r3, #4]
 8108fe4:	687b      	ldr	r3, [r7, #4]
 8108fe6:	685b      	ldr	r3, [r3, #4]
 8108fe8:	441a      	add	r2, r3
 8108fea:	68fb      	ldr	r3, [r7, #12]
 8108fec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8108fee:	68fb      	ldr	r3, [r7, #12]
 8108ff0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8108ff6:	687b      	ldr	r3, [r7, #4]
 8108ff8:	685b      	ldr	r3, [r3, #4]
 8108ffa:	68ba      	ldr	r2, [r7, #8]
 8108ffc:	441a      	add	r2, r3
 8108ffe:	68fb      	ldr	r3, [r7, #12]
 8109000:	681b      	ldr	r3, [r3, #0]
 8109002:	429a      	cmp	r2, r3
 8109004:	d118      	bne.n	8109038 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8109006:	68fb      	ldr	r3, [r7, #12]
 8109008:	681a      	ldr	r2, [r3, #0]
 810900a:	4b15      	ldr	r3, [pc, #84]	@ (8109060 <prvInsertBlockIntoFreeList+0xb0>)
 810900c:	681b      	ldr	r3, [r3, #0]
 810900e:	429a      	cmp	r2, r3
 8109010:	d00d      	beq.n	810902e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	685a      	ldr	r2, [r3, #4]
 8109016:	68fb      	ldr	r3, [r7, #12]
 8109018:	681b      	ldr	r3, [r3, #0]
 810901a:	685b      	ldr	r3, [r3, #4]
 810901c:	441a      	add	r2, r3
 810901e:	687b      	ldr	r3, [r7, #4]
 8109020:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8109022:	68fb      	ldr	r3, [r7, #12]
 8109024:	681b      	ldr	r3, [r3, #0]
 8109026:	681a      	ldr	r2, [r3, #0]
 8109028:	687b      	ldr	r3, [r7, #4]
 810902a:	601a      	str	r2, [r3, #0]
 810902c:	e008      	b.n	8109040 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810902e:	4b0c      	ldr	r3, [pc, #48]	@ (8109060 <prvInsertBlockIntoFreeList+0xb0>)
 8109030:	681a      	ldr	r2, [r3, #0]
 8109032:	687b      	ldr	r3, [r7, #4]
 8109034:	601a      	str	r2, [r3, #0]
 8109036:	e003      	b.n	8109040 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8109038:	68fb      	ldr	r3, [r7, #12]
 810903a:	681a      	ldr	r2, [r3, #0]
 810903c:	687b      	ldr	r3, [r7, #4]
 810903e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8109040:	68fa      	ldr	r2, [r7, #12]
 8109042:	687b      	ldr	r3, [r7, #4]
 8109044:	429a      	cmp	r2, r3
 8109046:	d002      	beq.n	810904e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8109048:	68fb      	ldr	r3, [r7, #12]
 810904a:	687a      	ldr	r2, [r7, #4]
 810904c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810904e:	bf00      	nop
 8109050:	3714      	adds	r7, #20
 8109052:	46bd      	mov	sp, r7
 8109054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109058:	4770      	bx	lr
 810905a:	bf00      	nop
 810905c:	100048d4 	.word	0x100048d4
 8109060:	100048dc 	.word	0x100048dc

08109064 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8109064:	b480      	push	{r7}
 8109066:	b083      	sub	sp, #12
 8109068:	af00      	add	r7, sp, #0
 810906a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810906c:	687b      	ldr	r3, [r7, #4]
 810906e:	f103 0208 	add.w	r2, r3, #8
 8109072:	687b      	ldr	r3, [r7, #4]
 8109074:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	f04f 32ff 	mov.w	r2, #4294967295
 810907c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	f103 0208 	add.w	r2, r3, #8
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109088:	687b      	ldr	r3, [r7, #4]
 810908a:	f103 0208 	add.w	r2, r3, #8
 810908e:	687b      	ldr	r3, [r7, #4]
 8109090:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8109092:	687b      	ldr	r3, [r7, #4]
 8109094:	2200      	movs	r2, #0
 8109096:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8109098:	bf00      	nop
 810909a:	370c      	adds	r7, #12
 810909c:	46bd      	mov	sp, r7
 810909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090a2:	4770      	bx	lr

081090a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 81090a4:	b480      	push	{r7}
 81090a6:	b083      	sub	sp, #12
 81090a8:	af00      	add	r7, sp, #0
 81090aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 81090ac:	687b      	ldr	r3, [r7, #4]
 81090ae:	2200      	movs	r2, #0
 81090b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81090b2:	bf00      	nop
 81090b4:	370c      	adds	r7, #12
 81090b6:	46bd      	mov	sp, r7
 81090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090bc:	4770      	bx	lr

081090be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81090be:	b480      	push	{r7}
 81090c0:	b085      	sub	sp, #20
 81090c2:	af00      	add	r7, sp, #0
 81090c4:	6078      	str	r0, [r7, #4]
 81090c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	685b      	ldr	r3, [r3, #4]
 81090cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81090ce:	683b      	ldr	r3, [r7, #0]
 81090d0:	68fa      	ldr	r2, [r7, #12]
 81090d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81090d4:	68fb      	ldr	r3, [r7, #12]
 81090d6:	689a      	ldr	r2, [r3, #8]
 81090d8:	683b      	ldr	r3, [r7, #0]
 81090da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81090dc:	68fb      	ldr	r3, [r7, #12]
 81090de:	689b      	ldr	r3, [r3, #8]
 81090e0:	683a      	ldr	r2, [r7, #0]
 81090e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81090e4:	68fb      	ldr	r3, [r7, #12]
 81090e6:	683a      	ldr	r2, [r7, #0]
 81090e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81090ea:	683b      	ldr	r3, [r7, #0]
 81090ec:	687a      	ldr	r2, [r7, #4]
 81090ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81090f0:	687b      	ldr	r3, [r7, #4]
 81090f2:	681b      	ldr	r3, [r3, #0]
 81090f4:	1c5a      	adds	r2, r3, #1
 81090f6:	687b      	ldr	r3, [r7, #4]
 81090f8:	601a      	str	r2, [r3, #0]
}
 81090fa:	bf00      	nop
 81090fc:	3714      	adds	r7, #20
 81090fe:	46bd      	mov	sp, r7
 8109100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109104:	4770      	bx	lr

08109106 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109106:	b480      	push	{r7}
 8109108:	b085      	sub	sp, #20
 810910a:	af00      	add	r7, sp, #0
 810910c:	6078      	str	r0, [r7, #4]
 810910e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8109110:	683b      	ldr	r3, [r7, #0]
 8109112:	681b      	ldr	r3, [r3, #0]
 8109114:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8109116:	68bb      	ldr	r3, [r7, #8]
 8109118:	f1b3 3fff 	cmp.w	r3, #4294967295
 810911c:	d103      	bne.n	8109126 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810911e:	687b      	ldr	r3, [r7, #4]
 8109120:	691b      	ldr	r3, [r3, #16]
 8109122:	60fb      	str	r3, [r7, #12]
 8109124:	e00c      	b.n	8109140 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8109126:	687b      	ldr	r3, [r7, #4]
 8109128:	3308      	adds	r3, #8
 810912a:	60fb      	str	r3, [r7, #12]
 810912c:	e002      	b.n	8109134 <vListInsert+0x2e>
 810912e:	68fb      	ldr	r3, [r7, #12]
 8109130:	685b      	ldr	r3, [r3, #4]
 8109132:	60fb      	str	r3, [r7, #12]
 8109134:	68fb      	ldr	r3, [r7, #12]
 8109136:	685b      	ldr	r3, [r3, #4]
 8109138:	681b      	ldr	r3, [r3, #0]
 810913a:	68ba      	ldr	r2, [r7, #8]
 810913c:	429a      	cmp	r2, r3
 810913e:	d2f6      	bcs.n	810912e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8109140:	68fb      	ldr	r3, [r7, #12]
 8109142:	685a      	ldr	r2, [r3, #4]
 8109144:	683b      	ldr	r3, [r7, #0]
 8109146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8109148:	683b      	ldr	r3, [r7, #0]
 810914a:	685b      	ldr	r3, [r3, #4]
 810914c:	683a      	ldr	r2, [r7, #0]
 810914e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8109150:	683b      	ldr	r3, [r7, #0]
 8109152:	68fa      	ldr	r2, [r7, #12]
 8109154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8109156:	68fb      	ldr	r3, [r7, #12]
 8109158:	683a      	ldr	r2, [r7, #0]
 810915a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810915c:	683b      	ldr	r3, [r7, #0]
 810915e:	687a      	ldr	r2, [r7, #4]
 8109160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109162:	687b      	ldr	r3, [r7, #4]
 8109164:	681b      	ldr	r3, [r3, #0]
 8109166:	1c5a      	adds	r2, r3, #1
 8109168:	687b      	ldr	r3, [r7, #4]
 810916a:	601a      	str	r2, [r3, #0]
}
 810916c:	bf00      	nop
 810916e:	3714      	adds	r7, #20
 8109170:	46bd      	mov	sp, r7
 8109172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109176:	4770      	bx	lr

08109178 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8109178:	b480      	push	{r7}
 810917a:	b085      	sub	sp, #20
 810917c:	af00      	add	r7, sp, #0
 810917e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	691b      	ldr	r3, [r3, #16]
 8109184:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	685b      	ldr	r3, [r3, #4]
 810918a:	687a      	ldr	r2, [r7, #4]
 810918c:	6892      	ldr	r2, [r2, #8]
 810918e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109190:	687b      	ldr	r3, [r7, #4]
 8109192:	689b      	ldr	r3, [r3, #8]
 8109194:	687a      	ldr	r2, [r7, #4]
 8109196:	6852      	ldr	r2, [r2, #4]
 8109198:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810919a:	68fb      	ldr	r3, [r7, #12]
 810919c:	685b      	ldr	r3, [r3, #4]
 810919e:	687a      	ldr	r2, [r7, #4]
 81091a0:	429a      	cmp	r2, r3
 81091a2:	d103      	bne.n	81091ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	689a      	ldr	r2, [r3, #8]
 81091a8:	68fb      	ldr	r3, [r7, #12]
 81091aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	2200      	movs	r2, #0
 81091b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81091b2:	68fb      	ldr	r3, [r7, #12]
 81091b4:	681b      	ldr	r3, [r3, #0]
 81091b6:	1e5a      	subs	r2, r3, #1
 81091b8:	68fb      	ldr	r3, [r7, #12]
 81091ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81091bc:	68fb      	ldr	r3, [r7, #12]
 81091be:	681b      	ldr	r3, [r3, #0]
}
 81091c0:	4618      	mov	r0, r3
 81091c2:	3714      	adds	r7, #20
 81091c4:	46bd      	mov	sp, r7
 81091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091ca:	4770      	bx	lr

081091cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81091cc:	b480      	push	{r7}
 81091ce:	b085      	sub	sp, #20
 81091d0:	af00      	add	r7, sp, #0
 81091d2:	60f8      	str	r0, [r7, #12]
 81091d4:	60b9      	str	r1, [r7, #8]
 81091d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81091d8:	68fb      	ldr	r3, [r7, #12]
 81091da:	3b04      	subs	r3, #4
 81091dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81091de:	68fb      	ldr	r3, [r7, #12]
 81091e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81091e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81091e6:	68fb      	ldr	r3, [r7, #12]
 81091e8:	3b04      	subs	r3, #4
 81091ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81091ec:	68bb      	ldr	r3, [r7, #8]
 81091ee:	f023 0201 	bic.w	r2, r3, #1
 81091f2:	68fb      	ldr	r3, [r7, #12]
 81091f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81091f6:	68fb      	ldr	r3, [r7, #12]
 81091f8:	3b04      	subs	r3, #4
 81091fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81091fc:	4a0c      	ldr	r2, [pc, #48]	@ (8109230 <pxPortInitialiseStack+0x64>)
 81091fe:	68fb      	ldr	r3, [r7, #12]
 8109200:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8109202:	68fb      	ldr	r3, [r7, #12]
 8109204:	3b14      	subs	r3, #20
 8109206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8109208:	687a      	ldr	r2, [r7, #4]
 810920a:	68fb      	ldr	r3, [r7, #12]
 810920c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810920e:	68fb      	ldr	r3, [r7, #12]
 8109210:	3b04      	subs	r3, #4
 8109212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8109214:	68fb      	ldr	r3, [r7, #12]
 8109216:	f06f 0202 	mvn.w	r2, #2
 810921a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810921c:	68fb      	ldr	r3, [r7, #12]
 810921e:	3b20      	subs	r3, #32
 8109220:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8109222:	68fb      	ldr	r3, [r7, #12]
}
 8109224:	4618      	mov	r0, r3
 8109226:	3714      	adds	r7, #20
 8109228:	46bd      	mov	sp, r7
 810922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810922e:	4770      	bx	lr
 8109230:	08109235 	.word	0x08109235

08109234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8109234:	b480      	push	{r7}
 8109236:	b085      	sub	sp, #20
 8109238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810923a:	2300      	movs	r3, #0
 810923c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810923e:	4b13      	ldr	r3, [pc, #76]	@ (810928c <prvTaskExitError+0x58>)
 8109240:	681b      	ldr	r3, [r3, #0]
 8109242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109246:	d00b      	beq.n	8109260 <prvTaskExitError+0x2c>
	__asm volatile
 8109248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810924c:	f383 8811 	msr	BASEPRI, r3
 8109250:	f3bf 8f6f 	isb	sy
 8109254:	f3bf 8f4f 	dsb	sy
 8109258:	60fb      	str	r3, [r7, #12]
}
 810925a:	bf00      	nop
 810925c:	bf00      	nop
 810925e:	e7fd      	b.n	810925c <prvTaskExitError+0x28>
	__asm volatile
 8109260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109264:	f383 8811 	msr	BASEPRI, r3
 8109268:	f3bf 8f6f 	isb	sy
 810926c:	f3bf 8f4f 	dsb	sy
 8109270:	60bb      	str	r3, [r7, #8]
}
 8109272:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8109274:	bf00      	nop
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	2b00      	cmp	r3, #0
 810927a:	d0fc      	beq.n	8109276 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810927c:	bf00      	nop
 810927e:	bf00      	nop
 8109280:	3714      	adds	r7, #20
 8109282:	46bd      	mov	sp, r7
 8109284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109288:	4770      	bx	lr
 810928a:	bf00      	nop
 810928c:	10000010 	.word	0x10000010

08109290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8109290:	4b07      	ldr	r3, [pc, #28]	@ (81092b0 <pxCurrentTCBConst2>)
 8109292:	6819      	ldr	r1, [r3, #0]
 8109294:	6808      	ldr	r0, [r1, #0]
 8109296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810929a:	f380 8809 	msr	PSP, r0
 810929e:	f3bf 8f6f 	isb	sy
 81092a2:	f04f 0000 	mov.w	r0, #0
 81092a6:	f380 8811 	msr	BASEPRI, r0
 81092aa:	4770      	bx	lr
 81092ac:	f3af 8000 	nop.w

081092b0 <pxCurrentTCBConst2>:
 81092b0:	1000493c 	.word	0x1000493c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81092b4:	bf00      	nop
 81092b6:	bf00      	nop

081092b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81092b8:	4808      	ldr	r0, [pc, #32]	@ (81092dc <prvPortStartFirstTask+0x24>)
 81092ba:	6800      	ldr	r0, [r0, #0]
 81092bc:	6800      	ldr	r0, [r0, #0]
 81092be:	f380 8808 	msr	MSP, r0
 81092c2:	f04f 0000 	mov.w	r0, #0
 81092c6:	f380 8814 	msr	CONTROL, r0
 81092ca:	b662      	cpsie	i
 81092cc:	b661      	cpsie	f
 81092ce:	f3bf 8f4f 	dsb	sy
 81092d2:	f3bf 8f6f 	isb	sy
 81092d6:	df00      	svc	0
 81092d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81092da:	bf00      	nop
 81092dc:	e000ed08 	.word	0xe000ed08

081092e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81092e0:	b580      	push	{r7, lr}
 81092e2:	b086      	sub	sp, #24
 81092e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81092e6:	4b47      	ldr	r3, [pc, #284]	@ (8109404 <xPortStartScheduler+0x124>)
 81092e8:	681b      	ldr	r3, [r3, #0]
 81092ea:	4a47      	ldr	r2, [pc, #284]	@ (8109408 <xPortStartScheduler+0x128>)
 81092ec:	4293      	cmp	r3, r2
 81092ee:	d10b      	bne.n	8109308 <xPortStartScheduler+0x28>
	__asm volatile
 81092f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81092f4:	f383 8811 	msr	BASEPRI, r3
 81092f8:	f3bf 8f6f 	isb	sy
 81092fc:	f3bf 8f4f 	dsb	sy
 8109300:	613b      	str	r3, [r7, #16]
}
 8109302:	bf00      	nop
 8109304:	bf00      	nop
 8109306:	e7fd      	b.n	8109304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8109308:	4b3e      	ldr	r3, [pc, #248]	@ (8109404 <xPortStartScheduler+0x124>)
 810930a:	681b      	ldr	r3, [r3, #0]
 810930c:	4a3f      	ldr	r2, [pc, #252]	@ (810940c <xPortStartScheduler+0x12c>)
 810930e:	4293      	cmp	r3, r2
 8109310:	d10b      	bne.n	810932a <xPortStartScheduler+0x4a>
	__asm volatile
 8109312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109316:	f383 8811 	msr	BASEPRI, r3
 810931a:	f3bf 8f6f 	isb	sy
 810931e:	f3bf 8f4f 	dsb	sy
 8109322:	60fb      	str	r3, [r7, #12]
}
 8109324:	bf00      	nop
 8109326:	bf00      	nop
 8109328:	e7fd      	b.n	8109326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810932a:	4b39      	ldr	r3, [pc, #228]	@ (8109410 <xPortStartScheduler+0x130>)
 810932c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810932e:	697b      	ldr	r3, [r7, #20]
 8109330:	781b      	ldrb	r3, [r3, #0]
 8109332:	b2db      	uxtb	r3, r3
 8109334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8109336:	697b      	ldr	r3, [r7, #20]
 8109338:	22ff      	movs	r2, #255	@ 0xff
 810933a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810933c:	697b      	ldr	r3, [r7, #20]
 810933e:	781b      	ldrb	r3, [r3, #0]
 8109340:	b2db      	uxtb	r3, r3
 8109342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8109344:	78fb      	ldrb	r3, [r7, #3]
 8109346:	b2db      	uxtb	r3, r3
 8109348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810934c:	b2da      	uxtb	r2, r3
 810934e:	4b31      	ldr	r3, [pc, #196]	@ (8109414 <xPortStartScheduler+0x134>)
 8109350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8109352:	4b31      	ldr	r3, [pc, #196]	@ (8109418 <xPortStartScheduler+0x138>)
 8109354:	2207      	movs	r2, #7
 8109356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109358:	e009      	b.n	810936e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810935a:	4b2f      	ldr	r3, [pc, #188]	@ (8109418 <xPortStartScheduler+0x138>)
 810935c:	681b      	ldr	r3, [r3, #0]
 810935e:	3b01      	subs	r3, #1
 8109360:	4a2d      	ldr	r2, [pc, #180]	@ (8109418 <xPortStartScheduler+0x138>)
 8109362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8109364:	78fb      	ldrb	r3, [r7, #3]
 8109366:	b2db      	uxtb	r3, r3
 8109368:	005b      	lsls	r3, r3, #1
 810936a:	b2db      	uxtb	r3, r3
 810936c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810936e:	78fb      	ldrb	r3, [r7, #3]
 8109370:	b2db      	uxtb	r3, r3
 8109372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109376:	2b80      	cmp	r3, #128	@ 0x80
 8109378:	d0ef      	beq.n	810935a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810937a:	4b27      	ldr	r3, [pc, #156]	@ (8109418 <xPortStartScheduler+0x138>)
 810937c:	681b      	ldr	r3, [r3, #0]
 810937e:	f1c3 0307 	rsb	r3, r3, #7
 8109382:	2b04      	cmp	r3, #4
 8109384:	d00b      	beq.n	810939e <xPortStartScheduler+0xbe>
	__asm volatile
 8109386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810938a:	f383 8811 	msr	BASEPRI, r3
 810938e:	f3bf 8f6f 	isb	sy
 8109392:	f3bf 8f4f 	dsb	sy
 8109396:	60bb      	str	r3, [r7, #8]
}
 8109398:	bf00      	nop
 810939a:	bf00      	nop
 810939c:	e7fd      	b.n	810939a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810939e:	4b1e      	ldr	r3, [pc, #120]	@ (8109418 <xPortStartScheduler+0x138>)
 81093a0:	681b      	ldr	r3, [r3, #0]
 81093a2:	021b      	lsls	r3, r3, #8
 81093a4:	4a1c      	ldr	r2, [pc, #112]	@ (8109418 <xPortStartScheduler+0x138>)
 81093a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 81093a8:	4b1b      	ldr	r3, [pc, #108]	@ (8109418 <xPortStartScheduler+0x138>)
 81093aa:	681b      	ldr	r3, [r3, #0]
 81093ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81093b0:	4a19      	ldr	r2, [pc, #100]	@ (8109418 <xPortStartScheduler+0x138>)
 81093b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	b2da      	uxtb	r2, r3
 81093b8:	697b      	ldr	r3, [r7, #20]
 81093ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81093bc:	4b17      	ldr	r3, [pc, #92]	@ (810941c <xPortStartScheduler+0x13c>)
 81093be:	681b      	ldr	r3, [r3, #0]
 81093c0:	4a16      	ldr	r2, [pc, #88]	@ (810941c <xPortStartScheduler+0x13c>)
 81093c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81093c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81093c8:	4b14      	ldr	r3, [pc, #80]	@ (810941c <xPortStartScheduler+0x13c>)
 81093ca:	681b      	ldr	r3, [r3, #0]
 81093cc:	4a13      	ldr	r2, [pc, #76]	@ (810941c <xPortStartScheduler+0x13c>)
 81093ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81093d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81093d4:	f000 f8da 	bl	810958c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81093d8:	4b11      	ldr	r3, [pc, #68]	@ (8109420 <xPortStartScheduler+0x140>)
 81093da:	2200      	movs	r2, #0
 81093dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81093de:	f000 f8f9 	bl	81095d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81093e2:	4b10      	ldr	r3, [pc, #64]	@ (8109424 <xPortStartScheduler+0x144>)
 81093e4:	681b      	ldr	r3, [r3, #0]
 81093e6:	4a0f      	ldr	r2, [pc, #60]	@ (8109424 <xPortStartScheduler+0x144>)
 81093e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81093ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81093ee:	f7ff ff63 	bl	81092b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81093f2:	f001 fadf 	bl	810a9b4 <vTaskSwitchContext>
	prvTaskExitError();
 81093f6:	f7ff ff1d 	bl	8109234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81093fa:	2300      	movs	r3, #0
}
 81093fc:	4618      	mov	r0, r3
 81093fe:	3718      	adds	r7, #24
 8109400:	46bd      	mov	sp, r7
 8109402:	bd80      	pop	{r7, pc}
 8109404:	e000ed00 	.word	0xe000ed00
 8109408:	410fc271 	.word	0x410fc271
 810940c:	410fc270 	.word	0x410fc270
 8109410:	e000e400 	.word	0xe000e400
 8109414:	100048f4 	.word	0x100048f4
 8109418:	100048f8 	.word	0x100048f8
 810941c:	e000ed20 	.word	0xe000ed20
 8109420:	10000010 	.word	0x10000010
 8109424:	e000ef34 	.word	0xe000ef34

08109428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8109428:	b480      	push	{r7}
 810942a:	b083      	sub	sp, #12
 810942c:	af00      	add	r7, sp, #0
	__asm volatile
 810942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109432:	f383 8811 	msr	BASEPRI, r3
 8109436:	f3bf 8f6f 	isb	sy
 810943a:	f3bf 8f4f 	dsb	sy
 810943e:	607b      	str	r3, [r7, #4]
}
 8109440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8109442:	4b10      	ldr	r3, [pc, #64]	@ (8109484 <vPortEnterCritical+0x5c>)
 8109444:	681b      	ldr	r3, [r3, #0]
 8109446:	3301      	adds	r3, #1
 8109448:	4a0e      	ldr	r2, [pc, #56]	@ (8109484 <vPortEnterCritical+0x5c>)
 810944a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810944c:	4b0d      	ldr	r3, [pc, #52]	@ (8109484 <vPortEnterCritical+0x5c>)
 810944e:	681b      	ldr	r3, [r3, #0]
 8109450:	2b01      	cmp	r3, #1
 8109452:	d110      	bne.n	8109476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109454:	4b0c      	ldr	r3, [pc, #48]	@ (8109488 <vPortEnterCritical+0x60>)
 8109456:	681b      	ldr	r3, [r3, #0]
 8109458:	b2db      	uxtb	r3, r3
 810945a:	2b00      	cmp	r3, #0
 810945c:	d00b      	beq.n	8109476 <vPortEnterCritical+0x4e>
	__asm volatile
 810945e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109462:	f383 8811 	msr	BASEPRI, r3
 8109466:	f3bf 8f6f 	isb	sy
 810946a:	f3bf 8f4f 	dsb	sy
 810946e:	603b      	str	r3, [r7, #0]
}
 8109470:	bf00      	nop
 8109472:	bf00      	nop
 8109474:	e7fd      	b.n	8109472 <vPortEnterCritical+0x4a>
	}
}
 8109476:	bf00      	nop
 8109478:	370c      	adds	r7, #12
 810947a:	46bd      	mov	sp, r7
 810947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109480:	4770      	bx	lr
 8109482:	bf00      	nop
 8109484:	10000010 	.word	0x10000010
 8109488:	e000ed04 	.word	0xe000ed04

0810948c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810948c:	b480      	push	{r7}
 810948e:	b083      	sub	sp, #12
 8109490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8109492:	4b12      	ldr	r3, [pc, #72]	@ (81094dc <vPortExitCritical+0x50>)
 8109494:	681b      	ldr	r3, [r3, #0]
 8109496:	2b00      	cmp	r3, #0
 8109498:	d10b      	bne.n	81094b2 <vPortExitCritical+0x26>
	__asm volatile
 810949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810949e:	f383 8811 	msr	BASEPRI, r3
 81094a2:	f3bf 8f6f 	isb	sy
 81094a6:	f3bf 8f4f 	dsb	sy
 81094aa:	607b      	str	r3, [r7, #4]
}
 81094ac:	bf00      	nop
 81094ae:	bf00      	nop
 81094b0:	e7fd      	b.n	81094ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81094b2:	4b0a      	ldr	r3, [pc, #40]	@ (81094dc <vPortExitCritical+0x50>)
 81094b4:	681b      	ldr	r3, [r3, #0]
 81094b6:	3b01      	subs	r3, #1
 81094b8:	4a08      	ldr	r2, [pc, #32]	@ (81094dc <vPortExitCritical+0x50>)
 81094ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81094bc:	4b07      	ldr	r3, [pc, #28]	@ (81094dc <vPortExitCritical+0x50>)
 81094be:	681b      	ldr	r3, [r3, #0]
 81094c0:	2b00      	cmp	r3, #0
 81094c2:	d105      	bne.n	81094d0 <vPortExitCritical+0x44>
 81094c4:	2300      	movs	r3, #0
 81094c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81094c8:	683b      	ldr	r3, [r7, #0]
 81094ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81094ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81094d0:	bf00      	nop
 81094d2:	370c      	adds	r7, #12
 81094d4:	46bd      	mov	sp, r7
 81094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094da:	4770      	bx	lr
 81094dc:	10000010 	.word	0x10000010

081094e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81094e0:	f3ef 8009 	mrs	r0, PSP
 81094e4:	f3bf 8f6f 	isb	sy
 81094e8:	4b15      	ldr	r3, [pc, #84]	@ (8109540 <pxCurrentTCBConst>)
 81094ea:	681a      	ldr	r2, [r3, #0]
 81094ec:	f01e 0f10 	tst.w	lr, #16
 81094f0:	bf08      	it	eq
 81094f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81094f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81094fa:	6010      	str	r0, [r2, #0]
 81094fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8109504:	f380 8811 	msr	BASEPRI, r0
 8109508:	f3bf 8f4f 	dsb	sy
 810950c:	f3bf 8f6f 	isb	sy
 8109510:	f001 fa50 	bl	810a9b4 <vTaskSwitchContext>
 8109514:	f04f 0000 	mov.w	r0, #0
 8109518:	f380 8811 	msr	BASEPRI, r0
 810951c:	bc09      	pop	{r0, r3}
 810951e:	6819      	ldr	r1, [r3, #0]
 8109520:	6808      	ldr	r0, [r1, #0]
 8109522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109526:	f01e 0f10 	tst.w	lr, #16
 810952a:	bf08      	it	eq
 810952c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109530:	f380 8809 	msr	PSP, r0
 8109534:	f3bf 8f6f 	isb	sy
 8109538:	4770      	bx	lr
 810953a:	bf00      	nop
 810953c:	f3af 8000 	nop.w

08109540 <pxCurrentTCBConst>:
 8109540:	1000493c 	.word	0x1000493c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109544:	bf00      	nop
 8109546:	bf00      	nop

08109548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109548:	b580      	push	{r7, lr}
 810954a:	b082      	sub	sp, #8
 810954c:	af00      	add	r7, sp, #0
	__asm volatile
 810954e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109552:	f383 8811 	msr	BASEPRI, r3
 8109556:	f3bf 8f6f 	isb	sy
 810955a:	f3bf 8f4f 	dsb	sy
 810955e:	607b      	str	r3, [r7, #4]
}
 8109560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109562:	f001 f96d 	bl	810a840 <xTaskIncrementTick>
 8109566:	4603      	mov	r3, r0
 8109568:	2b00      	cmp	r3, #0
 810956a:	d003      	beq.n	8109574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810956c:	4b06      	ldr	r3, [pc, #24]	@ (8109588 <xPortSysTickHandler+0x40>)
 810956e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109572:	601a      	str	r2, [r3, #0]
 8109574:	2300      	movs	r3, #0
 8109576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109578:	683b      	ldr	r3, [r7, #0]
 810957a:	f383 8811 	msr	BASEPRI, r3
}
 810957e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8109580:	bf00      	nop
 8109582:	3708      	adds	r7, #8
 8109584:	46bd      	mov	sp, r7
 8109586:	bd80      	pop	{r7, pc}
 8109588:	e000ed04 	.word	0xe000ed04

0810958c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810958c:	b480      	push	{r7}
 810958e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8109590:	4b0b      	ldr	r3, [pc, #44]	@ (81095c0 <vPortSetupTimerInterrupt+0x34>)
 8109592:	2200      	movs	r2, #0
 8109594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109596:	4b0b      	ldr	r3, [pc, #44]	@ (81095c4 <vPortSetupTimerInterrupt+0x38>)
 8109598:	2200      	movs	r2, #0
 810959a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810959c:	4b0a      	ldr	r3, [pc, #40]	@ (81095c8 <vPortSetupTimerInterrupt+0x3c>)
 810959e:	681b      	ldr	r3, [r3, #0]
 81095a0:	4a0a      	ldr	r2, [pc, #40]	@ (81095cc <vPortSetupTimerInterrupt+0x40>)
 81095a2:	fba2 2303 	umull	r2, r3, r2, r3
 81095a6:	099b      	lsrs	r3, r3, #6
 81095a8:	4a09      	ldr	r2, [pc, #36]	@ (81095d0 <vPortSetupTimerInterrupt+0x44>)
 81095aa:	3b01      	subs	r3, #1
 81095ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81095ae:	4b04      	ldr	r3, [pc, #16]	@ (81095c0 <vPortSetupTimerInterrupt+0x34>)
 81095b0:	2207      	movs	r2, #7
 81095b2:	601a      	str	r2, [r3, #0]
}
 81095b4:	bf00      	nop
 81095b6:	46bd      	mov	sp, r7
 81095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095bc:	4770      	bx	lr
 81095be:	bf00      	nop
 81095c0:	e000e010 	.word	0xe000e010
 81095c4:	e000e018 	.word	0xe000e018
 81095c8:	10000004 	.word	0x10000004
 81095cc:	10624dd3 	.word	0x10624dd3
 81095d0:	e000e014 	.word	0xe000e014

081095d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81095d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 81095e4 <vPortEnableVFP+0x10>
 81095d8:	6801      	ldr	r1, [r0, #0]
 81095da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81095de:	6001      	str	r1, [r0, #0]
 81095e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81095e2:	bf00      	nop
 81095e4:	e000ed88 	.word	0xe000ed88

081095e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81095e8:	b480      	push	{r7}
 81095ea:	b085      	sub	sp, #20
 81095ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81095ee:	f3ef 8305 	mrs	r3, IPSR
 81095f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81095f4:	68fb      	ldr	r3, [r7, #12]
 81095f6:	2b0f      	cmp	r3, #15
 81095f8:	d915      	bls.n	8109626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81095fa:	4a18      	ldr	r2, [pc, #96]	@ (810965c <vPortValidateInterruptPriority+0x74>)
 81095fc:	68fb      	ldr	r3, [r7, #12]
 81095fe:	4413      	add	r3, r2
 8109600:	781b      	ldrb	r3, [r3, #0]
 8109602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8109604:	4b16      	ldr	r3, [pc, #88]	@ (8109660 <vPortValidateInterruptPriority+0x78>)
 8109606:	781b      	ldrb	r3, [r3, #0]
 8109608:	7afa      	ldrb	r2, [r7, #11]
 810960a:	429a      	cmp	r2, r3
 810960c:	d20b      	bcs.n	8109626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109612:	f383 8811 	msr	BASEPRI, r3
 8109616:	f3bf 8f6f 	isb	sy
 810961a:	f3bf 8f4f 	dsb	sy
 810961e:	607b      	str	r3, [r7, #4]
}
 8109620:	bf00      	nop
 8109622:	bf00      	nop
 8109624:	e7fd      	b.n	8109622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8109626:	4b0f      	ldr	r3, [pc, #60]	@ (8109664 <vPortValidateInterruptPriority+0x7c>)
 8109628:	681b      	ldr	r3, [r3, #0]
 810962a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810962e:	4b0e      	ldr	r3, [pc, #56]	@ (8109668 <vPortValidateInterruptPriority+0x80>)
 8109630:	681b      	ldr	r3, [r3, #0]
 8109632:	429a      	cmp	r2, r3
 8109634:	d90b      	bls.n	810964e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8109636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810963a:	f383 8811 	msr	BASEPRI, r3
 810963e:	f3bf 8f6f 	isb	sy
 8109642:	f3bf 8f4f 	dsb	sy
 8109646:	603b      	str	r3, [r7, #0]
}
 8109648:	bf00      	nop
 810964a:	bf00      	nop
 810964c:	e7fd      	b.n	810964a <vPortValidateInterruptPriority+0x62>
	}
 810964e:	bf00      	nop
 8109650:	3714      	adds	r7, #20
 8109652:	46bd      	mov	sp, r7
 8109654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109658:	4770      	bx	lr
 810965a:	bf00      	nop
 810965c:	e000e3f0 	.word	0xe000e3f0
 8109660:	100048f4 	.word	0x100048f4
 8109664:	e000ed0c 	.word	0xe000ed0c
 8109668:	100048f8 	.word	0x100048f8

0810966c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810966c:	b580      	push	{r7, lr}
 810966e:	b084      	sub	sp, #16
 8109670:	af00      	add	r7, sp, #0
 8109672:	6078      	str	r0, [r7, #4]
 8109674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810967a:	68fb      	ldr	r3, [r7, #12]
 810967c:	2b00      	cmp	r3, #0
 810967e:	d10b      	bne.n	8109698 <xQueueGenericReset+0x2c>
	__asm volatile
 8109680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109684:	f383 8811 	msr	BASEPRI, r3
 8109688:	f3bf 8f6f 	isb	sy
 810968c:	f3bf 8f4f 	dsb	sy
 8109690:	60bb      	str	r3, [r7, #8]
}
 8109692:	bf00      	nop
 8109694:	bf00      	nop
 8109696:	e7fd      	b.n	8109694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8109698:	f7ff fec6 	bl	8109428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810969c:	68fb      	ldr	r3, [r7, #12]
 810969e:	681a      	ldr	r2, [r3, #0]
 81096a0:	68fb      	ldr	r3, [r7, #12]
 81096a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81096a4:	68f9      	ldr	r1, [r7, #12]
 81096a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81096a8:	fb01 f303 	mul.w	r3, r1, r3
 81096ac:	441a      	add	r2, r3
 81096ae:	68fb      	ldr	r3, [r7, #12]
 81096b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81096b2:	68fb      	ldr	r3, [r7, #12]
 81096b4:	2200      	movs	r2, #0
 81096b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81096b8:	68fb      	ldr	r3, [r7, #12]
 81096ba:	681a      	ldr	r2, [r3, #0]
 81096bc:	68fb      	ldr	r3, [r7, #12]
 81096be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81096c0:	68fb      	ldr	r3, [r7, #12]
 81096c2:	681a      	ldr	r2, [r3, #0]
 81096c4:	68fb      	ldr	r3, [r7, #12]
 81096c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81096c8:	3b01      	subs	r3, #1
 81096ca:	68f9      	ldr	r1, [r7, #12]
 81096cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 81096ce:	fb01 f303 	mul.w	r3, r1, r3
 81096d2:	441a      	add	r2, r3
 81096d4:	68fb      	ldr	r3, [r7, #12]
 81096d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81096d8:	68fb      	ldr	r3, [r7, #12]
 81096da:	22ff      	movs	r2, #255	@ 0xff
 81096dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81096e0:	68fb      	ldr	r3, [r7, #12]
 81096e2:	22ff      	movs	r2, #255	@ 0xff
 81096e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 81096e8:	683b      	ldr	r3, [r7, #0]
 81096ea:	2b00      	cmp	r3, #0
 81096ec:	d114      	bne.n	8109718 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81096ee:	68fb      	ldr	r3, [r7, #12]
 81096f0:	691b      	ldr	r3, [r3, #16]
 81096f2:	2b00      	cmp	r3, #0
 81096f4:	d01a      	beq.n	810972c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81096f6:	68fb      	ldr	r3, [r7, #12]
 81096f8:	3310      	adds	r3, #16
 81096fa:	4618      	mov	r0, r3
 81096fc:	f001 fa12 	bl	810ab24 <xTaskRemoveFromEventList>
 8109700:	4603      	mov	r3, r0
 8109702:	2b00      	cmp	r3, #0
 8109704:	d012      	beq.n	810972c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8109706:	4b0d      	ldr	r3, [pc, #52]	@ (810973c <xQueueGenericReset+0xd0>)
 8109708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810970c:	601a      	str	r2, [r3, #0]
 810970e:	f3bf 8f4f 	dsb	sy
 8109712:	f3bf 8f6f 	isb	sy
 8109716:	e009      	b.n	810972c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8109718:	68fb      	ldr	r3, [r7, #12]
 810971a:	3310      	adds	r3, #16
 810971c:	4618      	mov	r0, r3
 810971e:	f7ff fca1 	bl	8109064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8109722:	68fb      	ldr	r3, [r7, #12]
 8109724:	3324      	adds	r3, #36	@ 0x24
 8109726:	4618      	mov	r0, r3
 8109728:	f7ff fc9c 	bl	8109064 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810972c:	f7ff feae 	bl	810948c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8109730:	2301      	movs	r3, #1
}
 8109732:	4618      	mov	r0, r3
 8109734:	3710      	adds	r7, #16
 8109736:	46bd      	mov	sp, r7
 8109738:	bd80      	pop	{r7, pc}
 810973a:	bf00      	nop
 810973c:	e000ed04 	.word	0xe000ed04

08109740 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8109740:	b580      	push	{r7, lr}
 8109742:	b08e      	sub	sp, #56	@ 0x38
 8109744:	af02      	add	r7, sp, #8
 8109746:	60f8      	str	r0, [r7, #12]
 8109748:	60b9      	str	r1, [r7, #8]
 810974a:	607a      	str	r2, [r7, #4]
 810974c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810974e:	68fb      	ldr	r3, [r7, #12]
 8109750:	2b00      	cmp	r3, #0
 8109752:	d10b      	bne.n	810976c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8109754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109758:	f383 8811 	msr	BASEPRI, r3
 810975c:	f3bf 8f6f 	isb	sy
 8109760:	f3bf 8f4f 	dsb	sy
 8109764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8109766:	bf00      	nop
 8109768:	bf00      	nop
 810976a:	e7fd      	b.n	8109768 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810976c:	683b      	ldr	r3, [r7, #0]
 810976e:	2b00      	cmp	r3, #0
 8109770:	d10b      	bne.n	810978a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8109772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109776:	f383 8811 	msr	BASEPRI, r3
 810977a:	f3bf 8f6f 	isb	sy
 810977e:	f3bf 8f4f 	dsb	sy
 8109782:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8109784:	bf00      	nop
 8109786:	bf00      	nop
 8109788:	e7fd      	b.n	8109786 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810978a:	687b      	ldr	r3, [r7, #4]
 810978c:	2b00      	cmp	r3, #0
 810978e:	d002      	beq.n	8109796 <xQueueGenericCreateStatic+0x56>
 8109790:	68bb      	ldr	r3, [r7, #8]
 8109792:	2b00      	cmp	r3, #0
 8109794:	d001      	beq.n	810979a <xQueueGenericCreateStatic+0x5a>
 8109796:	2301      	movs	r3, #1
 8109798:	e000      	b.n	810979c <xQueueGenericCreateStatic+0x5c>
 810979a:	2300      	movs	r3, #0
 810979c:	2b00      	cmp	r3, #0
 810979e:	d10b      	bne.n	81097b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 81097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81097a4:	f383 8811 	msr	BASEPRI, r3
 81097a8:	f3bf 8f6f 	isb	sy
 81097ac:	f3bf 8f4f 	dsb	sy
 81097b0:	623b      	str	r3, [r7, #32]
}
 81097b2:	bf00      	nop
 81097b4:	bf00      	nop
 81097b6:	e7fd      	b.n	81097b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81097b8:	687b      	ldr	r3, [r7, #4]
 81097ba:	2b00      	cmp	r3, #0
 81097bc:	d102      	bne.n	81097c4 <xQueueGenericCreateStatic+0x84>
 81097be:	68bb      	ldr	r3, [r7, #8]
 81097c0:	2b00      	cmp	r3, #0
 81097c2:	d101      	bne.n	81097c8 <xQueueGenericCreateStatic+0x88>
 81097c4:	2301      	movs	r3, #1
 81097c6:	e000      	b.n	81097ca <xQueueGenericCreateStatic+0x8a>
 81097c8:	2300      	movs	r3, #0
 81097ca:	2b00      	cmp	r3, #0
 81097cc:	d10b      	bne.n	81097e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 81097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81097d2:	f383 8811 	msr	BASEPRI, r3
 81097d6:	f3bf 8f6f 	isb	sy
 81097da:	f3bf 8f4f 	dsb	sy
 81097de:	61fb      	str	r3, [r7, #28]
}
 81097e0:	bf00      	nop
 81097e2:	bf00      	nop
 81097e4:	e7fd      	b.n	81097e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81097e6:	2350      	movs	r3, #80	@ 0x50
 81097e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81097ea:	697b      	ldr	r3, [r7, #20]
 81097ec:	2b50      	cmp	r3, #80	@ 0x50
 81097ee:	d00b      	beq.n	8109808 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81097f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81097f4:	f383 8811 	msr	BASEPRI, r3
 81097f8:	f3bf 8f6f 	isb	sy
 81097fc:	f3bf 8f4f 	dsb	sy
 8109800:	61bb      	str	r3, [r7, #24]
}
 8109802:	bf00      	nop
 8109804:	bf00      	nop
 8109806:	e7fd      	b.n	8109804 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8109808:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810980a:	683b      	ldr	r3, [r7, #0]
 810980c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109810:	2b00      	cmp	r3, #0
 8109812:	d00d      	beq.n	8109830 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8109814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109816:	2201      	movs	r2, #1
 8109818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810981c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8109820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109822:	9300      	str	r3, [sp, #0]
 8109824:	4613      	mov	r3, r2
 8109826:	687a      	ldr	r2, [r7, #4]
 8109828:	68b9      	ldr	r1, [r7, #8]
 810982a:	68f8      	ldr	r0, [r7, #12]
 810982c:	f000 f840 	bl	81098b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8109832:	4618      	mov	r0, r3
 8109834:	3730      	adds	r7, #48	@ 0x30
 8109836:	46bd      	mov	sp, r7
 8109838:	bd80      	pop	{r7, pc}

0810983a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810983a:	b580      	push	{r7, lr}
 810983c:	b08a      	sub	sp, #40	@ 0x28
 810983e:	af02      	add	r7, sp, #8
 8109840:	60f8      	str	r0, [r7, #12]
 8109842:	60b9      	str	r1, [r7, #8]
 8109844:	4613      	mov	r3, r2
 8109846:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109848:	68fb      	ldr	r3, [r7, #12]
 810984a:	2b00      	cmp	r3, #0
 810984c:	d10b      	bne.n	8109866 <xQueueGenericCreate+0x2c>
	__asm volatile
 810984e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109852:	f383 8811 	msr	BASEPRI, r3
 8109856:	f3bf 8f6f 	isb	sy
 810985a:	f3bf 8f4f 	dsb	sy
 810985e:	613b      	str	r3, [r7, #16]
}
 8109860:	bf00      	nop
 8109862:	bf00      	nop
 8109864:	e7fd      	b.n	8109862 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109866:	68fb      	ldr	r3, [r7, #12]
 8109868:	68ba      	ldr	r2, [r7, #8]
 810986a:	fb02 f303 	mul.w	r3, r2, r3
 810986e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8109870:	69fb      	ldr	r3, [r7, #28]
 8109872:	3350      	adds	r3, #80	@ 0x50
 8109874:	4618      	mov	r0, r3
 8109876:	f7ff fa07 	bl	8108c88 <pvPortMalloc>
 810987a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810987c:	69bb      	ldr	r3, [r7, #24]
 810987e:	2b00      	cmp	r3, #0
 8109880:	d011      	beq.n	81098a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8109882:	69bb      	ldr	r3, [r7, #24]
 8109884:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109886:	697b      	ldr	r3, [r7, #20]
 8109888:	3350      	adds	r3, #80	@ 0x50
 810988a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810988c:	69bb      	ldr	r3, [r7, #24]
 810988e:	2200      	movs	r2, #0
 8109890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109894:	79fa      	ldrb	r2, [r7, #7]
 8109896:	69bb      	ldr	r3, [r7, #24]
 8109898:	9300      	str	r3, [sp, #0]
 810989a:	4613      	mov	r3, r2
 810989c:	697a      	ldr	r2, [r7, #20]
 810989e:	68b9      	ldr	r1, [r7, #8]
 81098a0:	68f8      	ldr	r0, [r7, #12]
 81098a2:	f000 f805 	bl	81098b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81098a6:	69bb      	ldr	r3, [r7, #24]
	}
 81098a8:	4618      	mov	r0, r3
 81098aa:	3720      	adds	r7, #32
 81098ac:	46bd      	mov	sp, r7
 81098ae:	bd80      	pop	{r7, pc}

081098b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81098b0:	b580      	push	{r7, lr}
 81098b2:	b084      	sub	sp, #16
 81098b4:	af00      	add	r7, sp, #0
 81098b6:	60f8      	str	r0, [r7, #12]
 81098b8:	60b9      	str	r1, [r7, #8]
 81098ba:	607a      	str	r2, [r7, #4]
 81098bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 81098be:	68bb      	ldr	r3, [r7, #8]
 81098c0:	2b00      	cmp	r3, #0
 81098c2:	d103      	bne.n	81098cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 81098c4:	69bb      	ldr	r3, [r7, #24]
 81098c6:	69ba      	ldr	r2, [r7, #24]
 81098c8:	601a      	str	r2, [r3, #0]
 81098ca:	e002      	b.n	81098d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 81098cc:	69bb      	ldr	r3, [r7, #24]
 81098ce:	687a      	ldr	r2, [r7, #4]
 81098d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 81098d2:	69bb      	ldr	r3, [r7, #24]
 81098d4:	68fa      	ldr	r2, [r7, #12]
 81098d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 81098d8:	69bb      	ldr	r3, [r7, #24]
 81098da:	68ba      	ldr	r2, [r7, #8]
 81098dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 81098de:	2101      	movs	r1, #1
 81098e0:	69b8      	ldr	r0, [r7, #24]
 81098e2:	f7ff fec3 	bl	810966c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 81098e6:	69bb      	ldr	r3, [r7, #24]
 81098e8:	78fa      	ldrb	r2, [r7, #3]
 81098ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81098ee:	bf00      	nop
 81098f0:	3710      	adds	r7, #16
 81098f2:	46bd      	mov	sp, r7
 81098f4:	bd80      	pop	{r7, pc}
	...

081098f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81098f8:	b580      	push	{r7, lr}
 81098fa:	b08e      	sub	sp, #56	@ 0x38
 81098fc:	af00      	add	r7, sp, #0
 81098fe:	60f8      	str	r0, [r7, #12]
 8109900:	60b9      	str	r1, [r7, #8]
 8109902:	607a      	str	r2, [r7, #4]
 8109904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8109906:	2300      	movs	r3, #0
 8109908:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810990a:	68fb      	ldr	r3, [r7, #12]
 810990c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109910:	2b00      	cmp	r3, #0
 8109912:	d10b      	bne.n	810992c <xQueueGenericSend+0x34>
	__asm volatile
 8109914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109918:	f383 8811 	msr	BASEPRI, r3
 810991c:	f3bf 8f6f 	isb	sy
 8109920:	f3bf 8f4f 	dsb	sy
 8109924:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8109926:	bf00      	nop
 8109928:	bf00      	nop
 810992a:	e7fd      	b.n	8109928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810992c:	68bb      	ldr	r3, [r7, #8]
 810992e:	2b00      	cmp	r3, #0
 8109930:	d103      	bne.n	810993a <xQueueGenericSend+0x42>
 8109932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109936:	2b00      	cmp	r3, #0
 8109938:	d101      	bne.n	810993e <xQueueGenericSend+0x46>
 810993a:	2301      	movs	r3, #1
 810993c:	e000      	b.n	8109940 <xQueueGenericSend+0x48>
 810993e:	2300      	movs	r3, #0
 8109940:	2b00      	cmp	r3, #0
 8109942:	d10b      	bne.n	810995c <xQueueGenericSend+0x64>
	__asm volatile
 8109944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109948:	f383 8811 	msr	BASEPRI, r3
 810994c:	f3bf 8f6f 	isb	sy
 8109950:	f3bf 8f4f 	dsb	sy
 8109954:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8109956:	bf00      	nop
 8109958:	bf00      	nop
 810995a:	e7fd      	b.n	8109958 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810995c:	683b      	ldr	r3, [r7, #0]
 810995e:	2b02      	cmp	r3, #2
 8109960:	d103      	bne.n	810996a <xQueueGenericSend+0x72>
 8109962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109966:	2b01      	cmp	r3, #1
 8109968:	d101      	bne.n	810996e <xQueueGenericSend+0x76>
 810996a:	2301      	movs	r3, #1
 810996c:	e000      	b.n	8109970 <xQueueGenericSend+0x78>
 810996e:	2300      	movs	r3, #0
 8109970:	2b00      	cmp	r3, #0
 8109972:	d10b      	bne.n	810998c <xQueueGenericSend+0x94>
	__asm volatile
 8109974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109978:	f383 8811 	msr	BASEPRI, r3
 810997c:	f3bf 8f6f 	isb	sy
 8109980:	f3bf 8f4f 	dsb	sy
 8109984:	623b      	str	r3, [r7, #32]
}
 8109986:	bf00      	nop
 8109988:	bf00      	nop
 810998a:	e7fd      	b.n	8109988 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810998c:	f001 fa90 	bl	810aeb0 <xTaskGetSchedulerState>
 8109990:	4603      	mov	r3, r0
 8109992:	2b00      	cmp	r3, #0
 8109994:	d102      	bne.n	810999c <xQueueGenericSend+0xa4>
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	2b00      	cmp	r3, #0
 810999a:	d101      	bne.n	81099a0 <xQueueGenericSend+0xa8>
 810999c:	2301      	movs	r3, #1
 810999e:	e000      	b.n	81099a2 <xQueueGenericSend+0xaa>
 81099a0:	2300      	movs	r3, #0
 81099a2:	2b00      	cmp	r3, #0
 81099a4:	d10b      	bne.n	81099be <xQueueGenericSend+0xc6>
	__asm volatile
 81099a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81099aa:	f383 8811 	msr	BASEPRI, r3
 81099ae:	f3bf 8f6f 	isb	sy
 81099b2:	f3bf 8f4f 	dsb	sy
 81099b6:	61fb      	str	r3, [r7, #28]
}
 81099b8:	bf00      	nop
 81099ba:	bf00      	nop
 81099bc:	e7fd      	b.n	81099ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81099be:	f7ff fd33 	bl	8109428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81099c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81099c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81099ca:	429a      	cmp	r2, r3
 81099cc:	d302      	bcc.n	81099d4 <xQueueGenericSend+0xdc>
 81099ce:	683b      	ldr	r3, [r7, #0]
 81099d0:	2b02      	cmp	r3, #2
 81099d2:	d129      	bne.n	8109a28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81099d4:	683a      	ldr	r2, [r7, #0]
 81099d6:	68b9      	ldr	r1, [r7, #8]
 81099d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81099da:	f000 fa91 	bl	8109f00 <prvCopyDataToQueue>
 81099de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81099e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81099e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81099e4:	2b00      	cmp	r3, #0
 81099e6:	d010      	beq.n	8109a0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81099ea:	3324      	adds	r3, #36	@ 0x24
 81099ec:	4618      	mov	r0, r3
 81099ee:	f001 f899 	bl	810ab24 <xTaskRemoveFromEventList>
 81099f2:	4603      	mov	r3, r0
 81099f4:	2b00      	cmp	r3, #0
 81099f6:	d013      	beq.n	8109a20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81099f8:	4b3f      	ldr	r3, [pc, #252]	@ (8109af8 <xQueueGenericSend+0x200>)
 81099fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81099fe:	601a      	str	r2, [r3, #0]
 8109a00:	f3bf 8f4f 	dsb	sy
 8109a04:	f3bf 8f6f 	isb	sy
 8109a08:	e00a      	b.n	8109a20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8109a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109a0c:	2b00      	cmp	r3, #0
 8109a0e:	d007      	beq.n	8109a20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8109a10:	4b39      	ldr	r3, [pc, #228]	@ (8109af8 <xQueueGenericSend+0x200>)
 8109a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109a16:	601a      	str	r2, [r3, #0]
 8109a18:	f3bf 8f4f 	dsb	sy
 8109a1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8109a20:	f7ff fd34 	bl	810948c <vPortExitCritical>
				return pdPASS;
 8109a24:	2301      	movs	r3, #1
 8109a26:	e063      	b.n	8109af0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	2b00      	cmp	r3, #0
 8109a2c:	d103      	bne.n	8109a36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109a2e:	f7ff fd2d 	bl	810948c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8109a32:	2300      	movs	r3, #0
 8109a34:	e05c      	b.n	8109af0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109a38:	2b00      	cmp	r3, #0
 8109a3a:	d106      	bne.n	8109a4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109a3c:	f107 0314 	add.w	r3, r7, #20
 8109a40:	4618      	mov	r0, r3
 8109a42:	f001 f8d3 	bl	810abec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109a46:	2301      	movs	r3, #1
 8109a48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109a4a:	f7ff fd1f 	bl	810948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109a4e:	f000 fe29 	bl	810a6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109a52:	f7ff fce9 	bl	8109428 <vPortEnterCritical>
 8109a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8109a5c:	b25b      	sxtb	r3, r3
 8109a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109a62:	d103      	bne.n	8109a6c <xQueueGenericSend+0x174>
 8109a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a66:	2200      	movs	r2, #0
 8109a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8109a72:	b25b      	sxtb	r3, r3
 8109a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109a78:	d103      	bne.n	8109a82 <xQueueGenericSend+0x18a>
 8109a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109a7c:	2200      	movs	r2, #0
 8109a7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109a82:	f7ff fd03 	bl	810948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109a86:	1d3a      	adds	r2, r7, #4
 8109a88:	f107 0314 	add.w	r3, r7, #20
 8109a8c:	4611      	mov	r1, r2
 8109a8e:	4618      	mov	r0, r3
 8109a90:	f001 f8c2 	bl	810ac18 <xTaskCheckForTimeOut>
 8109a94:	4603      	mov	r3, r0
 8109a96:	2b00      	cmp	r3, #0
 8109a98:	d124      	bne.n	8109ae4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8109a9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109a9c:	f000 fb28 	bl	810a0f0 <prvIsQueueFull>
 8109aa0:	4603      	mov	r3, r0
 8109aa2:	2b00      	cmp	r3, #0
 8109aa4:	d018      	beq.n	8109ad8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8109aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109aa8:	3310      	adds	r3, #16
 8109aaa:	687a      	ldr	r2, [r7, #4]
 8109aac:	4611      	mov	r1, r2
 8109aae:	4618      	mov	r0, r3
 8109ab0:	f000 ffe6 	bl	810aa80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8109ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109ab6:	f000 fab3 	bl	810a020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8109aba:	f000 fe01 	bl	810a6c0 <xTaskResumeAll>
 8109abe:	4603      	mov	r3, r0
 8109ac0:	2b00      	cmp	r3, #0
 8109ac2:	f47f af7c 	bne.w	81099be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8109ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8109af8 <xQueueGenericSend+0x200>)
 8109ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109acc:	601a      	str	r2, [r3, #0]
 8109ace:	f3bf 8f4f 	dsb	sy
 8109ad2:	f3bf 8f6f 	isb	sy
 8109ad6:	e772      	b.n	81099be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8109ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109ada:	f000 faa1 	bl	810a020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109ade:	f000 fdef 	bl	810a6c0 <xTaskResumeAll>
 8109ae2:	e76c      	b.n	81099be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8109ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109ae6:	f000 fa9b 	bl	810a020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109aea:	f000 fde9 	bl	810a6c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8109aee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8109af0:	4618      	mov	r0, r3
 8109af2:	3738      	adds	r7, #56	@ 0x38
 8109af4:	46bd      	mov	sp, r7
 8109af6:	bd80      	pop	{r7, pc}
 8109af8:	e000ed04 	.word	0xe000ed04

08109afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8109afc:	b580      	push	{r7, lr}
 8109afe:	b090      	sub	sp, #64	@ 0x40
 8109b00:	af00      	add	r7, sp, #0
 8109b02:	60f8      	str	r0, [r7, #12]
 8109b04:	60b9      	str	r1, [r7, #8]
 8109b06:	607a      	str	r2, [r7, #4]
 8109b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8109b0a:	68fb      	ldr	r3, [r7, #12]
 8109b0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8109b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b10:	2b00      	cmp	r3, #0
 8109b12:	d10b      	bne.n	8109b2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8109b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b18:	f383 8811 	msr	BASEPRI, r3
 8109b1c:	f3bf 8f6f 	isb	sy
 8109b20:	f3bf 8f4f 	dsb	sy
 8109b24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8109b26:	bf00      	nop
 8109b28:	bf00      	nop
 8109b2a:	e7fd      	b.n	8109b28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109b2c:	68bb      	ldr	r3, [r7, #8]
 8109b2e:	2b00      	cmp	r3, #0
 8109b30:	d103      	bne.n	8109b3a <xQueueGenericSendFromISR+0x3e>
 8109b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109b36:	2b00      	cmp	r3, #0
 8109b38:	d101      	bne.n	8109b3e <xQueueGenericSendFromISR+0x42>
 8109b3a:	2301      	movs	r3, #1
 8109b3c:	e000      	b.n	8109b40 <xQueueGenericSendFromISR+0x44>
 8109b3e:	2300      	movs	r3, #0
 8109b40:	2b00      	cmp	r3, #0
 8109b42:	d10b      	bne.n	8109b5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8109b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b48:	f383 8811 	msr	BASEPRI, r3
 8109b4c:	f3bf 8f6f 	isb	sy
 8109b50:	f3bf 8f4f 	dsb	sy
 8109b54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8109b56:	bf00      	nop
 8109b58:	bf00      	nop
 8109b5a:	e7fd      	b.n	8109b58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8109b5c:	683b      	ldr	r3, [r7, #0]
 8109b5e:	2b02      	cmp	r3, #2
 8109b60:	d103      	bne.n	8109b6a <xQueueGenericSendFromISR+0x6e>
 8109b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109b66:	2b01      	cmp	r3, #1
 8109b68:	d101      	bne.n	8109b6e <xQueueGenericSendFromISR+0x72>
 8109b6a:	2301      	movs	r3, #1
 8109b6c:	e000      	b.n	8109b70 <xQueueGenericSendFromISR+0x74>
 8109b6e:	2300      	movs	r3, #0
 8109b70:	2b00      	cmp	r3, #0
 8109b72:	d10b      	bne.n	8109b8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8109b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b78:	f383 8811 	msr	BASEPRI, r3
 8109b7c:	f3bf 8f6f 	isb	sy
 8109b80:	f3bf 8f4f 	dsb	sy
 8109b84:	623b      	str	r3, [r7, #32]
}
 8109b86:	bf00      	nop
 8109b88:	bf00      	nop
 8109b8a:	e7fd      	b.n	8109b88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8109b8c:	f7ff fd2c 	bl	81095e8 <vPortValidateInterruptPriority>
	__asm volatile
 8109b90:	f3ef 8211 	mrs	r2, BASEPRI
 8109b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b98:	f383 8811 	msr	BASEPRI, r3
 8109b9c:	f3bf 8f6f 	isb	sy
 8109ba0:	f3bf 8f4f 	dsb	sy
 8109ba4:	61fa      	str	r2, [r7, #28]
 8109ba6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8109ba8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8109baa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8109bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8109bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109bb4:	429a      	cmp	r2, r3
 8109bb6:	d302      	bcc.n	8109bbe <xQueueGenericSendFromISR+0xc2>
 8109bb8:	683b      	ldr	r3, [r7, #0]
 8109bba:	2b02      	cmp	r3, #2
 8109bbc:	d12f      	bne.n	8109c1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8109bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8109bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8109bce:	683a      	ldr	r2, [r7, #0]
 8109bd0:	68b9      	ldr	r1, [r7, #8]
 8109bd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8109bd4:	f000 f994 	bl	8109f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8109bd8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8109bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109be0:	d112      	bne.n	8109c08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109be6:	2b00      	cmp	r3, #0
 8109be8:	d016      	beq.n	8109c18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109bec:	3324      	adds	r3, #36	@ 0x24
 8109bee:	4618      	mov	r0, r3
 8109bf0:	f000 ff98 	bl	810ab24 <xTaskRemoveFromEventList>
 8109bf4:	4603      	mov	r3, r0
 8109bf6:	2b00      	cmp	r3, #0
 8109bf8:	d00e      	beq.n	8109c18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8109bfa:	687b      	ldr	r3, [r7, #4]
 8109bfc:	2b00      	cmp	r3, #0
 8109bfe:	d00b      	beq.n	8109c18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8109c00:	687b      	ldr	r3, [r7, #4]
 8109c02:	2201      	movs	r2, #1
 8109c04:	601a      	str	r2, [r3, #0]
 8109c06:	e007      	b.n	8109c18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8109c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8109c0c:	3301      	adds	r3, #1
 8109c0e:	b2db      	uxtb	r3, r3
 8109c10:	b25a      	sxtb	r2, r3
 8109c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8109c18:	2301      	movs	r3, #1
 8109c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8109c1c:	e001      	b.n	8109c22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8109c1e:	2300      	movs	r3, #0
 8109c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8109c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109c24:	617b      	str	r3, [r7, #20]
	__asm volatile
 8109c26:	697b      	ldr	r3, [r7, #20]
 8109c28:	f383 8811 	msr	BASEPRI, r3
}
 8109c2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8109c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8109c30:	4618      	mov	r0, r3
 8109c32:	3740      	adds	r7, #64	@ 0x40
 8109c34:	46bd      	mov	sp, r7
 8109c36:	bd80      	pop	{r7, pc}

08109c38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8109c38:	b580      	push	{r7, lr}
 8109c3a:	b08c      	sub	sp, #48	@ 0x30
 8109c3c:	af00      	add	r7, sp, #0
 8109c3e:	60f8      	str	r0, [r7, #12]
 8109c40:	60b9      	str	r1, [r7, #8]
 8109c42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8109c44:	2300      	movs	r3, #0
 8109c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109c48:	68fb      	ldr	r3, [r7, #12]
 8109c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8109c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109c4e:	2b00      	cmp	r3, #0
 8109c50:	d10b      	bne.n	8109c6a <xQueueReceive+0x32>
	__asm volatile
 8109c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109c56:	f383 8811 	msr	BASEPRI, r3
 8109c5a:	f3bf 8f6f 	isb	sy
 8109c5e:	f3bf 8f4f 	dsb	sy
 8109c62:	623b      	str	r3, [r7, #32]
}
 8109c64:	bf00      	nop
 8109c66:	bf00      	nop
 8109c68:	e7fd      	b.n	8109c66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109c6a:	68bb      	ldr	r3, [r7, #8]
 8109c6c:	2b00      	cmp	r3, #0
 8109c6e:	d103      	bne.n	8109c78 <xQueueReceive+0x40>
 8109c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109c74:	2b00      	cmp	r3, #0
 8109c76:	d101      	bne.n	8109c7c <xQueueReceive+0x44>
 8109c78:	2301      	movs	r3, #1
 8109c7a:	e000      	b.n	8109c7e <xQueueReceive+0x46>
 8109c7c:	2300      	movs	r3, #0
 8109c7e:	2b00      	cmp	r3, #0
 8109c80:	d10b      	bne.n	8109c9a <xQueueReceive+0x62>
	__asm volatile
 8109c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109c86:	f383 8811 	msr	BASEPRI, r3
 8109c8a:	f3bf 8f6f 	isb	sy
 8109c8e:	f3bf 8f4f 	dsb	sy
 8109c92:	61fb      	str	r3, [r7, #28]
}
 8109c94:	bf00      	nop
 8109c96:	bf00      	nop
 8109c98:	e7fd      	b.n	8109c96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8109c9a:	f001 f909 	bl	810aeb0 <xTaskGetSchedulerState>
 8109c9e:	4603      	mov	r3, r0
 8109ca0:	2b00      	cmp	r3, #0
 8109ca2:	d102      	bne.n	8109caa <xQueueReceive+0x72>
 8109ca4:	687b      	ldr	r3, [r7, #4]
 8109ca6:	2b00      	cmp	r3, #0
 8109ca8:	d101      	bne.n	8109cae <xQueueReceive+0x76>
 8109caa:	2301      	movs	r3, #1
 8109cac:	e000      	b.n	8109cb0 <xQueueReceive+0x78>
 8109cae:	2300      	movs	r3, #0
 8109cb0:	2b00      	cmp	r3, #0
 8109cb2:	d10b      	bne.n	8109ccc <xQueueReceive+0x94>
	__asm volatile
 8109cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109cb8:	f383 8811 	msr	BASEPRI, r3
 8109cbc:	f3bf 8f6f 	isb	sy
 8109cc0:	f3bf 8f4f 	dsb	sy
 8109cc4:	61bb      	str	r3, [r7, #24]
}
 8109cc6:	bf00      	nop
 8109cc8:	bf00      	nop
 8109cca:	e7fd      	b.n	8109cc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109ccc:	f7ff fbac 	bl	8109428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109cd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8109cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109cd8:	2b00      	cmp	r3, #0
 8109cda:	d01f      	beq.n	8109d1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8109cdc:	68b9      	ldr	r1, [r7, #8]
 8109cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109ce0:	f000 f978 	bl	8109fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8109ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109ce6:	1e5a      	subs	r2, r3, #1
 8109ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109cea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109cee:	691b      	ldr	r3, [r3, #16]
 8109cf0:	2b00      	cmp	r3, #0
 8109cf2:	d00f      	beq.n	8109d14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109cf6:	3310      	adds	r3, #16
 8109cf8:	4618      	mov	r0, r3
 8109cfa:	f000 ff13 	bl	810ab24 <xTaskRemoveFromEventList>
 8109cfe:	4603      	mov	r3, r0
 8109d00:	2b00      	cmp	r3, #0
 8109d02:	d007      	beq.n	8109d14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8109d04:	4b3c      	ldr	r3, [pc, #240]	@ (8109df8 <xQueueReceive+0x1c0>)
 8109d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109d0a:	601a      	str	r2, [r3, #0]
 8109d0c:	f3bf 8f4f 	dsb	sy
 8109d10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8109d14:	f7ff fbba 	bl	810948c <vPortExitCritical>
				return pdPASS;
 8109d18:	2301      	movs	r3, #1
 8109d1a:	e069      	b.n	8109df0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109d1c:	687b      	ldr	r3, [r7, #4]
 8109d1e:	2b00      	cmp	r3, #0
 8109d20:	d103      	bne.n	8109d2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109d22:	f7ff fbb3 	bl	810948c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8109d26:	2300      	movs	r3, #0
 8109d28:	e062      	b.n	8109df0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8109d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109d2c:	2b00      	cmp	r3, #0
 8109d2e:	d106      	bne.n	8109d3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109d30:	f107 0310 	add.w	r3, r7, #16
 8109d34:	4618      	mov	r0, r3
 8109d36:	f000 ff59 	bl	810abec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8109d3a:	2301      	movs	r3, #1
 8109d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109d3e:	f7ff fba5 	bl	810948c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109d42:	f000 fcaf 	bl	810a6a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8109d46:	f7ff fb6f 	bl	8109428 <vPortEnterCritical>
 8109d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8109d50:	b25b      	sxtb	r3, r3
 8109d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109d56:	d103      	bne.n	8109d60 <xQueueReceive+0x128>
 8109d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d5a:	2200      	movs	r2, #0
 8109d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8109d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8109d66:	b25b      	sxtb	r3, r3
 8109d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109d6c:	d103      	bne.n	8109d76 <xQueueReceive+0x13e>
 8109d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d70:	2200      	movs	r2, #0
 8109d72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8109d76:	f7ff fb89 	bl	810948c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8109d7a:	1d3a      	adds	r2, r7, #4
 8109d7c:	f107 0310 	add.w	r3, r7, #16
 8109d80:	4611      	mov	r1, r2
 8109d82:	4618      	mov	r0, r3
 8109d84:	f000 ff48 	bl	810ac18 <xTaskCheckForTimeOut>
 8109d88:	4603      	mov	r3, r0
 8109d8a:	2b00      	cmp	r3, #0
 8109d8c:	d123      	bne.n	8109dd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109d90:	f000 f998 	bl	810a0c4 <prvIsQueueEmpty>
 8109d94:	4603      	mov	r3, r0
 8109d96:	2b00      	cmp	r3, #0
 8109d98:	d017      	beq.n	8109dca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8109d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d9c:	3324      	adds	r3, #36	@ 0x24
 8109d9e:	687a      	ldr	r2, [r7, #4]
 8109da0:	4611      	mov	r1, r2
 8109da2:	4618      	mov	r0, r3
 8109da4:	f000 fe6c 	bl	810aa80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8109da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109daa:	f000 f939 	bl	810a020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8109dae:	f000 fc87 	bl	810a6c0 <xTaskResumeAll>
 8109db2:	4603      	mov	r3, r0
 8109db4:	2b00      	cmp	r3, #0
 8109db6:	d189      	bne.n	8109ccc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8109db8:	4b0f      	ldr	r3, [pc, #60]	@ (8109df8 <xQueueReceive+0x1c0>)
 8109dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109dbe:	601a      	str	r2, [r3, #0]
 8109dc0:	f3bf 8f4f 	dsb	sy
 8109dc4:	f3bf 8f6f 	isb	sy
 8109dc8:	e780      	b.n	8109ccc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8109dca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109dcc:	f000 f928 	bl	810a020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109dd0:	f000 fc76 	bl	810a6c0 <xTaskResumeAll>
 8109dd4:	e77a      	b.n	8109ccc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8109dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109dd8:	f000 f922 	bl	810a020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109ddc:	f000 fc70 	bl	810a6c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109de0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109de2:	f000 f96f 	bl	810a0c4 <prvIsQueueEmpty>
 8109de6:	4603      	mov	r3, r0
 8109de8:	2b00      	cmp	r3, #0
 8109dea:	f43f af6f 	beq.w	8109ccc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109dee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8109df0:	4618      	mov	r0, r3
 8109df2:	3730      	adds	r7, #48	@ 0x30
 8109df4:	46bd      	mov	sp, r7
 8109df6:	bd80      	pop	{r7, pc}
 8109df8:	e000ed04 	.word	0xe000ed04

08109dfc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8109dfc:	b580      	push	{r7, lr}
 8109dfe:	b08e      	sub	sp, #56	@ 0x38
 8109e00:	af00      	add	r7, sp, #0
 8109e02:	60f8      	str	r0, [r7, #12]
 8109e04:	60b9      	str	r1, [r7, #8]
 8109e06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8109e08:	68fb      	ldr	r3, [r7, #12]
 8109e0a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8109e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e0e:	2b00      	cmp	r3, #0
 8109e10:	d10b      	bne.n	8109e2a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8109e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109e16:	f383 8811 	msr	BASEPRI, r3
 8109e1a:	f3bf 8f6f 	isb	sy
 8109e1e:	f3bf 8f4f 	dsb	sy
 8109e22:	623b      	str	r3, [r7, #32]
}
 8109e24:	bf00      	nop
 8109e26:	bf00      	nop
 8109e28:	e7fd      	b.n	8109e26 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109e2a:	68bb      	ldr	r3, [r7, #8]
 8109e2c:	2b00      	cmp	r3, #0
 8109e2e:	d103      	bne.n	8109e38 <xQueueReceiveFromISR+0x3c>
 8109e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109e34:	2b00      	cmp	r3, #0
 8109e36:	d101      	bne.n	8109e3c <xQueueReceiveFromISR+0x40>
 8109e38:	2301      	movs	r3, #1
 8109e3a:	e000      	b.n	8109e3e <xQueueReceiveFromISR+0x42>
 8109e3c:	2300      	movs	r3, #0
 8109e3e:	2b00      	cmp	r3, #0
 8109e40:	d10b      	bne.n	8109e5a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8109e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109e46:	f383 8811 	msr	BASEPRI, r3
 8109e4a:	f3bf 8f6f 	isb	sy
 8109e4e:	f3bf 8f4f 	dsb	sy
 8109e52:	61fb      	str	r3, [r7, #28]
}
 8109e54:	bf00      	nop
 8109e56:	bf00      	nop
 8109e58:	e7fd      	b.n	8109e56 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8109e5a:	f7ff fbc5 	bl	81095e8 <vPortValidateInterruptPriority>
	__asm volatile
 8109e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8109e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109e66:	f383 8811 	msr	BASEPRI, r3
 8109e6a:	f3bf 8f6f 	isb	sy
 8109e6e:	f3bf 8f4f 	dsb	sy
 8109e72:	61ba      	str	r2, [r7, #24]
 8109e74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8109e76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8109e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109e7e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8109e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109e82:	2b00      	cmp	r3, #0
 8109e84:	d02f      	beq.n	8109ee6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8109e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8109e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8109e90:	68b9      	ldr	r1, [r7, #8]
 8109e92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109e94:	f000 f89e 	bl	8109fd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8109e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109e9a:	1e5a      	subs	r2, r3, #1
 8109e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e9e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8109ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8109ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109ea8:	d112      	bne.n	8109ed0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109eac:	691b      	ldr	r3, [r3, #16]
 8109eae:	2b00      	cmp	r3, #0
 8109eb0:	d016      	beq.n	8109ee0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109eb4:	3310      	adds	r3, #16
 8109eb6:	4618      	mov	r0, r3
 8109eb8:	f000 fe34 	bl	810ab24 <xTaskRemoveFromEventList>
 8109ebc:	4603      	mov	r3, r0
 8109ebe:	2b00      	cmp	r3, #0
 8109ec0:	d00e      	beq.n	8109ee0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8109ec2:	687b      	ldr	r3, [r7, #4]
 8109ec4:	2b00      	cmp	r3, #0
 8109ec6:	d00b      	beq.n	8109ee0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8109ec8:	687b      	ldr	r3, [r7, #4]
 8109eca:	2201      	movs	r2, #1
 8109ecc:	601a      	str	r2, [r3, #0]
 8109ece:	e007      	b.n	8109ee0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8109ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8109ed4:	3301      	adds	r3, #1
 8109ed6:	b2db      	uxtb	r3, r3
 8109ed8:	b25a      	sxtb	r2, r3
 8109eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8109ee0:	2301      	movs	r3, #1
 8109ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8109ee4:	e001      	b.n	8109eea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8109ee6:	2300      	movs	r3, #0
 8109ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8109eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109eec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8109eee:	693b      	ldr	r3, [r7, #16]
 8109ef0:	f383 8811 	msr	BASEPRI, r3
}
 8109ef4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8109ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8109ef8:	4618      	mov	r0, r3
 8109efa:	3738      	adds	r7, #56	@ 0x38
 8109efc:	46bd      	mov	sp, r7
 8109efe:	bd80      	pop	{r7, pc}

08109f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109f00:	b580      	push	{r7, lr}
 8109f02:	b086      	sub	sp, #24
 8109f04:	af00      	add	r7, sp, #0
 8109f06:	60f8      	str	r0, [r7, #12]
 8109f08:	60b9      	str	r1, [r7, #8]
 8109f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8109f0c:	2300      	movs	r3, #0
 8109f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109f10:	68fb      	ldr	r3, [r7, #12]
 8109f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8109f16:	68fb      	ldr	r3, [r7, #12]
 8109f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109f1a:	2b00      	cmp	r3, #0
 8109f1c:	d10d      	bne.n	8109f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8109f1e:	68fb      	ldr	r3, [r7, #12]
 8109f20:	681b      	ldr	r3, [r3, #0]
 8109f22:	2b00      	cmp	r3, #0
 8109f24:	d14d      	bne.n	8109fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8109f26:	68fb      	ldr	r3, [r7, #12]
 8109f28:	689b      	ldr	r3, [r3, #8]
 8109f2a:	4618      	mov	r0, r3
 8109f2c:	f000 ffde 	bl	810aeec <xTaskPriorityDisinherit>
 8109f30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109f32:	68fb      	ldr	r3, [r7, #12]
 8109f34:	2200      	movs	r2, #0
 8109f36:	609a      	str	r2, [r3, #8]
 8109f38:	e043      	b.n	8109fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8109f3a:	687b      	ldr	r3, [r7, #4]
 8109f3c:	2b00      	cmp	r3, #0
 8109f3e:	d119      	bne.n	8109f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109f40:	68fb      	ldr	r3, [r7, #12]
 8109f42:	6858      	ldr	r0, [r3, #4]
 8109f44:	68fb      	ldr	r3, [r7, #12]
 8109f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109f48:	461a      	mov	r2, r3
 8109f4a:	68b9      	ldr	r1, [r7, #8]
 8109f4c:	f001 ffcc 	bl	810bee8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109f50:	68fb      	ldr	r3, [r7, #12]
 8109f52:	685a      	ldr	r2, [r3, #4]
 8109f54:	68fb      	ldr	r3, [r7, #12]
 8109f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109f58:	441a      	add	r2, r3
 8109f5a:	68fb      	ldr	r3, [r7, #12]
 8109f5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109f5e:	68fb      	ldr	r3, [r7, #12]
 8109f60:	685a      	ldr	r2, [r3, #4]
 8109f62:	68fb      	ldr	r3, [r7, #12]
 8109f64:	689b      	ldr	r3, [r3, #8]
 8109f66:	429a      	cmp	r2, r3
 8109f68:	d32b      	bcc.n	8109fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8109f6a:	68fb      	ldr	r3, [r7, #12]
 8109f6c:	681a      	ldr	r2, [r3, #0]
 8109f6e:	68fb      	ldr	r3, [r7, #12]
 8109f70:	605a      	str	r2, [r3, #4]
 8109f72:	e026      	b.n	8109fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8109f74:	68fb      	ldr	r3, [r7, #12]
 8109f76:	68d8      	ldr	r0, [r3, #12]
 8109f78:	68fb      	ldr	r3, [r7, #12]
 8109f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109f7c:	461a      	mov	r2, r3
 8109f7e:	68b9      	ldr	r1, [r7, #8]
 8109f80:	f001 ffb2 	bl	810bee8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8109f84:	68fb      	ldr	r3, [r7, #12]
 8109f86:	68da      	ldr	r2, [r3, #12]
 8109f88:	68fb      	ldr	r3, [r7, #12]
 8109f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109f8c:	425b      	negs	r3, r3
 8109f8e:	441a      	add	r2, r3
 8109f90:	68fb      	ldr	r3, [r7, #12]
 8109f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8109f94:	68fb      	ldr	r3, [r7, #12]
 8109f96:	68da      	ldr	r2, [r3, #12]
 8109f98:	68fb      	ldr	r3, [r7, #12]
 8109f9a:	681b      	ldr	r3, [r3, #0]
 8109f9c:	429a      	cmp	r2, r3
 8109f9e:	d207      	bcs.n	8109fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8109fa0:	68fb      	ldr	r3, [r7, #12]
 8109fa2:	689a      	ldr	r2, [r3, #8]
 8109fa4:	68fb      	ldr	r3, [r7, #12]
 8109fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109fa8:	425b      	negs	r3, r3
 8109faa:	441a      	add	r2, r3
 8109fac:	68fb      	ldr	r3, [r7, #12]
 8109fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8109fb0:	687b      	ldr	r3, [r7, #4]
 8109fb2:	2b02      	cmp	r3, #2
 8109fb4:	d105      	bne.n	8109fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8109fb6:	693b      	ldr	r3, [r7, #16]
 8109fb8:	2b00      	cmp	r3, #0
 8109fba:	d002      	beq.n	8109fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8109fbc:	693b      	ldr	r3, [r7, #16]
 8109fbe:	3b01      	subs	r3, #1
 8109fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8109fc2:	693b      	ldr	r3, [r7, #16]
 8109fc4:	1c5a      	adds	r2, r3, #1
 8109fc6:	68fb      	ldr	r3, [r7, #12]
 8109fc8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8109fca:	697b      	ldr	r3, [r7, #20]
}
 8109fcc:	4618      	mov	r0, r3
 8109fce:	3718      	adds	r7, #24
 8109fd0:	46bd      	mov	sp, r7
 8109fd2:	bd80      	pop	{r7, pc}

08109fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8109fd4:	b580      	push	{r7, lr}
 8109fd6:	b082      	sub	sp, #8
 8109fd8:	af00      	add	r7, sp, #0
 8109fda:	6078      	str	r0, [r7, #4]
 8109fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8109fde:	687b      	ldr	r3, [r7, #4]
 8109fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109fe2:	2b00      	cmp	r3, #0
 8109fe4:	d018      	beq.n	810a018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109fe6:	687b      	ldr	r3, [r7, #4]
 8109fe8:	68da      	ldr	r2, [r3, #12]
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109fee:	441a      	add	r2, r3
 8109ff0:	687b      	ldr	r3, [r7, #4]
 8109ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8109ff4:	687b      	ldr	r3, [r7, #4]
 8109ff6:	68da      	ldr	r2, [r3, #12]
 8109ff8:	687b      	ldr	r3, [r7, #4]
 8109ffa:	689b      	ldr	r3, [r3, #8]
 8109ffc:	429a      	cmp	r2, r3
 8109ffe:	d303      	bcc.n	810a008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	681a      	ldr	r2, [r3, #0]
 810a004:	687b      	ldr	r3, [r7, #4]
 810a006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a008:	687b      	ldr	r3, [r7, #4]
 810a00a:	68d9      	ldr	r1, [r3, #12]
 810a00c:	687b      	ldr	r3, [r7, #4]
 810a00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a010:	461a      	mov	r2, r3
 810a012:	6838      	ldr	r0, [r7, #0]
 810a014:	f001 ff68 	bl	810bee8 <memcpy>
	}
}
 810a018:	bf00      	nop
 810a01a:	3708      	adds	r7, #8
 810a01c:	46bd      	mov	sp, r7
 810a01e:	bd80      	pop	{r7, pc}

0810a020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810a020:	b580      	push	{r7, lr}
 810a022:	b084      	sub	sp, #16
 810a024:	af00      	add	r7, sp, #0
 810a026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810a028:	f7ff f9fe 	bl	8109428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810a032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a034:	e011      	b.n	810a05a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a036:	687b      	ldr	r3, [r7, #4]
 810a038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a03a:	2b00      	cmp	r3, #0
 810a03c:	d012      	beq.n	810a064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a03e:	687b      	ldr	r3, [r7, #4]
 810a040:	3324      	adds	r3, #36	@ 0x24
 810a042:	4618      	mov	r0, r3
 810a044:	f000 fd6e 	bl	810ab24 <xTaskRemoveFromEventList>
 810a048:	4603      	mov	r3, r0
 810a04a:	2b00      	cmp	r3, #0
 810a04c:	d001      	beq.n	810a052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810a04e:	f000 fe47 	bl	810ace0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810a052:	7bfb      	ldrb	r3, [r7, #15]
 810a054:	3b01      	subs	r3, #1
 810a056:	b2db      	uxtb	r3, r3
 810a058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810a05e:	2b00      	cmp	r3, #0
 810a060:	dce9      	bgt.n	810a036 <prvUnlockQueue+0x16>
 810a062:	e000      	b.n	810a066 <prvUnlockQueue+0x46>
					break;
 810a064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810a066:	687b      	ldr	r3, [r7, #4]
 810a068:	22ff      	movs	r2, #255	@ 0xff
 810a06a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810a06e:	f7ff fa0d 	bl	810948c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810a072:	f7ff f9d9 	bl	8109428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810a076:	687b      	ldr	r3, [r7, #4]
 810a078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810a07c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a07e:	e011      	b.n	810a0a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a080:	687b      	ldr	r3, [r7, #4]
 810a082:	691b      	ldr	r3, [r3, #16]
 810a084:	2b00      	cmp	r3, #0
 810a086:	d012      	beq.n	810a0ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a088:	687b      	ldr	r3, [r7, #4]
 810a08a:	3310      	adds	r3, #16
 810a08c:	4618      	mov	r0, r3
 810a08e:	f000 fd49 	bl	810ab24 <xTaskRemoveFromEventList>
 810a092:	4603      	mov	r3, r0
 810a094:	2b00      	cmp	r3, #0
 810a096:	d001      	beq.n	810a09c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810a098:	f000 fe22 	bl	810ace0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810a09c:	7bbb      	ldrb	r3, [r7, #14]
 810a09e:	3b01      	subs	r3, #1
 810a0a0:	b2db      	uxtb	r3, r3
 810a0a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a0a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810a0a8:	2b00      	cmp	r3, #0
 810a0aa:	dce9      	bgt.n	810a080 <prvUnlockQueue+0x60>
 810a0ac:	e000      	b.n	810a0b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810a0ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810a0b0:	687b      	ldr	r3, [r7, #4]
 810a0b2:	22ff      	movs	r2, #255	@ 0xff
 810a0b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810a0b8:	f7ff f9e8 	bl	810948c <vPortExitCritical>
}
 810a0bc:	bf00      	nop
 810a0be:	3710      	adds	r7, #16
 810a0c0:	46bd      	mov	sp, r7
 810a0c2:	bd80      	pop	{r7, pc}

0810a0c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810a0c4:	b580      	push	{r7, lr}
 810a0c6:	b084      	sub	sp, #16
 810a0c8:	af00      	add	r7, sp, #0
 810a0ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a0cc:	f7ff f9ac 	bl	8109428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810a0d0:	687b      	ldr	r3, [r7, #4]
 810a0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a0d4:	2b00      	cmp	r3, #0
 810a0d6:	d102      	bne.n	810a0de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810a0d8:	2301      	movs	r3, #1
 810a0da:	60fb      	str	r3, [r7, #12]
 810a0dc:	e001      	b.n	810a0e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810a0de:	2300      	movs	r3, #0
 810a0e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a0e2:	f7ff f9d3 	bl	810948c <vPortExitCritical>

	return xReturn;
 810a0e6:	68fb      	ldr	r3, [r7, #12]
}
 810a0e8:	4618      	mov	r0, r3
 810a0ea:	3710      	adds	r7, #16
 810a0ec:	46bd      	mov	sp, r7
 810a0ee:	bd80      	pop	{r7, pc}

0810a0f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810a0f0:	b580      	push	{r7, lr}
 810a0f2:	b084      	sub	sp, #16
 810a0f4:	af00      	add	r7, sp, #0
 810a0f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a0f8:	f7ff f996 	bl	8109428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810a0fc:	687b      	ldr	r3, [r7, #4]
 810a0fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810a100:	687b      	ldr	r3, [r7, #4]
 810a102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a104:	429a      	cmp	r2, r3
 810a106:	d102      	bne.n	810a10e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810a108:	2301      	movs	r3, #1
 810a10a:	60fb      	str	r3, [r7, #12]
 810a10c:	e001      	b.n	810a112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810a10e:	2300      	movs	r3, #0
 810a110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a112:	f7ff f9bb 	bl	810948c <vPortExitCritical>

	return xReturn;
 810a116:	68fb      	ldr	r3, [r7, #12]
}
 810a118:	4618      	mov	r0, r3
 810a11a:	3710      	adds	r7, #16
 810a11c:	46bd      	mov	sp, r7
 810a11e:	bd80      	pop	{r7, pc}

0810a120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810a120:	b480      	push	{r7}
 810a122:	b085      	sub	sp, #20
 810a124:	af00      	add	r7, sp, #0
 810a126:	6078      	str	r0, [r7, #4]
 810a128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810a12a:	2300      	movs	r3, #0
 810a12c:	60fb      	str	r3, [r7, #12]
 810a12e:	e014      	b.n	810a15a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810a130:	4a0f      	ldr	r2, [pc, #60]	@ (810a170 <vQueueAddToRegistry+0x50>)
 810a132:	68fb      	ldr	r3, [r7, #12]
 810a134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810a138:	2b00      	cmp	r3, #0
 810a13a:	d10b      	bne.n	810a154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810a13c:	490c      	ldr	r1, [pc, #48]	@ (810a170 <vQueueAddToRegistry+0x50>)
 810a13e:	68fb      	ldr	r3, [r7, #12]
 810a140:	683a      	ldr	r2, [r7, #0]
 810a142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810a146:	4a0a      	ldr	r2, [pc, #40]	@ (810a170 <vQueueAddToRegistry+0x50>)
 810a148:	68fb      	ldr	r3, [r7, #12]
 810a14a:	00db      	lsls	r3, r3, #3
 810a14c:	4413      	add	r3, r2
 810a14e:	687a      	ldr	r2, [r7, #4]
 810a150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810a152:	e006      	b.n	810a162 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810a154:	68fb      	ldr	r3, [r7, #12]
 810a156:	3301      	adds	r3, #1
 810a158:	60fb      	str	r3, [r7, #12]
 810a15a:	68fb      	ldr	r3, [r7, #12]
 810a15c:	2b07      	cmp	r3, #7
 810a15e:	d9e7      	bls.n	810a130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810a160:	bf00      	nop
 810a162:	bf00      	nop
 810a164:	3714      	adds	r7, #20
 810a166:	46bd      	mov	sp, r7
 810a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a16c:	4770      	bx	lr
 810a16e:	bf00      	nop
 810a170:	100048fc 	.word	0x100048fc

0810a174 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810a174:	b580      	push	{r7, lr}
 810a176:	b086      	sub	sp, #24
 810a178:	af00      	add	r7, sp, #0
 810a17a:	60f8      	str	r0, [r7, #12]
 810a17c:	60b9      	str	r1, [r7, #8]
 810a17e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810a180:	68fb      	ldr	r3, [r7, #12]
 810a182:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810a184:	f7ff f950 	bl	8109428 <vPortEnterCritical>
 810a188:	697b      	ldr	r3, [r7, #20]
 810a18a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810a18e:	b25b      	sxtb	r3, r3
 810a190:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a194:	d103      	bne.n	810a19e <vQueueWaitForMessageRestricted+0x2a>
 810a196:	697b      	ldr	r3, [r7, #20]
 810a198:	2200      	movs	r2, #0
 810a19a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a19e:	697b      	ldr	r3, [r7, #20]
 810a1a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810a1a4:	b25b      	sxtb	r3, r3
 810a1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a1aa:	d103      	bne.n	810a1b4 <vQueueWaitForMessageRestricted+0x40>
 810a1ac:	697b      	ldr	r3, [r7, #20]
 810a1ae:	2200      	movs	r2, #0
 810a1b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a1b4:	f7ff f96a 	bl	810948c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810a1b8:	697b      	ldr	r3, [r7, #20]
 810a1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a1bc:	2b00      	cmp	r3, #0
 810a1be:	d106      	bne.n	810a1ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810a1c0:	697b      	ldr	r3, [r7, #20]
 810a1c2:	3324      	adds	r3, #36	@ 0x24
 810a1c4:	687a      	ldr	r2, [r7, #4]
 810a1c6:	68b9      	ldr	r1, [r7, #8]
 810a1c8:	4618      	mov	r0, r3
 810a1ca:	f000 fc7f 	bl	810aacc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810a1ce:	6978      	ldr	r0, [r7, #20]
 810a1d0:	f7ff ff26 	bl	810a020 <prvUnlockQueue>
	}
 810a1d4:	bf00      	nop
 810a1d6:	3718      	adds	r7, #24
 810a1d8:	46bd      	mov	sp, r7
 810a1da:	bd80      	pop	{r7, pc}

0810a1dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810a1dc:	b580      	push	{r7, lr}
 810a1de:	b08e      	sub	sp, #56	@ 0x38
 810a1e0:	af04      	add	r7, sp, #16
 810a1e2:	60f8      	str	r0, [r7, #12]
 810a1e4:	60b9      	str	r1, [r7, #8]
 810a1e6:	607a      	str	r2, [r7, #4]
 810a1e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810a1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a1ec:	2b00      	cmp	r3, #0
 810a1ee:	d10b      	bne.n	810a208 <xTaskCreateStatic+0x2c>
	__asm volatile
 810a1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a1f4:	f383 8811 	msr	BASEPRI, r3
 810a1f8:	f3bf 8f6f 	isb	sy
 810a1fc:	f3bf 8f4f 	dsb	sy
 810a200:	623b      	str	r3, [r7, #32]
}
 810a202:	bf00      	nop
 810a204:	bf00      	nop
 810a206:	e7fd      	b.n	810a204 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810a208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a20a:	2b00      	cmp	r3, #0
 810a20c:	d10b      	bne.n	810a226 <xTaskCreateStatic+0x4a>
	__asm volatile
 810a20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a212:	f383 8811 	msr	BASEPRI, r3
 810a216:	f3bf 8f6f 	isb	sy
 810a21a:	f3bf 8f4f 	dsb	sy
 810a21e:	61fb      	str	r3, [r7, #28]
}
 810a220:	bf00      	nop
 810a222:	bf00      	nop
 810a224:	e7fd      	b.n	810a222 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810a226:	23a8      	movs	r3, #168	@ 0xa8
 810a228:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810a22a:	693b      	ldr	r3, [r7, #16]
 810a22c:	2ba8      	cmp	r3, #168	@ 0xa8
 810a22e:	d00b      	beq.n	810a248 <xTaskCreateStatic+0x6c>
	__asm volatile
 810a230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a234:	f383 8811 	msr	BASEPRI, r3
 810a238:	f3bf 8f6f 	isb	sy
 810a23c:	f3bf 8f4f 	dsb	sy
 810a240:	61bb      	str	r3, [r7, #24]
}
 810a242:	bf00      	nop
 810a244:	bf00      	nop
 810a246:	e7fd      	b.n	810a244 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810a248:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810a24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a24c:	2b00      	cmp	r3, #0
 810a24e:	d01e      	beq.n	810a28e <xTaskCreateStatic+0xb2>
 810a250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a252:	2b00      	cmp	r3, #0
 810a254:	d01b      	beq.n	810a28e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810a256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a258:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a25c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a25e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a262:	2202      	movs	r2, #2
 810a264:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810a268:	2300      	movs	r3, #0
 810a26a:	9303      	str	r3, [sp, #12]
 810a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a26e:	9302      	str	r3, [sp, #8]
 810a270:	f107 0314 	add.w	r3, r7, #20
 810a274:	9301      	str	r3, [sp, #4]
 810a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a278:	9300      	str	r3, [sp, #0]
 810a27a:	683b      	ldr	r3, [r7, #0]
 810a27c:	687a      	ldr	r2, [r7, #4]
 810a27e:	68b9      	ldr	r1, [r7, #8]
 810a280:	68f8      	ldr	r0, [r7, #12]
 810a282:	f000 f851 	bl	810a328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a286:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810a288:	f000 f8f6 	bl	810a478 <prvAddNewTaskToReadyList>
 810a28c:	e001      	b.n	810a292 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810a28e:	2300      	movs	r3, #0
 810a290:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810a292:	697b      	ldr	r3, [r7, #20]
	}
 810a294:	4618      	mov	r0, r3
 810a296:	3728      	adds	r7, #40	@ 0x28
 810a298:	46bd      	mov	sp, r7
 810a29a:	bd80      	pop	{r7, pc}

0810a29c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810a29c:	b580      	push	{r7, lr}
 810a29e:	b08c      	sub	sp, #48	@ 0x30
 810a2a0:	af04      	add	r7, sp, #16
 810a2a2:	60f8      	str	r0, [r7, #12]
 810a2a4:	60b9      	str	r1, [r7, #8]
 810a2a6:	603b      	str	r3, [r7, #0]
 810a2a8:	4613      	mov	r3, r2
 810a2aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810a2ac:	88fb      	ldrh	r3, [r7, #6]
 810a2ae:	009b      	lsls	r3, r3, #2
 810a2b0:	4618      	mov	r0, r3
 810a2b2:	f7fe fce9 	bl	8108c88 <pvPortMalloc>
 810a2b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810a2b8:	697b      	ldr	r3, [r7, #20]
 810a2ba:	2b00      	cmp	r3, #0
 810a2bc:	d00e      	beq.n	810a2dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810a2be:	20a8      	movs	r0, #168	@ 0xa8
 810a2c0:	f7fe fce2 	bl	8108c88 <pvPortMalloc>
 810a2c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810a2c6:	69fb      	ldr	r3, [r7, #28]
 810a2c8:	2b00      	cmp	r3, #0
 810a2ca:	d003      	beq.n	810a2d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810a2cc:	69fb      	ldr	r3, [r7, #28]
 810a2ce:	697a      	ldr	r2, [r7, #20]
 810a2d0:	631a      	str	r2, [r3, #48]	@ 0x30
 810a2d2:	e005      	b.n	810a2e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810a2d4:	6978      	ldr	r0, [r7, #20]
 810a2d6:	f7fe fda5 	bl	8108e24 <vPortFree>
 810a2da:	e001      	b.n	810a2e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810a2dc:	2300      	movs	r3, #0
 810a2de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810a2e0:	69fb      	ldr	r3, [r7, #28]
 810a2e2:	2b00      	cmp	r3, #0
 810a2e4:	d017      	beq.n	810a316 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810a2e6:	69fb      	ldr	r3, [r7, #28]
 810a2e8:	2200      	movs	r2, #0
 810a2ea:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810a2ee:	88fa      	ldrh	r2, [r7, #6]
 810a2f0:	2300      	movs	r3, #0
 810a2f2:	9303      	str	r3, [sp, #12]
 810a2f4:	69fb      	ldr	r3, [r7, #28]
 810a2f6:	9302      	str	r3, [sp, #8]
 810a2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a2fa:	9301      	str	r3, [sp, #4]
 810a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a2fe:	9300      	str	r3, [sp, #0]
 810a300:	683b      	ldr	r3, [r7, #0]
 810a302:	68b9      	ldr	r1, [r7, #8]
 810a304:	68f8      	ldr	r0, [r7, #12]
 810a306:	f000 f80f 	bl	810a328 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a30a:	69f8      	ldr	r0, [r7, #28]
 810a30c:	f000 f8b4 	bl	810a478 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810a310:	2301      	movs	r3, #1
 810a312:	61bb      	str	r3, [r7, #24]
 810a314:	e002      	b.n	810a31c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810a316:	f04f 33ff 	mov.w	r3, #4294967295
 810a31a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810a31c:	69bb      	ldr	r3, [r7, #24]
	}
 810a31e:	4618      	mov	r0, r3
 810a320:	3720      	adds	r7, #32
 810a322:	46bd      	mov	sp, r7
 810a324:	bd80      	pop	{r7, pc}
	...

0810a328 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810a328:	b580      	push	{r7, lr}
 810a32a:	b088      	sub	sp, #32
 810a32c:	af00      	add	r7, sp, #0
 810a32e:	60f8      	str	r0, [r7, #12]
 810a330:	60b9      	str	r1, [r7, #8]
 810a332:	607a      	str	r2, [r7, #4]
 810a334:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810a336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a338:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810a33a:	687b      	ldr	r3, [r7, #4]
 810a33c:	009b      	lsls	r3, r3, #2
 810a33e:	461a      	mov	r2, r3
 810a340:	21a5      	movs	r1, #165	@ 0xa5
 810a342:	f001 fd4d 	bl	810bde0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810a346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810a34a:	687b      	ldr	r3, [r7, #4]
 810a34c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810a350:	3b01      	subs	r3, #1
 810a352:	009b      	lsls	r3, r3, #2
 810a354:	4413      	add	r3, r2
 810a356:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810a358:	69bb      	ldr	r3, [r7, #24]
 810a35a:	f023 0307 	bic.w	r3, r3, #7
 810a35e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810a360:	69bb      	ldr	r3, [r7, #24]
 810a362:	f003 0307 	and.w	r3, r3, #7
 810a366:	2b00      	cmp	r3, #0
 810a368:	d00b      	beq.n	810a382 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810a36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a36e:	f383 8811 	msr	BASEPRI, r3
 810a372:	f3bf 8f6f 	isb	sy
 810a376:	f3bf 8f4f 	dsb	sy
 810a37a:	617b      	str	r3, [r7, #20]
}
 810a37c:	bf00      	nop
 810a37e:	bf00      	nop
 810a380:	e7fd      	b.n	810a37e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810a382:	68bb      	ldr	r3, [r7, #8]
 810a384:	2b00      	cmp	r3, #0
 810a386:	d01f      	beq.n	810a3c8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a388:	2300      	movs	r3, #0
 810a38a:	61fb      	str	r3, [r7, #28]
 810a38c:	e012      	b.n	810a3b4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810a38e:	68ba      	ldr	r2, [r7, #8]
 810a390:	69fb      	ldr	r3, [r7, #28]
 810a392:	4413      	add	r3, r2
 810a394:	7819      	ldrb	r1, [r3, #0]
 810a396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a398:	69fb      	ldr	r3, [r7, #28]
 810a39a:	4413      	add	r3, r2
 810a39c:	3334      	adds	r3, #52	@ 0x34
 810a39e:	460a      	mov	r2, r1
 810a3a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810a3a2:	68ba      	ldr	r2, [r7, #8]
 810a3a4:	69fb      	ldr	r3, [r7, #28]
 810a3a6:	4413      	add	r3, r2
 810a3a8:	781b      	ldrb	r3, [r3, #0]
 810a3aa:	2b00      	cmp	r3, #0
 810a3ac:	d006      	beq.n	810a3bc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a3ae:	69fb      	ldr	r3, [r7, #28]
 810a3b0:	3301      	adds	r3, #1
 810a3b2:	61fb      	str	r3, [r7, #28]
 810a3b4:	69fb      	ldr	r3, [r7, #28]
 810a3b6:	2b0f      	cmp	r3, #15
 810a3b8:	d9e9      	bls.n	810a38e <prvInitialiseNewTask+0x66>
 810a3ba:	e000      	b.n	810a3be <prvInitialiseNewTask+0x96>
			{
				break;
 810a3bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3c0:	2200      	movs	r2, #0
 810a3c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810a3c6:	e003      	b.n	810a3d0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810a3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3ca:	2200      	movs	r2, #0
 810a3cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a3d2:	2b37      	cmp	r3, #55	@ 0x37
 810a3d4:	d901      	bls.n	810a3da <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810a3d6:	2337      	movs	r3, #55	@ 0x37
 810a3d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810a3de:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810a3e4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3e8:	2200      	movs	r2, #0
 810a3ea:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3ee:	3304      	adds	r3, #4
 810a3f0:	4618      	mov	r0, r3
 810a3f2:	f7fe fe57 	bl	81090a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3f8:	3318      	adds	r3, #24
 810a3fa:	4618      	mov	r0, r3
 810a3fc:	f7fe fe52 	bl	81090a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a404:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a408:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a40e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a414:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a418:	2200      	movs	r2, #0
 810a41a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a420:	2200      	movs	r2, #0
 810a422:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a428:	3354      	adds	r3, #84	@ 0x54
 810a42a:	224c      	movs	r2, #76	@ 0x4c
 810a42c:	2100      	movs	r1, #0
 810a42e:	4618      	mov	r0, r3
 810a430:	f001 fcd6 	bl	810bde0 <memset>
 810a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a436:	4a0d      	ldr	r2, [pc, #52]	@ (810a46c <prvInitialiseNewTask+0x144>)
 810a438:	659a      	str	r2, [r3, #88]	@ 0x58
 810a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a43c:	4a0c      	ldr	r2, [pc, #48]	@ (810a470 <prvInitialiseNewTask+0x148>)
 810a43e:	65da      	str	r2, [r3, #92]	@ 0x5c
 810a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a442:	4a0c      	ldr	r2, [pc, #48]	@ (810a474 <prvInitialiseNewTask+0x14c>)
 810a444:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810a446:	683a      	ldr	r2, [r7, #0]
 810a448:	68f9      	ldr	r1, [r7, #12]
 810a44a:	69b8      	ldr	r0, [r7, #24]
 810a44c:	f7fe febe 	bl	81091cc <pxPortInitialiseStack>
 810a450:	4602      	mov	r2, r0
 810a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810a456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a458:	2b00      	cmp	r3, #0
 810a45a:	d002      	beq.n	810a462 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810a45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a45e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a462:	bf00      	nop
 810a464:	3720      	adds	r7, #32
 810a466:	46bd      	mov	sp, r7
 810a468:	bd80      	pop	{r7, pc}
 810a46a:	bf00      	nop
 810a46c:	10004fb4 	.word	0x10004fb4
 810a470:	1000501c 	.word	0x1000501c
 810a474:	10005084 	.word	0x10005084

0810a478 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810a478:	b580      	push	{r7, lr}
 810a47a:	b082      	sub	sp, #8
 810a47c:	af00      	add	r7, sp, #0
 810a47e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810a480:	f7fe ffd2 	bl	8109428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810a484:	4b2d      	ldr	r3, [pc, #180]	@ (810a53c <prvAddNewTaskToReadyList+0xc4>)
 810a486:	681b      	ldr	r3, [r3, #0]
 810a488:	3301      	adds	r3, #1
 810a48a:	4a2c      	ldr	r2, [pc, #176]	@ (810a53c <prvAddNewTaskToReadyList+0xc4>)
 810a48c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810a48e:	4b2c      	ldr	r3, [pc, #176]	@ (810a540 <prvAddNewTaskToReadyList+0xc8>)
 810a490:	681b      	ldr	r3, [r3, #0]
 810a492:	2b00      	cmp	r3, #0
 810a494:	d109      	bne.n	810a4aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810a496:	4a2a      	ldr	r2, [pc, #168]	@ (810a540 <prvAddNewTaskToReadyList+0xc8>)
 810a498:	687b      	ldr	r3, [r7, #4]
 810a49a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810a49c:	4b27      	ldr	r3, [pc, #156]	@ (810a53c <prvAddNewTaskToReadyList+0xc4>)
 810a49e:	681b      	ldr	r3, [r3, #0]
 810a4a0:	2b01      	cmp	r3, #1
 810a4a2:	d110      	bne.n	810a4c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810a4a4:	f000 fc40 	bl	810ad28 <prvInitialiseTaskLists>
 810a4a8:	e00d      	b.n	810a4c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810a4aa:	4b26      	ldr	r3, [pc, #152]	@ (810a544 <prvAddNewTaskToReadyList+0xcc>)
 810a4ac:	681b      	ldr	r3, [r3, #0]
 810a4ae:	2b00      	cmp	r3, #0
 810a4b0:	d109      	bne.n	810a4c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810a4b2:	4b23      	ldr	r3, [pc, #140]	@ (810a540 <prvAddNewTaskToReadyList+0xc8>)
 810a4b4:	681b      	ldr	r3, [r3, #0]
 810a4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a4b8:	687b      	ldr	r3, [r7, #4]
 810a4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a4bc:	429a      	cmp	r2, r3
 810a4be:	d802      	bhi.n	810a4c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810a4c0:	4a1f      	ldr	r2, [pc, #124]	@ (810a540 <prvAddNewTaskToReadyList+0xc8>)
 810a4c2:	687b      	ldr	r3, [r7, #4]
 810a4c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810a4c6:	4b20      	ldr	r3, [pc, #128]	@ (810a548 <prvAddNewTaskToReadyList+0xd0>)
 810a4c8:	681b      	ldr	r3, [r3, #0]
 810a4ca:	3301      	adds	r3, #1
 810a4cc:	4a1e      	ldr	r2, [pc, #120]	@ (810a548 <prvAddNewTaskToReadyList+0xd0>)
 810a4ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810a4d0:	4b1d      	ldr	r3, [pc, #116]	@ (810a548 <prvAddNewTaskToReadyList+0xd0>)
 810a4d2:	681a      	ldr	r2, [r3, #0]
 810a4d4:	687b      	ldr	r3, [r7, #4]
 810a4d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810a4d8:	687b      	ldr	r3, [r7, #4]
 810a4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a4dc:	4b1b      	ldr	r3, [pc, #108]	@ (810a54c <prvAddNewTaskToReadyList+0xd4>)
 810a4de:	681b      	ldr	r3, [r3, #0]
 810a4e0:	429a      	cmp	r2, r3
 810a4e2:	d903      	bls.n	810a4ec <prvAddNewTaskToReadyList+0x74>
 810a4e4:	687b      	ldr	r3, [r7, #4]
 810a4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a4e8:	4a18      	ldr	r2, [pc, #96]	@ (810a54c <prvAddNewTaskToReadyList+0xd4>)
 810a4ea:	6013      	str	r3, [r2, #0]
 810a4ec:	687b      	ldr	r3, [r7, #4]
 810a4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a4f0:	4613      	mov	r3, r2
 810a4f2:	009b      	lsls	r3, r3, #2
 810a4f4:	4413      	add	r3, r2
 810a4f6:	009b      	lsls	r3, r3, #2
 810a4f8:	4a15      	ldr	r2, [pc, #84]	@ (810a550 <prvAddNewTaskToReadyList+0xd8>)
 810a4fa:	441a      	add	r2, r3
 810a4fc:	687b      	ldr	r3, [r7, #4]
 810a4fe:	3304      	adds	r3, #4
 810a500:	4619      	mov	r1, r3
 810a502:	4610      	mov	r0, r2
 810a504:	f7fe fddb 	bl	81090be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810a508:	f7fe ffc0 	bl	810948c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810a50c:	4b0d      	ldr	r3, [pc, #52]	@ (810a544 <prvAddNewTaskToReadyList+0xcc>)
 810a50e:	681b      	ldr	r3, [r3, #0]
 810a510:	2b00      	cmp	r3, #0
 810a512:	d00e      	beq.n	810a532 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810a514:	4b0a      	ldr	r3, [pc, #40]	@ (810a540 <prvAddNewTaskToReadyList+0xc8>)
 810a516:	681b      	ldr	r3, [r3, #0]
 810a518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a51e:	429a      	cmp	r2, r3
 810a520:	d207      	bcs.n	810a532 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810a522:	4b0c      	ldr	r3, [pc, #48]	@ (810a554 <prvAddNewTaskToReadyList+0xdc>)
 810a524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a528:	601a      	str	r2, [r3, #0]
 810a52a:	f3bf 8f4f 	dsb	sy
 810a52e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810a532:	bf00      	nop
 810a534:	3708      	adds	r7, #8
 810a536:	46bd      	mov	sp, r7
 810a538:	bd80      	pop	{r7, pc}
 810a53a:	bf00      	nop
 810a53c:	10004e10 	.word	0x10004e10
 810a540:	1000493c 	.word	0x1000493c
 810a544:	10004e1c 	.word	0x10004e1c
 810a548:	10004e2c 	.word	0x10004e2c
 810a54c:	10004e18 	.word	0x10004e18
 810a550:	10004940 	.word	0x10004940
 810a554:	e000ed04 	.word	0xe000ed04

0810a558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810a558:	b580      	push	{r7, lr}
 810a55a:	b084      	sub	sp, #16
 810a55c:	af00      	add	r7, sp, #0
 810a55e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810a560:	2300      	movs	r3, #0
 810a562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810a564:	687b      	ldr	r3, [r7, #4]
 810a566:	2b00      	cmp	r3, #0
 810a568:	d018      	beq.n	810a59c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810a56a:	4b14      	ldr	r3, [pc, #80]	@ (810a5bc <vTaskDelay+0x64>)
 810a56c:	681b      	ldr	r3, [r3, #0]
 810a56e:	2b00      	cmp	r3, #0
 810a570:	d00b      	beq.n	810a58a <vTaskDelay+0x32>
	__asm volatile
 810a572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a576:	f383 8811 	msr	BASEPRI, r3
 810a57a:	f3bf 8f6f 	isb	sy
 810a57e:	f3bf 8f4f 	dsb	sy
 810a582:	60bb      	str	r3, [r7, #8]
}
 810a584:	bf00      	nop
 810a586:	bf00      	nop
 810a588:	e7fd      	b.n	810a586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810a58a:	f000 f88b 	bl	810a6a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810a58e:	2100      	movs	r1, #0
 810a590:	6878      	ldr	r0, [r7, #4]
 810a592:	f000 fd1b 	bl	810afcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810a596:	f000 f893 	bl	810a6c0 <xTaskResumeAll>
 810a59a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810a59c:	68fb      	ldr	r3, [r7, #12]
 810a59e:	2b00      	cmp	r3, #0
 810a5a0:	d107      	bne.n	810a5b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810a5a2:	4b07      	ldr	r3, [pc, #28]	@ (810a5c0 <vTaskDelay+0x68>)
 810a5a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a5a8:	601a      	str	r2, [r3, #0]
 810a5aa:	f3bf 8f4f 	dsb	sy
 810a5ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810a5b2:	bf00      	nop
 810a5b4:	3710      	adds	r7, #16
 810a5b6:	46bd      	mov	sp, r7
 810a5b8:	bd80      	pop	{r7, pc}
 810a5ba:	bf00      	nop
 810a5bc:	10004e38 	.word	0x10004e38
 810a5c0:	e000ed04 	.word	0xe000ed04

0810a5c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810a5c4:	b580      	push	{r7, lr}
 810a5c6:	b08a      	sub	sp, #40	@ 0x28
 810a5c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810a5ca:	2300      	movs	r3, #0
 810a5cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810a5ce:	2300      	movs	r3, #0
 810a5d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810a5d2:	463a      	mov	r2, r7
 810a5d4:	1d39      	adds	r1, r7, #4
 810a5d6:	f107 0308 	add.w	r3, r7, #8
 810a5da:	4618      	mov	r0, r3
 810a5dc:	f7fe fb20 	bl	8108c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810a5e0:	6839      	ldr	r1, [r7, #0]
 810a5e2:	687b      	ldr	r3, [r7, #4]
 810a5e4:	68ba      	ldr	r2, [r7, #8]
 810a5e6:	9202      	str	r2, [sp, #8]
 810a5e8:	9301      	str	r3, [sp, #4]
 810a5ea:	2300      	movs	r3, #0
 810a5ec:	9300      	str	r3, [sp, #0]
 810a5ee:	2300      	movs	r3, #0
 810a5f0:	460a      	mov	r2, r1
 810a5f2:	4924      	ldr	r1, [pc, #144]	@ (810a684 <vTaskStartScheduler+0xc0>)
 810a5f4:	4824      	ldr	r0, [pc, #144]	@ (810a688 <vTaskStartScheduler+0xc4>)
 810a5f6:	f7ff fdf1 	bl	810a1dc <xTaskCreateStatic>
 810a5fa:	4603      	mov	r3, r0
 810a5fc:	4a23      	ldr	r2, [pc, #140]	@ (810a68c <vTaskStartScheduler+0xc8>)
 810a5fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810a600:	4b22      	ldr	r3, [pc, #136]	@ (810a68c <vTaskStartScheduler+0xc8>)
 810a602:	681b      	ldr	r3, [r3, #0]
 810a604:	2b00      	cmp	r3, #0
 810a606:	d002      	beq.n	810a60e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810a608:	2301      	movs	r3, #1
 810a60a:	617b      	str	r3, [r7, #20]
 810a60c:	e001      	b.n	810a612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810a60e:	2300      	movs	r3, #0
 810a610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810a612:	697b      	ldr	r3, [r7, #20]
 810a614:	2b01      	cmp	r3, #1
 810a616:	d102      	bne.n	810a61e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810a618:	f000 fd2c 	bl	810b074 <xTimerCreateTimerTask>
 810a61c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810a61e:	697b      	ldr	r3, [r7, #20]
 810a620:	2b01      	cmp	r3, #1
 810a622:	d11b      	bne.n	810a65c <vTaskStartScheduler+0x98>
	__asm volatile
 810a624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a628:	f383 8811 	msr	BASEPRI, r3
 810a62c:	f3bf 8f6f 	isb	sy
 810a630:	f3bf 8f4f 	dsb	sy
 810a634:	613b      	str	r3, [r7, #16]
}
 810a636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810a638:	4b15      	ldr	r3, [pc, #84]	@ (810a690 <vTaskStartScheduler+0xcc>)
 810a63a:	681b      	ldr	r3, [r3, #0]
 810a63c:	3354      	adds	r3, #84	@ 0x54
 810a63e:	4a15      	ldr	r2, [pc, #84]	@ (810a694 <vTaskStartScheduler+0xd0>)
 810a640:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810a642:	4b15      	ldr	r3, [pc, #84]	@ (810a698 <vTaskStartScheduler+0xd4>)
 810a644:	f04f 32ff 	mov.w	r2, #4294967295
 810a648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810a64a:	4b14      	ldr	r3, [pc, #80]	@ (810a69c <vTaskStartScheduler+0xd8>)
 810a64c:	2201      	movs	r2, #1
 810a64e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810a650:	4b13      	ldr	r3, [pc, #76]	@ (810a6a0 <vTaskStartScheduler+0xdc>)
 810a652:	2200      	movs	r2, #0
 810a654:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810a656:	f7fe fe43 	bl	81092e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810a65a:	e00f      	b.n	810a67c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810a65c:	697b      	ldr	r3, [r7, #20]
 810a65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a662:	d10b      	bne.n	810a67c <vTaskStartScheduler+0xb8>
	__asm volatile
 810a664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a668:	f383 8811 	msr	BASEPRI, r3
 810a66c:	f3bf 8f6f 	isb	sy
 810a670:	f3bf 8f4f 	dsb	sy
 810a674:	60fb      	str	r3, [r7, #12]
}
 810a676:	bf00      	nop
 810a678:	bf00      	nop
 810a67a:	e7fd      	b.n	810a678 <vTaskStartScheduler+0xb4>
}
 810a67c:	bf00      	nop
 810a67e:	3718      	adds	r7, #24
 810a680:	46bd      	mov	sp, r7
 810a682:	bd80      	pop	{r7, pc}
 810a684:	0810c020 	.word	0x0810c020
 810a688:	0810acf9 	.word	0x0810acf9
 810a68c:	10004e34 	.word	0x10004e34
 810a690:	1000493c 	.word	0x1000493c
 810a694:	1000001c 	.word	0x1000001c
 810a698:	10004e30 	.word	0x10004e30
 810a69c:	10004e1c 	.word	0x10004e1c
 810a6a0:	10004e14 	.word	0x10004e14

0810a6a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a6a4:	b480      	push	{r7}
 810a6a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810a6a8:	4b04      	ldr	r3, [pc, #16]	@ (810a6bc <vTaskSuspendAll+0x18>)
 810a6aa:	681b      	ldr	r3, [r3, #0]
 810a6ac:	3301      	adds	r3, #1
 810a6ae:	4a03      	ldr	r2, [pc, #12]	@ (810a6bc <vTaskSuspendAll+0x18>)
 810a6b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810a6b2:	bf00      	nop
 810a6b4:	46bd      	mov	sp, r7
 810a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6ba:	4770      	bx	lr
 810a6bc:	10004e38 	.word	0x10004e38

0810a6c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a6c0:	b580      	push	{r7, lr}
 810a6c2:	b084      	sub	sp, #16
 810a6c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a6c6:	2300      	movs	r3, #0
 810a6c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a6ca:	2300      	movs	r3, #0
 810a6cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a6ce:	4b42      	ldr	r3, [pc, #264]	@ (810a7d8 <xTaskResumeAll+0x118>)
 810a6d0:	681b      	ldr	r3, [r3, #0]
 810a6d2:	2b00      	cmp	r3, #0
 810a6d4:	d10b      	bne.n	810a6ee <xTaskResumeAll+0x2e>
	__asm volatile
 810a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a6da:	f383 8811 	msr	BASEPRI, r3
 810a6de:	f3bf 8f6f 	isb	sy
 810a6e2:	f3bf 8f4f 	dsb	sy
 810a6e6:	603b      	str	r3, [r7, #0]
}
 810a6e8:	bf00      	nop
 810a6ea:	bf00      	nop
 810a6ec:	e7fd      	b.n	810a6ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a6ee:	f7fe fe9b 	bl	8109428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a6f2:	4b39      	ldr	r3, [pc, #228]	@ (810a7d8 <xTaskResumeAll+0x118>)
 810a6f4:	681b      	ldr	r3, [r3, #0]
 810a6f6:	3b01      	subs	r3, #1
 810a6f8:	4a37      	ldr	r2, [pc, #220]	@ (810a7d8 <xTaskResumeAll+0x118>)
 810a6fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a6fc:	4b36      	ldr	r3, [pc, #216]	@ (810a7d8 <xTaskResumeAll+0x118>)
 810a6fe:	681b      	ldr	r3, [r3, #0]
 810a700:	2b00      	cmp	r3, #0
 810a702:	d162      	bne.n	810a7ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a704:	4b35      	ldr	r3, [pc, #212]	@ (810a7dc <xTaskResumeAll+0x11c>)
 810a706:	681b      	ldr	r3, [r3, #0]
 810a708:	2b00      	cmp	r3, #0
 810a70a:	d05e      	beq.n	810a7ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a70c:	e02f      	b.n	810a76e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a70e:	4b34      	ldr	r3, [pc, #208]	@ (810a7e0 <xTaskResumeAll+0x120>)
 810a710:	68db      	ldr	r3, [r3, #12]
 810a712:	68db      	ldr	r3, [r3, #12]
 810a714:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a716:	68fb      	ldr	r3, [r7, #12]
 810a718:	3318      	adds	r3, #24
 810a71a:	4618      	mov	r0, r3
 810a71c:	f7fe fd2c 	bl	8109178 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a720:	68fb      	ldr	r3, [r7, #12]
 810a722:	3304      	adds	r3, #4
 810a724:	4618      	mov	r0, r3
 810a726:	f7fe fd27 	bl	8109178 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a72a:	68fb      	ldr	r3, [r7, #12]
 810a72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a72e:	4b2d      	ldr	r3, [pc, #180]	@ (810a7e4 <xTaskResumeAll+0x124>)
 810a730:	681b      	ldr	r3, [r3, #0]
 810a732:	429a      	cmp	r2, r3
 810a734:	d903      	bls.n	810a73e <xTaskResumeAll+0x7e>
 810a736:	68fb      	ldr	r3, [r7, #12]
 810a738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a73a:	4a2a      	ldr	r2, [pc, #168]	@ (810a7e4 <xTaskResumeAll+0x124>)
 810a73c:	6013      	str	r3, [r2, #0]
 810a73e:	68fb      	ldr	r3, [r7, #12]
 810a740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a742:	4613      	mov	r3, r2
 810a744:	009b      	lsls	r3, r3, #2
 810a746:	4413      	add	r3, r2
 810a748:	009b      	lsls	r3, r3, #2
 810a74a:	4a27      	ldr	r2, [pc, #156]	@ (810a7e8 <xTaskResumeAll+0x128>)
 810a74c:	441a      	add	r2, r3
 810a74e:	68fb      	ldr	r3, [r7, #12]
 810a750:	3304      	adds	r3, #4
 810a752:	4619      	mov	r1, r3
 810a754:	4610      	mov	r0, r2
 810a756:	f7fe fcb2 	bl	81090be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a75a:	68fb      	ldr	r3, [r7, #12]
 810a75c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a75e:	4b23      	ldr	r3, [pc, #140]	@ (810a7ec <xTaskResumeAll+0x12c>)
 810a760:	681b      	ldr	r3, [r3, #0]
 810a762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a764:	429a      	cmp	r2, r3
 810a766:	d302      	bcc.n	810a76e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810a768:	4b21      	ldr	r3, [pc, #132]	@ (810a7f0 <xTaskResumeAll+0x130>)
 810a76a:	2201      	movs	r2, #1
 810a76c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a76e:	4b1c      	ldr	r3, [pc, #112]	@ (810a7e0 <xTaskResumeAll+0x120>)
 810a770:	681b      	ldr	r3, [r3, #0]
 810a772:	2b00      	cmp	r3, #0
 810a774:	d1cb      	bne.n	810a70e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a776:	68fb      	ldr	r3, [r7, #12]
 810a778:	2b00      	cmp	r3, #0
 810a77a:	d001      	beq.n	810a780 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a77c:	f000 fb78 	bl	810ae70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810a780:	4b1c      	ldr	r3, [pc, #112]	@ (810a7f4 <xTaskResumeAll+0x134>)
 810a782:	681b      	ldr	r3, [r3, #0]
 810a784:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810a786:	687b      	ldr	r3, [r7, #4]
 810a788:	2b00      	cmp	r3, #0
 810a78a:	d010      	beq.n	810a7ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a78c:	f000 f858 	bl	810a840 <xTaskIncrementTick>
 810a790:	4603      	mov	r3, r0
 810a792:	2b00      	cmp	r3, #0
 810a794:	d002      	beq.n	810a79c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810a796:	4b16      	ldr	r3, [pc, #88]	@ (810a7f0 <xTaskResumeAll+0x130>)
 810a798:	2201      	movs	r2, #1
 810a79a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810a79c:	687b      	ldr	r3, [r7, #4]
 810a79e:	3b01      	subs	r3, #1
 810a7a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810a7a2:	687b      	ldr	r3, [r7, #4]
 810a7a4:	2b00      	cmp	r3, #0
 810a7a6:	d1f1      	bne.n	810a78c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810a7a8:	4b12      	ldr	r3, [pc, #72]	@ (810a7f4 <xTaskResumeAll+0x134>)
 810a7aa:	2200      	movs	r2, #0
 810a7ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a7ae:	4b10      	ldr	r3, [pc, #64]	@ (810a7f0 <xTaskResumeAll+0x130>)
 810a7b0:	681b      	ldr	r3, [r3, #0]
 810a7b2:	2b00      	cmp	r3, #0
 810a7b4:	d009      	beq.n	810a7ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a7b6:	2301      	movs	r3, #1
 810a7b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a7ba:	4b0f      	ldr	r3, [pc, #60]	@ (810a7f8 <xTaskResumeAll+0x138>)
 810a7bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a7c0:	601a      	str	r2, [r3, #0]
 810a7c2:	f3bf 8f4f 	dsb	sy
 810a7c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a7ca:	f7fe fe5f 	bl	810948c <vPortExitCritical>

	return xAlreadyYielded;
 810a7ce:	68bb      	ldr	r3, [r7, #8]
}
 810a7d0:	4618      	mov	r0, r3
 810a7d2:	3710      	adds	r7, #16
 810a7d4:	46bd      	mov	sp, r7
 810a7d6:	bd80      	pop	{r7, pc}
 810a7d8:	10004e38 	.word	0x10004e38
 810a7dc:	10004e10 	.word	0x10004e10
 810a7e0:	10004dd0 	.word	0x10004dd0
 810a7e4:	10004e18 	.word	0x10004e18
 810a7e8:	10004940 	.word	0x10004940
 810a7ec:	1000493c 	.word	0x1000493c
 810a7f0:	10004e24 	.word	0x10004e24
 810a7f4:	10004e20 	.word	0x10004e20
 810a7f8:	e000ed04 	.word	0xe000ed04

0810a7fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810a7fc:	b480      	push	{r7}
 810a7fe:	b083      	sub	sp, #12
 810a800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810a802:	4b05      	ldr	r3, [pc, #20]	@ (810a818 <xTaskGetTickCount+0x1c>)
 810a804:	681b      	ldr	r3, [r3, #0]
 810a806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810a808:	687b      	ldr	r3, [r7, #4]
}
 810a80a:	4618      	mov	r0, r3
 810a80c:	370c      	adds	r7, #12
 810a80e:	46bd      	mov	sp, r7
 810a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a814:	4770      	bx	lr
 810a816:	bf00      	nop
 810a818:	10004e14 	.word	0x10004e14

0810a81c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810a81c:	b580      	push	{r7, lr}
 810a81e:	b082      	sub	sp, #8
 810a820:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a822:	f7fe fee1 	bl	81095e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810a826:	2300      	movs	r3, #0
 810a828:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810a82a:	4b04      	ldr	r3, [pc, #16]	@ (810a83c <xTaskGetTickCountFromISR+0x20>)
 810a82c:	681b      	ldr	r3, [r3, #0]
 810a82e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a830:	683b      	ldr	r3, [r7, #0]
}
 810a832:	4618      	mov	r0, r3
 810a834:	3708      	adds	r7, #8
 810a836:	46bd      	mov	sp, r7
 810a838:	bd80      	pop	{r7, pc}
 810a83a:	bf00      	nop
 810a83c:	10004e14 	.word	0x10004e14

0810a840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a840:	b580      	push	{r7, lr}
 810a842:	b086      	sub	sp, #24
 810a844:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a846:	2300      	movs	r3, #0
 810a848:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a84a:	4b4f      	ldr	r3, [pc, #316]	@ (810a988 <xTaskIncrementTick+0x148>)
 810a84c:	681b      	ldr	r3, [r3, #0]
 810a84e:	2b00      	cmp	r3, #0
 810a850:	f040 8090 	bne.w	810a974 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a854:	4b4d      	ldr	r3, [pc, #308]	@ (810a98c <xTaskIncrementTick+0x14c>)
 810a856:	681b      	ldr	r3, [r3, #0]
 810a858:	3301      	adds	r3, #1
 810a85a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a85c:	4a4b      	ldr	r2, [pc, #300]	@ (810a98c <xTaskIncrementTick+0x14c>)
 810a85e:	693b      	ldr	r3, [r7, #16]
 810a860:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a862:	693b      	ldr	r3, [r7, #16]
 810a864:	2b00      	cmp	r3, #0
 810a866:	d121      	bne.n	810a8ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810a868:	4b49      	ldr	r3, [pc, #292]	@ (810a990 <xTaskIncrementTick+0x150>)
 810a86a:	681b      	ldr	r3, [r3, #0]
 810a86c:	681b      	ldr	r3, [r3, #0]
 810a86e:	2b00      	cmp	r3, #0
 810a870:	d00b      	beq.n	810a88a <xTaskIncrementTick+0x4a>
	__asm volatile
 810a872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a876:	f383 8811 	msr	BASEPRI, r3
 810a87a:	f3bf 8f6f 	isb	sy
 810a87e:	f3bf 8f4f 	dsb	sy
 810a882:	603b      	str	r3, [r7, #0]
}
 810a884:	bf00      	nop
 810a886:	bf00      	nop
 810a888:	e7fd      	b.n	810a886 <xTaskIncrementTick+0x46>
 810a88a:	4b41      	ldr	r3, [pc, #260]	@ (810a990 <xTaskIncrementTick+0x150>)
 810a88c:	681b      	ldr	r3, [r3, #0]
 810a88e:	60fb      	str	r3, [r7, #12]
 810a890:	4b40      	ldr	r3, [pc, #256]	@ (810a994 <xTaskIncrementTick+0x154>)
 810a892:	681b      	ldr	r3, [r3, #0]
 810a894:	4a3e      	ldr	r2, [pc, #248]	@ (810a990 <xTaskIncrementTick+0x150>)
 810a896:	6013      	str	r3, [r2, #0]
 810a898:	4a3e      	ldr	r2, [pc, #248]	@ (810a994 <xTaskIncrementTick+0x154>)
 810a89a:	68fb      	ldr	r3, [r7, #12]
 810a89c:	6013      	str	r3, [r2, #0]
 810a89e:	4b3e      	ldr	r3, [pc, #248]	@ (810a998 <xTaskIncrementTick+0x158>)
 810a8a0:	681b      	ldr	r3, [r3, #0]
 810a8a2:	3301      	adds	r3, #1
 810a8a4:	4a3c      	ldr	r2, [pc, #240]	@ (810a998 <xTaskIncrementTick+0x158>)
 810a8a6:	6013      	str	r3, [r2, #0]
 810a8a8:	f000 fae2 	bl	810ae70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a8ac:	4b3b      	ldr	r3, [pc, #236]	@ (810a99c <xTaskIncrementTick+0x15c>)
 810a8ae:	681b      	ldr	r3, [r3, #0]
 810a8b0:	693a      	ldr	r2, [r7, #16]
 810a8b2:	429a      	cmp	r2, r3
 810a8b4:	d349      	bcc.n	810a94a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a8b6:	4b36      	ldr	r3, [pc, #216]	@ (810a990 <xTaskIncrementTick+0x150>)
 810a8b8:	681b      	ldr	r3, [r3, #0]
 810a8ba:	681b      	ldr	r3, [r3, #0]
 810a8bc:	2b00      	cmp	r3, #0
 810a8be:	d104      	bne.n	810a8ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a8c0:	4b36      	ldr	r3, [pc, #216]	@ (810a99c <xTaskIncrementTick+0x15c>)
 810a8c2:	f04f 32ff 	mov.w	r2, #4294967295
 810a8c6:	601a      	str	r2, [r3, #0]
					break;
 810a8c8:	e03f      	b.n	810a94a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a8ca:	4b31      	ldr	r3, [pc, #196]	@ (810a990 <xTaskIncrementTick+0x150>)
 810a8cc:	681b      	ldr	r3, [r3, #0]
 810a8ce:	68db      	ldr	r3, [r3, #12]
 810a8d0:	68db      	ldr	r3, [r3, #12]
 810a8d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a8d4:	68bb      	ldr	r3, [r7, #8]
 810a8d6:	685b      	ldr	r3, [r3, #4]
 810a8d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a8da:	693a      	ldr	r2, [r7, #16]
 810a8dc:	687b      	ldr	r3, [r7, #4]
 810a8de:	429a      	cmp	r2, r3
 810a8e0:	d203      	bcs.n	810a8ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a8e2:	4a2e      	ldr	r2, [pc, #184]	@ (810a99c <xTaskIncrementTick+0x15c>)
 810a8e4:	687b      	ldr	r3, [r7, #4]
 810a8e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a8e8:	e02f      	b.n	810a94a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a8ea:	68bb      	ldr	r3, [r7, #8]
 810a8ec:	3304      	adds	r3, #4
 810a8ee:	4618      	mov	r0, r3
 810a8f0:	f7fe fc42 	bl	8109178 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a8f4:	68bb      	ldr	r3, [r7, #8]
 810a8f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a8f8:	2b00      	cmp	r3, #0
 810a8fa:	d004      	beq.n	810a906 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a8fc:	68bb      	ldr	r3, [r7, #8]
 810a8fe:	3318      	adds	r3, #24
 810a900:	4618      	mov	r0, r3
 810a902:	f7fe fc39 	bl	8109178 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a906:	68bb      	ldr	r3, [r7, #8]
 810a908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a90a:	4b25      	ldr	r3, [pc, #148]	@ (810a9a0 <xTaskIncrementTick+0x160>)
 810a90c:	681b      	ldr	r3, [r3, #0]
 810a90e:	429a      	cmp	r2, r3
 810a910:	d903      	bls.n	810a91a <xTaskIncrementTick+0xda>
 810a912:	68bb      	ldr	r3, [r7, #8]
 810a914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a916:	4a22      	ldr	r2, [pc, #136]	@ (810a9a0 <xTaskIncrementTick+0x160>)
 810a918:	6013      	str	r3, [r2, #0]
 810a91a:	68bb      	ldr	r3, [r7, #8]
 810a91c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a91e:	4613      	mov	r3, r2
 810a920:	009b      	lsls	r3, r3, #2
 810a922:	4413      	add	r3, r2
 810a924:	009b      	lsls	r3, r3, #2
 810a926:	4a1f      	ldr	r2, [pc, #124]	@ (810a9a4 <xTaskIncrementTick+0x164>)
 810a928:	441a      	add	r2, r3
 810a92a:	68bb      	ldr	r3, [r7, #8]
 810a92c:	3304      	adds	r3, #4
 810a92e:	4619      	mov	r1, r3
 810a930:	4610      	mov	r0, r2
 810a932:	f7fe fbc4 	bl	81090be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a936:	68bb      	ldr	r3, [r7, #8]
 810a938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a93a:	4b1b      	ldr	r3, [pc, #108]	@ (810a9a8 <xTaskIncrementTick+0x168>)
 810a93c:	681b      	ldr	r3, [r3, #0]
 810a93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a940:	429a      	cmp	r2, r3
 810a942:	d3b8      	bcc.n	810a8b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810a944:	2301      	movs	r3, #1
 810a946:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a948:	e7b5      	b.n	810a8b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a94a:	4b17      	ldr	r3, [pc, #92]	@ (810a9a8 <xTaskIncrementTick+0x168>)
 810a94c:	681b      	ldr	r3, [r3, #0]
 810a94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810a950:	4914      	ldr	r1, [pc, #80]	@ (810a9a4 <xTaskIncrementTick+0x164>)
 810a952:	4613      	mov	r3, r2
 810a954:	009b      	lsls	r3, r3, #2
 810a956:	4413      	add	r3, r2
 810a958:	009b      	lsls	r3, r3, #2
 810a95a:	440b      	add	r3, r1
 810a95c:	681b      	ldr	r3, [r3, #0]
 810a95e:	2b01      	cmp	r3, #1
 810a960:	d901      	bls.n	810a966 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810a962:	2301      	movs	r3, #1
 810a964:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810a966:	4b11      	ldr	r3, [pc, #68]	@ (810a9ac <xTaskIncrementTick+0x16c>)
 810a968:	681b      	ldr	r3, [r3, #0]
 810a96a:	2b00      	cmp	r3, #0
 810a96c:	d007      	beq.n	810a97e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810a96e:	2301      	movs	r3, #1
 810a970:	617b      	str	r3, [r7, #20]
 810a972:	e004      	b.n	810a97e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810a974:	4b0e      	ldr	r3, [pc, #56]	@ (810a9b0 <xTaskIncrementTick+0x170>)
 810a976:	681b      	ldr	r3, [r3, #0]
 810a978:	3301      	adds	r3, #1
 810a97a:	4a0d      	ldr	r2, [pc, #52]	@ (810a9b0 <xTaskIncrementTick+0x170>)
 810a97c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810a97e:	697b      	ldr	r3, [r7, #20]
}
 810a980:	4618      	mov	r0, r3
 810a982:	3718      	adds	r7, #24
 810a984:	46bd      	mov	sp, r7
 810a986:	bd80      	pop	{r7, pc}
 810a988:	10004e38 	.word	0x10004e38
 810a98c:	10004e14 	.word	0x10004e14
 810a990:	10004dc8 	.word	0x10004dc8
 810a994:	10004dcc 	.word	0x10004dcc
 810a998:	10004e28 	.word	0x10004e28
 810a99c:	10004e30 	.word	0x10004e30
 810a9a0:	10004e18 	.word	0x10004e18
 810a9a4:	10004940 	.word	0x10004940
 810a9a8:	1000493c 	.word	0x1000493c
 810a9ac:	10004e24 	.word	0x10004e24
 810a9b0:	10004e20 	.word	0x10004e20

0810a9b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a9b4:	b480      	push	{r7}
 810a9b6:	b085      	sub	sp, #20
 810a9b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a9ba:	4b2b      	ldr	r3, [pc, #172]	@ (810aa68 <vTaskSwitchContext+0xb4>)
 810a9bc:	681b      	ldr	r3, [r3, #0]
 810a9be:	2b00      	cmp	r3, #0
 810a9c0:	d003      	beq.n	810a9ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a9c2:	4b2a      	ldr	r3, [pc, #168]	@ (810aa6c <vTaskSwitchContext+0xb8>)
 810a9c4:	2201      	movs	r2, #1
 810a9c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a9c8:	e047      	b.n	810aa5a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810a9ca:	4b28      	ldr	r3, [pc, #160]	@ (810aa6c <vTaskSwitchContext+0xb8>)
 810a9cc:	2200      	movs	r2, #0
 810a9ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a9d0:	4b27      	ldr	r3, [pc, #156]	@ (810aa70 <vTaskSwitchContext+0xbc>)
 810a9d2:	681b      	ldr	r3, [r3, #0]
 810a9d4:	60fb      	str	r3, [r7, #12]
 810a9d6:	e011      	b.n	810a9fc <vTaskSwitchContext+0x48>
 810a9d8:	68fb      	ldr	r3, [r7, #12]
 810a9da:	2b00      	cmp	r3, #0
 810a9dc:	d10b      	bne.n	810a9f6 <vTaskSwitchContext+0x42>
	__asm volatile
 810a9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a9e2:	f383 8811 	msr	BASEPRI, r3
 810a9e6:	f3bf 8f6f 	isb	sy
 810a9ea:	f3bf 8f4f 	dsb	sy
 810a9ee:	607b      	str	r3, [r7, #4]
}
 810a9f0:	bf00      	nop
 810a9f2:	bf00      	nop
 810a9f4:	e7fd      	b.n	810a9f2 <vTaskSwitchContext+0x3e>
 810a9f6:	68fb      	ldr	r3, [r7, #12]
 810a9f8:	3b01      	subs	r3, #1
 810a9fa:	60fb      	str	r3, [r7, #12]
 810a9fc:	491d      	ldr	r1, [pc, #116]	@ (810aa74 <vTaskSwitchContext+0xc0>)
 810a9fe:	68fa      	ldr	r2, [r7, #12]
 810aa00:	4613      	mov	r3, r2
 810aa02:	009b      	lsls	r3, r3, #2
 810aa04:	4413      	add	r3, r2
 810aa06:	009b      	lsls	r3, r3, #2
 810aa08:	440b      	add	r3, r1
 810aa0a:	681b      	ldr	r3, [r3, #0]
 810aa0c:	2b00      	cmp	r3, #0
 810aa0e:	d0e3      	beq.n	810a9d8 <vTaskSwitchContext+0x24>
 810aa10:	68fa      	ldr	r2, [r7, #12]
 810aa12:	4613      	mov	r3, r2
 810aa14:	009b      	lsls	r3, r3, #2
 810aa16:	4413      	add	r3, r2
 810aa18:	009b      	lsls	r3, r3, #2
 810aa1a:	4a16      	ldr	r2, [pc, #88]	@ (810aa74 <vTaskSwitchContext+0xc0>)
 810aa1c:	4413      	add	r3, r2
 810aa1e:	60bb      	str	r3, [r7, #8]
 810aa20:	68bb      	ldr	r3, [r7, #8]
 810aa22:	685b      	ldr	r3, [r3, #4]
 810aa24:	685a      	ldr	r2, [r3, #4]
 810aa26:	68bb      	ldr	r3, [r7, #8]
 810aa28:	605a      	str	r2, [r3, #4]
 810aa2a:	68bb      	ldr	r3, [r7, #8]
 810aa2c:	685a      	ldr	r2, [r3, #4]
 810aa2e:	68bb      	ldr	r3, [r7, #8]
 810aa30:	3308      	adds	r3, #8
 810aa32:	429a      	cmp	r2, r3
 810aa34:	d104      	bne.n	810aa40 <vTaskSwitchContext+0x8c>
 810aa36:	68bb      	ldr	r3, [r7, #8]
 810aa38:	685b      	ldr	r3, [r3, #4]
 810aa3a:	685a      	ldr	r2, [r3, #4]
 810aa3c:	68bb      	ldr	r3, [r7, #8]
 810aa3e:	605a      	str	r2, [r3, #4]
 810aa40:	68bb      	ldr	r3, [r7, #8]
 810aa42:	685b      	ldr	r3, [r3, #4]
 810aa44:	68db      	ldr	r3, [r3, #12]
 810aa46:	4a0c      	ldr	r2, [pc, #48]	@ (810aa78 <vTaskSwitchContext+0xc4>)
 810aa48:	6013      	str	r3, [r2, #0]
 810aa4a:	4a09      	ldr	r2, [pc, #36]	@ (810aa70 <vTaskSwitchContext+0xbc>)
 810aa4c:	68fb      	ldr	r3, [r7, #12]
 810aa4e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810aa50:	4b09      	ldr	r3, [pc, #36]	@ (810aa78 <vTaskSwitchContext+0xc4>)
 810aa52:	681b      	ldr	r3, [r3, #0]
 810aa54:	3354      	adds	r3, #84	@ 0x54
 810aa56:	4a09      	ldr	r2, [pc, #36]	@ (810aa7c <vTaskSwitchContext+0xc8>)
 810aa58:	6013      	str	r3, [r2, #0]
}
 810aa5a:	bf00      	nop
 810aa5c:	3714      	adds	r7, #20
 810aa5e:	46bd      	mov	sp, r7
 810aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa64:	4770      	bx	lr
 810aa66:	bf00      	nop
 810aa68:	10004e38 	.word	0x10004e38
 810aa6c:	10004e24 	.word	0x10004e24
 810aa70:	10004e18 	.word	0x10004e18
 810aa74:	10004940 	.word	0x10004940
 810aa78:	1000493c 	.word	0x1000493c
 810aa7c:	1000001c 	.word	0x1000001c

0810aa80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810aa80:	b580      	push	{r7, lr}
 810aa82:	b084      	sub	sp, #16
 810aa84:	af00      	add	r7, sp, #0
 810aa86:	6078      	str	r0, [r7, #4]
 810aa88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810aa8a:	687b      	ldr	r3, [r7, #4]
 810aa8c:	2b00      	cmp	r3, #0
 810aa8e:	d10b      	bne.n	810aaa8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810aa90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810aa94:	f383 8811 	msr	BASEPRI, r3
 810aa98:	f3bf 8f6f 	isb	sy
 810aa9c:	f3bf 8f4f 	dsb	sy
 810aaa0:	60fb      	str	r3, [r7, #12]
}
 810aaa2:	bf00      	nop
 810aaa4:	bf00      	nop
 810aaa6:	e7fd      	b.n	810aaa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810aaa8:	4b07      	ldr	r3, [pc, #28]	@ (810aac8 <vTaskPlaceOnEventList+0x48>)
 810aaaa:	681b      	ldr	r3, [r3, #0]
 810aaac:	3318      	adds	r3, #24
 810aaae:	4619      	mov	r1, r3
 810aab0:	6878      	ldr	r0, [r7, #4]
 810aab2:	f7fe fb28 	bl	8109106 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810aab6:	2101      	movs	r1, #1
 810aab8:	6838      	ldr	r0, [r7, #0]
 810aaba:	f000 fa87 	bl	810afcc <prvAddCurrentTaskToDelayedList>
}
 810aabe:	bf00      	nop
 810aac0:	3710      	adds	r7, #16
 810aac2:	46bd      	mov	sp, r7
 810aac4:	bd80      	pop	{r7, pc}
 810aac6:	bf00      	nop
 810aac8:	1000493c 	.word	0x1000493c

0810aacc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810aacc:	b580      	push	{r7, lr}
 810aace:	b086      	sub	sp, #24
 810aad0:	af00      	add	r7, sp, #0
 810aad2:	60f8      	str	r0, [r7, #12]
 810aad4:	60b9      	str	r1, [r7, #8]
 810aad6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810aad8:	68fb      	ldr	r3, [r7, #12]
 810aada:	2b00      	cmp	r3, #0
 810aadc:	d10b      	bne.n	810aaf6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810aae2:	f383 8811 	msr	BASEPRI, r3
 810aae6:	f3bf 8f6f 	isb	sy
 810aaea:	f3bf 8f4f 	dsb	sy
 810aaee:	617b      	str	r3, [r7, #20]
}
 810aaf0:	bf00      	nop
 810aaf2:	bf00      	nop
 810aaf4:	e7fd      	b.n	810aaf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810aaf6:	4b0a      	ldr	r3, [pc, #40]	@ (810ab20 <vTaskPlaceOnEventListRestricted+0x54>)
 810aaf8:	681b      	ldr	r3, [r3, #0]
 810aafa:	3318      	adds	r3, #24
 810aafc:	4619      	mov	r1, r3
 810aafe:	68f8      	ldr	r0, [r7, #12]
 810ab00:	f7fe fadd 	bl	81090be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810ab04:	687b      	ldr	r3, [r7, #4]
 810ab06:	2b00      	cmp	r3, #0
 810ab08:	d002      	beq.n	810ab10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810ab0a:	f04f 33ff 	mov.w	r3, #4294967295
 810ab0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810ab10:	6879      	ldr	r1, [r7, #4]
 810ab12:	68b8      	ldr	r0, [r7, #8]
 810ab14:	f000 fa5a 	bl	810afcc <prvAddCurrentTaskToDelayedList>
	}
 810ab18:	bf00      	nop
 810ab1a:	3718      	adds	r7, #24
 810ab1c:	46bd      	mov	sp, r7
 810ab1e:	bd80      	pop	{r7, pc}
 810ab20:	1000493c 	.word	0x1000493c

0810ab24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810ab24:	b580      	push	{r7, lr}
 810ab26:	b086      	sub	sp, #24
 810ab28:	af00      	add	r7, sp, #0
 810ab2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	68db      	ldr	r3, [r3, #12]
 810ab30:	68db      	ldr	r3, [r3, #12]
 810ab32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810ab34:	693b      	ldr	r3, [r7, #16]
 810ab36:	2b00      	cmp	r3, #0
 810ab38:	d10b      	bne.n	810ab52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810ab3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ab3e:	f383 8811 	msr	BASEPRI, r3
 810ab42:	f3bf 8f6f 	isb	sy
 810ab46:	f3bf 8f4f 	dsb	sy
 810ab4a:	60fb      	str	r3, [r7, #12]
}
 810ab4c:	bf00      	nop
 810ab4e:	bf00      	nop
 810ab50:	e7fd      	b.n	810ab4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810ab52:	693b      	ldr	r3, [r7, #16]
 810ab54:	3318      	adds	r3, #24
 810ab56:	4618      	mov	r0, r3
 810ab58:	f7fe fb0e 	bl	8109178 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ab5c:	4b1d      	ldr	r3, [pc, #116]	@ (810abd4 <xTaskRemoveFromEventList+0xb0>)
 810ab5e:	681b      	ldr	r3, [r3, #0]
 810ab60:	2b00      	cmp	r3, #0
 810ab62:	d11d      	bne.n	810aba0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810ab64:	693b      	ldr	r3, [r7, #16]
 810ab66:	3304      	adds	r3, #4
 810ab68:	4618      	mov	r0, r3
 810ab6a:	f7fe fb05 	bl	8109178 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810ab6e:	693b      	ldr	r3, [r7, #16]
 810ab70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ab72:	4b19      	ldr	r3, [pc, #100]	@ (810abd8 <xTaskRemoveFromEventList+0xb4>)
 810ab74:	681b      	ldr	r3, [r3, #0]
 810ab76:	429a      	cmp	r2, r3
 810ab78:	d903      	bls.n	810ab82 <xTaskRemoveFromEventList+0x5e>
 810ab7a:	693b      	ldr	r3, [r7, #16]
 810ab7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ab7e:	4a16      	ldr	r2, [pc, #88]	@ (810abd8 <xTaskRemoveFromEventList+0xb4>)
 810ab80:	6013      	str	r3, [r2, #0]
 810ab82:	693b      	ldr	r3, [r7, #16]
 810ab84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ab86:	4613      	mov	r3, r2
 810ab88:	009b      	lsls	r3, r3, #2
 810ab8a:	4413      	add	r3, r2
 810ab8c:	009b      	lsls	r3, r3, #2
 810ab8e:	4a13      	ldr	r2, [pc, #76]	@ (810abdc <xTaskRemoveFromEventList+0xb8>)
 810ab90:	441a      	add	r2, r3
 810ab92:	693b      	ldr	r3, [r7, #16]
 810ab94:	3304      	adds	r3, #4
 810ab96:	4619      	mov	r1, r3
 810ab98:	4610      	mov	r0, r2
 810ab9a:	f7fe fa90 	bl	81090be <vListInsertEnd>
 810ab9e:	e005      	b.n	810abac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810aba0:	693b      	ldr	r3, [r7, #16]
 810aba2:	3318      	adds	r3, #24
 810aba4:	4619      	mov	r1, r3
 810aba6:	480e      	ldr	r0, [pc, #56]	@ (810abe0 <xTaskRemoveFromEventList+0xbc>)
 810aba8:	f7fe fa89 	bl	81090be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810abac:	693b      	ldr	r3, [r7, #16]
 810abae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810abb0:	4b0c      	ldr	r3, [pc, #48]	@ (810abe4 <xTaskRemoveFromEventList+0xc0>)
 810abb2:	681b      	ldr	r3, [r3, #0]
 810abb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810abb6:	429a      	cmp	r2, r3
 810abb8:	d905      	bls.n	810abc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810abba:	2301      	movs	r3, #1
 810abbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810abbe:	4b0a      	ldr	r3, [pc, #40]	@ (810abe8 <xTaskRemoveFromEventList+0xc4>)
 810abc0:	2201      	movs	r2, #1
 810abc2:	601a      	str	r2, [r3, #0]
 810abc4:	e001      	b.n	810abca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810abc6:	2300      	movs	r3, #0
 810abc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810abca:	697b      	ldr	r3, [r7, #20]
}
 810abcc:	4618      	mov	r0, r3
 810abce:	3718      	adds	r7, #24
 810abd0:	46bd      	mov	sp, r7
 810abd2:	bd80      	pop	{r7, pc}
 810abd4:	10004e38 	.word	0x10004e38
 810abd8:	10004e18 	.word	0x10004e18
 810abdc:	10004940 	.word	0x10004940
 810abe0:	10004dd0 	.word	0x10004dd0
 810abe4:	1000493c 	.word	0x1000493c
 810abe8:	10004e24 	.word	0x10004e24

0810abec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810abec:	b480      	push	{r7}
 810abee:	b083      	sub	sp, #12
 810abf0:	af00      	add	r7, sp, #0
 810abf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810abf4:	4b06      	ldr	r3, [pc, #24]	@ (810ac10 <vTaskInternalSetTimeOutState+0x24>)
 810abf6:	681a      	ldr	r2, [r3, #0]
 810abf8:	687b      	ldr	r3, [r7, #4]
 810abfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810abfc:	4b05      	ldr	r3, [pc, #20]	@ (810ac14 <vTaskInternalSetTimeOutState+0x28>)
 810abfe:	681a      	ldr	r2, [r3, #0]
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	605a      	str	r2, [r3, #4]
}
 810ac04:	bf00      	nop
 810ac06:	370c      	adds	r7, #12
 810ac08:	46bd      	mov	sp, r7
 810ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac0e:	4770      	bx	lr
 810ac10:	10004e28 	.word	0x10004e28
 810ac14:	10004e14 	.word	0x10004e14

0810ac18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810ac18:	b580      	push	{r7, lr}
 810ac1a:	b088      	sub	sp, #32
 810ac1c:	af00      	add	r7, sp, #0
 810ac1e:	6078      	str	r0, [r7, #4]
 810ac20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810ac22:	687b      	ldr	r3, [r7, #4]
 810ac24:	2b00      	cmp	r3, #0
 810ac26:	d10b      	bne.n	810ac40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810ac28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ac2c:	f383 8811 	msr	BASEPRI, r3
 810ac30:	f3bf 8f6f 	isb	sy
 810ac34:	f3bf 8f4f 	dsb	sy
 810ac38:	613b      	str	r3, [r7, #16]
}
 810ac3a:	bf00      	nop
 810ac3c:	bf00      	nop
 810ac3e:	e7fd      	b.n	810ac3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810ac40:	683b      	ldr	r3, [r7, #0]
 810ac42:	2b00      	cmp	r3, #0
 810ac44:	d10b      	bne.n	810ac5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810ac46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ac4a:	f383 8811 	msr	BASEPRI, r3
 810ac4e:	f3bf 8f6f 	isb	sy
 810ac52:	f3bf 8f4f 	dsb	sy
 810ac56:	60fb      	str	r3, [r7, #12]
}
 810ac58:	bf00      	nop
 810ac5a:	bf00      	nop
 810ac5c:	e7fd      	b.n	810ac5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810ac5e:	f7fe fbe3 	bl	8109428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810ac62:	4b1d      	ldr	r3, [pc, #116]	@ (810acd8 <xTaskCheckForTimeOut+0xc0>)
 810ac64:	681b      	ldr	r3, [r3, #0]
 810ac66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810ac68:	687b      	ldr	r3, [r7, #4]
 810ac6a:	685b      	ldr	r3, [r3, #4]
 810ac6c:	69ba      	ldr	r2, [r7, #24]
 810ac6e:	1ad3      	subs	r3, r2, r3
 810ac70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810ac72:	683b      	ldr	r3, [r7, #0]
 810ac74:	681b      	ldr	r3, [r3, #0]
 810ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ac7a:	d102      	bne.n	810ac82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810ac7c:	2300      	movs	r3, #0
 810ac7e:	61fb      	str	r3, [r7, #28]
 810ac80:	e023      	b.n	810acca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810ac82:	687b      	ldr	r3, [r7, #4]
 810ac84:	681a      	ldr	r2, [r3, #0]
 810ac86:	4b15      	ldr	r3, [pc, #84]	@ (810acdc <xTaskCheckForTimeOut+0xc4>)
 810ac88:	681b      	ldr	r3, [r3, #0]
 810ac8a:	429a      	cmp	r2, r3
 810ac8c:	d007      	beq.n	810ac9e <xTaskCheckForTimeOut+0x86>
 810ac8e:	687b      	ldr	r3, [r7, #4]
 810ac90:	685b      	ldr	r3, [r3, #4]
 810ac92:	69ba      	ldr	r2, [r7, #24]
 810ac94:	429a      	cmp	r2, r3
 810ac96:	d302      	bcc.n	810ac9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810ac98:	2301      	movs	r3, #1
 810ac9a:	61fb      	str	r3, [r7, #28]
 810ac9c:	e015      	b.n	810acca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810ac9e:	683b      	ldr	r3, [r7, #0]
 810aca0:	681b      	ldr	r3, [r3, #0]
 810aca2:	697a      	ldr	r2, [r7, #20]
 810aca4:	429a      	cmp	r2, r3
 810aca6:	d20b      	bcs.n	810acc0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810aca8:	683b      	ldr	r3, [r7, #0]
 810acaa:	681a      	ldr	r2, [r3, #0]
 810acac:	697b      	ldr	r3, [r7, #20]
 810acae:	1ad2      	subs	r2, r2, r3
 810acb0:	683b      	ldr	r3, [r7, #0]
 810acb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810acb4:	6878      	ldr	r0, [r7, #4]
 810acb6:	f7ff ff99 	bl	810abec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810acba:	2300      	movs	r3, #0
 810acbc:	61fb      	str	r3, [r7, #28]
 810acbe:	e004      	b.n	810acca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810acc0:	683b      	ldr	r3, [r7, #0]
 810acc2:	2200      	movs	r2, #0
 810acc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810acc6:	2301      	movs	r3, #1
 810acc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810acca:	f7fe fbdf 	bl	810948c <vPortExitCritical>

	return xReturn;
 810acce:	69fb      	ldr	r3, [r7, #28]
}
 810acd0:	4618      	mov	r0, r3
 810acd2:	3720      	adds	r7, #32
 810acd4:	46bd      	mov	sp, r7
 810acd6:	bd80      	pop	{r7, pc}
 810acd8:	10004e14 	.word	0x10004e14
 810acdc:	10004e28 	.word	0x10004e28

0810ace0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810ace0:	b480      	push	{r7}
 810ace2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810ace4:	4b03      	ldr	r3, [pc, #12]	@ (810acf4 <vTaskMissedYield+0x14>)
 810ace6:	2201      	movs	r2, #1
 810ace8:	601a      	str	r2, [r3, #0]
}
 810acea:	bf00      	nop
 810acec:	46bd      	mov	sp, r7
 810acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acf2:	4770      	bx	lr
 810acf4:	10004e24 	.word	0x10004e24

0810acf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810acf8:	b580      	push	{r7, lr}
 810acfa:	b082      	sub	sp, #8
 810acfc:	af00      	add	r7, sp, #0
 810acfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810ad00:	f000 f852 	bl	810ada8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810ad04:	4b06      	ldr	r3, [pc, #24]	@ (810ad20 <prvIdleTask+0x28>)
 810ad06:	681b      	ldr	r3, [r3, #0]
 810ad08:	2b01      	cmp	r3, #1
 810ad0a:	d9f9      	bls.n	810ad00 <prvIdleTask+0x8>
			{
				taskYIELD();
 810ad0c:	4b05      	ldr	r3, [pc, #20]	@ (810ad24 <prvIdleTask+0x2c>)
 810ad0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ad12:	601a      	str	r2, [r3, #0]
 810ad14:	f3bf 8f4f 	dsb	sy
 810ad18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810ad1c:	e7f0      	b.n	810ad00 <prvIdleTask+0x8>
 810ad1e:	bf00      	nop
 810ad20:	10004940 	.word	0x10004940
 810ad24:	e000ed04 	.word	0xe000ed04

0810ad28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810ad28:	b580      	push	{r7, lr}
 810ad2a:	b082      	sub	sp, #8
 810ad2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ad2e:	2300      	movs	r3, #0
 810ad30:	607b      	str	r3, [r7, #4]
 810ad32:	e00c      	b.n	810ad4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810ad34:	687a      	ldr	r2, [r7, #4]
 810ad36:	4613      	mov	r3, r2
 810ad38:	009b      	lsls	r3, r3, #2
 810ad3a:	4413      	add	r3, r2
 810ad3c:	009b      	lsls	r3, r3, #2
 810ad3e:	4a12      	ldr	r2, [pc, #72]	@ (810ad88 <prvInitialiseTaskLists+0x60>)
 810ad40:	4413      	add	r3, r2
 810ad42:	4618      	mov	r0, r3
 810ad44:	f7fe f98e 	bl	8109064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810ad48:	687b      	ldr	r3, [r7, #4]
 810ad4a:	3301      	adds	r3, #1
 810ad4c:	607b      	str	r3, [r7, #4]
 810ad4e:	687b      	ldr	r3, [r7, #4]
 810ad50:	2b37      	cmp	r3, #55	@ 0x37
 810ad52:	d9ef      	bls.n	810ad34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810ad54:	480d      	ldr	r0, [pc, #52]	@ (810ad8c <prvInitialiseTaskLists+0x64>)
 810ad56:	f7fe f985 	bl	8109064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810ad5a:	480d      	ldr	r0, [pc, #52]	@ (810ad90 <prvInitialiseTaskLists+0x68>)
 810ad5c:	f7fe f982 	bl	8109064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810ad60:	480c      	ldr	r0, [pc, #48]	@ (810ad94 <prvInitialiseTaskLists+0x6c>)
 810ad62:	f7fe f97f 	bl	8109064 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810ad66:	480c      	ldr	r0, [pc, #48]	@ (810ad98 <prvInitialiseTaskLists+0x70>)
 810ad68:	f7fe f97c 	bl	8109064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810ad6c:	480b      	ldr	r0, [pc, #44]	@ (810ad9c <prvInitialiseTaskLists+0x74>)
 810ad6e:	f7fe f979 	bl	8109064 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810ad72:	4b0b      	ldr	r3, [pc, #44]	@ (810ada0 <prvInitialiseTaskLists+0x78>)
 810ad74:	4a05      	ldr	r2, [pc, #20]	@ (810ad8c <prvInitialiseTaskLists+0x64>)
 810ad76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810ad78:	4b0a      	ldr	r3, [pc, #40]	@ (810ada4 <prvInitialiseTaskLists+0x7c>)
 810ad7a:	4a05      	ldr	r2, [pc, #20]	@ (810ad90 <prvInitialiseTaskLists+0x68>)
 810ad7c:	601a      	str	r2, [r3, #0]
}
 810ad7e:	bf00      	nop
 810ad80:	3708      	adds	r7, #8
 810ad82:	46bd      	mov	sp, r7
 810ad84:	bd80      	pop	{r7, pc}
 810ad86:	bf00      	nop
 810ad88:	10004940 	.word	0x10004940
 810ad8c:	10004da0 	.word	0x10004da0
 810ad90:	10004db4 	.word	0x10004db4
 810ad94:	10004dd0 	.word	0x10004dd0
 810ad98:	10004de4 	.word	0x10004de4
 810ad9c:	10004dfc 	.word	0x10004dfc
 810ada0:	10004dc8 	.word	0x10004dc8
 810ada4:	10004dcc 	.word	0x10004dcc

0810ada8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810ada8:	b580      	push	{r7, lr}
 810adaa:	b082      	sub	sp, #8
 810adac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810adae:	e019      	b.n	810ade4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810adb0:	f7fe fb3a 	bl	8109428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810adb4:	4b10      	ldr	r3, [pc, #64]	@ (810adf8 <prvCheckTasksWaitingTermination+0x50>)
 810adb6:	68db      	ldr	r3, [r3, #12]
 810adb8:	68db      	ldr	r3, [r3, #12]
 810adba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810adbc:	687b      	ldr	r3, [r7, #4]
 810adbe:	3304      	adds	r3, #4
 810adc0:	4618      	mov	r0, r3
 810adc2:	f7fe f9d9 	bl	8109178 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810adc6:	4b0d      	ldr	r3, [pc, #52]	@ (810adfc <prvCheckTasksWaitingTermination+0x54>)
 810adc8:	681b      	ldr	r3, [r3, #0]
 810adca:	3b01      	subs	r3, #1
 810adcc:	4a0b      	ldr	r2, [pc, #44]	@ (810adfc <prvCheckTasksWaitingTermination+0x54>)
 810adce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810add0:	4b0b      	ldr	r3, [pc, #44]	@ (810ae00 <prvCheckTasksWaitingTermination+0x58>)
 810add2:	681b      	ldr	r3, [r3, #0]
 810add4:	3b01      	subs	r3, #1
 810add6:	4a0a      	ldr	r2, [pc, #40]	@ (810ae00 <prvCheckTasksWaitingTermination+0x58>)
 810add8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810adda:	f7fe fb57 	bl	810948c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810adde:	6878      	ldr	r0, [r7, #4]
 810ade0:	f000 f810 	bl	810ae04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810ade4:	4b06      	ldr	r3, [pc, #24]	@ (810ae00 <prvCheckTasksWaitingTermination+0x58>)
 810ade6:	681b      	ldr	r3, [r3, #0]
 810ade8:	2b00      	cmp	r3, #0
 810adea:	d1e1      	bne.n	810adb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810adec:	bf00      	nop
 810adee:	bf00      	nop
 810adf0:	3708      	adds	r7, #8
 810adf2:	46bd      	mov	sp, r7
 810adf4:	bd80      	pop	{r7, pc}
 810adf6:	bf00      	nop
 810adf8:	10004de4 	.word	0x10004de4
 810adfc:	10004e10 	.word	0x10004e10
 810ae00:	10004df8 	.word	0x10004df8

0810ae04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810ae04:	b580      	push	{r7, lr}
 810ae06:	b084      	sub	sp, #16
 810ae08:	af00      	add	r7, sp, #0
 810ae0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810ae0c:	687b      	ldr	r3, [r7, #4]
 810ae0e:	3354      	adds	r3, #84	@ 0x54
 810ae10:	4618      	mov	r0, r3
 810ae12:	f000 ffed 	bl	810bdf0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810ae16:	687b      	ldr	r3, [r7, #4]
 810ae18:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810ae1c:	2b00      	cmp	r3, #0
 810ae1e:	d108      	bne.n	810ae32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810ae20:	687b      	ldr	r3, [r7, #4]
 810ae22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810ae24:	4618      	mov	r0, r3
 810ae26:	f7fd fffd 	bl	8108e24 <vPortFree>
				vPortFree( pxTCB );
 810ae2a:	6878      	ldr	r0, [r7, #4]
 810ae2c:	f7fd fffa 	bl	8108e24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810ae30:	e019      	b.n	810ae66 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810ae32:	687b      	ldr	r3, [r7, #4]
 810ae34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810ae38:	2b01      	cmp	r3, #1
 810ae3a:	d103      	bne.n	810ae44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810ae3c:	6878      	ldr	r0, [r7, #4]
 810ae3e:	f7fd fff1 	bl	8108e24 <vPortFree>
	}
 810ae42:	e010      	b.n	810ae66 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810ae44:	687b      	ldr	r3, [r7, #4]
 810ae46:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810ae4a:	2b02      	cmp	r3, #2
 810ae4c:	d00b      	beq.n	810ae66 <prvDeleteTCB+0x62>
	__asm volatile
 810ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ae52:	f383 8811 	msr	BASEPRI, r3
 810ae56:	f3bf 8f6f 	isb	sy
 810ae5a:	f3bf 8f4f 	dsb	sy
 810ae5e:	60fb      	str	r3, [r7, #12]
}
 810ae60:	bf00      	nop
 810ae62:	bf00      	nop
 810ae64:	e7fd      	b.n	810ae62 <prvDeleteTCB+0x5e>
	}
 810ae66:	bf00      	nop
 810ae68:	3710      	adds	r7, #16
 810ae6a:	46bd      	mov	sp, r7
 810ae6c:	bd80      	pop	{r7, pc}
	...

0810ae70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810ae70:	b480      	push	{r7}
 810ae72:	b083      	sub	sp, #12
 810ae74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ae76:	4b0c      	ldr	r3, [pc, #48]	@ (810aea8 <prvResetNextTaskUnblockTime+0x38>)
 810ae78:	681b      	ldr	r3, [r3, #0]
 810ae7a:	681b      	ldr	r3, [r3, #0]
 810ae7c:	2b00      	cmp	r3, #0
 810ae7e:	d104      	bne.n	810ae8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810ae80:	4b0a      	ldr	r3, [pc, #40]	@ (810aeac <prvResetNextTaskUnblockTime+0x3c>)
 810ae82:	f04f 32ff 	mov.w	r2, #4294967295
 810ae86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810ae88:	e008      	b.n	810ae9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ae8a:	4b07      	ldr	r3, [pc, #28]	@ (810aea8 <prvResetNextTaskUnblockTime+0x38>)
 810ae8c:	681b      	ldr	r3, [r3, #0]
 810ae8e:	68db      	ldr	r3, [r3, #12]
 810ae90:	68db      	ldr	r3, [r3, #12]
 810ae92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810ae94:	687b      	ldr	r3, [r7, #4]
 810ae96:	685b      	ldr	r3, [r3, #4]
 810ae98:	4a04      	ldr	r2, [pc, #16]	@ (810aeac <prvResetNextTaskUnblockTime+0x3c>)
 810ae9a:	6013      	str	r3, [r2, #0]
}
 810ae9c:	bf00      	nop
 810ae9e:	370c      	adds	r7, #12
 810aea0:	46bd      	mov	sp, r7
 810aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aea6:	4770      	bx	lr
 810aea8:	10004dc8 	.word	0x10004dc8
 810aeac:	10004e30 	.word	0x10004e30

0810aeb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810aeb0:	b480      	push	{r7}
 810aeb2:	b083      	sub	sp, #12
 810aeb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810aeb6:	4b0b      	ldr	r3, [pc, #44]	@ (810aee4 <xTaskGetSchedulerState+0x34>)
 810aeb8:	681b      	ldr	r3, [r3, #0]
 810aeba:	2b00      	cmp	r3, #0
 810aebc:	d102      	bne.n	810aec4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810aebe:	2301      	movs	r3, #1
 810aec0:	607b      	str	r3, [r7, #4]
 810aec2:	e008      	b.n	810aed6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810aec4:	4b08      	ldr	r3, [pc, #32]	@ (810aee8 <xTaskGetSchedulerState+0x38>)
 810aec6:	681b      	ldr	r3, [r3, #0]
 810aec8:	2b00      	cmp	r3, #0
 810aeca:	d102      	bne.n	810aed2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810aecc:	2302      	movs	r3, #2
 810aece:	607b      	str	r3, [r7, #4]
 810aed0:	e001      	b.n	810aed6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810aed2:	2300      	movs	r3, #0
 810aed4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810aed6:	687b      	ldr	r3, [r7, #4]
	}
 810aed8:	4618      	mov	r0, r3
 810aeda:	370c      	adds	r7, #12
 810aedc:	46bd      	mov	sp, r7
 810aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aee2:	4770      	bx	lr
 810aee4:	10004e1c 	.word	0x10004e1c
 810aee8:	10004e38 	.word	0x10004e38

0810aeec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810aeec:	b580      	push	{r7, lr}
 810aeee:	b086      	sub	sp, #24
 810aef0:	af00      	add	r7, sp, #0
 810aef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810aef4:	687b      	ldr	r3, [r7, #4]
 810aef6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810aef8:	2300      	movs	r3, #0
 810aefa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810aefc:	687b      	ldr	r3, [r7, #4]
 810aefe:	2b00      	cmp	r3, #0
 810af00:	d058      	beq.n	810afb4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810af02:	4b2f      	ldr	r3, [pc, #188]	@ (810afc0 <xTaskPriorityDisinherit+0xd4>)
 810af04:	681b      	ldr	r3, [r3, #0]
 810af06:	693a      	ldr	r2, [r7, #16]
 810af08:	429a      	cmp	r2, r3
 810af0a:	d00b      	beq.n	810af24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810af0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810af10:	f383 8811 	msr	BASEPRI, r3
 810af14:	f3bf 8f6f 	isb	sy
 810af18:	f3bf 8f4f 	dsb	sy
 810af1c:	60fb      	str	r3, [r7, #12]
}
 810af1e:	bf00      	nop
 810af20:	bf00      	nop
 810af22:	e7fd      	b.n	810af20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810af24:	693b      	ldr	r3, [r7, #16]
 810af26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810af28:	2b00      	cmp	r3, #0
 810af2a:	d10b      	bne.n	810af44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810af2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810af30:	f383 8811 	msr	BASEPRI, r3
 810af34:	f3bf 8f6f 	isb	sy
 810af38:	f3bf 8f4f 	dsb	sy
 810af3c:	60bb      	str	r3, [r7, #8]
}
 810af3e:	bf00      	nop
 810af40:	bf00      	nop
 810af42:	e7fd      	b.n	810af40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810af44:	693b      	ldr	r3, [r7, #16]
 810af46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810af48:	1e5a      	subs	r2, r3, #1
 810af4a:	693b      	ldr	r3, [r7, #16]
 810af4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810af4e:	693b      	ldr	r3, [r7, #16]
 810af50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810af52:	693b      	ldr	r3, [r7, #16]
 810af54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810af56:	429a      	cmp	r2, r3
 810af58:	d02c      	beq.n	810afb4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810af5a:	693b      	ldr	r3, [r7, #16]
 810af5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810af5e:	2b00      	cmp	r3, #0
 810af60:	d128      	bne.n	810afb4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810af62:	693b      	ldr	r3, [r7, #16]
 810af64:	3304      	adds	r3, #4
 810af66:	4618      	mov	r0, r3
 810af68:	f7fe f906 	bl	8109178 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810af6c:	693b      	ldr	r3, [r7, #16]
 810af6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810af70:	693b      	ldr	r3, [r7, #16]
 810af72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810af74:	693b      	ldr	r3, [r7, #16]
 810af76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810af78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810af7c:	693b      	ldr	r3, [r7, #16]
 810af7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810af80:	693b      	ldr	r3, [r7, #16]
 810af82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810af84:	4b0f      	ldr	r3, [pc, #60]	@ (810afc4 <xTaskPriorityDisinherit+0xd8>)
 810af86:	681b      	ldr	r3, [r3, #0]
 810af88:	429a      	cmp	r2, r3
 810af8a:	d903      	bls.n	810af94 <xTaskPriorityDisinherit+0xa8>
 810af8c:	693b      	ldr	r3, [r7, #16]
 810af8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810af90:	4a0c      	ldr	r2, [pc, #48]	@ (810afc4 <xTaskPriorityDisinherit+0xd8>)
 810af92:	6013      	str	r3, [r2, #0]
 810af94:	693b      	ldr	r3, [r7, #16]
 810af96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810af98:	4613      	mov	r3, r2
 810af9a:	009b      	lsls	r3, r3, #2
 810af9c:	4413      	add	r3, r2
 810af9e:	009b      	lsls	r3, r3, #2
 810afa0:	4a09      	ldr	r2, [pc, #36]	@ (810afc8 <xTaskPriorityDisinherit+0xdc>)
 810afa2:	441a      	add	r2, r3
 810afa4:	693b      	ldr	r3, [r7, #16]
 810afa6:	3304      	adds	r3, #4
 810afa8:	4619      	mov	r1, r3
 810afaa:	4610      	mov	r0, r2
 810afac:	f7fe f887 	bl	81090be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810afb0:	2301      	movs	r3, #1
 810afb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810afb4:	697b      	ldr	r3, [r7, #20]
	}
 810afb6:	4618      	mov	r0, r3
 810afb8:	3718      	adds	r7, #24
 810afba:	46bd      	mov	sp, r7
 810afbc:	bd80      	pop	{r7, pc}
 810afbe:	bf00      	nop
 810afc0:	1000493c 	.word	0x1000493c
 810afc4:	10004e18 	.word	0x10004e18
 810afc8:	10004940 	.word	0x10004940

0810afcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810afcc:	b580      	push	{r7, lr}
 810afce:	b084      	sub	sp, #16
 810afd0:	af00      	add	r7, sp, #0
 810afd2:	6078      	str	r0, [r7, #4]
 810afd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810afd6:	4b21      	ldr	r3, [pc, #132]	@ (810b05c <prvAddCurrentTaskToDelayedList+0x90>)
 810afd8:	681b      	ldr	r3, [r3, #0]
 810afda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810afdc:	4b20      	ldr	r3, [pc, #128]	@ (810b060 <prvAddCurrentTaskToDelayedList+0x94>)
 810afde:	681b      	ldr	r3, [r3, #0]
 810afe0:	3304      	adds	r3, #4
 810afe2:	4618      	mov	r0, r3
 810afe4:	f7fe f8c8 	bl	8109178 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810afe8:	687b      	ldr	r3, [r7, #4]
 810afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 810afee:	d10a      	bne.n	810b006 <prvAddCurrentTaskToDelayedList+0x3a>
 810aff0:	683b      	ldr	r3, [r7, #0]
 810aff2:	2b00      	cmp	r3, #0
 810aff4:	d007      	beq.n	810b006 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810aff6:	4b1a      	ldr	r3, [pc, #104]	@ (810b060 <prvAddCurrentTaskToDelayedList+0x94>)
 810aff8:	681b      	ldr	r3, [r3, #0]
 810affa:	3304      	adds	r3, #4
 810affc:	4619      	mov	r1, r3
 810affe:	4819      	ldr	r0, [pc, #100]	@ (810b064 <prvAddCurrentTaskToDelayedList+0x98>)
 810b000:	f7fe f85d 	bl	81090be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810b004:	e026      	b.n	810b054 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810b006:	68fa      	ldr	r2, [r7, #12]
 810b008:	687b      	ldr	r3, [r7, #4]
 810b00a:	4413      	add	r3, r2
 810b00c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810b00e:	4b14      	ldr	r3, [pc, #80]	@ (810b060 <prvAddCurrentTaskToDelayedList+0x94>)
 810b010:	681b      	ldr	r3, [r3, #0]
 810b012:	68ba      	ldr	r2, [r7, #8]
 810b014:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810b016:	68ba      	ldr	r2, [r7, #8]
 810b018:	68fb      	ldr	r3, [r7, #12]
 810b01a:	429a      	cmp	r2, r3
 810b01c:	d209      	bcs.n	810b032 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b01e:	4b12      	ldr	r3, [pc, #72]	@ (810b068 <prvAddCurrentTaskToDelayedList+0x9c>)
 810b020:	681a      	ldr	r2, [r3, #0]
 810b022:	4b0f      	ldr	r3, [pc, #60]	@ (810b060 <prvAddCurrentTaskToDelayedList+0x94>)
 810b024:	681b      	ldr	r3, [r3, #0]
 810b026:	3304      	adds	r3, #4
 810b028:	4619      	mov	r1, r3
 810b02a:	4610      	mov	r0, r2
 810b02c:	f7fe f86b 	bl	8109106 <vListInsert>
}
 810b030:	e010      	b.n	810b054 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b032:	4b0e      	ldr	r3, [pc, #56]	@ (810b06c <prvAddCurrentTaskToDelayedList+0xa0>)
 810b034:	681a      	ldr	r2, [r3, #0]
 810b036:	4b0a      	ldr	r3, [pc, #40]	@ (810b060 <prvAddCurrentTaskToDelayedList+0x94>)
 810b038:	681b      	ldr	r3, [r3, #0]
 810b03a:	3304      	adds	r3, #4
 810b03c:	4619      	mov	r1, r3
 810b03e:	4610      	mov	r0, r2
 810b040:	f7fe f861 	bl	8109106 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810b044:	4b0a      	ldr	r3, [pc, #40]	@ (810b070 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b046:	681b      	ldr	r3, [r3, #0]
 810b048:	68ba      	ldr	r2, [r7, #8]
 810b04a:	429a      	cmp	r2, r3
 810b04c:	d202      	bcs.n	810b054 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810b04e:	4a08      	ldr	r2, [pc, #32]	@ (810b070 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b050:	68bb      	ldr	r3, [r7, #8]
 810b052:	6013      	str	r3, [r2, #0]
}
 810b054:	bf00      	nop
 810b056:	3710      	adds	r7, #16
 810b058:	46bd      	mov	sp, r7
 810b05a:	bd80      	pop	{r7, pc}
 810b05c:	10004e14 	.word	0x10004e14
 810b060:	1000493c 	.word	0x1000493c
 810b064:	10004dfc 	.word	0x10004dfc
 810b068:	10004dcc 	.word	0x10004dcc
 810b06c:	10004dc8 	.word	0x10004dc8
 810b070:	10004e30 	.word	0x10004e30

0810b074 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810b074:	b580      	push	{r7, lr}
 810b076:	b08a      	sub	sp, #40	@ 0x28
 810b078:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810b07a:	2300      	movs	r3, #0
 810b07c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810b07e:	f000 fb13 	bl	810b6a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810b082:	4b1d      	ldr	r3, [pc, #116]	@ (810b0f8 <xTimerCreateTimerTask+0x84>)
 810b084:	681b      	ldr	r3, [r3, #0]
 810b086:	2b00      	cmp	r3, #0
 810b088:	d021      	beq.n	810b0ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810b08a:	2300      	movs	r3, #0
 810b08c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810b08e:	2300      	movs	r3, #0
 810b090:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810b092:	1d3a      	adds	r2, r7, #4
 810b094:	f107 0108 	add.w	r1, r7, #8
 810b098:	f107 030c 	add.w	r3, r7, #12
 810b09c:	4618      	mov	r0, r3
 810b09e:	f7fd fdd9 	bl	8108c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810b0a2:	6879      	ldr	r1, [r7, #4]
 810b0a4:	68bb      	ldr	r3, [r7, #8]
 810b0a6:	68fa      	ldr	r2, [r7, #12]
 810b0a8:	9202      	str	r2, [sp, #8]
 810b0aa:	9301      	str	r3, [sp, #4]
 810b0ac:	2302      	movs	r3, #2
 810b0ae:	9300      	str	r3, [sp, #0]
 810b0b0:	2300      	movs	r3, #0
 810b0b2:	460a      	mov	r2, r1
 810b0b4:	4911      	ldr	r1, [pc, #68]	@ (810b0fc <xTimerCreateTimerTask+0x88>)
 810b0b6:	4812      	ldr	r0, [pc, #72]	@ (810b100 <xTimerCreateTimerTask+0x8c>)
 810b0b8:	f7ff f890 	bl	810a1dc <xTaskCreateStatic>
 810b0bc:	4603      	mov	r3, r0
 810b0be:	4a11      	ldr	r2, [pc, #68]	@ (810b104 <xTimerCreateTimerTask+0x90>)
 810b0c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810b0c2:	4b10      	ldr	r3, [pc, #64]	@ (810b104 <xTimerCreateTimerTask+0x90>)
 810b0c4:	681b      	ldr	r3, [r3, #0]
 810b0c6:	2b00      	cmp	r3, #0
 810b0c8:	d001      	beq.n	810b0ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810b0ca:	2301      	movs	r3, #1
 810b0cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810b0ce:	697b      	ldr	r3, [r7, #20]
 810b0d0:	2b00      	cmp	r3, #0
 810b0d2:	d10b      	bne.n	810b0ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 810b0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b0d8:	f383 8811 	msr	BASEPRI, r3
 810b0dc:	f3bf 8f6f 	isb	sy
 810b0e0:	f3bf 8f4f 	dsb	sy
 810b0e4:	613b      	str	r3, [r7, #16]
}
 810b0e6:	bf00      	nop
 810b0e8:	bf00      	nop
 810b0ea:	e7fd      	b.n	810b0e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 810b0ec:	697b      	ldr	r3, [r7, #20]
}
 810b0ee:	4618      	mov	r0, r3
 810b0f0:	3718      	adds	r7, #24
 810b0f2:	46bd      	mov	sp, r7
 810b0f4:	bd80      	pop	{r7, pc}
 810b0f6:	bf00      	nop
 810b0f8:	10004e6c 	.word	0x10004e6c
 810b0fc:	0810c028 	.word	0x0810c028
 810b100:	0810b241 	.word	0x0810b241
 810b104:	10004e70 	.word	0x10004e70

0810b108 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810b108:	b580      	push	{r7, lr}
 810b10a:	b08a      	sub	sp, #40	@ 0x28
 810b10c:	af00      	add	r7, sp, #0
 810b10e:	60f8      	str	r0, [r7, #12]
 810b110:	60b9      	str	r1, [r7, #8]
 810b112:	607a      	str	r2, [r7, #4]
 810b114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810b116:	2300      	movs	r3, #0
 810b118:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810b11a:	68fb      	ldr	r3, [r7, #12]
 810b11c:	2b00      	cmp	r3, #0
 810b11e:	d10b      	bne.n	810b138 <xTimerGenericCommand+0x30>
	__asm volatile
 810b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b124:	f383 8811 	msr	BASEPRI, r3
 810b128:	f3bf 8f6f 	isb	sy
 810b12c:	f3bf 8f4f 	dsb	sy
 810b130:	623b      	str	r3, [r7, #32]
}
 810b132:	bf00      	nop
 810b134:	bf00      	nop
 810b136:	e7fd      	b.n	810b134 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810b138:	4b19      	ldr	r3, [pc, #100]	@ (810b1a0 <xTimerGenericCommand+0x98>)
 810b13a:	681b      	ldr	r3, [r3, #0]
 810b13c:	2b00      	cmp	r3, #0
 810b13e:	d02a      	beq.n	810b196 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810b140:	68bb      	ldr	r3, [r7, #8]
 810b142:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810b144:	687b      	ldr	r3, [r7, #4]
 810b146:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810b148:	68fb      	ldr	r3, [r7, #12]
 810b14a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810b14c:	68bb      	ldr	r3, [r7, #8]
 810b14e:	2b05      	cmp	r3, #5
 810b150:	dc18      	bgt.n	810b184 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810b152:	f7ff fead 	bl	810aeb0 <xTaskGetSchedulerState>
 810b156:	4603      	mov	r3, r0
 810b158:	2b02      	cmp	r3, #2
 810b15a:	d109      	bne.n	810b170 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810b15c:	4b10      	ldr	r3, [pc, #64]	@ (810b1a0 <xTimerGenericCommand+0x98>)
 810b15e:	6818      	ldr	r0, [r3, #0]
 810b160:	f107 0110 	add.w	r1, r7, #16
 810b164:	2300      	movs	r3, #0
 810b166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b168:	f7fe fbc6 	bl	81098f8 <xQueueGenericSend>
 810b16c:	6278      	str	r0, [r7, #36]	@ 0x24
 810b16e:	e012      	b.n	810b196 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810b170:	4b0b      	ldr	r3, [pc, #44]	@ (810b1a0 <xTimerGenericCommand+0x98>)
 810b172:	6818      	ldr	r0, [r3, #0]
 810b174:	f107 0110 	add.w	r1, r7, #16
 810b178:	2300      	movs	r3, #0
 810b17a:	2200      	movs	r2, #0
 810b17c:	f7fe fbbc 	bl	81098f8 <xQueueGenericSend>
 810b180:	6278      	str	r0, [r7, #36]	@ 0x24
 810b182:	e008      	b.n	810b196 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810b184:	4b06      	ldr	r3, [pc, #24]	@ (810b1a0 <xTimerGenericCommand+0x98>)
 810b186:	6818      	ldr	r0, [r3, #0]
 810b188:	f107 0110 	add.w	r1, r7, #16
 810b18c:	2300      	movs	r3, #0
 810b18e:	683a      	ldr	r2, [r7, #0]
 810b190:	f7fe fcb4 	bl	8109afc <xQueueGenericSendFromISR>
 810b194:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810b196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810b198:	4618      	mov	r0, r3
 810b19a:	3728      	adds	r7, #40	@ 0x28
 810b19c:	46bd      	mov	sp, r7
 810b19e:	bd80      	pop	{r7, pc}
 810b1a0:	10004e6c 	.word	0x10004e6c

0810b1a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810b1a4:	b580      	push	{r7, lr}
 810b1a6:	b088      	sub	sp, #32
 810b1a8:	af02      	add	r7, sp, #8
 810b1aa:	6078      	str	r0, [r7, #4]
 810b1ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b1ae:	4b23      	ldr	r3, [pc, #140]	@ (810b23c <prvProcessExpiredTimer+0x98>)
 810b1b0:	681b      	ldr	r3, [r3, #0]
 810b1b2:	68db      	ldr	r3, [r3, #12]
 810b1b4:	68db      	ldr	r3, [r3, #12]
 810b1b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b1b8:	697b      	ldr	r3, [r7, #20]
 810b1ba:	3304      	adds	r3, #4
 810b1bc:	4618      	mov	r0, r3
 810b1be:	f7fd ffdb 	bl	8109178 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b1c2:	697b      	ldr	r3, [r7, #20]
 810b1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b1c8:	f003 0304 	and.w	r3, r3, #4
 810b1cc:	2b00      	cmp	r3, #0
 810b1ce:	d023      	beq.n	810b218 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810b1d0:	697b      	ldr	r3, [r7, #20]
 810b1d2:	699a      	ldr	r2, [r3, #24]
 810b1d4:	687b      	ldr	r3, [r7, #4]
 810b1d6:	18d1      	adds	r1, r2, r3
 810b1d8:	687b      	ldr	r3, [r7, #4]
 810b1da:	683a      	ldr	r2, [r7, #0]
 810b1dc:	6978      	ldr	r0, [r7, #20]
 810b1de:	f000 f8d5 	bl	810b38c <prvInsertTimerInActiveList>
 810b1e2:	4603      	mov	r3, r0
 810b1e4:	2b00      	cmp	r3, #0
 810b1e6:	d020      	beq.n	810b22a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810b1e8:	2300      	movs	r3, #0
 810b1ea:	9300      	str	r3, [sp, #0]
 810b1ec:	2300      	movs	r3, #0
 810b1ee:	687a      	ldr	r2, [r7, #4]
 810b1f0:	2100      	movs	r1, #0
 810b1f2:	6978      	ldr	r0, [r7, #20]
 810b1f4:	f7ff ff88 	bl	810b108 <xTimerGenericCommand>
 810b1f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810b1fa:	693b      	ldr	r3, [r7, #16]
 810b1fc:	2b00      	cmp	r3, #0
 810b1fe:	d114      	bne.n	810b22a <prvProcessExpiredTimer+0x86>
	__asm volatile
 810b200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b204:	f383 8811 	msr	BASEPRI, r3
 810b208:	f3bf 8f6f 	isb	sy
 810b20c:	f3bf 8f4f 	dsb	sy
 810b210:	60fb      	str	r3, [r7, #12]
}
 810b212:	bf00      	nop
 810b214:	bf00      	nop
 810b216:	e7fd      	b.n	810b214 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b218:	697b      	ldr	r3, [r7, #20]
 810b21a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b21e:	f023 0301 	bic.w	r3, r3, #1
 810b222:	b2da      	uxtb	r2, r3
 810b224:	697b      	ldr	r3, [r7, #20]
 810b226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b22a:	697b      	ldr	r3, [r7, #20]
 810b22c:	6a1b      	ldr	r3, [r3, #32]
 810b22e:	6978      	ldr	r0, [r7, #20]
 810b230:	4798      	blx	r3
}
 810b232:	bf00      	nop
 810b234:	3718      	adds	r7, #24
 810b236:	46bd      	mov	sp, r7
 810b238:	bd80      	pop	{r7, pc}
 810b23a:	bf00      	nop
 810b23c:	10004e64 	.word	0x10004e64

0810b240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810b240:	b580      	push	{r7, lr}
 810b242:	b084      	sub	sp, #16
 810b244:	af00      	add	r7, sp, #0
 810b246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b248:	f107 0308 	add.w	r3, r7, #8
 810b24c:	4618      	mov	r0, r3
 810b24e:	f000 f859 	bl	810b304 <prvGetNextExpireTime>
 810b252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810b254:	68bb      	ldr	r3, [r7, #8]
 810b256:	4619      	mov	r1, r3
 810b258:	68f8      	ldr	r0, [r7, #12]
 810b25a:	f000 f805 	bl	810b268 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810b25e:	f000 f8d7 	bl	810b410 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b262:	bf00      	nop
 810b264:	e7f0      	b.n	810b248 <prvTimerTask+0x8>
	...

0810b268 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810b268:	b580      	push	{r7, lr}
 810b26a:	b084      	sub	sp, #16
 810b26c:	af00      	add	r7, sp, #0
 810b26e:	6078      	str	r0, [r7, #4]
 810b270:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810b272:	f7ff fa17 	bl	810a6a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810b276:	f107 0308 	add.w	r3, r7, #8
 810b27a:	4618      	mov	r0, r3
 810b27c:	f000 f866 	bl	810b34c <prvSampleTimeNow>
 810b280:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810b282:	68bb      	ldr	r3, [r7, #8]
 810b284:	2b00      	cmp	r3, #0
 810b286:	d130      	bne.n	810b2ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810b288:	683b      	ldr	r3, [r7, #0]
 810b28a:	2b00      	cmp	r3, #0
 810b28c:	d10a      	bne.n	810b2a4 <prvProcessTimerOrBlockTask+0x3c>
 810b28e:	687a      	ldr	r2, [r7, #4]
 810b290:	68fb      	ldr	r3, [r7, #12]
 810b292:	429a      	cmp	r2, r3
 810b294:	d806      	bhi.n	810b2a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810b296:	f7ff fa13 	bl	810a6c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810b29a:	68f9      	ldr	r1, [r7, #12]
 810b29c:	6878      	ldr	r0, [r7, #4]
 810b29e:	f7ff ff81 	bl	810b1a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810b2a2:	e024      	b.n	810b2ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810b2a4:	683b      	ldr	r3, [r7, #0]
 810b2a6:	2b00      	cmp	r3, #0
 810b2a8:	d008      	beq.n	810b2bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810b2aa:	4b13      	ldr	r3, [pc, #76]	@ (810b2f8 <prvProcessTimerOrBlockTask+0x90>)
 810b2ac:	681b      	ldr	r3, [r3, #0]
 810b2ae:	681b      	ldr	r3, [r3, #0]
 810b2b0:	2b00      	cmp	r3, #0
 810b2b2:	d101      	bne.n	810b2b8 <prvProcessTimerOrBlockTask+0x50>
 810b2b4:	2301      	movs	r3, #1
 810b2b6:	e000      	b.n	810b2ba <prvProcessTimerOrBlockTask+0x52>
 810b2b8:	2300      	movs	r3, #0
 810b2ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810b2bc:	4b0f      	ldr	r3, [pc, #60]	@ (810b2fc <prvProcessTimerOrBlockTask+0x94>)
 810b2be:	6818      	ldr	r0, [r3, #0]
 810b2c0:	687a      	ldr	r2, [r7, #4]
 810b2c2:	68fb      	ldr	r3, [r7, #12]
 810b2c4:	1ad3      	subs	r3, r2, r3
 810b2c6:	683a      	ldr	r2, [r7, #0]
 810b2c8:	4619      	mov	r1, r3
 810b2ca:	f7fe ff53 	bl	810a174 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810b2ce:	f7ff f9f7 	bl	810a6c0 <xTaskResumeAll>
 810b2d2:	4603      	mov	r3, r0
 810b2d4:	2b00      	cmp	r3, #0
 810b2d6:	d10a      	bne.n	810b2ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810b2d8:	4b09      	ldr	r3, [pc, #36]	@ (810b300 <prvProcessTimerOrBlockTask+0x98>)
 810b2da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810b2de:	601a      	str	r2, [r3, #0]
 810b2e0:	f3bf 8f4f 	dsb	sy
 810b2e4:	f3bf 8f6f 	isb	sy
}
 810b2e8:	e001      	b.n	810b2ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810b2ea:	f7ff f9e9 	bl	810a6c0 <xTaskResumeAll>
}
 810b2ee:	bf00      	nop
 810b2f0:	3710      	adds	r7, #16
 810b2f2:	46bd      	mov	sp, r7
 810b2f4:	bd80      	pop	{r7, pc}
 810b2f6:	bf00      	nop
 810b2f8:	10004e68 	.word	0x10004e68
 810b2fc:	10004e6c 	.word	0x10004e6c
 810b300:	e000ed04 	.word	0xe000ed04

0810b304 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810b304:	b480      	push	{r7}
 810b306:	b085      	sub	sp, #20
 810b308:	af00      	add	r7, sp, #0
 810b30a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810b30c:	4b0e      	ldr	r3, [pc, #56]	@ (810b348 <prvGetNextExpireTime+0x44>)
 810b30e:	681b      	ldr	r3, [r3, #0]
 810b310:	681b      	ldr	r3, [r3, #0]
 810b312:	2b00      	cmp	r3, #0
 810b314:	d101      	bne.n	810b31a <prvGetNextExpireTime+0x16>
 810b316:	2201      	movs	r2, #1
 810b318:	e000      	b.n	810b31c <prvGetNextExpireTime+0x18>
 810b31a:	2200      	movs	r2, #0
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810b320:	687b      	ldr	r3, [r7, #4]
 810b322:	681b      	ldr	r3, [r3, #0]
 810b324:	2b00      	cmp	r3, #0
 810b326:	d105      	bne.n	810b334 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810b328:	4b07      	ldr	r3, [pc, #28]	@ (810b348 <prvGetNextExpireTime+0x44>)
 810b32a:	681b      	ldr	r3, [r3, #0]
 810b32c:	68db      	ldr	r3, [r3, #12]
 810b32e:	681b      	ldr	r3, [r3, #0]
 810b330:	60fb      	str	r3, [r7, #12]
 810b332:	e001      	b.n	810b338 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810b334:	2300      	movs	r3, #0
 810b336:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810b338:	68fb      	ldr	r3, [r7, #12]
}
 810b33a:	4618      	mov	r0, r3
 810b33c:	3714      	adds	r7, #20
 810b33e:	46bd      	mov	sp, r7
 810b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b344:	4770      	bx	lr
 810b346:	bf00      	nop
 810b348:	10004e64 	.word	0x10004e64

0810b34c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810b34c:	b580      	push	{r7, lr}
 810b34e:	b084      	sub	sp, #16
 810b350:	af00      	add	r7, sp, #0
 810b352:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810b354:	f7ff fa52 	bl	810a7fc <xTaskGetTickCount>
 810b358:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810b35a:	4b0b      	ldr	r3, [pc, #44]	@ (810b388 <prvSampleTimeNow+0x3c>)
 810b35c:	681b      	ldr	r3, [r3, #0]
 810b35e:	68fa      	ldr	r2, [r7, #12]
 810b360:	429a      	cmp	r2, r3
 810b362:	d205      	bcs.n	810b370 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810b364:	f000 f93a 	bl	810b5dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810b368:	687b      	ldr	r3, [r7, #4]
 810b36a:	2201      	movs	r2, #1
 810b36c:	601a      	str	r2, [r3, #0]
 810b36e:	e002      	b.n	810b376 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810b370:	687b      	ldr	r3, [r7, #4]
 810b372:	2200      	movs	r2, #0
 810b374:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810b376:	4a04      	ldr	r2, [pc, #16]	@ (810b388 <prvSampleTimeNow+0x3c>)
 810b378:	68fb      	ldr	r3, [r7, #12]
 810b37a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810b37c:	68fb      	ldr	r3, [r7, #12]
}
 810b37e:	4618      	mov	r0, r3
 810b380:	3710      	adds	r7, #16
 810b382:	46bd      	mov	sp, r7
 810b384:	bd80      	pop	{r7, pc}
 810b386:	bf00      	nop
 810b388:	10004e74 	.word	0x10004e74

0810b38c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810b38c:	b580      	push	{r7, lr}
 810b38e:	b086      	sub	sp, #24
 810b390:	af00      	add	r7, sp, #0
 810b392:	60f8      	str	r0, [r7, #12]
 810b394:	60b9      	str	r1, [r7, #8]
 810b396:	607a      	str	r2, [r7, #4]
 810b398:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810b39a:	2300      	movs	r3, #0
 810b39c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810b39e:	68fb      	ldr	r3, [r7, #12]
 810b3a0:	68ba      	ldr	r2, [r7, #8]
 810b3a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810b3a4:	68fb      	ldr	r3, [r7, #12]
 810b3a6:	68fa      	ldr	r2, [r7, #12]
 810b3a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810b3aa:	68ba      	ldr	r2, [r7, #8]
 810b3ac:	687b      	ldr	r3, [r7, #4]
 810b3ae:	429a      	cmp	r2, r3
 810b3b0:	d812      	bhi.n	810b3d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b3b2:	687a      	ldr	r2, [r7, #4]
 810b3b4:	683b      	ldr	r3, [r7, #0]
 810b3b6:	1ad2      	subs	r2, r2, r3
 810b3b8:	68fb      	ldr	r3, [r7, #12]
 810b3ba:	699b      	ldr	r3, [r3, #24]
 810b3bc:	429a      	cmp	r2, r3
 810b3be:	d302      	bcc.n	810b3c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810b3c0:	2301      	movs	r3, #1
 810b3c2:	617b      	str	r3, [r7, #20]
 810b3c4:	e01b      	b.n	810b3fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810b3c6:	4b10      	ldr	r3, [pc, #64]	@ (810b408 <prvInsertTimerInActiveList+0x7c>)
 810b3c8:	681a      	ldr	r2, [r3, #0]
 810b3ca:	68fb      	ldr	r3, [r7, #12]
 810b3cc:	3304      	adds	r3, #4
 810b3ce:	4619      	mov	r1, r3
 810b3d0:	4610      	mov	r0, r2
 810b3d2:	f7fd fe98 	bl	8109106 <vListInsert>
 810b3d6:	e012      	b.n	810b3fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810b3d8:	687a      	ldr	r2, [r7, #4]
 810b3da:	683b      	ldr	r3, [r7, #0]
 810b3dc:	429a      	cmp	r2, r3
 810b3de:	d206      	bcs.n	810b3ee <prvInsertTimerInActiveList+0x62>
 810b3e0:	68ba      	ldr	r2, [r7, #8]
 810b3e2:	683b      	ldr	r3, [r7, #0]
 810b3e4:	429a      	cmp	r2, r3
 810b3e6:	d302      	bcc.n	810b3ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810b3e8:	2301      	movs	r3, #1
 810b3ea:	617b      	str	r3, [r7, #20]
 810b3ec:	e007      	b.n	810b3fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810b3ee:	4b07      	ldr	r3, [pc, #28]	@ (810b40c <prvInsertTimerInActiveList+0x80>)
 810b3f0:	681a      	ldr	r2, [r3, #0]
 810b3f2:	68fb      	ldr	r3, [r7, #12]
 810b3f4:	3304      	adds	r3, #4
 810b3f6:	4619      	mov	r1, r3
 810b3f8:	4610      	mov	r0, r2
 810b3fa:	f7fd fe84 	bl	8109106 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810b3fe:	697b      	ldr	r3, [r7, #20]
}
 810b400:	4618      	mov	r0, r3
 810b402:	3718      	adds	r7, #24
 810b404:	46bd      	mov	sp, r7
 810b406:	bd80      	pop	{r7, pc}
 810b408:	10004e68 	.word	0x10004e68
 810b40c:	10004e64 	.word	0x10004e64

0810b410 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810b410:	b580      	push	{r7, lr}
 810b412:	b08e      	sub	sp, #56	@ 0x38
 810b414:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810b416:	e0ce      	b.n	810b5b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810b418:	687b      	ldr	r3, [r7, #4]
 810b41a:	2b00      	cmp	r3, #0
 810b41c:	da19      	bge.n	810b452 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810b41e:	1d3b      	adds	r3, r7, #4
 810b420:	3304      	adds	r3, #4
 810b422:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810b424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b426:	2b00      	cmp	r3, #0
 810b428:	d10b      	bne.n	810b442 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810b42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b42e:	f383 8811 	msr	BASEPRI, r3
 810b432:	f3bf 8f6f 	isb	sy
 810b436:	f3bf 8f4f 	dsb	sy
 810b43a:	61fb      	str	r3, [r7, #28]
}
 810b43c:	bf00      	nop
 810b43e:	bf00      	nop
 810b440:	e7fd      	b.n	810b43e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810b442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b444:	681b      	ldr	r3, [r3, #0]
 810b446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b448:	6850      	ldr	r0, [r2, #4]
 810b44a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b44c:	6892      	ldr	r2, [r2, #8]
 810b44e:	4611      	mov	r1, r2
 810b450:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810b452:	687b      	ldr	r3, [r7, #4]
 810b454:	2b00      	cmp	r3, #0
 810b456:	f2c0 80ae 	blt.w	810b5b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810b45a:	68fb      	ldr	r3, [r7, #12]
 810b45c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810b45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b460:	695b      	ldr	r3, [r3, #20]
 810b462:	2b00      	cmp	r3, #0
 810b464:	d004      	beq.n	810b470 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b468:	3304      	adds	r3, #4
 810b46a:	4618      	mov	r0, r3
 810b46c:	f7fd fe84 	bl	8109178 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810b470:	463b      	mov	r3, r7
 810b472:	4618      	mov	r0, r3
 810b474:	f7ff ff6a 	bl	810b34c <prvSampleTimeNow>
 810b478:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810b47a:	687b      	ldr	r3, [r7, #4]
 810b47c:	2b09      	cmp	r3, #9
 810b47e:	f200 8097 	bhi.w	810b5b0 <prvProcessReceivedCommands+0x1a0>
 810b482:	a201      	add	r2, pc, #4	@ (adr r2, 810b488 <prvProcessReceivedCommands+0x78>)
 810b484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b488:	0810b4b1 	.word	0x0810b4b1
 810b48c:	0810b4b1 	.word	0x0810b4b1
 810b490:	0810b4b1 	.word	0x0810b4b1
 810b494:	0810b527 	.word	0x0810b527
 810b498:	0810b53b 	.word	0x0810b53b
 810b49c:	0810b587 	.word	0x0810b587
 810b4a0:	0810b4b1 	.word	0x0810b4b1
 810b4a4:	0810b4b1 	.word	0x0810b4b1
 810b4a8:	0810b527 	.word	0x0810b527
 810b4ac:	0810b53b 	.word	0x0810b53b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810b4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b4b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b4b6:	f043 0301 	orr.w	r3, r3, #1
 810b4ba:	b2da      	uxtb	r2, r3
 810b4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b4be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810b4c2:	68ba      	ldr	r2, [r7, #8]
 810b4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b4c6:	699b      	ldr	r3, [r3, #24]
 810b4c8:	18d1      	adds	r1, r2, r3
 810b4ca:	68bb      	ldr	r3, [r7, #8]
 810b4cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b4ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b4d0:	f7ff ff5c 	bl	810b38c <prvInsertTimerInActiveList>
 810b4d4:	4603      	mov	r3, r0
 810b4d6:	2b00      	cmp	r3, #0
 810b4d8:	d06c      	beq.n	810b5b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b4dc:	6a1b      	ldr	r3, [r3, #32]
 810b4de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b4e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b4e8:	f003 0304 	and.w	r3, r3, #4
 810b4ec:	2b00      	cmp	r3, #0
 810b4ee:	d061      	beq.n	810b5b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810b4f0:	68ba      	ldr	r2, [r7, #8]
 810b4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b4f4:	699b      	ldr	r3, [r3, #24]
 810b4f6:	441a      	add	r2, r3
 810b4f8:	2300      	movs	r3, #0
 810b4fa:	9300      	str	r3, [sp, #0]
 810b4fc:	2300      	movs	r3, #0
 810b4fe:	2100      	movs	r1, #0
 810b500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b502:	f7ff fe01 	bl	810b108 <xTimerGenericCommand>
 810b506:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810b508:	6a3b      	ldr	r3, [r7, #32]
 810b50a:	2b00      	cmp	r3, #0
 810b50c:	d152      	bne.n	810b5b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810b50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b512:	f383 8811 	msr	BASEPRI, r3
 810b516:	f3bf 8f6f 	isb	sy
 810b51a:	f3bf 8f4f 	dsb	sy
 810b51e:	61bb      	str	r3, [r7, #24]
}
 810b520:	bf00      	nop
 810b522:	bf00      	nop
 810b524:	e7fd      	b.n	810b522 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b52c:	f023 0301 	bic.w	r3, r3, #1
 810b530:	b2da      	uxtb	r2, r3
 810b532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810b538:	e03d      	b.n	810b5b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810b53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b53c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b540:	f043 0301 	orr.w	r3, r3, #1
 810b544:	b2da      	uxtb	r2, r3
 810b546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b548:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810b54c:	68ba      	ldr	r2, [r7, #8]
 810b54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b550:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810b552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b554:	699b      	ldr	r3, [r3, #24]
 810b556:	2b00      	cmp	r3, #0
 810b558:	d10b      	bne.n	810b572 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810b55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b55e:	f383 8811 	msr	BASEPRI, r3
 810b562:	f3bf 8f6f 	isb	sy
 810b566:	f3bf 8f4f 	dsb	sy
 810b56a:	617b      	str	r3, [r7, #20]
}
 810b56c:	bf00      	nop
 810b56e:	bf00      	nop
 810b570:	e7fd      	b.n	810b56e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810b572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b574:	699a      	ldr	r2, [r3, #24]
 810b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b578:	18d1      	adds	r1, r2, r3
 810b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b57c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b57e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b580:	f7ff ff04 	bl	810b38c <prvInsertTimerInActiveList>
					break;
 810b584:	e017      	b.n	810b5b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810b586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b58c:	f003 0302 	and.w	r3, r3, #2
 810b590:	2b00      	cmp	r3, #0
 810b592:	d103      	bne.n	810b59c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810b594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810b596:	f7fd fc45 	bl	8108e24 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810b59a:	e00c      	b.n	810b5b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b59e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b5a2:	f023 0301 	bic.w	r3, r3, #1
 810b5a6:	b2da      	uxtb	r2, r3
 810b5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b5aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810b5ae:	e002      	b.n	810b5b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810b5b0:	bf00      	nop
 810b5b2:	e000      	b.n	810b5b6 <prvProcessReceivedCommands+0x1a6>
					break;
 810b5b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810b5b6:	4b08      	ldr	r3, [pc, #32]	@ (810b5d8 <prvProcessReceivedCommands+0x1c8>)
 810b5b8:	681b      	ldr	r3, [r3, #0]
 810b5ba:	1d39      	adds	r1, r7, #4
 810b5bc:	2200      	movs	r2, #0
 810b5be:	4618      	mov	r0, r3
 810b5c0:	f7fe fb3a 	bl	8109c38 <xQueueReceive>
 810b5c4:	4603      	mov	r3, r0
 810b5c6:	2b00      	cmp	r3, #0
 810b5c8:	f47f af26 	bne.w	810b418 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810b5cc:	bf00      	nop
 810b5ce:	bf00      	nop
 810b5d0:	3730      	adds	r7, #48	@ 0x30
 810b5d2:	46bd      	mov	sp, r7
 810b5d4:	bd80      	pop	{r7, pc}
 810b5d6:	bf00      	nop
 810b5d8:	10004e6c 	.word	0x10004e6c

0810b5dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810b5dc:	b580      	push	{r7, lr}
 810b5de:	b088      	sub	sp, #32
 810b5e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810b5e2:	e049      	b.n	810b678 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810b5e4:	4b2e      	ldr	r3, [pc, #184]	@ (810b6a0 <prvSwitchTimerLists+0xc4>)
 810b5e6:	681b      	ldr	r3, [r3, #0]
 810b5e8:	68db      	ldr	r3, [r3, #12]
 810b5ea:	681b      	ldr	r3, [r3, #0]
 810b5ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b5ee:	4b2c      	ldr	r3, [pc, #176]	@ (810b6a0 <prvSwitchTimerLists+0xc4>)
 810b5f0:	681b      	ldr	r3, [r3, #0]
 810b5f2:	68db      	ldr	r3, [r3, #12]
 810b5f4:	68db      	ldr	r3, [r3, #12]
 810b5f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b5f8:	68fb      	ldr	r3, [r7, #12]
 810b5fa:	3304      	adds	r3, #4
 810b5fc:	4618      	mov	r0, r3
 810b5fe:	f7fd fdbb 	bl	8109178 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b602:	68fb      	ldr	r3, [r7, #12]
 810b604:	6a1b      	ldr	r3, [r3, #32]
 810b606:	68f8      	ldr	r0, [r7, #12]
 810b608:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b60a:	68fb      	ldr	r3, [r7, #12]
 810b60c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b610:	f003 0304 	and.w	r3, r3, #4
 810b614:	2b00      	cmp	r3, #0
 810b616:	d02f      	beq.n	810b678 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810b618:	68fb      	ldr	r3, [r7, #12]
 810b61a:	699b      	ldr	r3, [r3, #24]
 810b61c:	693a      	ldr	r2, [r7, #16]
 810b61e:	4413      	add	r3, r2
 810b620:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810b622:	68ba      	ldr	r2, [r7, #8]
 810b624:	693b      	ldr	r3, [r7, #16]
 810b626:	429a      	cmp	r2, r3
 810b628:	d90e      	bls.n	810b648 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810b62a:	68fb      	ldr	r3, [r7, #12]
 810b62c:	68ba      	ldr	r2, [r7, #8]
 810b62e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810b630:	68fb      	ldr	r3, [r7, #12]
 810b632:	68fa      	ldr	r2, [r7, #12]
 810b634:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810b636:	4b1a      	ldr	r3, [pc, #104]	@ (810b6a0 <prvSwitchTimerLists+0xc4>)
 810b638:	681a      	ldr	r2, [r3, #0]
 810b63a:	68fb      	ldr	r3, [r7, #12]
 810b63c:	3304      	adds	r3, #4
 810b63e:	4619      	mov	r1, r3
 810b640:	4610      	mov	r0, r2
 810b642:	f7fd fd60 	bl	8109106 <vListInsert>
 810b646:	e017      	b.n	810b678 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810b648:	2300      	movs	r3, #0
 810b64a:	9300      	str	r3, [sp, #0]
 810b64c:	2300      	movs	r3, #0
 810b64e:	693a      	ldr	r2, [r7, #16]
 810b650:	2100      	movs	r1, #0
 810b652:	68f8      	ldr	r0, [r7, #12]
 810b654:	f7ff fd58 	bl	810b108 <xTimerGenericCommand>
 810b658:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810b65a:	687b      	ldr	r3, [r7, #4]
 810b65c:	2b00      	cmp	r3, #0
 810b65e:	d10b      	bne.n	810b678 <prvSwitchTimerLists+0x9c>
	__asm volatile
 810b660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b664:	f383 8811 	msr	BASEPRI, r3
 810b668:	f3bf 8f6f 	isb	sy
 810b66c:	f3bf 8f4f 	dsb	sy
 810b670:	603b      	str	r3, [r7, #0]
}
 810b672:	bf00      	nop
 810b674:	bf00      	nop
 810b676:	e7fd      	b.n	810b674 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810b678:	4b09      	ldr	r3, [pc, #36]	@ (810b6a0 <prvSwitchTimerLists+0xc4>)
 810b67a:	681b      	ldr	r3, [r3, #0]
 810b67c:	681b      	ldr	r3, [r3, #0]
 810b67e:	2b00      	cmp	r3, #0
 810b680:	d1b0      	bne.n	810b5e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810b682:	4b07      	ldr	r3, [pc, #28]	@ (810b6a0 <prvSwitchTimerLists+0xc4>)
 810b684:	681b      	ldr	r3, [r3, #0]
 810b686:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810b688:	4b06      	ldr	r3, [pc, #24]	@ (810b6a4 <prvSwitchTimerLists+0xc8>)
 810b68a:	681b      	ldr	r3, [r3, #0]
 810b68c:	4a04      	ldr	r2, [pc, #16]	@ (810b6a0 <prvSwitchTimerLists+0xc4>)
 810b68e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810b690:	4a04      	ldr	r2, [pc, #16]	@ (810b6a4 <prvSwitchTimerLists+0xc8>)
 810b692:	697b      	ldr	r3, [r7, #20]
 810b694:	6013      	str	r3, [r2, #0]
}
 810b696:	bf00      	nop
 810b698:	3718      	adds	r7, #24
 810b69a:	46bd      	mov	sp, r7
 810b69c:	bd80      	pop	{r7, pc}
 810b69e:	bf00      	nop
 810b6a0:	10004e64 	.word	0x10004e64
 810b6a4:	10004e68 	.word	0x10004e68

0810b6a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810b6a8:	b580      	push	{r7, lr}
 810b6aa:	b082      	sub	sp, #8
 810b6ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810b6ae:	f7fd febb 	bl	8109428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810b6b2:	4b15      	ldr	r3, [pc, #84]	@ (810b708 <prvCheckForValidListAndQueue+0x60>)
 810b6b4:	681b      	ldr	r3, [r3, #0]
 810b6b6:	2b00      	cmp	r3, #0
 810b6b8:	d120      	bne.n	810b6fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810b6ba:	4814      	ldr	r0, [pc, #80]	@ (810b70c <prvCheckForValidListAndQueue+0x64>)
 810b6bc:	f7fd fcd2 	bl	8109064 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810b6c0:	4813      	ldr	r0, [pc, #76]	@ (810b710 <prvCheckForValidListAndQueue+0x68>)
 810b6c2:	f7fd fccf 	bl	8109064 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810b6c6:	4b13      	ldr	r3, [pc, #76]	@ (810b714 <prvCheckForValidListAndQueue+0x6c>)
 810b6c8:	4a10      	ldr	r2, [pc, #64]	@ (810b70c <prvCheckForValidListAndQueue+0x64>)
 810b6ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810b6cc:	4b12      	ldr	r3, [pc, #72]	@ (810b718 <prvCheckForValidListAndQueue+0x70>)
 810b6ce:	4a10      	ldr	r2, [pc, #64]	@ (810b710 <prvCheckForValidListAndQueue+0x68>)
 810b6d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810b6d2:	2300      	movs	r3, #0
 810b6d4:	9300      	str	r3, [sp, #0]
 810b6d6:	4b11      	ldr	r3, [pc, #68]	@ (810b71c <prvCheckForValidListAndQueue+0x74>)
 810b6d8:	4a11      	ldr	r2, [pc, #68]	@ (810b720 <prvCheckForValidListAndQueue+0x78>)
 810b6da:	2110      	movs	r1, #16
 810b6dc:	200a      	movs	r0, #10
 810b6de:	f7fe f82f 	bl	8109740 <xQueueGenericCreateStatic>
 810b6e2:	4603      	mov	r3, r0
 810b6e4:	4a08      	ldr	r2, [pc, #32]	@ (810b708 <prvCheckForValidListAndQueue+0x60>)
 810b6e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810b6e8:	4b07      	ldr	r3, [pc, #28]	@ (810b708 <prvCheckForValidListAndQueue+0x60>)
 810b6ea:	681b      	ldr	r3, [r3, #0]
 810b6ec:	2b00      	cmp	r3, #0
 810b6ee:	d005      	beq.n	810b6fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810b6f0:	4b05      	ldr	r3, [pc, #20]	@ (810b708 <prvCheckForValidListAndQueue+0x60>)
 810b6f2:	681b      	ldr	r3, [r3, #0]
 810b6f4:	490b      	ldr	r1, [pc, #44]	@ (810b724 <prvCheckForValidListAndQueue+0x7c>)
 810b6f6:	4618      	mov	r0, r3
 810b6f8:	f7fe fd12 	bl	810a120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810b6fc:	f7fd fec6 	bl	810948c <vPortExitCritical>
}
 810b700:	bf00      	nop
 810b702:	46bd      	mov	sp, r7
 810b704:	bd80      	pop	{r7, pc}
 810b706:	bf00      	nop
 810b708:	10004e6c 	.word	0x10004e6c
 810b70c:	10004e3c 	.word	0x10004e3c
 810b710:	10004e50 	.word	0x10004e50
 810b714:	10004e64 	.word	0x10004e64
 810b718:	10004e68 	.word	0x10004e68
 810b71c:	10004f18 	.word	0x10004f18
 810b720:	10004e78 	.word	0x10004e78
 810b724:	0810c030 	.word	0x0810c030

0810b728 <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 810b728:	b580      	push	{r7, lr}
 810b72a:	b084      	sub	sp, #16
 810b72c:	af00      	add	r7, sp, #0
 810b72e:	6078      	str	r0, [r7, #4]
 810b730:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810b732:	2300      	movs	r3, #0
 810b734:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 810b736:	2300      	movs	r3, #0
 810b738:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 810b73a:	201f      	movs	r0, #31
 810b73c:	f7f7 fd20 	bl	8103180 <HAL_HSEM_FastTake>
 810b740:	4603      	mov	r3, r0
 810b742:	2b00      	cmp	r3, #0
 810b744:	d1f9      	bne.n	810b73a <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 810b746:	4b43      	ldr	r3, [pc, #268]	@ (810b854 <ResMgr_Init+0x12c>)
 810b748:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 810b74c:	2b5a      	cmp	r3, #90	@ 0x5a
 810b74e:	d062      	beq.n	810b816 <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810b750:	e05a      	b.n	810b808 <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 810b752:	4a41      	ldr	r2, [pc, #260]	@ (810b858 <ResMgr_Init+0x130>)
 810b754:	68bb      	ldr	r3, [r7, #8]
 810b756:	4413      	add	r3, r2
 810b758:	781b      	ldrb	r3, [r3, #0]
 810b75a:	2b00      	cmp	r3, #0
 810b75c:	d02a      	beq.n	810b7b4 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 810b75e:	493d      	ldr	r1, [pc, #244]	@ (810b854 <ResMgr_Init+0x12c>)
 810b760:	68ba      	ldr	r2, [r7, #8]
 810b762:	4613      	mov	r3, r2
 810b764:	009b      	lsls	r3, r3, #2
 810b766:	4413      	add	r3, r2
 810b768:	009b      	lsls	r3, r3, #2
 810b76a:	440b      	add	r3, r1
 810b76c:	3308      	adds	r3, #8
 810b76e:	2201      	movs	r2, #1
 810b770:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 810b772:	4a39      	ldr	r2, [pc, #228]	@ (810b858 <ResMgr_Init+0x130>)
 810b774:	68bb      	ldr	r3, [r7, #8]
 810b776:	4413      	add	r3, r2
 810b778:	781b      	ldrb	r3, [r3, #0]
 810b77a:	2b01      	cmp	r3, #1
 810b77c:	d109      	bne.n	810b792 <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 810b77e:	4935      	ldr	r1, [pc, #212]	@ (810b854 <ResMgr_Init+0x12c>)
 810b780:	68ba      	ldr	r2, [r7, #8]
 810b782:	4613      	mov	r3, r2
 810b784:	009b      	lsls	r3, r3, #2
 810b786:	4413      	add	r3, r2
 810b788:	009b      	lsls	r3, r3, #2
 810b78a:	440b      	add	r3, r1
 810b78c:	3304      	adds	r3, #4
 810b78e:	2208      	movs	r2, #8
 810b790:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 810b792:	4a31      	ldr	r2, [pc, #196]	@ (810b858 <ResMgr_Init+0x130>)
 810b794:	68bb      	ldr	r3, [r7, #8]
 810b796:	4413      	add	r3, r2
 810b798:	781b      	ldrb	r3, [r3, #0]
 810b79a:	2b02      	cmp	r3, #2
 810b79c:	d11e      	bne.n	810b7dc <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 810b79e:	492d      	ldr	r1, [pc, #180]	@ (810b854 <ResMgr_Init+0x12c>)
 810b7a0:	68ba      	ldr	r2, [r7, #8]
 810b7a2:	4613      	mov	r3, r2
 810b7a4:	009b      	lsls	r3, r3, #2
 810b7a6:	4413      	add	r3, r2
 810b7a8:	009b      	lsls	r3, r3, #2
 810b7aa:	440b      	add	r3, r1
 810b7ac:	3304      	adds	r3, #4
 810b7ae:	2210      	movs	r2, #16
 810b7b0:	601a      	str	r2, [r3, #0]
 810b7b2:	e013      	b.n	810b7dc <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 810b7b4:	4927      	ldr	r1, [pc, #156]	@ (810b854 <ResMgr_Init+0x12c>)
 810b7b6:	68ba      	ldr	r2, [r7, #8]
 810b7b8:	4613      	mov	r3, r2
 810b7ba:	009b      	lsls	r3, r3, #2
 810b7bc:	4413      	add	r3, r2
 810b7be:	009b      	lsls	r3, r3, #2
 810b7c0:	440b      	add	r3, r1
 810b7c2:	3308      	adds	r3, #8
 810b7c4:	2200      	movs	r2, #0
 810b7c6:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 810b7c8:	4922      	ldr	r1, [pc, #136]	@ (810b854 <ResMgr_Init+0x12c>)
 810b7ca:	68ba      	ldr	r2, [r7, #8]
 810b7cc:	4613      	mov	r3, r2
 810b7ce:	009b      	lsls	r3, r3, #2
 810b7d0:	4413      	add	r3, r2
 810b7d2:	009b      	lsls	r3, r3, #2
 810b7d4:	440b      	add	r3, r1
 810b7d6:	3304      	adds	r3, #4
 810b7d8:	2200      	movs	r2, #0
 810b7da:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 810b7dc:	491d      	ldr	r1, [pc, #116]	@ (810b854 <ResMgr_Init+0x12c>)
 810b7de:	68ba      	ldr	r2, [r7, #8]
 810b7e0:	4613      	mov	r3, r2
 810b7e2:	009b      	lsls	r3, r3, #2
 810b7e4:	4413      	add	r3, r2
 810b7e6:	009b      	lsls	r3, r3, #2
 810b7e8:	440b      	add	r3, r1
 810b7ea:	2200      	movs	r2, #0
 810b7ec:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 810b7ee:	4919      	ldr	r1, [pc, #100]	@ (810b854 <ResMgr_Init+0x12c>)
 810b7f0:	68ba      	ldr	r2, [r7, #8]
 810b7f2:	4613      	mov	r3, r2
 810b7f4:	009b      	lsls	r3, r3, #2
 810b7f6:	4413      	add	r3, r2
 810b7f8:	009b      	lsls	r3, r3, #2
 810b7fa:	440b      	add	r3, r1
 810b7fc:	3310      	adds	r3, #16
 810b7fe:	2200      	movs	r2, #0
 810b800:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810b802:	68bb      	ldr	r3, [r7, #8]
 810b804:	3301      	adds	r3, #1
 810b806:	60bb      	str	r3, [r7, #8]
 810b808:	68bb      	ldr	r3, [r7, #8]
 810b80a:	2b19      	cmp	r3, #25
 810b80c:	d9a1      	bls.n	810b752 <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 810b80e:	4b11      	ldr	r3, [pc, #68]	@ (810b854 <ResMgr_Init+0x12c>)
 810b810:	225a      	movs	r2, #90	@ 0x5a
 810b812:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 810b816:	2100      	movs	r1, #0
 810b818:	201f      	movs	r0, #31
 810b81a:	f7f7 fccb 	bl	81031b4 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 810b81e:	687b      	ldr	r3, [r7, #4]
 810b820:	2b00      	cmp	r3, #0
 810b822:	d102      	bne.n	810b82a <ResMgr_Init+0x102>
 810b824:	683b      	ldr	r3, [r7, #0]
 810b826:	2b00      	cmp	r3, #0
 810b828:	d00c      	beq.n	810b844 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 810b82a:	4a0c      	ldr	r2, [pc, #48]	@ (810b85c <ResMgr_Init+0x134>)
 810b82c:	687b      	ldr	r3, [r7, #4]
 810b82e:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 810b830:	4a0b      	ldr	r2, [pc, #44]	@ (810b860 <ResMgr_Init+0x138>)
 810b832:	683b      	ldr	r3, [r7, #0]
 810b834:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 810b836:	4b0a      	ldr	r3, [pc, #40]	@ (810b860 <ResMgr_Init+0x138>)
 810b838:	681b      	ldr	r3, [r3, #0]
 810b83a:	2100      	movs	r1, #0
 810b83c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 810b840:	4798      	blx	r3
 810b842:	e001      	b.n	810b848 <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 810b844:	2301      	movs	r3, #1
 810b846:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 810b848:	7bfb      	ldrb	r3, [r7, #15]
}
 810b84a:	4618      	mov	r0, r3
 810b84c:	3710      	adds	r7, #16
 810b84e:	46bd      	mov	sp, r7
 810b850:	bd80      	pop	{r7, pc}
 810b852:	bf00      	nop
 810b854:	1000006c 	.word	0x1000006c
 810b858:	0810c098 	.word	0x0810c098
 810b85c:	10004f68 	.word	0x10004f68
 810b860:	10004f6c 	.word	0x10004f6c

0810b864 <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 810b864:	b580      	push	{r7, lr}
 810b866:	b086      	sub	sp, #24
 810b868:	af00      	add	r7, sp, #0
 810b86a:	60f8      	str	r0, [r7, #12]
 810b86c:	60b9      	str	r1, [r7, #8]
 810b86e:	607a      	str	r2, [r7, #4]
 810b870:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810b872:	2300      	movs	r3, #0
 810b874:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 810b876:	68fb      	ldr	r3, [r7, #12]
 810b878:	2b19      	cmp	r3, #25
 810b87a:	f200 80f5 	bhi.w	810ba68 <ResMgr_Request+0x204>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 810b87e:	201f      	movs	r0, #31
 810b880:	f7f7 fc7e 	bl	8103180 <HAL_HSEM_FastTake>
 810b884:	4603      	mov	r3, r0
 810b886:	2b00      	cmp	r3, #0
 810b888:	d1f9      	bne.n	810b87e <ResMgr_Request+0x1a>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810b88a:	497b      	ldr	r1, [pc, #492]	@ (810ba78 <ResMgr_Request+0x214>)
 810b88c:	68fa      	ldr	r2, [r7, #12]
 810b88e:	4613      	mov	r3, r2
 810b890:	009b      	lsls	r3, r3, #2
 810b892:	4413      	add	r3, r2
 810b894:	009b      	lsls	r3, r3, #2
 810b896:	440b      	add	r3, r1
 810b898:	3308      	adds	r3, #8
 810b89a:	681b      	ldr	r3, [r3, #0]
 810b89c:	2b00      	cmp	r3, #0
 810b89e:	d019      	beq.n	810b8d4 <ResMgr_Request+0x70>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810b8a0:	4975      	ldr	r1, [pc, #468]	@ (810ba78 <ResMgr_Request+0x214>)
 810b8a2:	68fa      	ldr	r2, [r7, #12]
 810b8a4:	4613      	mov	r3, r2
 810b8a6:	009b      	lsls	r3, r3, #2
 810b8a8:	4413      	add	r3, r2
 810b8aa:	009b      	lsls	r3, r3, #2
 810b8ac:	440b      	add	r3, r1
 810b8ae:	3308      	adds	r3, #8
 810b8b0:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810b8b2:	2b01      	cmp	r3, #1
 810b8b4:	d165      	bne.n	810b982 <ResMgr_Request+0x11e>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 810b8b6:	4970      	ldr	r1, [pc, #448]	@ (810ba78 <ResMgr_Request+0x214>)
 810b8b8:	68fa      	ldr	r2, [r7, #12]
 810b8ba:	4613      	mov	r3, r2
 810b8bc:	009b      	lsls	r3, r3, #2
 810b8be:	4413      	add	r3, r2
 810b8c0:	009b      	lsls	r3, r3, #2
 810b8c2:	440b      	add	r3, r1
 810b8c4:	3304      	adds	r3, #4
 810b8c6:	681a      	ldr	r2, [r3, #0]
 810b8c8:	68bb      	ldr	r3, [r7, #8]
 810b8ca:	4053      	eors	r3, r2
 810b8cc:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810b8d0:	2b00      	cmp	r3, #0
 810b8d2:	d156      	bne.n	810b982 <ResMgr_Request+0x11e>
    {

      if(phandle != NULL)
 810b8d4:	683b      	ldr	r3, [r7, #0]
 810b8d6:	2b00      	cmp	r3, #0
 810b8d8:	d02c      	beq.n	810b934 <ResMgr_Request+0xd0>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810b8da:	68bb      	ldr	r3, [r7, #8]
 810b8dc:	f003 0301 	and.w	r3, r3, #1
 810b8e0:	2b00      	cmp	r3, #0
 810b8e2:	d01d      	beq.n	810b920 <ResMgr_Request+0xbc>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810b8e4:	4964      	ldr	r1, [pc, #400]	@ (810ba78 <ResMgr_Request+0x214>)
 810b8e6:	68fa      	ldr	r2, [r7, #12]
 810b8e8:	4613      	mov	r3, r2
 810b8ea:	009b      	lsls	r3, r3, #2
 810b8ec:	4413      	add	r3, r2
 810b8ee:	009b      	lsls	r3, r3, #2
 810b8f0:	440b      	add	r3, r1
 810b8f2:	3310      	adds	r3, #16
 810b8f4:	681b      	ldr	r3, [r3, #0]
 810b8f6:	2b00      	cmp	r3, #0
 810b8f8:	d00c      	beq.n	810b914 <ResMgr_Request+0xb0>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 810b8fa:	495f      	ldr	r1, [pc, #380]	@ (810ba78 <ResMgr_Request+0x214>)
 810b8fc:	68fa      	ldr	r2, [r7, #12]
 810b8fe:	4613      	mov	r3, r2
 810b900:	009b      	lsls	r3, r3, #2
 810b902:	4413      	add	r3, r2
 810b904:	009b      	lsls	r3, r3, #2
 810b906:	440b      	add	r3, r1
 810b908:	3310      	adds	r3, #16
 810b90a:	681b      	ldr	r3, [r3, #0]
 810b90c:	461a      	mov	r2, r3
 810b90e:	683b      	ldr	r3, [r7, #0]
 810b910:	601a      	str	r2, [r3, #0]
 810b912:	e00f      	b.n	810b934 <ResMgr_Request+0xd0>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 810b914:	2100      	movs	r1, #0
 810b916:	201f      	movs	r0, #31
 810b918:	f7f7 fc4c 	bl	81031b4 <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 810b91c:	2301      	movs	r3, #1
 810b91e:	e0a6      	b.n	810ba6e <ResMgr_Request+0x20a>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810b920:	4955      	ldr	r1, [pc, #340]	@ (810ba78 <ResMgr_Request+0x214>)
 810b922:	68fa      	ldr	r2, [r7, #12]
 810b924:	4613      	mov	r3, r2
 810b926:	009b      	lsls	r3, r3, #2
 810b928:	4413      	add	r3, r2
 810b92a:	009b      	lsls	r3, r3, #2
 810b92c:	440b      	add	r3, r1
 810b92e:	3310      	adds	r3, #16
 810b930:	683a      	ldr	r2, [r7, #0]
 810b932:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 810b934:	68bb      	ldr	r3, [r7, #8]
 810b936:	f023 0306 	bic.w	r3, r3, #6
 810b93a:	f043 0102 	orr.w	r1, r3, #2
 810b93e:	484e      	ldr	r0, [pc, #312]	@ (810ba78 <ResMgr_Request+0x214>)
 810b940:	68fa      	ldr	r2, [r7, #12]
 810b942:	4613      	mov	r3, r2
 810b944:	009b      	lsls	r3, r3, #2
 810b946:	4413      	add	r3, r2
 810b948:	009b      	lsls	r3, r3, #2
 810b94a:	4403      	add	r3, r0
 810b94c:	3304      	adds	r3, #4
 810b94e:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 810b950:	4949      	ldr	r1, [pc, #292]	@ (810ba78 <ResMgr_Request+0x214>)
 810b952:	68fa      	ldr	r2, [r7, #12]
 810b954:	4613      	mov	r3, r2
 810b956:	009b      	lsls	r3, r3, #2
 810b958:	4413      	add	r3, r2
 810b95a:	009b      	lsls	r3, r3, #2
 810b95c:	440b      	add	r3, r1
 810b95e:	3308      	adds	r3, #8
 810b960:	2201      	movs	r2, #1
 810b962:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 810b964:	2100      	movs	r1, #0
 810b966:	201f      	movs	r0, #31
 810b968:	f7f7 fc24 	bl	81031b4 <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 810b96c:	4b43      	ldr	r3, [pc, #268]	@ (810ba7c <ResMgr_Request+0x218>)
 810b96e:	681b      	ldr	r3, [r3, #0]
 810b970:	2101      	movs	r1, #1
 810b972:	68f8      	ldr	r0, [r7, #12]
 810b974:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 810b976:	4b42      	ldr	r3, [pc, #264]	@ (810ba80 <ResMgr_Request+0x21c>)
 810b978:	681b      	ldr	r3, [r3, #0]
 810b97a:	2111      	movs	r1, #17
 810b97c:	68f8      	ldr	r0, [r7, #12]
 810b97e:	4798      	blx	r3
 810b980:	e074      	b.n	810ba6c <ResMgr_Request+0x208>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 810b982:	2302      	movs	r3, #2
 810b984:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 810b986:	68bb      	ldr	r3, [r7, #8]
 810b988:	f003 0306 	and.w	r3, r3, #6
 810b98c:	2b02      	cmp	r3, #2
 810b98e:	d10e      	bne.n	810b9ae <ResMgr_Request+0x14a>
      {
        RESMGR_TBL_UNLOCK(id);
 810b990:	2100      	movs	r1, #0
 810b992:	201f      	movs	r0, #31
 810b994:	f7f7 fc0e 	bl	81031b4 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 810b998:	4b38      	ldr	r3, [pc, #224]	@ (810ba7c <ResMgr_Request+0x218>)
 810b99a:	681b      	ldr	r3, [r3, #0]
 810b99c:	2105      	movs	r1, #5
 810b99e:	68f8      	ldr	r0, [r7, #12]
 810b9a0:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 810b9a2:	4b37      	ldr	r3, [pc, #220]	@ (810ba80 <ResMgr_Request+0x21c>)
 810b9a4:	681b      	ldr	r3, [r3, #0]
 810b9a6:	2115      	movs	r1, #21
 810b9a8:	68f8      	ldr	r0, [r7, #12]
 810b9aa:	4798      	blx	r3
 810b9ac:	e05e      	b.n	810ba6c <ResMgr_Request+0x208>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 810b9ae:	68bb      	ldr	r3, [r7, #8]
 810b9b0:	f003 0306 	and.w	r3, r3, #6
 810b9b4:	2b04      	cmp	r3, #4
 810b9b6:	d154      	bne.n	810ba62 <ResMgr_Request+0x1fe>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810b9b8:	492f      	ldr	r1, [pc, #188]	@ (810ba78 <ResMgr_Request+0x214>)
 810b9ba:	68fa      	ldr	r2, [r7, #12]
 810b9bc:	4613      	mov	r3, r2
 810b9be:	009b      	lsls	r3, r3, #2
 810b9c0:	4413      	add	r3, r2
 810b9c2:	009b      	lsls	r3, r3, #2
 810b9c4:	440b      	add	r3, r1
 810b9c6:	3304      	adds	r3, #4
 810b9c8:	681b      	ldr	r3, [r3, #0]
 810b9ca:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810b9ce:	68bb      	ldr	r3, [r7, #8]
 810b9d0:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810b9d4:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810b9d6:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810b9da:	4827      	ldr	r0, [pc, #156]	@ (810ba78 <ResMgr_Request+0x214>)
 810b9dc:	68fa      	ldr	r2, [r7, #12]
 810b9de:	4613      	mov	r3, r2
 810b9e0:	009b      	lsls	r3, r3, #2
 810b9e2:	4413      	add	r3, r2
 810b9e4:	009b      	lsls	r3, r3, #2
 810b9e6:	4403      	add	r3, r0
 810b9e8:	3304      	adds	r3, #4
 810b9ea:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 810b9ec:	683b      	ldr	r3, [r7, #0]
 810b9ee:	2b00      	cmp	r3, #0
 810b9f0:	d028      	beq.n	810ba44 <ResMgr_Request+0x1e0>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810b9f2:	68bb      	ldr	r3, [r7, #8]
 810b9f4:	f003 0301 	and.w	r3, r3, #1
 810b9f8:	2b00      	cmp	r3, #0
 810b9fa:	d019      	beq.n	810ba30 <ResMgr_Request+0x1cc>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810b9fc:	491e      	ldr	r1, [pc, #120]	@ (810ba78 <ResMgr_Request+0x214>)
 810b9fe:	68fa      	ldr	r2, [r7, #12]
 810ba00:	4613      	mov	r3, r2
 810ba02:	009b      	lsls	r3, r3, #2
 810ba04:	4413      	add	r3, r2
 810ba06:	009b      	lsls	r3, r3, #2
 810ba08:	440b      	add	r3, r1
 810ba0a:	3310      	adds	r3, #16
 810ba0c:	681b      	ldr	r3, [r3, #0]
 810ba0e:	2b00      	cmp	r3, #0
 810ba10:	d00c      	beq.n	810ba2c <ResMgr_Request+0x1c8>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 810ba12:	4919      	ldr	r1, [pc, #100]	@ (810ba78 <ResMgr_Request+0x214>)
 810ba14:	68fa      	ldr	r2, [r7, #12]
 810ba16:	4613      	mov	r3, r2
 810ba18:	009b      	lsls	r3, r3, #2
 810ba1a:	4413      	add	r3, r2
 810ba1c:	009b      	lsls	r3, r3, #2
 810ba1e:	440b      	add	r3, r1
 810ba20:	3310      	adds	r3, #16
 810ba22:	681b      	ldr	r3, [r3, #0]
 810ba24:	461a      	mov	r2, r3
 810ba26:	683b      	ldr	r3, [r7, #0]
 810ba28:	601a      	str	r2, [r3, #0]
 810ba2a:	e00b      	b.n	810ba44 <ResMgr_Request+0x1e0>
            }
            else
            {
              return  RESMGR_ERROR;
 810ba2c:	2301      	movs	r3, #1
 810ba2e:	e01e      	b.n	810ba6e <ResMgr_Request+0x20a>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810ba30:	4911      	ldr	r1, [pc, #68]	@ (810ba78 <ResMgr_Request+0x214>)
 810ba32:	68fa      	ldr	r2, [r7, #12]
 810ba34:	4613      	mov	r3, r2
 810ba36:	009b      	lsls	r3, r3, #2
 810ba38:	4413      	add	r3, r2
 810ba3a:	009b      	lsls	r3, r3, #2
 810ba3c:	440b      	add	r3, r1
 810ba3e:	3310      	adds	r3, #16
 810ba40:	683a      	ldr	r2, [r7, #0]
 810ba42:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 810ba44:	2100      	movs	r1, #0
 810ba46:	201f      	movs	r0, #31
 810ba48:	f7f7 fbb4 	bl	81031b4 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 810ba4c:	4b0b      	ldr	r3, [pc, #44]	@ (810ba7c <ResMgr_Request+0x218>)
 810ba4e:	681b      	ldr	r3, [r3, #0]
 810ba50:	2104      	movs	r1, #4
 810ba52:	68f8      	ldr	r0, [r7, #12]
 810ba54:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 810ba56:	4b0a      	ldr	r3, [pc, #40]	@ (810ba80 <ResMgr_Request+0x21c>)
 810ba58:	681b      	ldr	r3, [r3, #0]
 810ba5a:	2114      	movs	r1, #20
 810ba5c:	68f8      	ldr	r0, [r7, #12]
 810ba5e:	4798      	blx	r3
 810ba60:	e004      	b.n	810ba6c <ResMgr_Request+0x208>
      }
      else
      {
        ret = RESMGR_ERROR;
 810ba62:	2301      	movs	r3, #1
 810ba64:	75fb      	strb	r3, [r7, #23]
 810ba66:	e001      	b.n	810ba6c <ResMgr_Request+0x208>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 810ba68:	2301      	movs	r3, #1
 810ba6a:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 810ba6c:	7dfb      	ldrb	r3, [r7, #23]
}
 810ba6e:	4618      	mov	r0, r3
 810ba70:	3718      	adds	r7, #24
 810ba72:	46bd      	mov	sp, r7
 810ba74:	bd80      	pop	{r7, pc}
 810ba76:	bf00      	nop
 810ba78:	1000006c 	.word	0x1000006c
 810ba7c:	10004f68 	.word	0x10004f68
 810ba80:	10004f6c 	.word	0x10004f6c

0810ba84 <coCommTaskSet>:
 810ba84:	2801      	cmp	r0, #1
 810ba86:	d006      	beq.n	810ba96 <coCommTaskSet+0x12>
 810ba88:	2802      	cmp	r0, #2
 810ba8a:	d007      	beq.n	810ba9c <coCommTaskSet+0x18>
 810ba8c:	b910      	cbnz	r0, 810ba94 <coCommTaskSet+0x10>
 810ba8e:	4b04      	ldr	r3, [pc, #16]	@ (810baa0 <coCommTaskSet+0x1c>)
 810ba90:	2201      	movs	r2, #1
 810ba92:	701a      	strb	r2, [r3, #0]
 810ba94:	4770      	bx	lr
 810ba96:	4b03      	ldr	r3, [pc, #12]	@ (810baa4 <coCommTaskSet+0x20>)
 810ba98:	7018      	strb	r0, [r3, #0]
 810ba9a:	4770      	bx	lr
 810ba9c:	4b02      	ldr	r3, [pc, #8]	@ (810baa8 <coCommTaskSet+0x24>)
 810ba9e:	e7f7      	b.n	810ba90 <coCommTaskSet+0xc>
 810baa0:	10004f72 	.word	0x10004f72
 810baa4:	10004f71 	.word	0x10004f71
 810baa8:	10004f70 	.word	0x10004f70

0810baac <coQueueReceiveBufferIsFilled>:
 810baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810baae:	4b1a      	ldr	r3, [pc, #104]	@ (810bb18 <coQueueReceiveBufferIsFilled+0x6c>)
 810bab0:	7958      	ldrb	r0, [r3, #5]
 810bab2:	2801      	cmp	r0, #1
 810bab4:	d105      	bne.n	810bac2 <coQueueReceiveBufferIsFilled+0x16>
 810bab6:	2202      	movs	r2, #2
 810bab8:	715a      	strb	r2, [r3, #5]
 810baba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810babe:	f7ff bfe1 	b.w	810ba84 <coCommTaskSet>
 810bac2:	2803      	cmp	r0, #3
 810bac4:	d103      	bne.n	810bace <coQueueReceiveBufferIsFilled+0x22>
 810bac6:	2204      	movs	r2, #4
 810bac8:	715a      	strb	r2, [r3, #5]
 810baca:	2001      	movs	r0, #1
 810bacc:	e7f5      	b.n	810baba <coQueueReceiveBufferIsFilled+0xe>
 810bace:	4b13      	ldr	r3, [pc, #76]	@ (810bb1c <coQueueReceiveBufferIsFilled+0x70>)
 810bad0:	4d13      	ldr	r5, [pc, #76]	@ (810bb20 <coQueueReceiveBufferIsFilled+0x74>)
 810bad2:	881e      	ldrh	r6, [r3, #0]
 810bad4:	7b2b      	ldrb	r3, [r5, #12]
 810bad6:	2b01      	cmp	r3, #1
 810bad8:	d115      	bne.n	810bb06 <coQueueReceiveBufferIsFilled+0x5a>
 810bada:	8928      	ldrh	r0, [r5, #8]
 810badc:	f1a6 0408 	sub.w	r4, r6, #8
 810bae0:	4b10      	ldr	r3, [pc, #64]	@ (810bb24 <coQueueReceiveBufferIsFilled+0x78>)
 810bae2:	f105 010d 	add.w	r1, r5, #13
 810bae6:	1a24      	subs	r4, r4, r0
 810bae8:	3008      	adds	r0, #8
 810baea:	681f      	ldr	r7, [r3, #0]
 810baec:	b2a4      	uxth	r4, r4
 810baee:	4438      	add	r0, r7
 810baf0:	4622      	mov	r2, r4
 810baf2:	f000 f9f9 	bl	810bee8 <memcpy>
 810baf6:	896a      	ldrh	r2, [r5, #10]
 810baf8:	f104 010d 	add.w	r1, r4, #13
 810bafc:	4638      	mov	r0, r7
 810bafe:	3201      	adds	r2, #1
 810bb00:	4429      	add	r1, r5
 810bb02:	f000 f9f1 	bl	810bee8 <memcpy>
 810bb06:	896b      	ldrh	r3, [r5, #10]
 810bb08:	4a07      	ldr	r2, [pc, #28]	@ (810bb28 <coQueueReceiveBufferIsFilled+0x7c>)
 810bb0a:	3301      	adds	r3, #1
 810bb0c:	b29b      	uxth	r3, r3
 810bb0e:	42b3      	cmp	r3, r6
 810bb10:	bf28      	it	cs
 810bb12:	2300      	movcs	r3, #0
 810bb14:	8013      	strh	r3, [r2, #0]
 810bb16:	e7d8      	b.n	810baca <coQueueReceiveBufferIsFilled+0x1e>
 810bb18:	10004f9c 	.word	0x10004f9c
 810bb1c:	10004f98 	.word	0x10004f98
 810bb20:	10004f7c 	.word	0x10004f7c
 810bb24:	10004f74 	.word	0x10004f74
 810bb28:	10004f9a 	.word	0x10004f9a

0810bb2c <coQueueGetReceiveBuffer>:
 810bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb2e:	460c      	mov	r4, r1
 810bb30:	4935      	ldr	r1, [pc, #212]	@ (810bc08 <coQueueGetReceiveBuffer+0xdc>)
 810bb32:	4605      	mov	r5, r0
 810bb34:	680b      	ldr	r3, [r1, #0]
 810bb36:	4283      	cmp	r3, r0
 810bb38:	d110      	bne.n	810bb5c <coQueueGetReceiveBuffer+0x30>
 810bb3a:	7988      	ldrb	r0, [r1, #6]
 810bb3c:	f002 030a 	and.w	r3, r2, #10
 810bb40:	4298      	cmp	r0, r3
 810bb42:	d10b      	bne.n	810bb5c <coQueueGetReceiveBuffer+0x30>
 810bb44:	b924      	cbnz	r4, 810bb50 <coQueueGetReceiveBuffer+0x24>
 810bb46:	2301      	movs	r3, #1
 810bb48:	714b      	strb	r3, [r1, #5]
 810bb4a:	f7ff ffaf 	bl	810baac <coQueueReceiveBufferIsFilled>
 810bb4e:	e027      	b.n	810bba0 <coQueueGetReceiveBuffer+0x74>
 810bb50:	2c01      	cmp	r4, #1
 810bb52:	d103      	bne.n	810bb5c <coQueueGetReceiveBuffer+0x30>
 810bb54:	2303      	movs	r3, #3
 810bb56:	1d08      	adds	r0, r1, #4
 810bb58:	714b      	strb	r3, [r1, #5]
 810bb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810bb5c:	492b      	ldr	r1, [pc, #172]	@ (810bc0c <coQueueGetReceiveBuffer+0xe0>)
 810bb5e:	f012 0f08 	tst.w	r2, #8
 810bb62:	4b2b      	ldr	r3, [pc, #172]	@ (810bc10 <coQueueGetReceiveBuffer+0xe4>)
 810bb64:	f04f 0700 	mov.w	r7, #0
 810bb68:	8808      	ldrh	r0, [r1, #0]
 810bb6a:	492a      	ldr	r1, [pc, #168]	@ (810bc14 <coQueueGetReceiveBuffer+0xe8>)
 810bb6c:	bf18      	it	ne
 810bb6e:	463c      	movne	r4, r7
 810bb70:	f100 0c08 	add.w	ip, r0, #8
 810bb74:	601d      	str	r5, [r3, #0]
 810bb76:	880d      	ldrh	r5, [r1, #0]
 810bb78:	f104 0608 	add.w	r6, r4, #8
 810bb7c:	4926      	ldr	r1, [pc, #152]	@ (810bc18 <coQueueGetReceiveBuffer+0xec>)
 810bb7e:	45ac      	cmp	ip, r5
 810bb80:	715a      	strb	r2, [r3, #5]
 810bb82:	8809      	ldrh	r1, [r1, #0]
 810bb84:	b2a2      	uxth	r2, r4
 810bb86:	731f      	strb	r7, [r3, #12]
 810bb88:	711c      	strb	r4, [r3, #4]
 810bb8a:	8118      	strh	r0, [r3, #8]
 810bb8c:	d90a      	bls.n	810bba4 <coQueueGetReceiveBuffer+0x78>
 810bb8e:	3207      	adds	r2, #7
 810bb90:	811f      	strh	r7, [r3, #8]
 810bb92:	b292      	uxth	r2, r2
 810bb94:	815a      	strh	r2, [r3, #10]
 810bb96:	428a      	cmp	r2, r1
 810bb98:	d312      	bcc.n	810bbc0 <coQueueGetReceiveBuffer+0x94>
 810bb9a:	4b20      	ldr	r3, [pc, #128]	@ (810bc1c <coQueueGetReceiveBuffer+0xf0>)
 810bb9c:	2201      	movs	r2, #1
 810bb9e:	701a      	strb	r2, [r3, #0]
 810bba0:	2000      	movs	r0, #0
 810bba2:	e7da      	b.n	810bb5a <coQueueGetReceiveBuffer+0x2e>
 810bba4:	1e42      	subs	r2, r0, #1
 810bba6:	4432      	add	r2, r6
 810bba8:	b292      	uxth	r2, r2
 810bbaa:	4295      	cmp	r5, r2
 810bbac:	815a      	strh	r2, [r3, #10]
 810bbae:	d805      	bhi.n	810bbbc <coQueueGetReceiveBuffer+0x90>
 810bbb0:	1b52      	subs	r2, r2, r5
 810bbb2:	4288      	cmp	r0, r1
 810bbb4:	b292      	uxth	r2, r2
 810bbb6:	815a      	strh	r2, [r3, #10]
 810bbb8:	d2ed      	bcs.n	810bb96 <coQueueGetReceiveBuffer+0x6a>
 810bbba:	e7ee      	b.n	810bb9a <coQueueGetReceiveBuffer+0x6e>
 810bbbc:	4288      	cmp	r0, r1
 810bbbe:	d3ea      	bcc.n	810bb96 <coQueueGetReceiveBuffer+0x6a>
 810bbc0:	895a      	ldrh	r2, [r3, #10]
 810bbc2:	3201      	adds	r2, #1
 810bbc4:	b292      	uxth	r2, r2
 810bbc6:	4295      	cmp	r5, r2
 810bbc8:	bf98      	it	ls
 810bbca:	2200      	movls	r2, #0
 810bbcc:	428a      	cmp	r2, r1
 810bbce:	d0e4      	beq.n	810bb9a <coQueueGetReceiveBuffer+0x6e>
 810bbd0:	4a13      	ldr	r2, [pc, #76]	@ (810bc20 <coQueueGetReceiveBuffer+0xf4>)
 810bbd2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 810bbd6:	6817      	ldr	r7, [r2, #0]
 810bbd8:	4a0d      	ldr	r2, [pc, #52]	@ (810bc10 <coQueueGetReceiveBuffer+0xe4>)
 810bbda:	eb07 0e0c 	add.w	lr, r7, ip
 810bbde:	ca03      	ldmia	r2!, {r0, r1}
 810bbe0:	f847 000c 	str.w	r0, [r7, ip]
 810bbe4:	f8ce 1004 	str.w	r1, [lr, #4]
 810bbe8:	2c00      	cmp	r4, #0
 810bbea:	d0ae      	beq.n	810bb4a <coQueueGetReceiveBuffer+0x1e>
 810bbec:	8918      	ldrh	r0, [r3, #8]
 810bbee:	4406      	add	r6, r0
 810bbf0:	42ae      	cmp	r6, r5
 810bbf2:	bfcd      	iteet	gt
 810bbf4:	2101      	movgt	r1, #1
 810bbf6:	2200      	movle	r2, #0
 810bbf8:	3008      	addle	r0, #8
 810bbfa:	1d50      	addgt	r0, r2, #5
 810bbfc:	bfce      	itee	gt
 810bbfe:	7319      	strbgt	r1, [r3, #12]
 810bc00:	19c0      	addle	r0, r0, r7
 810bc02:	731a      	strble	r2, [r3, #12]
 810bc04:	e7a9      	b.n	810bb5a <coQueueGetReceiveBuffer+0x2e>
 810bc06:	bf00      	nop
 810bc08:	10004f9c 	.word	0x10004f9c
 810bc0c:	10004f9a 	.word	0x10004f9a
 810bc10:	10004f7c 	.word	0x10004f7c
 810bc14:	10004f98 	.word	0x10004f98
 810bc18:	10004f96 	.word	0x10004f96
 810bc1c:	10004f94 	.word	0x10004f94
 810bc20:	10004f74 	.word	0x10004f74

0810bc24 <coQueueGetNextTransmitMessage>:
 810bc24:	4b09      	ldr	r3, [pc, #36]	@ (810bc4c <coQueueGetNextTransmitMessage+0x28>)
 810bc26:	781b      	ldrb	r3, [r3, #0]
 810bc28:	2b01      	cmp	r3, #1
 810bc2a:	d10c      	bne.n	810bc46 <coQueueGetNextTransmitMessage+0x22>
 810bc2c:	4b08      	ldr	r3, [pc, #32]	@ (810bc50 <coQueueGetNextTransmitMessage+0x2c>)
 810bc2e:	6818      	ldr	r0, [r3, #0]
 810bc30:	b900      	cbnz	r0, 810bc34 <coQueueGetNextTransmitMessage+0x10>
 810bc32:	4770      	bx	lr
 810bc34:	7d83      	ldrb	r3, [r0, #22]
 810bc36:	2b02      	cmp	r3, #2
 810bc38:	d103      	bne.n	810bc42 <coQueueGetNextTransmitMessage+0x1e>
 810bc3a:	2303      	movs	r3, #3
 810bc3c:	6000      	str	r0, [r0, #0]
 810bc3e:	7583      	strb	r3, [r0, #22]
 810bc40:	4770      	bx	lr
 810bc42:	6980      	ldr	r0, [r0, #24]
 810bc44:	e7f4      	b.n	810bc30 <coQueueGetNextTransmitMessage+0xc>
 810bc46:	2000      	movs	r0, #0
 810bc48:	4770      	bx	lr
 810bc4a:	bf00      	nop
 810bc4c:	10000014 	.word	0x10000014
 810bc50:	10004f78 	.word	0x10004f78

0810bc54 <coQueueMsgTransmitted>:
 810bc54:	6803      	ldr	r3, [r0, #0]
 810bc56:	2204      	movs	r2, #4
 810bc58:	759a      	strb	r2, [r3, #22]
 810bc5a:	4770      	bx	lr

0810bc5c <codrvCanTransmitInterrupt>:
 810bc5c:	4b28      	ldr	r3, [pc, #160]	@ (810bd00 <codrvCanTransmitInterrupt+0xa4>)
 810bc5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 810bc60:	781b      	ldrb	r3, [r3, #0]
 810bc62:	b08d      	sub	sp, #52	@ 0x34
 810bc64:	2b00      	cmp	r3, #0
 810bc66:	d03e      	beq.n	810bce6 <codrvCanTransmitInterrupt+0x8a>
 810bc68:	4e26      	ldr	r6, [pc, #152]	@ (810bd04 <codrvCanTransmitInterrupt+0xa8>)
 810bc6a:	6833      	ldr	r3, [r6, #0]
 810bc6c:	b913      	cbnz	r3, 810bc74 <codrvCanTransmitInterrupt+0x18>
 810bc6e:	f7ff ffd9 	bl	810bc24 <coQueueGetNextTransmitMessage>
 810bc72:	6030      	str	r0, [r6, #0]
 810bc74:	6834      	ldr	r4, [r6, #0]
 810bc76:	2c00      	cmp	r4, #0
 810bc78:	d035      	beq.n	810bce6 <codrvCanTransmitInterrupt+0x8a>
 810bc7a:	4a23      	ldr	r2, [pc, #140]	@ (810bd08 <codrvCanTransmitInterrupt+0xac>)
 810bc7c:	ab01      	add	r3, sp, #4
 810bc7e:	4f23      	ldr	r7, [pc, #140]	@ (810bd0c <codrvCanTransmitInterrupt+0xb0>)
 810bc80:	6810      	ldr	r0, [r2, #0]
 810bc82:	6851      	ldr	r1, [r2, #4]
 810bc84:	c303      	stmia	r3!, {r0, r1}
 810bc86:	2100      	movs	r1, #0
 810bc88:	6838      	ldr	r0, [r7, #0]
 810bc8a:	f7f6 fd4b 	bl	8102724 <HAL_FDCAN_IsTxBufferMessagePending>
 810bc8e:	4605      	mov	r5, r0
 810bc90:	bb48      	cbnz	r0, 810bce6 <codrvCanTransmitInterrupt+0x8a>
 810bc92:	2224      	movs	r2, #36	@ 0x24
 810bc94:	4601      	mov	r1, r0
 810bc96:	a803      	add	r0, sp, #12
 810bc98:	f000 f8a2 	bl	810bde0 <memset>
 810bc9c:	7aa3      	ldrb	r3, [r4, #10]
 810bc9e:	075a      	lsls	r2, r3, #29
 810bca0:	bf42      	ittt	mi
 810bca2:	f44f 1280 	movmi.w	r2, #1048576	@ 0x100000
 810bca6:	f44f 1000 	movmi.w	r0, #2097152	@ 0x200000
 810bcaa:	e9cd 2008 	strdmi	r2, r0, [sp, #32]
 810bcae:	6862      	ldr	r2, [r4, #4]
 810bcb0:	9203      	str	r2, [sp, #12]
 810bcb2:	7ae2      	ldrb	r2, [r4, #11]
 810bcb4:	0411      	lsls	r1, r2, #16
 810bcb6:	9106      	str	r1, [sp, #24]
 810bcb8:	0799      	lsls	r1, r3, #30
 810bcba:	bf44      	itt	mi
 810bcbc:	f04f 4180 	movmi.w	r1, #1073741824	@ 0x40000000
 810bcc0:	9104      	strmi	r1, [sp, #16]
 810bcc2:	071b      	lsls	r3, r3, #28
 810bcc4:	d417      	bmi.n	810bcf6 <codrvCanTransmitInterrupt+0x9a>
 810bcc6:	340c      	adds	r4, #12
 810bcc8:	ab01      	add	r3, sp, #4
 810bcca:	b2e9      	uxtb	r1, r5
 810bccc:	4291      	cmp	r1, r2
 810bcce:	d30c      	bcc.n	810bcea <codrvCanTransmitInterrupt+0x8e>
 810bcd0:	aa01      	add	r2, sp, #4
 810bcd2:	a903      	add	r1, sp, #12
 810bcd4:	6838      	ldr	r0, [r7, #0]
 810bcd6:	f7f6 fb0d 	bl	81022f4 <HAL_FDCAN_AddMessageToTxFifoQ>
 810bcda:	4604      	mov	r4, r0
 810bcdc:	b918      	cbnz	r0, 810bce6 <codrvCanTransmitInterrupt+0x8a>
 810bcde:	6830      	ldr	r0, [r6, #0]
 810bce0:	f7ff ffb8 	bl	810bc54 <coQueueMsgTransmitted>
 810bce4:	6034      	str	r4, [r6, #0]
 810bce6:	b00d      	add	sp, #52	@ 0x34
 810bce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810bcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bcee:	3501      	adds	r5, #1
 810bcf0:	f803 1b01 	strb.w	r1, [r3], #1
 810bcf4:	e7e9      	b.n	810bcca <codrvCanTransmitInterrupt+0x6e>
 810bcf6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 810bcfa:	9305      	str	r3, [sp, #20]
 810bcfc:	e7e8      	b.n	810bcd0 <codrvCanTransmitInterrupt+0x74>
 810bcfe:	bf00      	nop
 810bd00:	10004fa4 	.word	0x10004fa4
 810bd04:	10004fa8 	.word	0x10004fa8
 810bd08:	0810c035 	.word	0x0810c035
 810bd0c:	10000018 	.word	0x10000018

0810bd10 <codrvCanReceiveInterrupt>:
 810bd10:	b530      	push	{r4, r5, lr}
 810bd12:	4c1b      	ldr	r4, [pc, #108]	@ (810bd80 <codrvCanReceiveInterrupt+0x70>)
 810bd14:	b09b      	sub	sp, #108	@ 0x6c
 810bd16:	466a      	mov	r2, sp
 810bd18:	ab0a      	add	r3, sp, #40	@ 0x28
 810bd1a:	2140      	movs	r1, #64	@ 0x40
 810bd1c:	6820      	ldr	r0, [r4, #0]
 810bd1e:	f7f6 fb45 	bl	81023ac <HAL_FDCAN_GetRxMessage>
 810bd22:	4602      	mov	r2, r0
 810bd24:	b108      	cbz	r0, 810bd2a <codrvCanReceiveInterrupt+0x1a>
 810bd26:	b01b      	add	sp, #108	@ 0x6c
 810bd28:	bd30      	pop	{r4, r5, pc}
 810bd2a:	f89d 500e 	ldrb.w	r5, [sp, #14]
 810bd2e:	9b06      	ldr	r3, [sp, #24]
 810bd30:	2d08      	cmp	r5, #8
 810bd32:	9800      	ldr	r0, [sp, #0]
 810bd34:	bf28      	it	cs
 810bd36:	2508      	movcs	r5, #8
 810bd38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810bd3c:	9b01      	ldr	r3, [sp, #4]
 810bd3e:	bf08      	it	eq
 810bd40:	2204      	moveq	r2, #4
 810bd42:	4629      	mov	r1, r5
 810bd44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bd48:	9b02      	ldr	r3, [sp, #8]
 810bd4a:	bf04      	itt	eq
 810bd4c:	f042 0202 	orreq.w	r2, r2, #2
 810bd50:	b2d2      	uxtbeq	r2, r2
 810bd52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810bd56:	bf04      	itt	eq
 810bd58:	f042 0208 	orreq.w	r2, r2, #8
 810bd5c:	b2d2      	uxtbeq	r2, r2
 810bd5e:	f7ff fee5 	bl	810bb2c <coQueueGetReceiveBuffer>
 810bd62:	2800      	cmp	r0, #0
 810bd64:	d0d7      	beq.n	810bd16 <codrvCanReceiveInterrupt+0x6>
 810bd66:	ab0a      	add	r3, sp, #40	@ 0x28
 810bd68:	4405      	add	r5, r0
 810bd6a:	42a8      	cmp	r0, r5
 810bd6c:	d102      	bne.n	810bd74 <codrvCanReceiveInterrupt+0x64>
 810bd6e:	f7ff fe9d 	bl	810baac <coQueueReceiveBufferIsFilled>
 810bd72:	e7d0      	b.n	810bd16 <codrvCanReceiveInterrupt+0x6>
 810bd74:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bd78:	f800 2b01 	strb.w	r2, [r0], #1
 810bd7c:	e7f5      	b.n	810bd6a <codrvCanReceiveInterrupt+0x5a>
 810bd7e:	bf00      	nop
 810bd80:	10000018 	.word	0x10000018

0810bd84 <codrvCanErrorInterrupt>:
 810bd84:	b500      	push	{lr}
 810bd86:	4b0b      	ldr	r3, [pc, #44]	@ (810bdb4 <codrvCanErrorInterrupt+0x30>)
 810bd88:	b08d      	sub	sp, #52	@ 0x34
 810bd8a:	6818      	ldr	r0, [r3, #0]
 810bd8c:	a901      	add	r1, sp, #4
 810bd8e:	f7f6 fc79 	bl	8102684 <HAL_FDCAN_GetProtocolStatus>
 810bd92:	b928      	cbnz	r0, 810bda0 <codrvCanErrorInterrupt+0x1c>
 810bd94:	f000 f820 	bl	810bdd8 <codrvCanErrorGetFlags>
 810bd98:	9a06      	ldr	r2, [sp, #24]
 810bd9a:	2301      	movs	r3, #1
 810bd9c:	b11a      	cbz	r2, 810bda6 <codrvCanErrorInterrupt+0x22>
 810bd9e:	70c3      	strb	r3, [r0, #3]
 810bda0:	b00d      	add	sp, #52	@ 0x34
 810bda2:	f85d fb04 	ldr.w	pc, [sp], #4
 810bda6:	9a04      	ldr	r2, [sp, #16]
 810bda8:	b10a      	cbz	r2, 810bdae <codrvCanErrorInterrupt+0x2a>
 810bdaa:	7043      	strb	r3, [r0, #1]
 810bdac:	e7f8      	b.n	810bda0 <codrvCanErrorInterrupt+0x1c>
 810bdae:	7083      	strb	r3, [r0, #2]
 810bdb0:	e7f6      	b.n	810bda0 <codrvCanErrorInterrupt+0x1c>
 810bdb2:	bf00      	nop
 810bdb4:	10000018 	.word	0x10000018

0810bdb8 <FDCAN1_IT0_IRQHandler>:
 810bdb8:	b508      	push	{r3, lr}
 810bdba:	f7ff ff4f 	bl	810bc5c <codrvCanTransmitInterrupt>
 810bdbe:	f7ff ffa7 	bl	810bd10 <codrvCanReceiveInterrupt>
 810bdc2:	f7ff ffdf 	bl	810bd84 <codrvCanErrorInterrupt>
 810bdc6:	4b03      	ldr	r3, [pc, #12]	@ (810bdd4 <FDCAN1_IT0_IRQHandler+0x1c>)
 810bdc8:	6818      	ldr	r0, [r3, #0]
 810bdca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810bdce:	f7f6 bcbf 	b.w	8102750 <HAL_FDCAN_IRQHandler>
 810bdd2:	bf00      	nop
 810bdd4:	10000018 	.word	0x10000018

0810bdd8 <codrvCanErrorGetFlags>:
 810bdd8:	4800      	ldr	r0, [pc, #0]	@ (810bddc <codrvCanErrorGetFlags+0x4>)
 810bdda:	4770      	bx	lr
 810bddc:	10004fac 	.word	0x10004fac

0810bde0 <memset>:
 810bde0:	4402      	add	r2, r0
 810bde2:	4603      	mov	r3, r0
 810bde4:	4293      	cmp	r3, r2
 810bde6:	d100      	bne.n	810bdea <memset+0xa>
 810bde8:	4770      	bx	lr
 810bdea:	f803 1b01 	strb.w	r1, [r3], #1
 810bdee:	e7f9      	b.n	810bde4 <memset+0x4>

0810bdf0 <_reclaim_reent>:
 810bdf0:	4b29      	ldr	r3, [pc, #164]	@ (810be98 <_reclaim_reent+0xa8>)
 810bdf2:	681b      	ldr	r3, [r3, #0]
 810bdf4:	4283      	cmp	r3, r0
 810bdf6:	b570      	push	{r4, r5, r6, lr}
 810bdf8:	4604      	mov	r4, r0
 810bdfa:	d04b      	beq.n	810be94 <_reclaim_reent+0xa4>
 810bdfc:	69c3      	ldr	r3, [r0, #28]
 810bdfe:	b1ab      	cbz	r3, 810be2c <_reclaim_reent+0x3c>
 810be00:	68db      	ldr	r3, [r3, #12]
 810be02:	b16b      	cbz	r3, 810be20 <_reclaim_reent+0x30>
 810be04:	2500      	movs	r5, #0
 810be06:	69e3      	ldr	r3, [r4, #28]
 810be08:	68db      	ldr	r3, [r3, #12]
 810be0a:	5959      	ldr	r1, [r3, r5]
 810be0c:	2900      	cmp	r1, #0
 810be0e:	d13b      	bne.n	810be88 <_reclaim_reent+0x98>
 810be10:	3504      	adds	r5, #4
 810be12:	2d80      	cmp	r5, #128	@ 0x80
 810be14:	d1f7      	bne.n	810be06 <_reclaim_reent+0x16>
 810be16:	69e3      	ldr	r3, [r4, #28]
 810be18:	4620      	mov	r0, r4
 810be1a:	68d9      	ldr	r1, [r3, #12]
 810be1c:	f000 f872 	bl	810bf04 <_free_r>
 810be20:	69e3      	ldr	r3, [r4, #28]
 810be22:	6819      	ldr	r1, [r3, #0]
 810be24:	b111      	cbz	r1, 810be2c <_reclaim_reent+0x3c>
 810be26:	4620      	mov	r0, r4
 810be28:	f000 f86c 	bl	810bf04 <_free_r>
 810be2c:	6961      	ldr	r1, [r4, #20]
 810be2e:	b111      	cbz	r1, 810be36 <_reclaim_reent+0x46>
 810be30:	4620      	mov	r0, r4
 810be32:	f000 f867 	bl	810bf04 <_free_r>
 810be36:	69e1      	ldr	r1, [r4, #28]
 810be38:	b111      	cbz	r1, 810be40 <_reclaim_reent+0x50>
 810be3a:	4620      	mov	r0, r4
 810be3c:	f000 f862 	bl	810bf04 <_free_r>
 810be40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 810be42:	b111      	cbz	r1, 810be4a <_reclaim_reent+0x5a>
 810be44:	4620      	mov	r0, r4
 810be46:	f000 f85d 	bl	810bf04 <_free_r>
 810be4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810be4c:	b111      	cbz	r1, 810be54 <_reclaim_reent+0x64>
 810be4e:	4620      	mov	r0, r4
 810be50:	f000 f858 	bl	810bf04 <_free_r>
 810be54:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 810be56:	b111      	cbz	r1, 810be5e <_reclaim_reent+0x6e>
 810be58:	4620      	mov	r0, r4
 810be5a:	f000 f853 	bl	810bf04 <_free_r>
 810be5e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 810be60:	b111      	cbz	r1, 810be68 <_reclaim_reent+0x78>
 810be62:	4620      	mov	r0, r4
 810be64:	f000 f84e 	bl	810bf04 <_free_r>
 810be68:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 810be6a:	b111      	cbz	r1, 810be72 <_reclaim_reent+0x82>
 810be6c:	4620      	mov	r0, r4
 810be6e:	f000 f849 	bl	810bf04 <_free_r>
 810be72:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 810be74:	b111      	cbz	r1, 810be7c <_reclaim_reent+0x8c>
 810be76:	4620      	mov	r0, r4
 810be78:	f000 f844 	bl	810bf04 <_free_r>
 810be7c:	6a23      	ldr	r3, [r4, #32]
 810be7e:	b14b      	cbz	r3, 810be94 <_reclaim_reent+0xa4>
 810be80:	4620      	mov	r0, r4
 810be82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810be86:	4718      	bx	r3
 810be88:	680e      	ldr	r6, [r1, #0]
 810be8a:	4620      	mov	r0, r4
 810be8c:	f000 f83a 	bl	810bf04 <_free_r>
 810be90:	4631      	mov	r1, r6
 810be92:	e7bb      	b.n	810be0c <_reclaim_reent+0x1c>
 810be94:	bd70      	pop	{r4, r5, r6, pc}
 810be96:	bf00      	nop
 810be98:	1000001c 	.word	0x1000001c

0810be9c <__libc_init_array>:
 810be9c:	b570      	push	{r4, r5, r6, lr}
 810be9e:	4d0d      	ldr	r5, [pc, #52]	@ (810bed4 <__libc_init_array+0x38>)
 810bea0:	4c0d      	ldr	r4, [pc, #52]	@ (810bed8 <__libc_init_array+0x3c>)
 810bea2:	1b64      	subs	r4, r4, r5
 810bea4:	10a4      	asrs	r4, r4, #2
 810bea6:	2600      	movs	r6, #0
 810bea8:	42a6      	cmp	r6, r4
 810beaa:	d109      	bne.n	810bec0 <__libc_init_array+0x24>
 810beac:	4d0b      	ldr	r5, [pc, #44]	@ (810bedc <__libc_init_array+0x40>)
 810beae:	4c0c      	ldr	r4, [pc, #48]	@ (810bee0 <__libc_init_array+0x44>)
 810beb0:	f000 f87e 	bl	810bfb0 <_init>
 810beb4:	1b64      	subs	r4, r4, r5
 810beb6:	10a4      	asrs	r4, r4, #2
 810beb8:	2600      	movs	r6, #0
 810beba:	42a6      	cmp	r6, r4
 810bebc:	d105      	bne.n	810beca <__libc_init_array+0x2e>
 810bebe:	bd70      	pop	{r4, r5, r6, pc}
 810bec0:	f855 3b04 	ldr.w	r3, [r5], #4
 810bec4:	4798      	blx	r3
 810bec6:	3601      	adds	r6, #1
 810bec8:	e7ee      	b.n	810bea8 <__libc_init_array+0xc>
 810beca:	f855 3b04 	ldr.w	r3, [r5], #4
 810bece:	4798      	blx	r3
 810bed0:	3601      	adds	r6, #1
 810bed2:	e7f2      	b.n	810beba <__libc_init_array+0x1e>
 810bed4:	0810c0b4 	.word	0x0810c0b4
 810bed8:	0810c0b4 	.word	0x0810c0b4
 810bedc:	0810c0b4 	.word	0x0810c0b4
 810bee0:	0810c0b8 	.word	0x0810c0b8

0810bee4 <__retarget_lock_acquire_recursive>:
 810bee4:	4770      	bx	lr

0810bee6 <__retarget_lock_release_recursive>:
 810bee6:	4770      	bx	lr

0810bee8 <memcpy>:
 810bee8:	440a      	add	r2, r1
 810beea:	4291      	cmp	r1, r2
 810beec:	f100 33ff 	add.w	r3, r0, #4294967295
 810bef0:	d100      	bne.n	810bef4 <memcpy+0xc>
 810bef2:	4770      	bx	lr
 810bef4:	b510      	push	{r4, lr}
 810bef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 810befa:	f803 4f01 	strb.w	r4, [r3, #1]!
 810befe:	4291      	cmp	r1, r2
 810bf00:	d1f9      	bne.n	810bef6 <memcpy+0xe>
 810bf02:	bd10      	pop	{r4, pc}

0810bf04 <_free_r>:
 810bf04:	b538      	push	{r3, r4, r5, lr}
 810bf06:	4605      	mov	r5, r0
 810bf08:	2900      	cmp	r1, #0
 810bf0a:	d041      	beq.n	810bf90 <_free_r+0x8c>
 810bf0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810bf10:	1f0c      	subs	r4, r1, #4
 810bf12:	2b00      	cmp	r3, #0
 810bf14:	bfb8      	it	lt
 810bf16:	18e4      	addlt	r4, r4, r3
 810bf18:	f000 f83e 	bl	810bf98 <__malloc_lock>
 810bf1c:	4a1d      	ldr	r2, [pc, #116]	@ (810bf94 <_free_r+0x90>)
 810bf1e:	6813      	ldr	r3, [r2, #0]
 810bf20:	b933      	cbnz	r3, 810bf30 <_free_r+0x2c>
 810bf22:	6063      	str	r3, [r4, #4]
 810bf24:	6014      	str	r4, [r2, #0]
 810bf26:	4628      	mov	r0, r5
 810bf28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810bf2c:	f000 b83a 	b.w	810bfa4 <__malloc_unlock>
 810bf30:	42a3      	cmp	r3, r4
 810bf32:	d908      	bls.n	810bf46 <_free_r+0x42>
 810bf34:	6820      	ldr	r0, [r4, #0]
 810bf36:	1821      	adds	r1, r4, r0
 810bf38:	428b      	cmp	r3, r1
 810bf3a:	bf01      	itttt	eq
 810bf3c:	6819      	ldreq	r1, [r3, #0]
 810bf3e:	685b      	ldreq	r3, [r3, #4]
 810bf40:	1809      	addeq	r1, r1, r0
 810bf42:	6021      	streq	r1, [r4, #0]
 810bf44:	e7ed      	b.n	810bf22 <_free_r+0x1e>
 810bf46:	461a      	mov	r2, r3
 810bf48:	685b      	ldr	r3, [r3, #4]
 810bf4a:	b10b      	cbz	r3, 810bf50 <_free_r+0x4c>
 810bf4c:	42a3      	cmp	r3, r4
 810bf4e:	d9fa      	bls.n	810bf46 <_free_r+0x42>
 810bf50:	6811      	ldr	r1, [r2, #0]
 810bf52:	1850      	adds	r0, r2, r1
 810bf54:	42a0      	cmp	r0, r4
 810bf56:	d10b      	bne.n	810bf70 <_free_r+0x6c>
 810bf58:	6820      	ldr	r0, [r4, #0]
 810bf5a:	4401      	add	r1, r0
 810bf5c:	1850      	adds	r0, r2, r1
 810bf5e:	4283      	cmp	r3, r0
 810bf60:	6011      	str	r1, [r2, #0]
 810bf62:	d1e0      	bne.n	810bf26 <_free_r+0x22>
 810bf64:	6818      	ldr	r0, [r3, #0]
 810bf66:	685b      	ldr	r3, [r3, #4]
 810bf68:	6053      	str	r3, [r2, #4]
 810bf6a:	4408      	add	r0, r1
 810bf6c:	6010      	str	r0, [r2, #0]
 810bf6e:	e7da      	b.n	810bf26 <_free_r+0x22>
 810bf70:	d902      	bls.n	810bf78 <_free_r+0x74>
 810bf72:	230c      	movs	r3, #12
 810bf74:	602b      	str	r3, [r5, #0]
 810bf76:	e7d6      	b.n	810bf26 <_free_r+0x22>
 810bf78:	6820      	ldr	r0, [r4, #0]
 810bf7a:	1821      	adds	r1, r4, r0
 810bf7c:	428b      	cmp	r3, r1
 810bf7e:	bf04      	itt	eq
 810bf80:	6819      	ldreq	r1, [r3, #0]
 810bf82:	685b      	ldreq	r3, [r3, #4]
 810bf84:	6063      	str	r3, [r4, #4]
 810bf86:	bf04      	itt	eq
 810bf88:	1809      	addeq	r1, r1, r0
 810bf8a:	6021      	streq	r1, [r4, #0]
 810bf8c:	6054      	str	r4, [r2, #4]
 810bf8e:	e7ca      	b.n	810bf26 <_free_r+0x22>
 810bf90:	bd38      	pop	{r3, r4, r5, pc}
 810bf92:	bf00      	nop
 810bf94:	100050f0 	.word	0x100050f0

0810bf98 <__malloc_lock>:
 810bf98:	4801      	ldr	r0, [pc, #4]	@ (810bfa0 <__malloc_lock+0x8>)
 810bf9a:	f7ff bfa3 	b.w	810bee4 <__retarget_lock_acquire_recursive>
 810bf9e:	bf00      	nop
 810bfa0:	100050ec 	.word	0x100050ec

0810bfa4 <__malloc_unlock>:
 810bfa4:	4801      	ldr	r0, [pc, #4]	@ (810bfac <__malloc_unlock+0x8>)
 810bfa6:	f7ff bf9e 	b.w	810bee6 <__retarget_lock_release_recursive>
 810bfaa:	bf00      	nop
 810bfac:	100050ec 	.word	0x100050ec

0810bfb0 <_init>:
 810bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bfb2:	bf00      	nop
 810bfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bfb6:	bc08      	pop	{r3}
 810bfb8:	469e      	mov	lr, r3
 810bfba:	4770      	bx	lr

0810bfbc <_fini>:
 810bfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bfbe:	bf00      	nop
 810bfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bfc2:	bc08      	pop	{r3}
 810bfc4:	469e      	mov	lr, r3
 810bfc6:	4770      	bx	lr
