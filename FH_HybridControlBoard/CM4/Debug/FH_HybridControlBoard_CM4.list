
FH_HybridControlBoard_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c160  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0810c400  0810c400  0000d400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810c4ec  0810c4ec  0000d4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810c4f0  0810c4f0  0000d4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000001c  10000000  0810c4f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RAM_D3       00000208  1000001c  0810c510  0000e01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ca8  10000224  0810c718  0000e224  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10004ecc  0810c718  0000eecc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY
 10 .debug_info   000210d2  00000000  00000000  0000e252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000048e1  00000000  00000000  0002f324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cd0  00000000  00000000  00033c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015e7  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004077d  00000000  00000000  00036ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000244cb  00000000  00000000  0007763c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001a7d70  00000000  00000000  0009bb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000093  00000000  00000000  00243877  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007990  00000000  00000000  0024390c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a7  00000000  00000000  0024b29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000224 	.word	0x10000224
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810c3e8 	.word	0x0810c3e8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000228 	.word	0x10000228
 81002dc:	0810c3e8 	.word	0x0810c3e8

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b09      	ldr	r3, [pc, #36]	@ (810030c <SystemInit+0x2c>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002ea:	4a08      	ldr	r2, [pc, #32]	@ (810030c <SystemInit+0x2c>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b05      	ldr	r3, [pc, #20]	@ (810030c <SystemInit+0x2c>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a04      	ldr	r2, [pc, #16]	@ (810030c <SystemInit+0x2c>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100316:	4b2a      	ldr	r3, [pc, #168]	@ (81003c0 <main+0xb0>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810031c:	4a28      	ldr	r2, [pc, #160]	@ (81003c0 <main+0xb0>)
 810031e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100326:	4b26      	ldr	r3, [pc, #152]	@ (81003c0 <main+0xb0>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810032c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f003 fa49 	bl	81037cc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f003 fb23 	bl	8103984 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f003 faa4 	bl	8103890 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b1e      	ldr	r3, [pc, #120]	@ (81003c4 <main+0xb4>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d108      	bne.n	8100368 <main+0x58>
 8100356:	4b1c      	ldr	r3, [pc, #112]	@ (81003c8 <main+0xb8>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810035c:	4a1a      	ldr	r2, [pc, #104]	@ (81003c8 <main+0xb8>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100366:	e007      	b.n	8100378 <main+0x68>
 8100368:	4b17      	ldr	r3, [pc, #92]	@ (81003c8 <main+0xb8>)
 810036a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810036e:	4a16      	ldr	r2, [pc, #88]	@ (81003c8 <main+0xb8>)
 8100370:	f043 0301 	orr.w	r3, r3, #1
 8100374:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100378:	f000 fdb4 	bl	8100ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 810037c:	f000 facc 	bl	8100918 <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100380:	f000 fa66 	bl	8100850 <MX_GPIO_Init>
  MX_ADC3_Init();
 8100384:	f000 f828 	bl	81003d8 <MX_ADC3_Init>
  MX_FDCAN1_Init();
 8100388:	f000 f8a2 	bl	81004d0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 810038c:	f000 f91a 	bl	81005c4 <MX_FDCAN2_Init>
  MX_IWDG2_Init();
 8100390:	f000 f97c 	bl	810068c <MX_IWDG2_Init>
  MX_SDMMC1_SD_Init();
 8100394:	f000 f9a4 	bl	81006e0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8100398:	f000 f9d0 	bl	810073c <MX_SPI1_Init>
  MX_WWDG2_Init();
 810039c:	f000 fa2e 	bl	81007fc <MX_WWDG2_Init>
  MX_FATFS_Init();
 81003a0:	f008 fa9a 	bl	81088d8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 81003a4:	f008 fd34 	bl	8108e10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81003a8:	4a08      	ldr	r2, [pc, #32]	@ (81003cc <main+0xbc>)
 81003aa:	2100      	movs	r1, #0
 81003ac:	4808      	ldr	r0, [pc, #32]	@ (81003d0 <main+0xc0>)
 81003ae:	f008 fdb0 	bl	8108f12 <osThreadNew>
 81003b2:	4603      	mov	r3, r0
 81003b4:	4a07      	ldr	r2, [pc, #28]	@ (81003d4 <main+0xc4>)
 81003b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 81003b8:	f008 fd70 	bl	8108e9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003bc:	bf00      	nop
 81003be:	e7fd      	b.n	81003bc <main+0xac>
 81003c0:	58024400 	.word	0x58024400
 81003c4:	e000ed00 	.word	0xe000ed00
 81003c8:	58026400 	.word	0x58026400
 81003cc:	0810c488 	.word	0x0810c488
 81003d0:	081008fd 	.word	0x081008fd
 81003d4:	1000050c 	.word	0x1000050c

081003d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81003d8:	b580      	push	{r7, lr}
 81003da:	b088      	sub	sp, #32
 81003dc:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_ADC3, RESMGR_FLAGS_ACCESS_NORMAL | \
 81003de:	2300      	movs	r3, #0
 81003e0:	2200      	movs	r2, #0
 81003e2:	210a      	movs	r1, #10
 81003e4:	2001      	movs	r0, #1
 81003e6:	f00b fd07 	bl	810bdf8 <ResMgr_Request>
 81003ea:	4603      	mov	r3, r0
 81003ec:	2b00      	cmp	r3, #0
 81003ee:	d001      	beq.n	81003f4 <MX_ADC3_Init+0x1c>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_ADC3 */
    Error_Handler();
 81003f0:	f000 fa8c 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81003f4:	1d3b      	adds	r3, r7, #4
 81003f6:	2200      	movs	r2, #0
 81003f8:	601a      	str	r2, [r3, #0]
 81003fa:	605a      	str	r2, [r3, #4]
 81003fc:	609a      	str	r2, [r3, #8]
 81003fe:	60da      	str	r2, [r3, #12]
 8100400:	611a      	str	r2, [r3, #16]
 8100402:	615a      	str	r2, [r3, #20]
 8100404:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100406:	4b2f      	ldr	r3, [pc, #188]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100408:	4a2f      	ldr	r2, [pc, #188]	@ (81004c8 <MX_ADC3_Init+0xf0>)
 810040a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810040c:	4b2d      	ldr	r3, [pc, #180]	@ (81004c4 <MX_ADC3_Init+0xec>)
 810040e:	2200      	movs	r2, #0
 8100410:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100412:	4b2c      	ldr	r3, [pc, #176]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100414:	2200      	movs	r2, #0
 8100416:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100418:	4b2a      	ldr	r3, [pc, #168]	@ (81004c4 <MX_ADC3_Init+0xec>)
 810041a:	2204      	movs	r2, #4
 810041c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 810041e:	4b29      	ldr	r3, [pc, #164]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100420:	2200      	movs	r2, #0
 8100422:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100424:	4b27      	ldr	r3, [pc, #156]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100426:	2200      	movs	r2, #0
 8100428:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810042a:	4b26      	ldr	r3, [pc, #152]	@ (81004c4 <MX_ADC3_Init+0xec>)
 810042c:	2201      	movs	r2, #1
 810042e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100430:	4b24      	ldr	r3, [pc, #144]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100432:	2200      	movs	r2, #0
 8100434:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100436:	4b23      	ldr	r3, [pc, #140]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100438:	2200      	movs	r2, #0
 810043a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810043c:	4b21      	ldr	r3, [pc, #132]	@ (81004c4 <MX_ADC3_Init+0xec>)
 810043e:	2200      	movs	r2, #0
 8100440:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100442:	4b20      	ldr	r3, [pc, #128]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100444:	2200      	movs	r2, #0
 8100446:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100448:	4b1e      	ldr	r3, [pc, #120]	@ (81004c4 <MX_ADC3_Init+0xec>)
 810044a:	2200      	movs	r2, #0
 810044c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810044e:	4b1d      	ldr	r3, [pc, #116]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100450:	2200      	movs	r2, #0
 8100452:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100454:	4b1b      	ldr	r3, [pc, #108]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100456:	2200      	movs	r2, #0
 8100458:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 810045c:	4b19      	ldr	r3, [pc, #100]	@ (81004c4 <MX_ADC3_Init+0xec>)
 810045e:	2201      	movs	r2, #1
 8100460:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100462:	4818      	ldr	r0, [pc, #96]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100464:	f000 ffae 	bl	81013c4 <HAL_ADC_Init>
 8100468:	4603      	mov	r3, r0
 810046a:	2b00      	cmp	r3, #0
 810046c:	d001      	beq.n	8100472 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 810046e:	f000 fa4d 	bl	810090c <Error_Handler>
  }
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8100472:	4b14      	ldr	r3, [pc, #80]	@ (81004c4 <MX_ADC3_Init+0xec>)
 8100474:	2200      	movs	r2, #0
 8100476:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100478:	4812      	ldr	r0, [pc, #72]	@ (81004c4 <MX_ADC3_Init+0xec>)
 810047a:	f000 ffa3 	bl	81013c4 <HAL_ADC_Init>
 810047e:	4603      	mov	r3, r0
 8100480:	2b00      	cmp	r3, #0
 8100482:	d001      	beq.n	8100488 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8100484:	f000 fa42 	bl	810090c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8100488:	4b10      	ldr	r3, [pc, #64]	@ (81004cc <MX_ADC3_Init+0xf4>)
 810048a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810048c:	2306      	movs	r3, #6
 810048e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100490:	2300      	movs	r3, #0
 8100492:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100494:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8100498:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810049a:	2304      	movs	r3, #4
 810049c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 810049e:	2300      	movs	r3, #0
 81004a0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81004a2:	2300      	movs	r3, #0
 81004a4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81004a6:	1d3b      	adds	r3, r7, #4
 81004a8:	4619      	mov	r1, r3
 81004aa:	4806      	ldr	r0, [pc, #24]	@ (81004c4 <MX_ADC3_Init+0xec>)
 81004ac:	f001 f92c 	bl	8101708 <HAL_ADC_ConfigChannel>
 81004b0:	4603      	mov	r3, r0
 81004b2:	2b00      	cmp	r3, #0
 81004b4:	d001      	beq.n	81004ba <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 81004b6:	f000 fa29 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81004ba:	bf00      	nop
 81004bc:	3720      	adds	r7, #32
 81004be:	46bd      	mov	sp, r7
 81004c0:	bd80      	pop	{r7, pc}
 81004c2:	bf00      	nop
 81004c4:	10000240 	.word	0x10000240
 81004c8:	58026000 	.word	0x58026000
 81004cc:	cb840000 	.word	0xcb840000

081004d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 81004d0:	b580      	push	{r7, lr}
 81004d2:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_FDCAN1, RESMGR_FLAGS_ACCESS_NORMAL | \
 81004d4:	2300      	movs	r3, #0
 81004d6:	2200      	movs	r2, #0
 81004d8:	210a      	movs	r1, #10
 81004da:	200b      	movs	r0, #11
 81004dc:	f00b fc8c 	bl	810bdf8 <ResMgr_Request>
 81004e0:	4603      	mov	r3, r0
 81004e2:	2b00      	cmp	r3, #0
 81004e4:	d001      	beq.n	81004ea <MX_FDCAN1_Init+0x1a>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_FDCAN1 */
    Error_Handler();
 81004e6:	f000 fa11 	bl	810090c <Error_Handler>
    /* USER CODE END RESMGR_UTILITY_FDCAN1 */
  }
  if (ResMgr_Request(RESMGR_ID_FDCAN_CCU, RESMGR_FLAGS_ACCESS_NORMAL | \
 81004ea:	2300      	movs	r3, #0
 81004ec:	2200      	movs	r2, #0
 81004ee:	210a      	movs	r1, #10
 81004f0:	200a      	movs	r0, #10
 81004f2:	f00b fc81 	bl	810bdf8 <ResMgr_Request>
 81004f6:	4603      	mov	r3, r0
 81004f8:	2b00      	cmp	r3, #0
 81004fa:	d001      	beq.n	8100500 <MX_FDCAN1_Init+0x30>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_FDCAN_CCU */
    Error_Handler();
 81004fc:	f000 fa06 	bl	810090c <Error_Handler>
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8100500:	4b2e      	ldr	r3, [pc, #184]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100502:	4a2f      	ldr	r2, [pc, #188]	@ (81005c0 <MX_FDCAN1_Init+0xf0>)
 8100504:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100506:	4b2d      	ldr	r3, [pc, #180]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100508:	2200      	movs	r2, #0
 810050a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 810050c:	4b2b      	ldr	r3, [pc, #172]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810050e:	2200      	movs	r2, #0
 8100510:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8100512:	4b2a      	ldr	r3, [pc, #168]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100514:	2200      	movs	r2, #0
 8100516:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100518:	4b28      	ldr	r3, [pc, #160]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810051a:	2200      	movs	r2, #0
 810051c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 810051e:	4b27      	ldr	r3, [pc, #156]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100520:	2200      	movs	r2, #0
 8100522:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8100524:	4b25      	ldr	r3, [pc, #148]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100526:	2210      	movs	r2, #16
 8100528:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 810052a:	4b24      	ldr	r3, [pc, #144]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810052c:	2201      	movs	r2, #1
 810052e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8100530:	4b22      	ldr	r3, [pc, #136]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100532:	2202      	movs	r2, #2
 8100534:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8100536:	4b21      	ldr	r3, [pc, #132]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100538:	2202      	movs	r2, #2
 810053a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 810053c:	4b1f      	ldr	r3, [pc, #124]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810053e:	2201      	movs	r2, #1
 8100540:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8100542:	4b1e      	ldr	r3, [pc, #120]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100544:	2201      	movs	r2, #1
 8100546:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8100548:	4b1c      	ldr	r3, [pc, #112]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810054a:	2201      	movs	r2, #1
 810054c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 810054e:	4b1b      	ldr	r3, [pc, #108]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100550:	2201      	movs	r2, #1
 8100552:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8100554:	4b19      	ldr	r3, [pc, #100]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100556:	2200      	movs	r2, #0
 8100558:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 810055a:	4b18      	ldr	r3, [pc, #96]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810055c:	2200      	movs	r2, #0
 810055e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8100560:	4b16      	ldr	r3, [pc, #88]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100562:	2200      	movs	r2, #0
 8100564:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8100566:	4b15      	ldr	r3, [pc, #84]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100568:	2200      	movs	r2, #0
 810056a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 810056c:	4b13      	ldr	r3, [pc, #76]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810056e:	2204      	movs	r2, #4
 8100570:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8100572:	4b12      	ldr	r3, [pc, #72]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100574:	2200      	movs	r2, #0
 8100576:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100578:	4b10      	ldr	r3, [pc, #64]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810057a:	2204      	movs	r2, #4
 810057c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 810057e:	4b0f      	ldr	r3, [pc, #60]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100580:	2200      	movs	r2, #0
 8100582:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100584:	4b0d      	ldr	r3, [pc, #52]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100586:	2204      	movs	r2, #4
 8100588:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 810058a:	4b0c      	ldr	r3, [pc, #48]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810058c:	2200      	movs	r2, #0
 810058e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100590:	4b0a      	ldr	r3, [pc, #40]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100592:	2200      	movs	r2, #0
 8100594:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8100596:	4b09      	ldr	r3, [pc, #36]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 8100598:	2200      	movs	r2, #0
 810059a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 810059c:	4b07      	ldr	r3, [pc, #28]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 810059e:	2200      	movs	r2, #0
 81005a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 81005a2:	4b06      	ldr	r3, [pc, #24]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 81005a4:	2204      	movs	r2, #4
 81005a6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 81005a8:	4804      	ldr	r0, [pc, #16]	@ (81005bc <MX_FDCAN1_Init+0xec>)
 81005aa:	f001 fe0d 	bl	81021c8 <HAL_FDCAN_Init>
 81005ae:	4603      	mov	r3, r0
 81005b0:	2b00      	cmp	r3, #0
 81005b2:	d001      	beq.n	81005b8 <MX_FDCAN1_Init+0xe8>
  {
    Error_Handler();
 81005b4:	f000 f9aa 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 81005b8:	bf00      	nop
 81005ba:	bd80      	pop	{r7, pc}
 81005bc:	100002a4 	.word	0x100002a4
 81005c0:	4000a000 	.word	0x4000a000

081005c4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 81005c4:	b580      	push	{r7, lr}
 81005c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 81005c8:	4b2e      	ldr	r3, [pc, #184]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005ca:	4a2f      	ldr	r2, [pc, #188]	@ (8100688 <MX_FDCAN2_Init+0xc4>)
 81005cc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005d0:	2200      	movs	r2, #0
 81005d2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 81005d4:	4b2b      	ldr	r3, [pc, #172]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005d6:	2200      	movs	r2, #0
 81005d8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 81005da:	4b2a      	ldr	r3, [pc, #168]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005dc:	2200      	movs	r2, #0
 81005de:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 81005e0:	4b28      	ldr	r3, [pc, #160]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005e2:	2200      	movs	r2, #0
 81005e4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 81005e6:	4b27      	ldr	r3, [pc, #156]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005e8:	2200      	movs	r2, #0
 81005ea:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 81005ec:	4b25      	ldr	r3, [pc, #148]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005ee:	2210      	movs	r2, #16
 81005f0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 81005f2:	4b24      	ldr	r3, [pc, #144]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005f4:	2201      	movs	r2, #1
 81005f6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 81005f8:	4b22      	ldr	r3, [pc, #136]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 81005fa:	2202      	movs	r2, #2
 81005fc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 81005fe:	4b21      	ldr	r3, [pc, #132]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100600:	2202      	movs	r2, #2
 8100602:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8100604:	4b1f      	ldr	r3, [pc, #124]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100606:	2201      	movs	r2, #1
 8100608:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 810060a:	4b1e      	ldr	r3, [pc, #120]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 810060c:	2201      	movs	r2, #1
 810060e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8100610:	4b1c      	ldr	r3, [pc, #112]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100612:	2201      	movs	r2, #1
 8100614:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8100616:	4b1b      	ldr	r3, [pc, #108]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100618:	2201      	movs	r2, #1
 810061a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 810061c:	4b19      	ldr	r3, [pc, #100]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 810061e:	2200      	movs	r2, #0
 8100620:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8100622:	4b18      	ldr	r3, [pc, #96]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100624:	2200      	movs	r2, #0
 8100626:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100628:	4b16      	ldr	r3, [pc, #88]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 810062a:	2200      	movs	r2, #0
 810062c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 810062e:	4b15      	ldr	r3, [pc, #84]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100630:	2200      	movs	r2, #0
 8100632:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100634:	4b13      	ldr	r3, [pc, #76]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100636:	2204      	movs	r2, #4
 8100638:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 810063a:	4b12      	ldr	r3, [pc, #72]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 810063c:	2200      	movs	r2, #0
 810063e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100640:	4b10      	ldr	r3, [pc, #64]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100642:	2204      	movs	r2, #4
 8100644:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8100646:	4b0f      	ldr	r3, [pc, #60]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100648:	2200      	movs	r2, #0
 810064a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 810064c:	4b0d      	ldr	r3, [pc, #52]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 810064e:	2204      	movs	r2, #4
 8100650:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8100652:	4b0c      	ldr	r3, [pc, #48]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100654:	2200      	movs	r2, #0
 8100656:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100658:	4b0a      	ldr	r3, [pc, #40]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 810065a:	2200      	movs	r2, #0
 810065c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 810065e:	4b09      	ldr	r3, [pc, #36]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100660:	2200      	movs	r2, #0
 8100662:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100664:	4b07      	ldr	r3, [pc, #28]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100666:	2200      	movs	r2, #0
 8100668:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 810066a:	4b06      	ldr	r3, [pc, #24]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 810066c:	2204      	movs	r2, #4
 810066e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8100670:	4804      	ldr	r0, [pc, #16]	@ (8100684 <MX_FDCAN2_Init+0xc0>)
 8100672:	f001 fda9 	bl	81021c8 <HAL_FDCAN_Init>
 8100676:	4603      	mov	r3, r0
 8100678:	2b00      	cmp	r3, #0
 810067a:	d001      	beq.n	8100680 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 810067c:	f000 f946 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8100680:	bf00      	nop
 8100682:	bd80      	pop	{r7, pc}
 8100684:	10000344 	.word	0x10000344
 8100688:	4000a400 	.word	0x4000a400

0810068c <MX_IWDG2_Init>:
  * @brief IWDG2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG2_Init(void)
{
 810068c:	b580      	push	{r7, lr}
 810068e:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_IWDG2, RESMGR_FLAGS_ACCESS_NORMAL | \
 8100690:	2300      	movs	r3, #0
 8100692:	2200      	movs	r2, #0
 8100694:	2112      	movs	r1, #18
 8100696:	2010      	movs	r0, #16
 8100698:	f00b fbae 	bl	810bdf8 <ResMgr_Request>
 810069c:	4603      	mov	r3, r0
 810069e:	2b00      	cmp	r3, #0
 81006a0:	d001      	beq.n	81006a6 <MX_IWDG2_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_IWDG2 */
    Error_Handler();
 81006a2:	f000 f933 	bl	810090c <Error_Handler>
  /* USER CODE END IWDG2_Init 0 */

  /* USER CODE BEGIN IWDG2_Init 1 */

  /* USER CODE END IWDG2_Init 1 */
  hiwdg2.Instance = IWDG2;
 81006a6:	4b0c      	ldr	r3, [pc, #48]	@ (81006d8 <MX_IWDG2_Init+0x4c>)
 81006a8:	4a0c      	ldr	r2, [pc, #48]	@ (81006dc <MX_IWDG2_Init+0x50>)
 81006aa:	601a      	str	r2, [r3, #0]
  hiwdg2.Init.Prescaler = IWDG_PRESCALER_4;
 81006ac:	4b0a      	ldr	r3, [pc, #40]	@ (81006d8 <MX_IWDG2_Init+0x4c>)
 81006ae:	2200      	movs	r2, #0
 81006b0:	605a      	str	r2, [r3, #4]
  hiwdg2.Init.Window = 4095;
 81006b2:	4b09      	ldr	r3, [pc, #36]	@ (81006d8 <MX_IWDG2_Init+0x4c>)
 81006b4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 81006b8:	60da      	str	r2, [r3, #12]
  hiwdg2.Init.Reload = 4095;
 81006ba:	4b07      	ldr	r3, [pc, #28]	@ (81006d8 <MX_IWDG2_Init+0x4c>)
 81006bc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 81006c0:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg2) != HAL_OK)
 81006c2:	4805      	ldr	r0, [pc, #20]	@ (81006d8 <MX_IWDG2_Init+0x4c>)
 81006c4:	f003 f894 	bl	81037f0 <HAL_IWDG_Init>
 81006c8:	4603      	mov	r3, r0
 81006ca:	2b00      	cmp	r3, #0
 81006cc:	d001      	beq.n	81006d2 <MX_IWDG2_Init+0x46>
  {
    Error_Handler();
 81006ce:	f000 f91d 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG2_Init 2 */

  /* USER CODE END IWDG2_Init 2 */

}
 81006d2:	bf00      	nop
 81006d4:	bd80      	pop	{r7, pc}
 81006d6:	bf00      	nop
 81006d8:	100003e4 	.word	0x100003e4
 81006dc:	58004c00 	.word	0x58004c00

081006e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 81006e0:	b580      	push	{r7, lr}
 81006e2:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_SDMMC1, RESMGR_FLAGS_ACCESS_NORMAL | \
 81006e4:	2300      	movs	r3, #0
 81006e6:	2200      	movs	r2, #0
 81006e8:	210a      	movs	r1, #10
 81006ea:	2013      	movs	r0, #19
 81006ec:	f00b fb84 	bl	810bdf8 <ResMgr_Request>
 81006f0:	4603      	mov	r3, r0
 81006f2:	2b00      	cmp	r3, #0
 81006f4:	d001      	beq.n	81006fa <MX_SDMMC1_SD_Init+0x1a>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_SDMMC1 */
    Error_Handler();
 81006f6:	f000 f909 	bl	810090c <Error_Handler>
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 81006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8100734 <MX_SDMMC1_SD_Init+0x54>)
 81006fc:	4a0e      	ldr	r2, [pc, #56]	@ (8100738 <MX_SDMMC1_SD_Init+0x58>)
 81006fe:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100700:	4b0c      	ldr	r3, [pc, #48]	@ (8100734 <MX_SDMMC1_SD_Init+0x54>)
 8100702:	2200      	movs	r2, #0
 8100704:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100706:	4b0b      	ldr	r3, [pc, #44]	@ (8100734 <MX_SDMMC1_SD_Init+0x54>)
 8100708:	2200      	movs	r2, #0
 810070a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 810070c:	4b09      	ldr	r3, [pc, #36]	@ (8100734 <MX_SDMMC1_SD_Init+0x54>)
 810070e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8100712:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100714:	4b07      	ldr	r3, [pc, #28]	@ (8100734 <MX_SDMMC1_SD_Init+0x54>)
 8100716:	2200      	movs	r2, #0
 8100718:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 810071a:	4b06      	ldr	r3, [pc, #24]	@ (8100734 <MX_SDMMC1_SD_Init+0x54>)
 810071c:	2200      	movs	r2, #0
 810071e:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100720:	4804      	ldr	r0, [pc, #16]	@ (8100734 <MX_SDMMC1_SD_Init+0x54>)
 8100722:	f006 f811 	bl	8106748 <HAL_SD_Init>
 8100726:	4603      	mov	r3, r0
 8100728:	2b00      	cmp	r3, #0
 810072a:	d001      	beq.n	8100730 <MX_SDMMC1_SD_Init+0x50>
  {
    Error_Handler();
 810072c:	f000 f8ee 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100730:	bf00      	nop
 8100732:	bd80      	pop	{r7, pc}
 8100734:	100003f4 	.word	0x100003f4
 8100738:	52007000 	.word	0x52007000

0810073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 810073c:	b580      	push	{r7, lr}
 810073e:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_SPI1, RESMGR_FLAGS_ACCESS_NORMAL | \
 8100740:	2300      	movs	r3, #0
 8100742:	2200      	movs	r2, #0
 8100744:	210a      	movs	r1, #10
 8100746:	2014      	movs	r0, #20
 8100748:	f00b fb56 	bl	810bdf8 <ResMgr_Request>
 810074c:	4603      	mov	r3, r0
 810074e:	2b00      	cmp	r3, #0
 8100750:	d001      	beq.n	8100756 <MX_SPI1_Init+0x1a>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_SPI1 */
    Error_Handler();
 8100752:	f000 f8db 	bl	810090c <Error_Handler>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8100756:	4b27      	ldr	r3, [pc, #156]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 8100758:	4a27      	ldr	r2, [pc, #156]	@ (81007f8 <MX_SPI1_Init+0xbc>)
 810075a:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810075c:	4b25      	ldr	r3, [pc, #148]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 810075e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100762:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8100764:	4b23      	ldr	r3, [pc, #140]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 8100766:	2200      	movs	r2, #0
 8100768:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 810076a:	4b22      	ldr	r3, [pc, #136]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 810076c:	2203      	movs	r2, #3
 810076e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100770:	4b20      	ldr	r3, [pc, #128]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 8100772:	2200      	movs	r2, #0
 8100774:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100776:	4b1f      	ldr	r3, [pc, #124]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 8100778:	2200      	movs	r2, #0
 810077a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810077c:	4b1d      	ldr	r3, [pc, #116]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 810077e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8100782:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100784:	4b1b      	ldr	r3, [pc, #108]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 8100786:	2200      	movs	r2, #0
 8100788:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810078a:	4b1a      	ldr	r3, [pc, #104]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 810078c:	2200      	movs	r2, #0
 810078e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8100790:	4b18      	ldr	r3, [pc, #96]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 8100792:	2200      	movs	r2, #0
 8100794:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100796:	4b17      	ldr	r3, [pc, #92]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 8100798:	2200      	movs	r2, #0
 810079a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810079c:	4b15      	ldr	r3, [pc, #84]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 810079e:	2200      	movs	r2, #0
 81007a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 81007a2:	4b14      	ldr	r3, [pc, #80]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 81007a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81007aa:	4b12      	ldr	r3, [pc, #72]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007ac:	2200      	movs	r2, #0
 81007ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81007b0:	4b10      	ldr	r3, [pc, #64]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007b2:	2200      	movs	r2, #0
 81007b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007b6:	4b0f      	ldr	r3, [pc, #60]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007b8:	2200      	movs	r2, #0
 81007ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81007bc:	4b0d      	ldr	r3, [pc, #52]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007be:	2200      	movs	r2, #0
 81007c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81007c2:	4b0c      	ldr	r3, [pc, #48]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007c4:	2200      	movs	r2, #0
 81007c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81007c8:	4b0a      	ldr	r3, [pc, #40]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007ca:	2200      	movs	r2, #0
 81007cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81007ce:	4b09      	ldr	r3, [pc, #36]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007d0:	2200      	movs	r2, #0
 81007d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81007d4:	4b07      	ldr	r3, [pc, #28]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007d6:	2200      	movs	r2, #0
 81007d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81007da:	4b06      	ldr	r3, [pc, #24]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007dc:	2200      	movs	r2, #0
 81007de:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81007e0:	4804      	ldr	r0, [pc, #16]	@ (81007f4 <MX_SPI1_Init+0xb8>)
 81007e2:	f007 f99b 	bl	8107b1c <HAL_SPI_Init>
 81007e6:	4603      	mov	r3, r0
 81007e8:	2b00      	cmp	r3, #0
 81007ea:	d001      	beq.n	81007f0 <MX_SPI1_Init+0xb4>
  {
    Error_Handler();
 81007ec:	f000 f88e 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81007f0:	bf00      	nop
 81007f2:	bd80      	pop	{r7, pc}
 81007f4:	10000470 	.word	0x10000470
 81007f8:	40013000 	.word	0x40013000

081007fc <MX_WWDG2_Init>:
  * @brief WWDG2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG2_Init(void)
{
 81007fc:	b580      	push	{r7, lr}
 81007fe:	af00      	add	r7, sp, #0

  if (ResMgr_Request(RESMGR_ID_WWDG2, RESMGR_FLAGS_ACCESS_NORMAL | \
 8100800:	2300      	movs	r3, #0
 8100802:	2200      	movs	r2, #0
 8100804:	2112      	movs	r1, #18
 8100806:	2018      	movs	r0, #24
 8100808:	f00b faf6 	bl	810bdf8 <ResMgr_Request>
 810080c:	4603      	mov	r3, r0
 810080e:	2b00      	cmp	r3, #0
 8100810:	d001      	beq.n	8100816 <MX_WWDG2_Init+0x1a>
                  RESMGR_FLAGS_CPU2 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_WWDG2 */
    Error_Handler();
 8100812:	f000 f87b 	bl	810090c <Error_Handler>
  /* USER CODE END WWDG2_Init 0 */

  /* USER CODE BEGIN WWDG2_Init 1 */

  /* USER CODE END WWDG2_Init 1 */
  hwwdg2.Instance = WWDG2;
 8100816:	4b0c      	ldr	r3, [pc, #48]	@ (8100848 <MX_WWDG2_Init+0x4c>)
 8100818:	4a0c      	ldr	r2, [pc, #48]	@ (810084c <MX_WWDG2_Init+0x50>)
 810081a:	601a      	str	r2, [r3, #0]
  hwwdg2.Init.Prescaler = WWDG_PRESCALER_1;
 810081c:	4b0a      	ldr	r3, [pc, #40]	@ (8100848 <MX_WWDG2_Init+0x4c>)
 810081e:	2200      	movs	r2, #0
 8100820:	605a      	str	r2, [r3, #4]
  hwwdg2.Init.Window = 64;
 8100822:	4b09      	ldr	r3, [pc, #36]	@ (8100848 <MX_WWDG2_Init+0x4c>)
 8100824:	2240      	movs	r2, #64	@ 0x40
 8100826:	609a      	str	r2, [r3, #8]
  hwwdg2.Init.Counter = 64;
 8100828:	4b07      	ldr	r3, [pc, #28]	@ (8100848 <MX_WWDG2_Init+0x4c>)
 810082a:	2240      	movs	r2, #64	@ 0x40
 810082c:	60da      	str	r2, [r3, #12]
  hwwdg2.Init.EWIMode = WWDG_EWI_DISABLE;
 810082e:	4b06      	ldr	r3, [pc, #24]	@ (8100848 <MX_WWDG2_Init+0x4c>)
 8100830:	2200      	movs	r2, #0
 8100832:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg2) != HAL_OK)
 8100834:	4804      	ldr	r0, [pc, #16]	@ (8100848 <MX_WWDG2_Init+0x4c>)
 8100836:	f007 fab0 	bl	8107d9a <HAL_WWDG_Init>
 810083a:	4603      	mov	r3, r0
 810083c:	2b00      	cmp	r3, #0
 810083e:	d001      	beq.n	8100844 <MX_WWDG2_Init+0x48>
  {
    Error_Handler();
 8100840:	f000 f864 	bl	810090c <Error_Handler>
  }
  /* USER CODE BEGIN WWDG2_Init 2 */

  /* USER CODE END WWDG2_Init 2 */

}
 8100844:	bf00      	nop
 8100846:	bd80      	pop	{r7, pc}
 8100848:	100004f8 	.word	0x100004f8
 810084c:	40002c00 	.word	0x40002c00

08100850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100850:	b480      	push	{r7}
 8100852:	b087      	sub	sp, #28
 8100854:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100856:	4b28      	ldr	r3, [pc, #160]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 8100858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810085c:	4a26      	ldr	r2, [pc, #152]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 810085e:	f043 0301 	orr.w	r3, r3, #1
 8100862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100866:	4b24      	ldr	r3, [pc, #144]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 8100868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810086c:	f003 0301 	and.w	r3, r3, #1
 8100870:	617b      	str	r3, [r7, #20]
 8100872:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100874:	4b20      	ldr	r3, [pc, #128]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 8100876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810087a:	4a1f      	ldr	r2, [pc, #124]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 810087c:	f043 0302 	orr.w	r3, r3, #2
 8100880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100884:	4b1c      	ldr	r3, [pc, #112]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 8100886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810088a:	f003 0302 	and.w	r3, r3, #2
 810088e:	613b      	str	r3, [r7, #16]
 8100890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100892:	4b19      	ldr	r3, [pc, #100]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 8100894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100898:	4a17      	ldr	r2, [pc, #92]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 810089a:	f043 0304 	orr.w	r3, r3, #4
 810089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008a2:	4b15      	ldr	r3, [pc, #84]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 81008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008a8:	f003 0304 	and.w	r3, r3, #4
 81008ac:	60fb      	str	r3, [r7, #12]
 81008ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81008b0:	4b11      	ldr	r3, [pc, #68]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 81008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008b6:	4a10      	ldr	r2, [pc, #64]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 81008b8:	f043 0308 	orr.w	r3, r3, #8
 81008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008c0:	4b0d      	ldr	r3, [pc, #52]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 81008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008c6:	f003 0308 	and.w	r3, r3, #8
 81008ca:	60bb      	str	r3, [r7, #8]
 81008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 81008ce:	4b0a      	ldr	r3, [pc, #40]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 81008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008d4:	4a08      	ldr	r2, [pc, #32]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 81008d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008de:	4b06      	ldr	r3, [pc, #24]	@ (81008f8 <MX_GPIO_Init+0xa8>)
 81008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81008e8:	607b      	str	r3, [r7, #4]
 81008ea:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81008ec:	bf00      	nop
 81008ee:	371c      	adds	r7, #28
 81008f0:	46bd      	mov	sp, r7
 81008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008f6:	4770      	bx	lr
 81008f8:	58024400 	.word	0x58024400

081008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81008fc:	b580      	push	{r7, lr}
 81008fe:	b082      	sub	sp, #8
 8100900:	af00      	add	r7, sp, #0
 8100902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8100904:	2001      	movs	r0, #1
 8100906:	f008 fb96 	bl	8109036 <osDelay>
 810090a:	e7fb      	b.n	8100904 <StartDefaultTask+0x8>

0810090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810090c:	b480      	push	{r7}
 810090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100910:	b672      	cpsid	i
}
 8100912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100914:	bf00      	nop
 8100916:	e7fd      	b.n	8100914 <Error_Handler+0x8>

08100918 <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 8100918:	b580      	push	{r7, lr}
 810091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 810091c:	4905      	ldr	r1, [pc, #20]	@ (8100934 <MX_RESMGR_UTILITY_Init+0x1c>)
 810091e:	4806      	ldr	r0, [pc, #24]	@ (8100938 <MX_RESMGR_UTILITY_Init+0x20>)
 8100920:	f00b f9cc 	bl	810bcbc <ResMgr_Init>
 8100924:	4603      	mov	r3, r0
 8100926:	2b00      	cmp	r3, #0
 8100928:	d001      	beq.n	810092e <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 810092a:	f7ff ffef 	bl	810090c <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 810092e:	bf00      	nop
 8100930:	bd80      	pop	{r7, pc}
 8100932:	bf00      	nop
 8100934:	08100989 	.word	0x08100989
 8100938:	0810093d 	.word	0x0810093d

0810093c <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 810093c:	b480      	push	{r7}
 810093e:	b083      	sub	sp, #12
 8100940:	af00      	add	r7, sp, #0
 8100942:	6078      	str	r0, [r7, #4]
 8100944:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 8100946:	683b      	ldr	r3, [r7, #0]
 8100948:	2b05      	cmp	r3, #5
 810094a:	d811      	bhi.n	8100970 <MX_RESMGR_UTILITY_SendMsg+0x34>
 810094c:	683b      	ldr	r3, [r7, #0]
 810094e:	2b05      	cmp	r3, #5
 8100950:	d811      	bhi.n	8100976 <MX_RESMGR_UTILITY_SendMsg+0x3a>
 8100952:	a201      	add	r2, pc, #4	@ (adr r2, 8100958 <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 8100954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100958:	08100977 	.word	0x08100977
 810095c:	08100977 	.word	0x08100977
 8100960:	08100977 	.word	0x08100977
 8100964:	08100977 	.word	0x08100977
 8100968:	08100977 	.word	0x08100977
 810096c:	08100977 	.word	0x08100977
 8100970:	683b      	ldr	r3, [r7, #0]
 8100972:	2bff      	cmp	r3, #255	@ 0xff
 8100974:	d001      	beq.n	810097a <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 8100976:	bf00      	nop
 8100978:	e000      	b.n	810097c <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 810097a:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 810097c:	bf00      	nop
}
 810097e:	370c      	adds	r7, #12
 8100980:	46bd      	mov	sp, r7
 8100982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100986:	4770      	bx	lr

08100988 <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 8100988:	b480      	push	{r7}
 810098a:	b083      	sub	sp, #12
 810098c:	af00      	add	r7, sp, #0
 810098e:	6078      	str	r0, [r7, #4]
 8100990:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 8100992:	683b      	ldr	r3, [r7, #0]
 8100994:	2b15      	cmp	r3, #21
 8100996:	d831      	bhi.n	81009fc <MX_RESMGR_UTILITY_Callback+0x74>
 8100998:	683b      	ldr	r3, [r7, #0]
 810099a:	2b15      	cmp	r3, #21
 810099c:	d831      	bhi.n	8100a02 <MX_RESMGR_UTILITY_Callback+0x7a>
 810099e:	a201      	add	r2, pc, #4	@ (adr r2, 81009a4 <MX_RESMGR_UTILITY_Callback+0x1c>)
 81009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81009a4:	08100a03 	.word	0x08100a03
 81009a8:	08100a03 	.word	0x08100a03
 81009ac:	08100a03 	.word	0x08100a03
 81009b0:	08100a03 	.word	0x08100a03
 81009b4:	08100a03 	.word	0x08100a03
 81009b8:	08100a03 	.word	0x08100a03
 81009bc:	08100a03 	.word	0x08100a03
 81009c0:	08100a03 	.word	0x08100a03
 81009c4:	08100a03 	.word	0x08100a03
 81009c8:	08100a03 	.word	0x08100a03
 81009cc:	08100a03 	.word	0x08100a03
 81009d0:	08100a03 	.word	0x08100a03
 81009d4:	08100a03 	.word	0x08100a03
 81009d8:	08100a03 	.word	0x08100a03
 81009dc:	08100a03 	.word	0x08100a03
 81009e0:	08100a03 	.word	0x08100a03
 81009e4:	08100a03 	.word	0x08100a03
 81009e8:	08100a03 	.word	0x08100a03
 81009ec:	08100a03 	.word	0x08100a03
 81009f0:	08100a03 	.word	0x08100a03
 81009f4:	08100a03 	.word	0x08100a03
 81009f8:	08100a03 	.word	0x08100a03
 81009fc:	683b      	ldr	r3, [r7, #0]
 81009fe:	2bff      	cmp	r3, #255	@ 0xff
 8100a00:	d001      	beq.n	8100a06 <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8100a02:	bf00      	nop
 8100a04:	e000      	b.n	8100a08 <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 8100a06:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 8100a08:	bf00      	nop
}
 8100a0a:	370c      	adds	r7, #12
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a12:	4770      	bx	lr

08100a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100a14:	b580      	push	{r7, lr}
 8100a16:	b082      	sub	sp, #8
 8100a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8100a4c <HAL_MspInit+0x38>)
 8100a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a20:	4a0a      	ldr	r2, [pc, #40]	@ (8100a4c <HAL_MspInit+0x38>)
 8100a22:	f043 0302 	orr.w	r3, r3, #2
 8100a26:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100a2a:	4b08      	ldr	r3, [pc, #32]	@ (8100a4c <HAL_MspInit+0x38>)
 8100a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a30:	f003 0302 	and.w	r3, r3, #2
 8100a34:	607b      	str	r3, [r7, #4]
 8100a36:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100a38:	2200      	movs	r2, #0
 8100a3a:	210f      	movs	r1, #15
 8100a3c:	f06f 0001 	mvn.w	r0, #1
 8100a40:	f001 fb87 	bl	8102152 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100a44:	bf00      	nop
 8100a46:	3708      	adds	r7, #8
 8100a48:	46bd      	mov	sp, r7
 8100a4a:	bd80      	pop	{r7, pc}
 8100a4c:	58024400 	.word	0x58024400

08100a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8100a50:	b480      	push	{r7}
 8100a52:	b085      	sub	sp, #20
 8100a54:	af00      	add	r7, sp, #0
 8100a56:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 8100a58:	687b      	ldr	r3, [r7, #4]
 8100a5a:	681b      	ldr	r3, [r3, #0]
 8100a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8100a8c <HAL_ADC_MspInit+0x3c>)
 8100a5e:	4293      	cmp	r3, r2
 8100a60:	d10e      	bne.n	8100a80 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8100a62:	4b0b      	ldr	r3, [pc, #44]	@ (8100a90 <HAL_ADC_MspInit+0x40>)
 8100a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a68:	4a09      	ldr	r2, [pc, #36]	@ (8100a90 <HAL_ADC_MspInit+0x40>)
 8100a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8100a6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100a72:	4b07      	ldr	r3, [pc, #28]	@ (8100a90 <HAL_ADC_MspInit+0x40>)
 8100a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8100a7c:	60fb      	str	r3, [r7, #12]
 8100a7e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8100a80:	bf00      	nop
 8100a82:	3714      	adds	r7, #20
 8100a84:	46bd      	mov	sp, r7
 8100a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a8a:	4770      	bx	lr
 8100a8c:	58026000 	.word	0x58026000
 8100a90:	58024400 	.word	0x58024400

08100a94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8100a94:	b580      	push	{r7, lr}
 8100a96:	b08c      	sub	sp, #48	@ 0x30
 8100a98:	af00      	add	r7, sp, #0
 8100a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a9c:	f107 031c 	add.w	r3, r7, #28
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	601a      	str	r2, [r3, #0]
 8100aa4:	605a      	str	r2, [r3, #4]
 8100aa6:	609a      	str	r2, [r3, #8]
 8100aa8:	60da      	str	r2, [r3, #12]
 8100aaa:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8100aac:	687b      	ldr	r3, [r7, #4]
 8100aae:	681b      	ldr	r3, [r3, #0]
 8100ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8100ba8 <HAL_FDCAN_MspInit+0x114>)
 8100ab2:	4293      	cmp	r3, r2
 8100ab4:	d137      	bne.n	8100b26 <HAL_FDCAN_MspInit+0x92>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8100ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8100bac <HAL_FDCAN_MspInit+0x118>)
 8100ab8:	681b      	ldr	r3, [r3, #0]
 8100aba:	3301      	adds	r3, #1
 8100abc:	4a3b      	ldr	r2, [pc, #236]	@ (8100bac <HAL_FDCAN_MspInit+0x118>)
 8100abe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8100bac <HAL_FDCAN_MspInit+0x118>)
 8100ac2:	681b      	ldr	r3, [r3, #0]
 8100ac4:	2b01      	cmp	r3, #1
 8100ac6:	d10e      	bne.n	8100ae6 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100ac8:	4b39      	ldr	r3, [pc, #228]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100aca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100ace:	4a38      	ldr	r2, [pc, #224]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100ad4:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8100ad8:	4b35      	ldr	r3, [pc, #212]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100ada:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100ae2:	61bb      	str	r3, [r7, #24]
 8100ae4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ae6:	4b32      	ldr	r3, [pc, #200]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100aec:	4a30      	ldr	r2, [pc, #192]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100aee:	f043 0308 	orr.w	r3, r3, #8
 8100af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100af6:	4b2e      	ldr	r3, [pc, #184]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100afc:	f003 0308 	and.w	r3, r3, #8
 8100b00:	617b      	str	r3, [r7, #20]
 8100b02:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8100b04:	2303      	movs	r3, #3
 8100b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b08:	2302      	movs	r3, #2
 8100b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b0c:	2300      	movs	r3, #0
 8100b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b10:	2300      	movs	r3, #0
 8100b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8100b14:	2309      	movs	r3, #9
 8100b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100b18:	f107 031c 	add.w	r3, r7, #28
 8100b1c:	4619      	mov	r1, r3
 8100b1e:	4825      	ldr	r0, [pc, #148]	@ (8100bb4 <HAL_FDCAN_MspInit+0x120>)
 8100b20:	f002 fc76 	bl	8103410 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8100b24:	e03c      	b.n	8100ba0 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8100b26:	687b      	ldr	r3, [r7, #4]
 8100b28:	681b      	ldr	r3, [r3, #0]
 8100b2a:	4a23      	ldr	r2, [pc, #140]	@ (8100bb8 <HAL_FDCAN_MspInit+0x124>)
 8100b2c:	4293      	cmp	r3, r2
 8100b2e:	d137      	bne.n	8100ba0 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8100b30:	4b1e      	ldr	r3, [pc, #120]	@ (8100bac <HAL_FDCAN_MspInit+0x118>)
 8100b32:	681b      	ldr	r3, [r3, #0]
 8100b34:	3301      	adds	r3, #1
 8100b36:	4a1d      	ldr	r2, [pc, #116]	@ (8100bac <HAL_FDCAN_MspInit+0x118>)
 8100b38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8100bac <HAL_FDCAN_MspInit+0x118>)
 8100b3c:	681b      	ldr	r3, [r3, #0]
 8100b3e:	2b01      	cmp	r3, #1
 8100b40:	d10e      	bne.n	8100b60 <HAL_FDCAN_MspInit+0xcc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100b42:	4b1b      	ldr	r3, [pc, #108]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100b44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100b48:	4a19      	ldr	r2, [pc, #100]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8100b4e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8100b52:	4b17      	ldr	r3, [pc, #92]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100b54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8100b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8100b5c:	613b      	str	r3, [r7, #16]
 8100b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100b60:	4b13      	ldr	r3, [pc, #76]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b66:	4a12      	ldr	r2, [pc, #72]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100b68:	f043 0302 	orr.w	r3, r3, #2
 8100b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b70:	4b0f      	ldr	r3, [pc, #60]	@ (8100bb0 <HAL_FDCAN_MspInit+0x11c>)
 8100b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b76:	f003 0302 	and.w	r3, r3, #2
 8100b7a:	60fb      	str	r3, [r7, #12]
 8100b7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8100b7e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8100b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b84:	2302      	movs	r3, #2
 8100b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b88:	2300      	movs	r3, #0
 8100b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b8c:	2300      	movs	r3, #0
 8100b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8100b90:	2309      	movs	r3, #9
 8100b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100b94:	f107 031c 	add.w	r3, r7, #28
 8100b98:	4619      	mov	r1, r3
 8100b9a:	4808      	ldr	r0, [pc, #32]	@ (8100bbc <HAL_FDCAN_MspInit+0x128>)
 8100b9c:	f002 fc38 	bl	8103410 <HAL_GPIO_Init>
}
 8100ba0:	bf00      	nop
 8100ba2:	3730      	adds	r7, #48	@ 0x30
 8100ba4:	46bd      	mov	sp, r7
 8100ba6:	bd80      	pop	{r7, pc}
 8100ba8:	4000a000 	.word	0x4000a000
 8100bac:	10000510 	.word	0x10000510
 8100bb0:	58024400 	.word	0x58024400
 8100bb4:	58020c00 	.word	0x58020c00
 8100bb8:	4000a400 	.word	0x4000a400
 8100bbc:	58020400 	.word	0x58020400

08100bc0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8100bc0:	b580      	push	{r7, lr}
 8100bc2:	b0bc      	sub	sp, #240	@ 0xf0
 8100bc4:	af00      	add	r7, sp, #0
 8100bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100bc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100bcc:	2200      	movs	r2, #0
 8100bce:	601a      	str	r2, [r3, #0]
 8100bd0:	605a      	str	r2, [r3, #4]
 8100bd2:	609a      	str	r2, [r3, #8]
 8100bd4:	60da      	str	r2, [r3, #12]
 8100bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100bd8:	f107 0318 	add.w	r3, r7, #24
 8100bdc:	22c0      	movs	r2, #192	@ 0xc0
 8100bde:	2100      	movs	r1, #0
 8100be0:	4618      	mov	r0, r3
 8100be2:	f00b fbc7 	bl	810c374 <memset>
  if(hsd->Instance==SDMMC1)
 8100be6:	687b      	ldr	r3, [r7, #4]
 8100be8:	681b      	ldr	r3, [r3, #0]
 8100bea:	4a38      	ldr	r2, [pc, #224]	@ (8100ccc <HAL_SD_MspInit+0x10c>)
 8100bec:	4293      	cmp	r3, r2
 8100bee:	d169      	bne.n	8100cc4 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8100bf0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8100bf4:	f04f 0300 	mov.w	r3, #0
 8100bf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8100bfc:	2300      	movs	r3, #0
 8100bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c00:	f107 0318 	add.w	r3, r7, #24
 8100c04:	4618      	mov	r0, r3
 8100c06:	f003 f88d 	bl	8103d24 <HAL_RCCEx_PeriphCLKConfig>
 8100c0a:	4603      	mov	r3, r0
 8100c0c:	2b00      	cmp	r3, #0
 8100c0e:	d001      	beq.n	8100c14 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8100c10:	f7ff fe7c 	bl	810090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8100c14:	4b2e      	ldr	r3, [pc, #184]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8100c20:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8100c24:	4b2a      	ldr	r3, [pc, #168]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8100c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100c2e:	617b      	str	r3, [r7, #20]
 8100c30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100c32:	4b27      	ldr	r3, [pc, #156]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c38:	4a25      	ldr	r2, [pc, #148]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c3a:	f043 0304 	orr.w	r3, r3, #4
 8100c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100c42:	4b23      	ldr	r3, [pc, #140]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c48:	f003 0304 	and.w	r3, r3, #4
 8100c4c:	613b      	str	r3, [r7, #16]
 8100c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100c50:	4b1f      	ldr	r3, [pc, #124]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c56:	4a1e      	ldr	r2, [pc, #120]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c58:	f043 0308 	orr.w	r3, r3, #8
 8100c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100c60:	4b1b      	ldr	r3, [pc, #108]	@ (8100cd0 <HAL_SD_MspInit+0x110>)
 8100c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100c66:	f003 0308 	and.w	r3, r3, #8
 8100c6a:	60fb      	str	r3, [r7, #12]
 8100c6c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8100c6e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8100c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c76:	2302      	movs	r3, #2
 8100c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c7c:	2300      	movs	r3, #0
 8100c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100c82:	2303      	movs	r3, #3
 8100c84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100c88:	230c      	movs	r3, #12
 8100c8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100c8e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100c92:	4619      	mov	r1, r3
 8100c94:	480f      	ldr	r0, [pc, #60]	@ (8100cd4 <HAL_SD_MspInit+0x114>)
 8100c96:	f002 fbbb 	bl	8103410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8100c9a:	2304      	movs	r3, #4
 8100c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ca0:	2302      	movs	r3, #2
 8100ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ca6:	2300      	movs	r3, #0
 8100ca8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100cac:	2303      	movs	r3, #3
 8100cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8100cb2:	230c      	movs	r3, #12
 8100cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100cb8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100cbc:	4619      	mov	r1, r3
 8100cbe:	4806      	ldr	r0, [pc, #24]	@ (8100cd8 <HAL_SD_MspInit+0x118>)
 8100cc0:	f002 fba6 	bl	8103410 <HAL_GPIO_Init>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8100cc4:	bf00      	nop
 8100cc6:	37f0      	adds	r7, #240	@ 0xf0
 8100cc8:	46bd      	mov	sp, r7
 8100cca:	bd80      	pop	{r7, pc}
 8100ccc:	52007000 	.word	0x52007000
 8100cd0:	58024400 	.word	0x58024400
 8100cd4:	58020800 	.word	0x58020800
 8100cd8:	58020c00 	.word	0x58020c00

08100cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100cdc:	b580      	push	{r7, lr}
 8100cde:	b0bc      	sub	sp, #240	@ 0xf0
 8100ce0:	af00      	add	r7, sp, #0
 8100ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ce4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100ce8:	2200      	movs	r2, #0
 8100cea:	601a      	str	r2, [r3, #0]
 8100cec:	605a      	str	r2, [r3, #4]
 8100cee:	609a      	str	r2, [r3, #8]
 8100cf0:	60da      	str	r2, [r3, #12]
 8100cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cf4:	f107 0318 	add.w	r3, r7, #24
 8100cf8:	22c0      	movs	r2, #192	@ 0xc0
 8100cfa:	2100      	movs	r1, #0
 8100cfc:	4618      	mov	r0, r3
 8100cfe:	f00b fb39 	bl	810c374 <memset>
  if(hspi->Instance==SPI1)
 8100d02:	687b      	ldr	r3, [r7, #4]
 8100d04:	681b      	ldr	r3, [r3, #0]
 8100d06:	4a38      	ldr	r2, [pc, #224]	@ (8100de8 <HAL_SPI_MspInit+0x10c>)
 8100d08:	4293      	cmp	r3, r2
 8100d0a:	d169      	bne.n	8100de0 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8100d0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8100d10:	f04f 0300 	mov.w	r3, #0
 8100d14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8100d18:	2300      	movs	r3, #0
 8100d1a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d1c:	f107 0318 	add.w	r3, r7, #24
 8100d20:	4618      	mov	r0, r3
 8100d22:	f002 ffff 	bl	8103d24 <HAL_RCCEx_PeriphCLKConfig>
 8100d26:	4603      	mov	r3, r0
 8100d28:	2b00      	cmp	r3, #0
 8100d2a:	d001      	beq.n	8100d30 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8100d2c:	f7ff fdee 	bl	810090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8100d30:	4b2e      	ldr	r3, [pc, #184]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100d36:	4a2d      	ldr	r2, [pc, #180]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8100d3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8100d40:	4b2a      	ldr	r3, [pc, #168]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8100d46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8100d4a:	617b      	str	r3, [r7, #20]
 8100d4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100d4e:	4b27      	ldr	r3, [pc, #156]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d54:	4a25      	ldr	r2, [pc, #148]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d56:	f043 0301 	orr.w	r3, r3, #1
 8100d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d5e:	4b23      	ldr	r3, [pc, #140]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d64:	f003 0301 	and.w	r3, r3, #1
 8100d68:	613b      	str	r3, [r7, #16]
 8100d6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8100d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d72:	4a1e      	ldr	r2, [pc, #120]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8100dec <HAL_SPI_MspInit+0x110>)
 8100d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8100d86:	60fb      	str	r3, [r7, #12]
 8100d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8100d8a:	2380      	movs	r3, #128	@ 0x80
 8100d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d90:	2302      	movs	r3, #2
 8100d92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d96:	2300      	movs	r3, #0
 8100d98:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8100da2:	2305      	movs	r3, #5
 8100da4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100da8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100dac:	4619      	mov	r1, r3
 8100dae:	4810      	ldr	r0, [pc, #64]	@ (8100df0 <HAL_SPI_MspInit+0x114>)
 8100db0:	f002 fb2e 	bl	8103410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8100db4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8100db8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100dbc:	2302      	movs	r3, #2
 8100dbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dc2:	2300      	movs	r3, #0
 8100dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100dc8:	2300      	movs	r3, #0
 8100dca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8100dce:	2305      	movs	r3, #5
 8100dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100dd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8100dd8:	4619      	mov	r1, r3
 8100dda:	4806      	ldr	r0, [pc, #24]	@ (8100df4 <HAL_SPI_MspInit+0x118>)
 8100ddc:	f002 fb18 	bl	8103410 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8100de0:	bf00      	nop
 8100de2:	37f0      	adds	r7, #240	@ 0xf0
 8100de4:	46bd      	mov	sp, r7
 8100de6:	bd80      	pop	{r7, pc}
 8100de8:	40013000 	.word	0x40013000
 8100dec:	58024400 	.word	0x58024400
 8100df0:	58020000 	.word	0x58020000
 8100df4:	58021800 	.word	0x58021800

08100df8 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8100df8:	b580      	push	{r7, lr}
 8100dfa:	b084      	sub	sp, #16
 8100dfc:	af00      	add	r7, sp, #0
 8100dfe:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG2)
 8100e00:	687b      	ldr	r3, [r7, #4]
 8100e02:	681b      	ldr	r3, [r3, #0]
 8100e04:	4a0c      	ldr	r2, [pc, #48]	@ (8100e38 <HAL_WWDG_MspInit+0x40>)
 8100e06:	4293      	cmp	r3, r2
 8100e08:	d111      	bne.n	8100e2e <HAL_WWDG_MspInit+0x36>
  {
  /* USER CODE BEGIN WWDG2_MspInit 0 */

  /* USER CODE END WWDG2_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCCEx_WWDGxSysResetConfig(RCC_WWDG2);
 8100e0a:	2002      	movs	r0, #2
 8100e0c:	f005 fb24 	bl	8106458 <HAL_RCCEx_WWDGxSysResetConfig>
    __HAL_RCC_WWDG2_CLK_ENABLE();
 8100e10:	4b0a      	ldr	r3, [pc, #40]	@ (8100e3c <HAL_WWDG_MspInit+0x44>)
 8100e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100e16:	4a09      	ldr	r2, [pc, #36]	@ (8100e3c <HAL_WWDG_MspInit+0x44>)
 8100e18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8100e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100e20:	4b06      	ldr	r3, [pc, #24]	@ (8100e3c <HAL_WWDG_MspInit+0x44>)
 8100e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8100e2a:	60fb      	str	r3, [r7, #12]
 8100e2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END WWDG2_MspInit 1 */

  }

}
 8100e2e:	bf00      	nop
 8100e30:	3710      	adds	r7, #16
 8100e32:	46bd      	mov	sp, r7
 8100e34:	bd80      	pop	{r7, pc}
 8100e36:	bf00      	nop
 8100e38:	40002c00 	.word	0x40002c00
 8100e3c:	58024400 	.word	0x58024400

08100e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100e40:	b480      	push	{r7}
 8100e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100e44:	bf00      	nop
 8100e46:	e7fd      	b.n	8100e44 <NMI_Handler+0x4>

08100e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100e48:	b480      	push	{r7}
 8100e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100e4c:	bf00      	nop
 8100e4e:	e7fd      	b.n	8100e4c <HardFault_Handler+0x4>

08100e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100e50:	b480      	push	{r7}
 8100e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100e54:	bf00      	nop
 8100e56:	e7fd      	b.n	8100e54 <MemManage_Handler+0x4>

08100e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100e58:	b480      	push	{r7}
 8100e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100e5c:	bf00      	nop
 8100e5e:	e7fd      	b.n	8100e5c <BusFault_Handler+0x4>

08100e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100e60:	b480      	push	{r7}
 8100e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100e64:	bf00      	nop
 8100e66:	e7fd      	b.n	8100e64 <UsageFault_Handler+0x4>

08100e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100e68:	b480      	push	{r7}
 8100e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100e6c:	bf00      	nop
 8100e6e:	46bd      	mov	sp, r7
 8100e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e74:	4770      	bx	lr

08100e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100e76:	b580      	push	{r7, lr}
 8100e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100e7a:	f000 f8c7 	bl	810100c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8100e7e:	f00a fae1 	bl	810b444 <xTaskGetSchedulerState>
 8100e82:	4603      	mov	r3, r0
 8100e84:	2b01      	cmp	r3, #1
 8100e86:	d001      	beq.n	8100e8c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8100e88:	f008 fe56 	bl	8109b38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100e8c:	bf00      	nop
 8100e8e:	bd80      	pop	{r7, pc}

08100e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100ec8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100e94:	f7ff fa24 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100e98:	480c      	ldr	r0, [pc, #48]	@ (8100ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100e9a:	490d      	ldr	r1, [pc, #52]	@ (8100ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8100ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100ea0:	e002      	b.n	8100ea8 <LoopCopyDataInit>

08100ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100ea6:	3304      	adds	r3, #4

08100ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100eac:	d3f9      	bcc.n	8100ea2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100eae:	4a0a      	ldr	r2, [pc, #40]	@ (8100ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8100edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8100eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100eb4:	e001      	b.n	8100eba <LoopFillZerobss>

08100eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100eb8:	3204      	adds	r2, #4

08100eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100ebc:	d3fb      	bcc.n	8100eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100ebe:	f00b fa61 	bl	810c384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100ec2:	f7ff fa25 	bl	8100310 <main>
  bx  lr
 8100ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100ec8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100ecc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100ed0:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 8100ed4:	0810c4f4 	.word	0x0810c4f4
  ldr r2, =_sbss
 8100ed8:	10000224 	.word	0x10000224
  ldr r4, =_ebss
 8100edc:	10004ecc 	.word	0x10004ecc

08100ee0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100ee0:	e7fe      	b.n	8100ee0 <ADC3_IRQHandler>
	...

08100ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100ee4:	b580      	push	{r7, lr}
 8100ee6:	b082      	sub	sp, #8
 8100ee8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100eea:	4b28      	ldr	r3, [pc, #160]	@ (8100f8c <HAL_Init+0xa8>)
 8100eec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ef0:	4a26      	ldr	r2, [pc, #152]	@ (8100f8c <HAL_Init+0xa8>)
 8100ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100ef6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100efa:	4b24      	ldr	r3, [pc, #144]	@ (8100f8c <HAL_Init+0xa8>)
 8100efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100f04:	603b      	str	r3, [r7, #0]
 8100f06:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100f08:	4b21      	ldr	r3, [pc, #132]	@ (8100f90 <HAL_Init+0xac>)
 8100f0a:	681b      	ldr	r3, [r3, #0]
 8100f0c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100f10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100f14:	4a1e      	ldr	r2, [pc, #120]	@ (8100f90 <HAL_Init+0xac>)
 8100f16:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100f1a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8100f90 <HAL_Init+0xac>)
 8100f1e:	681b      	ldr	r3, [r3, #0]
 8100f20:	4a1b      	ldr	r2, [pc, #108]	@ (8100f90 <HAL_Init+0xac>)
 8100f22:	f043 0301 	orr.w	r3, r3, #1
 8100f26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100f28:	2003      	movs	r0, #3
 8100f2a:	f001 f907 	bl	810213c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100f2e:	f002 fd37 	bl	81039a0 <HAL_RCC_GetSysClockFreq>
 8100f32:	4602      	mov	r2, r0
 8100f34:	4b15      	ldr	r3, [pc, #84]	@ (8100f8c <HAL_Init+0xa8>)
 8100f36:	699b      	ldr	r3, [r3, #24]
 8100f38:	0a1b      	lsrs	r3, r3, #8
 8100f3a:	f003 030f 	and.w	r3, r3, #15
 8100f3e:	4915      	ldr	r1, [pc, #84]	@ (8100f94 <HAL_Init+0xb0>)
 8100f40:	5ccb      	ldrb	r3, [r1, r3]
 8100f42:	f003 031f 	and.w	r3, r3, #31
 8100f46:	fa22 f303 	lsr.w	r3, r2, r3
 8100f4a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8100f8c <HAL_Init+0xa8>)
 8100f4e:	699b      	ldr	r3, [r3, #24]
 8100f50:	f003 030f 	and.w	r3, r3, #15
 8100f54:	4a0f      	ldr	r2, [pc, #60]	@ (8100f94 <HAL_Init+0xb0>)
 8100f56:	5cd3      	ldrb	r3, [r2, r3]
 8100f58:	f003 031f 	and.w	r3, r3, #31
 8100f5c:	687a      	ldr	r2, [r7, #4]
 8100f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8100f62:	4a0d      	ldr	r2, [pc, #52]	@ (8100f98 <HAL_Init+0xb4>)
 8100f64:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100f66:	4b0c      	ldr	r3, [pc, #48]	@ (8100f98 <HAL_Init+0xb4>)
 8100f68:	681b      	ldr	r3, [r3, #0]
 8100f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8100f9c <HAL_Init+0xb8>)
 8100f6c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100f6e:	200f      	movs	r0, #15
 8100f70:	f000 f816 	bl	8100fa0 <HAL_InitTick>
 8100f74:	4603      	mov	r3, r0
 8100f76:	2b00      	cmp	r3, #0
 8100f78:	d001      	beq.n	8100f7e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100f7a:	2301      	movs	r3, #1
 8100f7c:	e002      	b.n	8100f84 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100f7e:	f7ff fd49 	bl	8100a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100f82:	2300      	movs	r3, #0
}
 8100f84:	4618      	mov	r0, r3
 8100f86:	3708      	adds	r7, #8
 8100f88:	46bd      	mov	sp, r7
 8100f8a:	bd80      	pop	{r7, pc}
 8100f8c:	58024400 	.word	0x58024400
 8100f90:	40024400 	.word	0x40024400
 8100f94:	0810c478 	.word	0x0810c478
 8100f98:	10000004 	.word	0x10000004
 8100f9c:	10000000 	.word	0x10000000

08100fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100fa0:	b580      	push	{r7, lr}
 8100fa2:	b082      	sub	sp, #8
 8100fa4:	af00      	add	r7, sp, #0
 8100fa6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100fa8:	4b15      	ldr	r3, [pc, #84]	@ (8101000 <HAL_InitTick+0x60>)
 8100faa:	781b      	ldrb	r3, [r3, #0]
 8100fac:	2b00      	cmp	r3, #0
 8100fae:	d101      	bne.n	8100fb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100fb0:	2301      	movs	r3, #1
 8100fb2:	e021      	b.n	8100ff8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100fb4:	4b13      	ldr	r3, [pc, #76]	@ (8101004 <HAL_InitTick+0x64>)
 8100fb6:	681a      	ldr	r2, [r3, #0]
 8100fb8:	4b11      	ldr	r3, [pc, #68]	@ (8101000 <HAL_InitTick+0x60>)
 8100fba:	781b      	ldrb	r3, [r3, #0]
 8100fbc:	4619      	mov	r1, r3
 8100fbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8100fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8100fca:	4618      	mov	r0, r3
 8100fcc:	f001 f8db 	bl	8102186 <HAL_SYSTICK_Config>
 8100fd0:	4603      	mov	r3, r0
 8100fd2:	2b00      	cmp	r3, #0
 8100fd4:	d001      	beq.n	8100fda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100fd6:	2301      	movs	r3, #1
 8100fd8:	e00e      	b.n	8100ff8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	2b0f      	cmp	r3, #15
 8100fde:	d80a      	bhi.n	8100ff6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100fe0:	2200      	movs	r2, #0
 8100fe2:	6879      	ldr	r1, [r7, #4]
 8100fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8100fe8:	f001 f8b3 	bl	8102152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100fec:	4a06      	ldr	r2, [pc, #24]	@ (8101008 <HAL_InitTick+0x68>)
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100ff2:	2300      	movs	r3, #0
 8100ff4:	e000      	b.n	8100ff8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100ff6:	2301      	movs	r3, #1
}
 8100ff8:	4618      	mov	r0, r3
 8100ffa:	3708      	adds	r7, #8
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	bd80      	pop	{r7, pc}
 8101000:	1000000c 	.word	0x1000000c
 8101004:	10000000 	.word	0x10000000
 8101008:	10000008 	.word	0x10000008

0810100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810100c:	b480      	push	{r7}
 810100e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101010:	4b06      	ldr	r3, [pc, #24]	@ (810102c <HAL_IncTick+0x20>)
 8101012:	781b      	ldrb	r3, [r3, #0]
 8101014:	461a      	mov	r2, r3
 8101016:	4b06      	ldr	r3, [pc, #24]	@ (8101030 <HAL_IncTick+0x24>)
 8101018:	681b      	ldr	r3, [r3, #0]
 810101a:	4413      	add	r3, r2
 810101c:	4a04      	ldr	r2, [pc, #16]	@ (8101030 <HAL_IncTick+0x24>)
 810101e:	6013      	str	r3, [r2, #0]
}
 8101020:	bf00      	nop
 8101022:	46bd      	mov	sp, r7
 8101024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101028:	4770      	bx	lr
 810102a:	bf00      	nop
 810102c:	1000000c 	.word	0x1000000c
 8101030:	10000514 	.word	0x10000514

08101034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101034:	b480      	push	{r7}
 8101036:	af00      	add	r7, sp, #0
  return uwTick;
 8101038:	4b03      	ldr	r3, [pc, #12]	@ (8101048 <HAL_GetTick+0x14>)
 810103a:	681b      	ldr	r3, [r3, #0]
}
 810103c:	4618      	mov	r0, r3
 810103e:	46bd      	mov	sp, r7
 8101040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101044:	4770      	bx	lr
 8101046:	bf00      	nop
 8101048:	10000514 	.word	0x10000514

0810104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810104c:	b580      	push	{r7, lr}
 810104e:	b084      	sub	sp, #16
 8101050:	af00      	add	r7, sp, #0
 8101052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101054:	f7ff ffee 	bl	8101034 <HAL_GetTick>
 8101058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810105a:	687b      	ldr	r3, [r7, #4]
 810105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810105e:	68fb      	ldr	r3, [r7, #12]
 8101060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101064:	d005      	beq.n	8101072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101066:	4b0a      	ldr	r3, [pc, #40]	@ (8101090 <HAL_Delay+0x44>)
 8101068:	781b      	ldrb	r3, [r3, #0]
 810106a:	461a      	mov	r2, r3
 810106c:	68fb      	ldr	r3, [r7, #12]
 810106e:	4413      	add	r3, r2
 8101070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101072:	bf00      	nop
 8101074:	f7ff ffde 	bl	8101034 <HAL_GetTick>
 8101078:	4602      	mov	r2, r0
 810107a:	68bb      	ldr	r3, [r7, #8]
 810107c:	1ad3      	subs	r3, r2, r3
 810107e:	68fa      	ldr	r2, [r7, #12]
 8101080:	429a      	cmp	r2, r3
 8101082:	d8f7      	bhi.n	8101074 <HAL_Delay+0x28>
  {
  }
}
 8101084:	bf00      	nop
 8101086:	bf00      	nop
 8101088:	3710      	adds	r7, #16
 810108a:	46bd      	mov	sp, r7
 810108c:	bd80      	pop	{r7, pc}
 810108e:	bf00      	nop
 8101090:	1000000c 	.word	0x1000000c

08101094 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101094:	b480      	push	{r7}
 8101096:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101098:	4b03      	ldr	r3, [pc, #12]	@ (81010a8 <HAL_GetREVID+0x14>)
 810109a:	681b      	ldr	r3, [r3, #0]
 810109c:	0c1b      	lsrs	r3, r3, #16
}
 810109e:	4618      	mov	r0, r3
 81010a0:	46bd      	mov	sp, r7
 81010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a6:	4770      	bx	lr
 81010a8:	5c001000 	.word	0x5c001000

081010ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81010ac:	b480      	push	{r7}
 81010ae:	b083      	sub	sp, #12
 81010b0:	af00      	add	r7, sp, #0
 81010b2:	6078      	str	r0, [r7, #4]
 81010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81010b6:	687b      	ldr	r3, [r7, #4]
 81010b8:	689b      	ldr	r3, [r3, #8]
 81010ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 81010be:	683b      	ldr	r3, [r7, #0]
 81010c0:	431a      	orrs	r2, r3
 81010c2:	687b      	ldr	r3, [r7, #4]
 81010c4:	609a      	str	r2, [r3, #8]
}
 81010c6:	bf00      	nop
 81010c8:	370c      	adds	r7, #12
 81010ca:	46bd      	mov	sp, r7
 81010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010d0:	4770      	bx	lr

081010d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81010d2:	b480      	push	{r7}
 81010d4:	b083      	sub	sp, #12
 81010d6:	af00      	add	r7, sp, #0
 81010d8:	6078      	str	r0, [r7, #4]
 81010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81010dc:	687b      	ldr	r3, [r7, #4]
 81010de:	689b      	ldr	r3, [r3, #8]
 81010e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 81010e4:	683b      	ldr	r3, [r7, #0]
 81010e6:	431a      	orrs	r2, r3
 81010e8:	687b      	ldr	r3, [r7, #4]
 81010ea:	609a      	str	r2, [r3, #8]
}
 81010ec:	bf00      	nop
 81010ee:	370c      	adds	r7, #12
 81010f0:	46bd      	mov	sp, r7
 81010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f6:	4770      	bx	lr

081010f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81010f8:	b480      	push	{r7}
 81010fa:	b083      	sub	sp, #12
 81010fc:	af00      	add	r7, sp, #0
 81010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101100:	687b      	ldr	r3, [r7, #4]
 8101102:	689b      	ldr	r3, [r3, #8]
 8101104:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8101108:	4618      	mov	r0, r3
 810110a:	370c      	adds	r7, #12
 810110c:	46bd      	mov	sp, r7
 810110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101112:	4770      	bx	lr

08101114 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101114:	b480      	push	{r7}
 8101116:	b087      	sub	sp, #28
 8101118:	af00      	add	r7, sp, #0
 810111a:	60f8      	str	r0, [r7, #12]
 810111c:	60b9      	str	r1, [r7, #8]
 810111e:	607a      	str	r2, [r7, #4]
 8101120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101122:	68fb      	ldr	r3, [r7, #12]
 8101124:	3360      	adds	r3, #96	@ 0x60
 8101126:	461a      	mov	r2, r3
 8101128:	68bb      	ldr	r3, [r7, #8]
 810112a:	009b      	lsls	r3, r3, #2
 810112c:	4413      	add	r3, r2
 810112e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101130:	697b      	ldr	r3, [r7, #20]
 8101132:	681b      	ldr	r3, [r3, #0]
 8101134:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8101138:	687b      	ldr	r3, [r7, #4]
 810113a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 810113e:	683b      	ldr	r3, [r7, #0]
 8101140:	430b      	orrs	r3, r1
 8101142:	431a      	orrs	r2, r3
 8101144:	697b      	ldr	r3, [r7, #20]
 8101146:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101148:	bf00      	nop
 810114a:	371c      	adds	r7, #28
 810114c:	46bd      	mov	sp, r7
 810114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101152:	4770      	bx	lr

08101154 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101154:	b480      	push	{r7}
 8101156:	b085      	sub	sp, #20
 8101158:	af00      	add	r7, sp, #0
 810115a:	60f8      	str	r0, [r7, #12]
 810115c:	60b9      	str	r1, [r7, #8]
 810115e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101160:	68fb      	ldr	r3, [r7, #12]
 8101162:	691b      	ldr	r3, [r3, #16]
 8101164:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8101168:	68bb      	ldr	r3, [r7, #8]
 810116a:	f003 031f 	and.w	r3, r3, #31
 810116e:	6879      	ldr	r1, [r7, #4]
 8101170:	fa01 f303 	lsl.w	r3, r1, r3
 8101174:	431a      	orrs	r2, r3
 8101176:	68fb      	ldr	r3, [r7, #12]
 8101178:	611a      	str	r2, [r3, #16]
}
 810117a:	bf00      	nop
 810117c:	3714      	adds	r7, #20
 810117e:	46bd      	mov	sp, r7
 8101180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101184:	4770      	bx	lr

08101186 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101186:	b480      	push	{r7}
 8101188:	b087      	sub	sp, #28
 810118a:	af00      	add	r7, sp, #0
 810118c:	60f8      	str	r0, [r7, #12]
 810118e:	60b9      	str	r1, [r7, #8]
 8101190:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101192:	68fb      	ldr	r3, [r7, #12]
 8101194:	3360      	adds	r3, #96	@ 0x60
 8101196:	461a      	mov	r2, r3
 8101198:	68bb      	ldr	r3, [r7, #8]
 810119a:	009b      	lsls	r3, r3, #2
 810119c:	4413      	add	r3, r2
 810119e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81011a0:	697b      	ldr	r3, [r7, #20]
 81011a2:	681b      	ldr	r3, [r3, #0]
 81011a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	431a      	orrs	r2, r3
 81011ac:	697b      	ldr	r3, [r7, #20]
 81011ae:	601a      	str	r2, [r3, #0]
  }
}
 81011b0:	bf00      	nop
 81011b2:	371c      	adds	r7, #28
 81011b4:	46bd      	mov	sp, r7
 81011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ba:	4770      	bx	lr

081011bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81011bc:	b480      	push	{r7}
 81011be:	b087      	sub	sp, #28
 81011c0:	af00      	add	r7, sp, #0
 81011c2:	60f8      	str	r0, [r7, #12]
 81011c4:	60b9      	str	r1, [r7, #8]
 81011c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81011c8:	68fb      	ldr	r3, [r7, #12]
 81011ca:	3330      	adds	r3, #48	@ 0x30
 81011cc:	461a      	mov	r2, r3
 81011ce:	68bb      	ldr	r3, [r7, #8]
 81011d0:	0a1b      	lsrs	r3, r3, #8
 81011d2:	009b      	lsls	r3, r3, #2
 81011d4:	f003 030c 	and.w	r3, r3, #12
 81011d8:	4413      	add	r3, r2
 81011da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81011dc:	697b      	ldr	r3, [r7, #20]
 81011de:	681a      	ldr	r2, [r3, #0]
 81011e0:	68bb      	ldr	r3, [r7, #8]
 81011e2:	f003 031f 	and.w	r3, r3, #31
 81011e6:	211f      	movs	r1, #31
 81011e8:	fa01 f303 	lsl.w	r3, r1, r3
 81011ec:	43db      	mvns	r3, r3
 81011ee:	401a      	ands	r2, r3
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	0e9b      	lsrs	r3, r3, #26
 81011f4:	f003 011f 	and.w	r1, r3, #31
 81011f8:	68bb      	ldr	r3, [r7, #8]
 81011fa:	f003 031f 	and.w	r3, r3, #31
 81011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8101202:	431a      	orrs	r2, r3
 8101204:	697b      	ldr	r3, [r7, #20]
 8101206:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8101208:	bf00      	nop
 810120a:	371c      	adds	r7, #28
 810120c:	46bd      	mov	sp, r7
 810120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101212:	4770      	bx	lr

08101214 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101214:	b480      	push	{r7}
 8101216:	b087      	sub	sp, #28
 8101218:	af00      	add	r7, sp, #0
 810121a:	60f8      	str	r0, [r7, #12]
 810121c:	60b9      	str	r1, [r7, #8]
 810121e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8101220:	68fb      	ldr	r3, [r7, #12]
 8101222:	3314      	adds	r3, #20
 8101224:	461a      	mov	r2, r3
 8101226:	68bb      	ldr	r3, [r7, #8]
 8101228:	0e5b      	lsrs	r3, r3, #25
 810122a:	009b      	lsls	r3, r3, #2
 810122c:	f003 0304 	and.w	r3, r3, #4
 8101230:	4413      	add	r3, r2
 8101232:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101234:	697b      	ldr	r3, [r7, #20]
 8101236:	681a      	ldr	r2, [r3, #0]
 8101238:	68bb      	ldr	r3, [r7, #8]
 810123a:	0d1b      	lsrs	r3, r3, #20
 810123c:	f003 031f 	and.w	r3, r3, #31
 8101240:	2107      	movs	r1, #7
 8101242:	fa01 f303 	lsl.w	r3, r1, r3
 8101246:	43db      	mvns	r3, r3
 8101248:	401a      	ands	r2, r3
 810124a:	68bb      	ldr	r3, [r7, #8]
 810124c:	0d1b      	lsrs	r3, r3, #20
 810124e:	f003 031f 	and.w	r3, r3, #31
 8101252:	6879      	ldr	r1, [r7, #4]
 8101254:	fa01 f303 	lsl.w	r3, r1, r3
 8101258:	431a      	orrs	r2, r3
 810125a:	697b      	ldr	r3, [r7, #20]
 810125c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810125e:	bf00      	nop
 8101260:	371c      	adds	r7, #28
 8101262:	46bd      	mov	sp, r7
 8101264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101268:	4770      	bx	lr
	...

0810126c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 810126c:	b480      	push	{r7}
 810126e:	b085      	sub	sp, #20
 8101270:	af00      	add	r7, sp, #0
 8101272:	60f8      	str	r0, [r7, #12]
 8101274:	60b9      	str	r1, [r7, #8]
 8101276:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101278:	68fb      	ldr	r3, [r7, #12]
 810127a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 810127e:	68bb      	ldr	r3, [r7, #8]
 8101280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101284:	43db      	mvns	r3, r3
 8101286:	401a      	ands	r2, r3
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	f003 0318 	and.w	r3, r3, #24
 810128e:	4908      	ldr	r1, [pc, #32]	@ (81012b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101290:	40d9      	lsrs	r1, r3
 8101292:	68bb      	ldr	r3, [r7, #8]
 8101294:	400b      	ands	r3, r1
 8101296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810129a:	431a      	orrs	r2, r3
 810129c:	68fb      	ldr	r3, [r7, #12]
 810129e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81012a2:	bf00      	nop
 81012a4:	3714      	adds	r7, #20
 81012a6:	46bd      	mov	sp, r7
 81012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ac:	4770      	bx	lr
 81012ae:	bf00      	nop
 81012b0:	000fffff 	.word	0x000fffff

081012b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81012b4:	b480      	push	{r7}
 81012b6:	b083      	sub	sp, #12
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	689b      	ldr	r3, [r3, #8]
 81012c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 81012c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 81012c8:	687a      	ldr	r2, [r7, #4]
 81012ca:	6093      	str	r3, [r2, #8]
}
 81012cc:	bf00      	nop
 81012ce:	370c      	adds	r7, #12
 81012d0:	46bd      	mov	sp, r7
 81012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012d6:	4770      	bx	lr

081012d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81012d8:	b480      	push	{r7}
 81012da:	b083      	sub	sp, #12
 81012dc:	af00      	add	r7, sp, #0
 81012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	689b      	ldr	r3, [r3, #8]
 81012e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81012e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81012ec:	d101      	bne.n	81012f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81012ee:	2301      	movs	r3, #1
 81012f0:	e000      	b.n	81012f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81012f2:	2300      	movs	r3, #0
}
 81012f4:	4618      	mov	r0, r3
 81012f6:	370c      	adds	r7, #12
 81012f8:	46bd      	mov	sp, r7
 81012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012fe:	4770      	bx	lr

08101300 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101300:	b480      	push	{r7}
 8101302:	b083      	sub	sp, #12
 8101304:	af00      	add	r7, sp, #0
 8101306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	689b      	ldr	r3, [r3, #8]
 810130c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8101310:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8101314:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8101318:	687b      	ldr	r3, [r7, #4]
 810131a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 810131c:	bf00      	nop
 810131e:	370c      	adds	r7, #12
 8101320:	46bd      	mov	sp, r7
 8101322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101326:	4770      	bx	lr

08101328 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101328:	b480      	push	{r7}
 810132a:	b083      	sub	sp, #12
 810132c:	af00      	add	r7, sp, #0
 810132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	689b      	ldr	r3, [r3, #8]
 8101334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8101338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810133c:	d101      	bne.n	8101342 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810133e:	2301      	movs	r3, #1
 8101340:	e000      	b.n	8101344 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101342:	2300      	movs	r3, #0
}
 8101344:	4618      	mov	r0, r3
 8101346:	370c      	adds	r7, #12
 8101348:	46bd      	mov	sp, r7
 810134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810134e:	4770      	bx	lr

08101350 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101350:	b480      	push	{r7}
 8101352:	b083      	sub	sp, #12
 8101354:	af00      	add	r7, sp, #0
 8101356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	689b      	ldr	r3, [r3, #8]
 810135c:	f003 0301 	and.w	r3, r3, #1
 8101360:	2b01      	cmp	r3, #1
 8101362:	d101      	bne.n	8101368 <LL_ADC_IsEnabled+0x18>
 8101364:	2301      	movs	r3, #1
 8101366:	e000      	b.n	810136a <LL_ADC_IsEnabled+0x1a>
 8101368:	2300      	movs	r3, #0
}
 810136a:	4618      	mov	r0, r3
 810136c:	370c      	adds	r7, #12
 810136e:	46bd      	mov	sp, r7
 8101370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101374:	4770      	bx	lr

08101376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101376:	b480      	push	{r7}
 8101378:	b083      	sub	sp, #12
 810137a:	af00      	add	r7, sp, #0
 810137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	689b      	ldr	r3, [r3, #8]
 8101382:	f003 0304 	and.w	r3, r3, #4
 8101386:	2b04      	cmp	r3, #4
 8101388:	d101      	bne.n	810138e <LL_ADC_REG_IsConversionOngoing+0x18>
 810138a:	2301      	movs	r3, #1
 810138c:	e000      	b.n	8101390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810138e:	2300      	movs	r3, #0
}
 8101390:	4618      	mov	r0, r3
 8101392:	370c      	adds	r7, #12
 8101394:	46bd      	mov	sp, r7
 8101396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810139a:	4770      	bx	lr

0810139c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810139c:	b480      	push	{r7}
 810139e:	b083      	sub	sp, #12
 81013a0:	af00      	add	r7, sp, #0
 81013a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81013a4:	687b      	ldr	r3, [r7, #4]
 81013a6:	689b      	ldr	r3, [r3, #8]
 81013a8:	f003 0308 	and.w	r3, r3, #8
 81013ac:	2b08      	cmp	r3, #8
 81013ae:	d101      	bne.n	81013b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81013b0:	2301      	movs	r3, #1
 81013b2:	e000      	b.n	81013b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81013b4:	2300      	movs	r3, #0
}
 81013b6:	4618      	mov	r0, r3
 81013b8:	370c      	adds	r7, #12
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr
	...

081013c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81013c4:	b590      	push	{r4, r7, lr}
 81013c6:	b089      	sub	sp, #36	@ 0x24
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81013cc:	2300      	movs	r3, #0
 81013ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81013d0:	2300      	movs	r3, #0
 81013d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	2b00      	cmp	r3, #0
 81013d8:	d101      	bne.n	81013de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81013da:	2301      	movs	r3, #1
 81013dc:	e18f      	b.n	81016fe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81013de:	687b      	ldr	r3, [r7, #4]
 81013e0:	68db      	ldr	r3, [r3, #12]
 81013e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81013e8:	2b00      	cmp	r3, #0
 81013ea:	d109      	bne.n	8101400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81013ec:	6878      	ldr	r0, [r7, #4]
 81013ee:	f7ff fb2f 	bl	8100a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81013f2:	687b      	ldr	r3, [r7, #4]
 81013f4:	2200      	movs	r2, #0
 81013f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	2200      	movs	r2, #0
 81013fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101400:	687b      	ldr	r3, [r7, #4]
 8101402:	681b      	ldr	r3, [r3, #0]
 8101404:	4618      	mov	r0, r3
 8101406:	f7ff ff67 	bl	81012d8 <LL_ADC_IsDeepPowerDownEnabled>
 810140a:	4603      	mov	r3, r0
 810140c:	2b00      	cmp	r3, #0
 810140e:	d004      	beq.n	810141a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101410:	687b      	ldr	r3, [r7, #4]
 8101412:	681b      	ldr	r3, [r3, #0]
 8101414:	4618      	mov	r0, r3
 8101416:	f7ff ff4d 	bl	81012b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810141a:	687b      	ldr	r3, [r7, #4]
 810141c:	681b      	ldr	r3, [r3, #0]
 810141e:	4618      	mov	r0, r3
 8101420:	f7ff ff82 	bl	8101328 <LL_ADC_IsInternalRegulatorEnabled>
 8101424:	4603      	mov	r3, r0
 8101426:	2b00      	cmp	r3, #0
 8101428:	d114      	bne.n	8101454 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	681b      	ldr	r3, [r3, #0]
 810142e:	4618      	mov	r0, r3
 8101430:	f7ff ff66 	bl	8101300 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101434:	4b88      	ldr	r3, [pc, #544]	@ (8101658 <HAL_ADC_Init+0x294>)
 8101436:	681b      	ldr	r3, [r3, #0]
 8101438:	099b      	lsrs	r3, r3, #6
 810143a:	4a88      	ldr	r2, [pc, #544]	@ (810165c <HAL_ADC_Init+0x298>)
 810143c:	fba2 2303 	umull	r2, r3, r2, r3
 8101440:	099b      	lsrs	r3, r3, #6
 8101442:	3301      	adds	r3, #1
 8101444:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101446:	e002      	b.n	810144e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101448:	68bb      	ldr	r3, [r7, #8]
 810144a:	3b01      	subs	r3, #1
 810144c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810144e:	68bb      	ldr	r3, [r7, #8]
 8101450:	2b00      	cmp	r3, #0
 8101452:	d1f9      	bne.n	8101448 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	681b      	ldr	r3, [r3, #0]
 8101458:	4618      	mov	r0, r3
 810145a:	f7ff ff65 	bl	8101328 <LL_ADC_IsInternalRegulatorEnabled>
 810145e:	4603      	mov	r3, r0
 8101460:	2b00      	cmp	r3, #0
 8101462:	d10d      	bne.n	8101480 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101464:	687b      	ldr	r3, [r7, #4]
 8101466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101468:	f043 0210 	orr.w	r2, r3, #16
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101470:	687b      	ldr	r3, [r7, #4]
 8101472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101474:	f043 0201 	orr.w	r2, r3, #1
 8101478:	687b      	ldr	r3, [r7, #4]
 810147a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 810147c:	2301      	movs	r3, #1
 810147e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101480:	687b      	ldr	r3, [r7, #4]
 8101482:	681b      	ldr	r3, [r3, #0]
 8101484:	4618      	mov	r0, r3
 8101486:	f7ff ff76 	bl	8101376 <LL_ADC_REG_IsConversionOngoing>
 810148a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810148c:	687b      	ldr	r3, [r7, #4]
 810148e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101490:	f003 0310 	and.w	r3, r3, #16
 8101494:	2b00      	cmp	r3, #0
 8101496:	f040 8129 	bne.w	81016ec <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810149a:	697b      	ldr	r3, [r7, #20]
 810149c:	2b00      	cmp	r3, #0
 810149e:	f040 8125 	bne.w	81016ec <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81014a6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 81014aa:	f043 0202 	orr.w	r2, r3, #2
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81014b2:	687b      	ldr	r3, [r7, #4]
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	4618      	mov	r0, r3
 81014b8:	f7ff ff4a 	bl	8101350 <LL_ADC_IsEnabled>
 81014bc:	4603      	mov	r3, r0
 81014be:	2b00      	cmp	r3, #0
 81014c0:	d136      	bne.n	8101530 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81014c2:	687b      	ldr	r3, [r7, #4]
 81014c4:	681b      	ldr	r3, [r3, #0]
 81014c6:	4a66      	ldr	r2, [pc, #408]	@ (8101660 <HAL_ADC_Init+0x29c>)
 81014c8:	4293      	cmp	r3, r2
 81014ca:	d004      	beq.n	81014d6 <HAL_ADC_Init+0x112>
 81014cc:	687b      	ldr	r3, [r7, #4]
 81014ce:	681b      	ldr	r3, [r3, #0]
 81014d0:	4a64      	ldr	r2, [pc, #400]	@ (8101664 <HAL_ADC_Init+0x2a0>)
 81014d2:	4293      	cmp	r3, r2
 81014d4:	d10e      	bne.n	81014f4 <HAL_ADC_Init+0x130>
 81014d6:	4862      	ldr	r0, [pc, #392]	@ (8101660 <HAL_ADC_Init+0x29c>)
 81014d8:	f7ff ff3a 	bl	8101350 <LL_ADC_IsEnabled>
 81014dc:	4604      	mov	r4, r0
 81014de:	4861      	ldr	r0, [pc, #388]	@ (8101664 <HAL_ADC_Init+0x2a0>)
 81014e0:	f7ff ff36 	bl	8101350 <LL_ADC_IsEnabled>
 81014e4:	4603      	mov	r3, r0
 81014e6:	4323      	orrs	r3, r4
 81014e8:	2b00      	cmp	r3, #0
 81014ea:	bf0c      	ite	eq
 81014ec:	2301      	moveq	r3, #1
 81014ee:	2300      	movne	r3, #0
 81014f0:	b2db      	uxtb	r3, r3
 81014f2:	e008      	b.n	8101506 <HAL_ADC_Init+0x142>
 81014f4:	485c      	ldr	r0, [pc, #368]	@ (8101668 <HAL_ADC_Init+0x2a4>)
 81014f6:	f7ff ff2b 	bl	8101350 <LL_ADC_IsEnabled>
 81014fa:	4603      	mov	r3, r0
 81014fc:	2b00      	cmp	r3, #0
 81014fe:	bf0c      	ite	eq
 8101500:	2301      	moveq	r3, #1
 8101502:	2300      	movne	r3, #0
 8101504:	b2db      	uxtb	r3, r3
 8101506:	2b00      	cmp	r3, #0
 8101508:	d012      	beq.n	8101530 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	681b      	ldr	r3, [r3, #0]
 810150e:	4a54      	ldr	r2, [pc, #336]	@ (8101660 <HAL_ADC_Init+0x29c>)
 8101510:	4293      	cmp	r3, r2
 8101512:	d004      	beq.n	810151e <HAL_ADC_Init+0x15a>
 8101514:	687b      	ldr	r3, [r7, #4]
 8101516:	681b      	ldr	r3, [r3, #0]
 8101518:	4a52      	ldr	r2, [pc, #328]	@ (8101664 <HAL_ADC_Init+0x2a0>)
 810151a:	4293      	cmp	r3, r2
 810151c:	d101      	bne.n	8101522 <HAL_ADC_Init+0x15e>
 810151e:	4a53      	ldr	r2, [pc, #332]	@ (810166c <HAL_ADC_Init+0x2a8>)
 8101520:	e000      	b.n	8101524 <HAL_ADC_Init+0x160>
 8101522:	4a53      	ldr	r2, [pc, #332]	@ (8101670 <HAL_ADC_Init+0x2ac>)
 8101524:	687b      	ldr	r3, [r7, #4]
 8101526:	685b      	ldr	r3, [r3, #4]
 8101528:	4619      	mov	r1, r3
 810152a:	4610      	mov	r0, r2
 810152c:	f7ff fdbe 	bl	81010ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101530:	f7ff fdb0 	bl	8101094 <HAL_GetREVID>
 8101534:	4603      	mov	r3, r0
 8101536:	f241 0203 	movw	r2, #4099	@ 0x1003
 810153a:	4293      	cmp	r3, r2
 810153c:	d914      	bls.n	8101568 <HAL_ADC_Init+0x1a4>
 810153e:	687b      	ldr	r3, [r7, #4]
 8101540:	689b      	ldr	r3, [r3, #8]
 8101542:	2b10      	cmp	r3, #16
 8101544:	d110      	bne.n	8101568 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101546:	687b      	ldr	r3, [r7, #4]
 8101548:	7d5b      	ldrb	r3, [r3, #21]
 810154a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810154c:	687b      	ldr	r3, [r7, #4]
 810154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101550:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101552:	687b      	ldr	r3, [r7, #4]
 8101554:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101556:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	7f1b      	ldrb	r3, [r3, #28]
 810155c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810155e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101560:	f043 030c 	orr.w	r3, r3, #12
 8101564:	61bb      	str	r3, [r7, #24]
 8101566:	e00d      	b.n	8101584 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101568:	687b      	ldr	r3, [r7, #4]
 810156a:	7d5b      	ldrb	r3, [r3, #21]
 810156c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810156e:	687b      	ldr	r3, [r7, #4]
 8101570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101572:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101574:	687b      	ldr	r3, [r7, #4]
 8101576:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101578:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810157a:	687b      	ldr	r3, [r7, #4]
 810157c:	7f1b      	ldrb	r3, [r3, #28]
 810157e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101580:	4313      	orrs	r3, r2
 8101582:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101584:	687b      	ldr	r3, [r7, #4]
 8101586:	7f1b      	ldrb	r3, [r3, #28]
 8101588:	2b01      	cmp	r3, #1
 810158a:	d106      	bne.n	810159a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 810158c:	687b      	ldr	r3, [r7, #4]
 810158e:	6a1b      	ldr	r3, [r3, #32]
 8101590:	3b01      	subs	r3, #1
 8101592:	045b      	lsls	r3, r3, #17
 8101594:	69ba      	ldr	r2, [r7, #24]
 8101596:	4313      	orrs	r3, r2
 8101598:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810159a:	687b      	ldr	r3, [r7, #4]
 810159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810159e:	2b00      	cmp	r3, #0
 81015a0:	d009      	beq.n	81015b6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81015a2:	687b      	ldr	r3, [r7, #4]
 81015a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81015a6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81015aa:	687b      	ldr	r3, [r7, #4]
 81015ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81015ae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81015b0:	69ba      	ldr	r2, [r7, #24]
 81015b2:	4313      	orrs	r3, r2
 81015b4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	681b      	ldr	r3, [r3, #0]
 81015ba:	68da      	ldr	r2, [r3, #12]
 81015bc:	4b2d      	ldr	r3, [pc, #180]	@ (8101674 <HAL_ADC_Init+0x2b0>)
 81015be:	4013      	ands	r3, r2
 81015c0:	687a      	ldr	r2, [r7, #4]
 81015c2:	6812      	ldr	r2, [r2, #0]
 81015c4:	69b9      	ldr	r1, [r7, #24]
 81015c6:	430b      	orrs	r3, r1
 81015c8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81015ca:	687b      	ldr	r3, [r7, #4]
 81015cc:	681b      	ldr	r3, [r3, #0]
 81015ce:	4618      	mov	r0, r3
 81015d0:	f7ff fed1 	bl	8101376 <LL_ADC_REG_IsConversionOngoing>
 81015d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81015d6:	687b      	ldr	r3, [r7, #4]
 81015d8:	681b      	ldr	r3, [r3, #0]
 81015da:	4618      	mov	r0, r3
 81015dc:	f7ff fede 	bl	810139c <LL_ADC_INJ_IsConversionOngoing>
 81015e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81015e2:	693b      	ldr	r3, [r7, #16]
 81015e4:	2b00      	cmp	r3, #0
 81015e6:	d15f      	bne.n	81016a8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81015e8:	68fb      	ldr	r3, [r7, #12]
 81015ea:	2b00      	cmp	r3, #0
 81015ec:	d15c      	bne.n	81016a8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81015ee:	687b      	ldr	r3, [r7, #4]
 81015f0:	7d1b      	ldrb	r3, [r3, #20]
 81015f2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81015f4:	687b      	ldr	r3, [r7, #4]
 81015f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 81015f8:	4313      	orrs	r3, r2
 81015fa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81015fc:	687b      	ldr	r3, [r7, #4]
 81015fe:	681b      	ldr	r3, [r3, #0]
 8101600:	68db      	ldr	r3, [r3, #12]
 8101602:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8101606:	f023 0303 	bic.w	r3, r3, #3
 810160a:	687a      	ldr	r2, [r7, #4]
 810160c:	6812      	ldr	r2, [r2, #0]
 810160e:	69b9      	ldr	r1, [r7, #24]
 8101610:	430b      	orrs	r3, r1
 8101612:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101614:	687b      	ldr	r3, [r7, #4]
 8101616:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 810161a:	2b01      	cmp	r3, #1
 810161c:	d12e      	bne.n	810167c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810161e:	687b      	ldr	r3, [r7, #4]
 8101620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101622:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	681b      	ldr	r3, [r3, #0]
 8101628:	691a      	ldr	r2, [r3, #16]
 810162a:	4b13      	ldr	r3, [pc, #76]	@ (8101678 <HAL_ADC_Init+0x2b4>)
 810162c:	4013      	ands	r3, r2
 810162e:	687a      	ldr	r2, [r7, #4]
 8101630:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8101632:	3a01      	subs	r2, #1
 8101634:	0411      	lsls	r1, r2, #16
 8101636:	687a      	ldr	r2, [r7, #4]
 8101638:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 810163a:	4311      	orrs	r1, r2
 810163c:	687a      	ldr	r2, [r7, #4]
 810163e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8101640:	4311      	orrs	r1, r2
 8101642:	687a      	ldr	r2, [r7, #4]
 8101644:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8101646:	430a      	orrs	r2, r1
 8101648:	431a      	orrs	r2, r3
 810164a:	687b      	ldr	r3, [r7, #4]
 810164c:	681b      	ldr	r3, [r3, #0]
 810164e:	f042 0201 	orr.w	r2, r2, #1
 8101652:	611a      	str	r2, [r3, #16]
 8101654:	e01a      	b.n	810168c <HAL_ADC_Init+0x2c8>
 8101656:	bf00      	nop
 8101658:	10000000 	.word	0x10000000
 810165c:	053e2d63 	.word	0x053e2d63
 8101660:	40022000 	.word	0x40022000
 8101664:	40022100 	.word	0x40022100
 8101668:	58026000 	.word	0x58026000
 810166c:	40022300 	.word	0x40022300
 8101670:	58026300 	.word	0x58026300
 8101674:	fff0c003 	.word	0xfff0c003
 8101678:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	691a      	ldr	r2, [r3, #16]
 8101682:	687b      	ldr	r3, [r7, #4]
 8101684:	681b      	ldr	r3, [r3, #0]
 8101686:	f022 0201 	bic.w	r2, r2, #1
 810168a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	681b      	ldr	r3, [r3, #0]
 8101690:	691b      	ldr	r3, [r3, #16]
 8101692:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	681b      	ldr	r3, [r3, #0]
 810169e:	430a      	orrs	r2, r1
 81016a0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81016a2:	6878      	ldr	r0, [r7, #4]
 81016a4:	f000 fb8c 	bl	8101dc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	68db      	ldr	r3, [r3, #12]
 81016ac:	2b01      	cmp	r3, #1
 81016ae:	d10c      	bne.n	81016ca <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81016b0:	687b      	ldr	r3, [r7, #4]
 81016b2:	681b      	ldr	r3, [r3, #0]
 81016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81016b6:	f023 010f 	bic.w	r1, r3, #15
 81016ba:	687b      	ldr	r3, [r7, #4]
 81016bc:	699b      	ldr	r3, [r3, #24]
 81016be:	1e5a      	subs	r2, r3, #1
 81016c0:	687b      	ldr	r3, [r7, #4]
 81016c2:	681b      	ldr	r3, [r3, #0]
 81016c4:	430a      	orrs	r2, r1
 81016c6:	631a      	str	r2, [r3, #48]	@ 0x30
 81016c8:	e007      	b.n	81016da <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	681b      	ldr	r3, [r3, #0]
 81016ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81016d0:	687b      	ldr	r3, [r7, #4]
 81016d2:	681b      	ldr	r3, [r3, #0]
 81016d4:	f022 020f 	bic.w	r2, r2, #15
 81016d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81016de:	f023 0303 	bic.w	r3, r3, #3
 81016e2:	f043 0201 	orr.w	r2, r3, #1
 81016e6:	687b      	ldr	r3, [r7, #4]
 81016e8:	655a      	str	r2, [r3, #84]	@ 0x54
 81016ea:	e007      	b.n	81016fc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81016ec:	687b      	ldr	r3, [r7, #4]
 81016ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81016f0:	f043 0210 	orr.w	r2, r3, #16
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81016f8:	2301      	movs	r3, #1
 81016fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81016fc:	7ffb      	ldrb	r3, [r7, #31]
}
 81016fe:	4618      	mov	r0, r3
 8101700:	3724      	adds	r7, #36	@ 0x24
 8101702:	46bd      	mov	sp, r7
 8101704:	bd90      	pop	{r4, r7, pc}
 8101706:	bf00      	nop

08101708 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8101708:	b590      	push	{r4, r7, lr}
 810170a:	b0a1      	sub	sp, #132	@ 0x84
 810170c:	af00      	add	r7, sp, #0
 810170e:	6078      	str	r0, [r7, #4]
 8101710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101712:	2300      	movs	r3, #0
 8101714:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8101718:	2300      	movs	r3, #0
 810171a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 810171c:	683b      	ldr	r3, [r7, #0]
 810171e:	68db      	ldr	r3, [r3, #12]
 8101720:	4a65      	ldr	r2, [pc, #404]	@ (81018b8 <HAL_ADC_ConfigChannel+0x1b0>)
 8101722:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 810172a:	2b01      	cmp	r3, #1
 810172c:	d101      	bne.n	8101732 <HAL_ADC_ConfigChannel+0x2a>
 810172e:	2302      	movs	r3, #2
 8101730:	e32e      	b.n	8101d90 <HAL_ADC_ConfigChannel+0x688>
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	2201      	movs	r2, #1
 8101736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	681b      	ldr	r3, [r3, #0]
 810173e:	4618      	mov	r0, r3
 8101740:	f7ff fe19 	bl	8101376 <LL_ADC_REG_IsConversionOngoing>
 8101744:	4603      	mov	r3, r0
 8101746:	2b00      	cmp	r3, #0
 8101748:	f040 8313 	bne.w	8101d72 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 810174c:	683b      	ldr	r3, [r7, #0]
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	2b00      	cmp	r3, #0
 8101752:	db2c      	blt.n	81017ae <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8101754:	683b      	ldr	r3, [r7, #0]
 8101756:	681b      	ldr	r3, [r3, #0]
 8101758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810175c:	2b00      	cmp	r3, #0
 810175e:	d108      	bne.n	8101772 <HAL_ADC_ConfigChannel+0x6a>
 8101760:	683b      	ldr	r3, [r7, #0]
 8101762:	681b      	ldr	r3, [r3, #0]
 8101764:	0e9b      	lsrs	r3, r3, #26
 8101766:	f003 031f 	and.w	r3, r3, #31
 810176a:	2201      	movs	r2, #1
 810176c:	fa02 f303 	lsl.w	r3, r2, r3
 8101770:	e016      	b.n	81017a0 <HAL_ADC_ConfigChannel+0x98>
 8101772:	683b      	ldr	r3, [r7, #0]
 8101774:	681b      	ldr	r3, [r3, #0]
 8101776:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810177a:	fa93 f3a3 	rbit	r3, r3
 810177e:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8101780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8101782:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8101784:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8101786:	2b00      	cmp	r3, #0
 8101788:	d101      	bne.n	810178e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 810178a:	2320      	movs	r3, #32
 810178c:	e003      	b.n	8101796 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 810178e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8101790:	fab3 f383 	clz	r3, r3
 8101794:	b2db      	uxtb	r3, r3
 8101796:	f003 031f 	and.w	r3, r3, #31
 810179a:	2201      	movs	r2, #1
 810179c:	fa02 f303 	lsl.w	r3, r2, r3
 81017a0:	687a      	ldr	r2, [r7, #4]
 81017a2:	6812      	ldr	r2, [r2, #0]
 81017a4:	69d1      	ldr	r1, [r2, #28]
 81017a6:	687a      	ldr	r2, [r7, #4]
 81017a8:	6812      	ldr	r2, [r2, #0]
 81017aa:	430b      	orrs	r3, r1
 81017ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	6818      	ldr	r0, [r3, #0]
 81017b2:	683b      	ldr	r3, [r7, #0]
 81017b4:	6859      	ldr	r1, [r3, #4]
 81017b6:	683b      	ldr	r3, [r7, #0]
 81017b8:	681b      	ldr	r3, [r3, #0]
 81017ba:	461a      	mov	r2, r3
 81017bc:	f7ff fcfe 	bl	81011bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81017c0:	687b      	ldr	r3, [r7, #4]
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	4618      	mov	r0, r3
 81017c6:	f7ff fdd6 	bl	8101376 <LL_ADC_REG_IsConversionOngoing>
 81017ca:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81017cc:	687b      	ldr	r3, [r7, #4]
 81017ce:	681b      	ldr	r3, [r3, #0]
 81017d0:	4618      	mov	r0, r3
 81017d2:	f7ff fde3 	bl	810139c <LL_ADC_INJ_IsConversionOngoing>
 81017d6:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81017d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 81017da:	2b00      	cmp	r3, #0
 81017dc:	f040 80b8 	bne.w	8101950 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81017e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81017e2:	2b00      	cmp	r3, #0
 81017e4:	f040 80b4 	bne.w	8101950 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81017e8:	687b      	ldr	r3, [r7, #4]
 81017ea:	6818      	ldr	r0, [r3, #0]
 81017ec:	683b      	ldr	r3, [r7, #0]
 81017ee:	6819      	ldr	r1, [r3, #0]
 81017f0:	683b      	ldr	r3, [r7, #0]
 81017f2:	689b      	ldr	r3, [r3, #8]
 81017f4:	461a      	mov	r2, r3
 81017f6:	f7ff fd0d 	bl	8101214 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81017fa:	4b30      	ldr	r3, [pc, #192]	@ (81018bc <HAL_ADC_ConfigChannel+0x1b4>)
 81017fc:	681b      	ldr	r3, [r3, #0]
 81017fe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8101802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101806:	d10b      	bne.n	8101820 <HAL_ADC_ConfigChannel+0x118>
 8101808:	683b      	ldr	r3, [r7, #0]
 810180a:	695a      	ldr	r2, [r3, #20]
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	681b      	ldr	r3, [r3, #0]
 8101810:	68db      	ldr	r3, [r3, #12]
 8101812:	089b      	lsrs	r3, r3, #2
 8101814:	f003 0307 	and.w	r3, r3, #7
 8101818:	005b      	lsls	r3, r3, #1
 810181a:	fa02 f303 	lsl.w	r3, r2, r3
 810181e:	e01d      	b.n	810185c <HAL_ADC_ConfigChannel+0x154>
 8101820:	687b      	ldr	r3, [r7, #4]
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	68db      	ldr	r3, [r3, #12]
 8101826:	f003 0310 	and.w	r3, r3, #16
 810182a:	2b00      	cmp	r3, #0
 810182c:	d10b      	bne.n	8101846 <HAL_ADC_ConfigChannel+0x13e>
 810182e:	683b      	ldr	r3, [r7, #0]
 8101830:	695a      	ldr	r2, [r3, #20]
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	681b      	ldr	r3, [r3, #0]
 8101836:	68db      	ldr	r3, [r3, #12]
 8101838:	089b      	lsrs	r3, r3, #2
 810183a:	f003 0307 	and.w	r3, r3, #7
 810183e:	005b      	lsls	r3, r3, #1
 8101840:	fa02 f303 	lsl.w	r3, r2, r3
 8101844:	e00a      	b.n	810185c <HAL_ADC_ConfigChannel+0x154>
 8101846:	683b      	ldr	r3, [r7, #0]
 8101848:	695a      	ldr	r2, [r3, #20]
 810184a:	687b      	ldr	r3, [r7, #4]
 810184c:	681b      	ldr	r3, [r3, #0]
 810184e:	68db      	ldr	r3, [r3, #12]
 8101850:	089b      	lsrs	r3, r3, #2
 8101852:	f003 0304 	and.w	r3, r3, #4
 8101856:	005b      	lsls	r3, r3, #1
 8101858:	fa02 f303 	lsl.w	r3, r2, r3
 810185c:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810185e:	683b      	ldr	r3, [r7, #0]
 8101860:	691b      	ldr	r3, [r3, #16]
 8101862:	2b04      	cmp	r3, #4
 8101864:	d02c      	beq.n	81018c0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	6818      	ldr	r0, [r3, #0]
 810186a:	683b      	ldr	r3, [r7, #0]
 810186c:	6919      	ldr	r1, [r3, #16]
 810186e:	683b      	ldr	r3, [r7, #0]
 8101870:	681a      	ldr	r2, [r3, #0]
 8101872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8101874:	f7ff fc4e 	bl	8101114 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8101878:	687b      	ldr	r3, [r7, #4]
 810187a:	6818      	ldr	r0, [r3, #0]
 810187c:	683b      	ldr	r3, [r7, #0]
 810187e:	6919      	ldr	r1, [r3, #16]
 8101880:	683b      	ldr	r3, [r7, #0]
 8101882:	7e5b      	ldrb	r3, [r3, #25]
 8101884:	2b01      	cmp	r3, #1
 8101886:	d102      	bne.n	810188e <HAL_ADC_ConfigChannel+0x186>
 8101888:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810188c:	e000      	b.n	8101890 <HAL_ADC_ConfigChannel+0x188>
 810188e:	2300      	movs	r3, #0
 8101890:	461a      	mov	r2, r3
 8101892:	f7ff fc78 	bl	8101186 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101896:	687b      	ldr	r3, [r7, #4]
 8101898:	6818      	ldr	r0, [r3, #0]
 810189a:	683b      	ldr	r3, [r7, #0]
 810189c:	6919      	ldr	r1, [r3, #16]
 810189e:	683b      	ldr	r3, [r7, #0]
 81018a0:	7e1b      	ldrb	r3, [r3, #24]
 81018a2:	2b01      	cmp	r3, #1
 81018a4:	d102      	bne.n	81018ac <HAL_ADC_ConfigChannel+0x1a4>
 81018a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81018aa:	e000      	b.n	81018ae <HAL_ADC_ConfigChannel+0x1a6>
 81018ac:	2300      	movs	r3, #0
 81018ae:	461a      	mov	r2, r3
 81018b0:	f7ff fc50 	bl	8101154 <LL_ADC_SetDataRightShift>
 81018b4:	e04c      	b.n	8101950 <HAL_ADC_ConfigChannel+0x248>
 81018b6:	bf00      	nop
 81018b8:	47ff0000 	.word	0x47ff0000
 81018bc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81018c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81018ca:	683b      	ldr	r3, [r7, #0]
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	069b      	lsls	r3, r3, #26
 81018d0:	429a      	cmp	r2, r3
 81018d2:	d107      	bne.n	81018e4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	681b      	ldr	r3, [r3, #0]
 81018d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81018da:	687b      	ldr	r3, [r7, #4]
 81018dc:	681b      	ldr	r3, [r3, #0]
 81018de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81018e2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	681b      	ldr	r3, [r3, #0]
 81018e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81018ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81018ee:	683b      	ldr	r3, [r7, #0]
 81018f0:	681b      	ldr	r3, [r3, #0]
 81018f2:	069b      	lsls	r3, r3, #26
 81018f4:	429a      	cmp	r2, r3
 81018f6:	d107      	bne.n	8101908 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	681b      	ldr	r3, [r3, #0]
 8101902:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8101906:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	681b      	ldr	r3, [r3, #0]
 810190c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810190e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101912:	683b      	ldr	r3, [r7, #0]
 8101914:	681b      	ldr	r3, [r3, #0]
 8101916:	069b      	lsls	r3, r3, #26
 8101918:	429a      	cmp	r2, r3
 810191a:	d107      	bne.n	810192c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8101922:	687b      	ldr	r3, [r7, #4]
 8101924:	681b      	ldr	r3, [r3, #0]
 8101926:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810192a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810192c:	687b      	ldr	r3, [r7, #4]
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8101932:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101936:	683b      	ldr	r3, [r7, #0]
 8101938:	681b      	ldr	r3, [r3, #0]
 810193a:	069b      	lsls	r3, r3, #26
 810193c:	429a      	cmp	r2, r3
 810193e:	d107      	bne.n	8101950 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	681b      	ldr	r3, [r3, #0]
 8101944:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8101946:	687b      	ldr	r3, [r7, #4]
 8101948:	681b      	ldr	r3, [r3, #0]
 810194a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 810194e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	4618      	mov	r0, r3
 8101956:	f7ff fcfb 	bl	8101350 <LL_ADC_IsEnabled>
 810195a:	4603      	mov	r3, r0
 810195c:	2b00      	cmp	r3, #0
 810195e:	f040 8211 	bne.w	8101d84 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	6818      	ldr	r0, [r3, #0]
 8101966:	683b      	ldr	r3, [r7, #0]
 8101968:	6819      	ldr	r1, [r3, #0]
 810196a:	683b      	ldr	r3, [r7, #0]
 810196c:	68db      	ldr	r3, [r3, #12]
 810196e:	461a      	mov	r2, r3
 8101970:	f7ff fc7c 	bl	810126c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8101974:	683b      	ldr	r3, [r7, #0]
 8101976:	68db      	ldr	r3, [r3, #12]
 8101978:	4aa1      	ldr	r2, [pc, #644]	@ (8101c00 <HAL_ADC_ConfigChannel+0x4f8>)
 810197a:	4293      	cmp	r3, r2
 810197c:	f040 812e 	bne.w	8101bdc <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101984:	683b      	ldr	r3, [r7, #0]
 8101986:	681b      	ldr	r3, [r3, #0]
 8101988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810198c:	2b00      	cmp	r3, #0
 810198e:	d10b      	bne.n	81019a8 <HAL_ADC_ConfigChannel+0x2a0>
 8101990:	683b      	ldr	r3, [r7, #0]
 8101992:	681b      	ldr	r3, [r3, #0]
 8101994:	0e9b      	lsrs	r3, r3, #26
 8101996:	3301      	adds	r3, #1
 8101998:	f003 031f 	and.w	r3, r3, #31
 810199c:	2b09      	cmp	r3, #9
 810199e:	bf94      	ite	ls
 81019a0:	2301      	movls	r3, #1
 81019a2:	2300      	movhi	r3, #0
 81019a4:	b2db      	uxtb	r3, r3
 81019a6:	e019      	b.n	81019dc <HAL_ADC_ConfigChannel+0x2d4>
 81019a8:	683b      	ldr	r3, [r7, #0]
 81019aa:	681b      	ldr	r3, [r3, #0]
 81019ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81019ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 81019b0:	fa93 f3a3 	rbit	r3, r3
 81019b4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 81019b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81019b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 81019ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81019bc:	2b00      	cmp	r3, #0
 81019be:	d101      	bne.n	81019c4 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 81019c0:	2320      	movs	r3, #32
 81019c2:	e003      	b.n	81019cc <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 81019c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 81019c6:	fab3 f383 	clz	r3, r3
 81019ca:	b2db      	uxtb	r3, r3
 81019cc:	3301      	adds	r3, #1
 81019ce:	f003 031f 	and.w	r3, r3, #31
 81019d2:	2b09      	cmp	r3, #9
 81019d4:	bf94      	ite	ls
 81019d6:	2301      	movls	r3, #1
 81019d8:	2300      	movhi	r3, #0
 81019da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81019dc:	2b00      	cmp	r3, #0
 81019de:	d079      	beq.n	8101ad4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81019e0:	683b      	ldr	r3, [r7, #0]
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81019e8:	2b00      	cmp	r3, #0
 81019ea:	d107      	bne.n	81019fc <HAL_ADC_ConfigChannel+0x2f4>
 81019ec:	683b      	ldr	r3, [r7, #0]
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	0e9b      	lsrs	r3, r3, #26
 81019f2:	3301      	adds	r3, #1
 81019f4:	069b      	lsls	r3, r3, #26
 81019f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81019fa:	e015      	b.n	8101a28 <HAL_ADC_ConfigChannel+0x320>
 81019fc:	683b      	ldr	r3, [r7, #0]
 81019fe:	681b      	ldr	r3, [r3, #0]
 8101a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8101a04:	fa93 f3a3 	rbit	r3, r3
 8101a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8101a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8101a0c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8101a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8101a10:	2b00      	cmp	r3, #0
 8101a12:	d101      	bne.n	8101a18 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8101a14:	2320      	movs	r3, #32
 8101a16:	e003      	b.n	8101a20 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8101a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8101a1a:	fab3 f383 	clz	r3, r3
 8101a1e:	b2db      	uxtb	r3, r3
 8101a20:	3301      	adds	r3, #1
 8101a22:	069b      	lsls	r3, r3, #26
 8101a24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101a28:	683b      	ldr	r3, [r7, #0]
 8101a2a:	681b      	ldr	r3, [r3, #0]
 8101a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101a30:	2b00      	cmp	r3, #0
 8101a32:	d109      	bne.n	8101a48 <HAL_ADC_ConfigChannel+0x340>
 8101a34:	683b      	ldr	r3, [r7, #0]
 8101a36:	681b      	ldr	r3, [r3, #0]
 8101a38:	0e9b      	lsrs	r3, r3, #26
 8101a3a:	3301      	adds	r3, #1
 8101a3c:	f003 031f 	and.w	r3, r3, #31
 8101a40:	2101      	movs	r1, #1
 8101a42:	fa01 f303 	lsl.w	r3, r1, r3
 8101a46:	e017      	b.n	8101a78 <HAL_ADC_ConfigChannel+0x370>
 8101a48:	683b      	ldr	r3, [r7, #0]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8101a50:	fa93 f3a3 	rbit	r3, r3
 8101a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8101a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8101a58:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8101a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101a5c:	2b00      	cmp	r3, #0
 8101a5e:	d101      	bne.n	8101a64 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8101a60:	2320      	movs	r3, #32
 8101a62:	e003      	b.n	8101a6c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8101a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8101a66:	fab3 f383 	clz	r3, r3
 8101a6a:	b2db      	uxtb	r3, r3
 8101a6c:	3301      	adds	r3, #1
 8101a6e:	f003 031f 	and.w	r3, r3, #31
 8101a72:	2101      	movs	r1, #1
 8101a74:	fa01 f303 	lsl.w	r3, r1, r3
 8101a78:	ea42 0103 	orr.w	r1, r2, r3
 8101a7c:	683b      	ldr	r3, [r7, #0]
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d10a      	bne.n	8101a9e <HAL_ADC_ConfigChannel+0x396>
 8101a88:	683b      	ldr	r3, [r7, #0]
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	0e9b      	lsrs	r3, r3, #26
 8101a8e:	3301      	adds	r3, #1
 8101a90:	f003 021f 	and.w	r2, r3, #31
 8101a94:	4613      	mov	r3, r2
 8101a96:	005b      	lsls	r3, r3, #1
 8101a98:	4413      	add	r3, r2
 8101a9a:	051b      	lsls	r3, r3, #20
 8101a9c:	e018      	b.n	8101ad0 <HAL_ADC_ConfigChannel+0x3c8>
 8101a9e:	683b      	ldr	r3, [r7, #0]
 8101aa0:	681b      	ldr	r3, [r3, #0]
 8101aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8101aa6:	fa93 f3a3 	rbit	r3, r3
 8101aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8101aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8101ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101ab2:	2b00      	cmp	r3, #0
 8101ab4:	d101      	bne.n	8101aba <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8101ab6:	2320      	movs	r3, #32
 8101ab8:	e003      	b.n	8101ac2 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8101aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8101abc:	fab3 f383 	clz	r3, r3
 8101ac0:	b2db      	uxtb	r3, r3
 8101ac2:	3301      	adds	r3, #1
 8101ac4:	f003 021f 	and.w	r2, r3, #31
 8101ac8:	4613      	mov	r3, r2
 8101aca:	005b      	lsls	r3, r3, #1
 8101acc:	4413      	add	r3, r2
 8101ace:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101ad0:	430b      	orrs	r3, r1
 8101ad2:	e07e      	b.n	8101bd2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101ad4:	683b      	ldr	r3, [r7, #0]
 8101ad6:	681b      	ldr	r3, [r3, #0]
 8101ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101adc:	2b00      	cmp	r3, #0
 8101ade:	d107      	bne.n	8101af0 <HAL_ADC_ConfigChannel+0x3e8>
 8101ae0:	683b      	ldr	r3, [r7, #0]
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	0e9b      	lsrs	r3, r3, #26
 8101ae6:	3301      	adds	r3, #1
 8101ae8:	069b      	lsls	r3, r3, #26
 8101aea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101aee:	e015      	b.n	8101b1c <HAL_ADC_ConfigChannel+0x414>
 8101af0:	683b      	ldr	r3, [r7, #0]
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8101af8:	fa93 f3a3 	rbit	r3, r3
 8101afc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8101afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8101b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d101      	bne.n	8101b0c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8101b08:	2320      	movs	r3, #32
 8101b0a:	e003      	b.n	8101b14 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8101b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101b0e:	fab3 f383 	clz	r3, r3
 8101b12:	b2db      	uxtb	r3, r3
 8101b14:	3301      	adds	r3, #1
 8101b16:	069b      	lsls	r3, r3, #26
 8101b18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8101b1c:	683b      	ldr	r3, [r7, #0]
 8101b1e:	681b      	ldr	r3, [r3, #0]
 8101b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101b24:	2b00      	cmp	r3, #0
 8101b26:	d109      	bne.n	8101b3c <HAL_ADC_ConfigChannel+0x434>
 8101b28:	683b      	ldr	r3, [r7, #0]
 8101b2a:	681b      	ldr	r3, [r3, #0]
 8101b2c:	0e9b      	lsrs	r3, r3, #26
 8101b2e:	3301      	adds	r3, #1
 8101b30:	f003 031f 	and.w	r3, r3, #31
 8101b34:	2101      	movs	r1, #1
 8101b36:	fa01 f303 	lsl.w	r3, r1, r3
 8101b3a:	e017      	b.n	8101b6c <HAL_ADC_ConfigChannel+0x464>
 8101b3c:	683b      	ldr	r3, [r7, #0]
 8101b3e:	681b      	ldr	r3, [r3, #0]
 8101b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101b42:	69fb      	ldr	r3, [r7, #28]
 8101b44:	fa93 f3a3 	rbit	r3, r3
 8101b48:	61bb      	str	r3, [r7, #24]
  return result;
 8101b4a:	69bb      	ldr	r3, [r7, #24]
 8101b4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8101b4e:	6a3b      	ldr	r3, [r7, #32]
 8101b50:	2b00      	cmp	r3, #0
 8101b52:	d101      	bne.n	8101b58 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8101b54:	2320      	movs	r3, #32
 8101b56:	e003      	b.n	8101b60 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8101b58:	6a3b      	ldr	r3, [r7, #32]
 8101b5a:	fab3 f383 	clz	r3, r3
 8101b5e:	b2db      	uxtb	r3, r3
 8101b60:	3301      	adds	r3, #1
 8101b62:	f003 031f 	and.w	r3, r3, #31
 8101b66:	2101      	movs	r1, #1
 8101b68:	fa01 f303 	lsl.w	r3, r1, r3
 8101b6c:	ea42 0103 	orr.w	r1, r2, r3
 8101b70:	683b      	ldr	r3, [r7, #0]
 8101b72:	681b      	ldr	r3, [r3, #0]
 8101b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101b78:	2b00      	cmp	r3, #0
 8101b7a:	d10d      	bne.n	8101b98 <HAL_ADC_ConfigChannel+0x490>
 8101b7c:	683b      	ldr	r3, [r7, #0]
 8101b7e:	681b      	ldr	r3, [r3, #0]
 8101b80:	0e9b      	lsrs	r3, r3, #26
 8101b82:	3301      	adds	r3, #1
 8101b84:	f003 021f 	and.w	r2, r3, #31
 8101b88:	4613      	mov	r3, r2
 8101b8a:	005b      	lsls	r3, r3, #1
 8101b8c:	4413      	add	r3, r2
 8101b8e:	3b1e      	subs	r3, #30
 8101b90:	051b      	lsls	r3, r3, #20
 8101b92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101b96:	e01b      	b.n	8101bd0 <HAL_ADC_ConfigChannel+0x4c8>
 8101b98:	683b      	ldr	r3, [r7, #0]
 8101b9a:	681b      	ldr	r3, [r3, #0]
 8101b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101b9e:	693b      	ldr	r3, [r7, #16]
 8101ba0:	fa93 f3a3 	rbit	r3, r3
 8101ba4:	60fb      	str	r3, [r7, #12]
  return result;
 8101ba6:	68fb      	ldr	r3, [r7, #12]
 8101ba8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8101baa:	697b      	ldr	r3, [r7, #20]
 8101bac:	2b00      	cmp	r3, #0
 8101bae:	d101      	bne.n	8101bb4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8101bb0:	2320      	movs	r3, #32
 8101bb2:	e003      	b.n	8101bbc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8101bb4:	697b      	ldr	r3, [r7, #20]
 8101bb6:	fab3 f383 	clz	r3, r3
 8101bba:	b2db      	uxtb	r3, r3
 8101bbc:	3301      	adds	r3, #1
 8101bbe:	f003 021f 	and.w	r2, r3, #31
 8101bc2:	4613      	mov	r3, r2
 8101bc4:	005b      	lsls	r3, r3, #1
 8101bc6:	4413      	add	r3, r2
 8101bc8:	3b1e      	subs	r3, #30
 8101bca:	051b      	lsls	r3, r3, #20
 8101bcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101bd0:	430b      	orrs	r3, r1
 8101bd2:	683a      	ldr	r2, [r7, #0]
 8101bd4:	6892      	ldr	r2, [r2, #8]
 8101bd6:	4619      	mov	r1, r3
 8101bd8:	f7ff fb1c 	bl	8101214 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8101bdc:	683b      	ldr	r3, [r7, #0]
 8101bde:	681b      	ldr	r3, [r3, #0]
 8101be0:	2b00      	cmp	r3, #0
 8101be2:	f280 80cf 	bge.w	8101d84 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101be6:	687b      	ldr	r3, [r7, #4]
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	4a06      	ldr	r2, [pc, #24]	@ (8101c04 <HAL_ADC_ConfigChannel+0x4fc>)
 8101bec:	4293      	cmp	r3, r2
 8101bee:	d004      	beq.n	8101bfa <HAL_ADC_ConfigChannel+0x4f2>
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	681b      	ldr	r3, [r3, #0]
 8101bf4:	4a04      	ldr	r2, [pc, #16]	@ (8101c08 <HAL_ADC_ConfigChannel+0x500>)
 8101bf6:	4293      	cmp	r3, r2
 8101bf8:	d10a      	bne.n	8101c10 <HAL_ADC_ConfigChannel+0x508>
 8101bfa:	4b04      	ldr	r3, [pc, #16]	@ (8101c0c <HAL_ADC_ConfigChannel+0x504>)
 8101bfc:	e009      	b.n	8101c12 <HAL_ADC_ConfigChannel+0x50a>
 8101bfe:	bf00      	nop
 8101c00:	47ff0000 	.word	0x47ff0000
 8101c04:	40022000 	.word	0x40022000
 8101c08:	40022100 	.word	0x40022100
 8101c0c:	40022300 	.word	0x40022300
 8101c10:	4b61      	ldr	r3, [pc, #388]	@ (8101d98 <HAL_ADC_ConfigChannel+0x690>)
 8101c12:	4618      	mov	r0, r3
 8101c14:	f7ff fa70 	bl	81010f8 <LL_ADC_GetCommonPathInternalCh>
 8101c18:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	681b      	ldr	r3, [r3, #0]
 8101c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8101d9c <HAL_ADC_ConfigChannel+0x694>)
 8101c20:	4293      	cmp	r3, r2
 8101c22:	d004      	beq.n	8101c2e <HAL_ADC_ConfigChannel+0x526>
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	681b      	ldr	r3, [r3, #0]
 8101c28:	4a5d      	ldr	r2, [pc, #372]	@ (8101da0 <HAL_ADC_ConfigChannel+0x698>)
 8101c2a:	4293      	cmp	r3, r2
 8101c2c:	d10e      	bne.n	8101c4c <HAL_ADC_ConfigChannel+0x544>
 8101c2e:	485b      	ldr	r0, [pc, #364]	@ (8101d9c <HAL_ADC_ConfigChannel+0x694>)
 8101c30:	f7ff fb8e 	bl	8101350 <LL_ADC_IsEnabled>
 8101c34:	4604      	mov	r4, r0
 8101c36:	485a      	ldr	r0, [pc, #360]	@ (8101da0 <HAL_ADC_ConfigChannel+0x698>)
 8101c38:	f7ff fb8a 	bl	8101350 <LL_ADC_IsEnabled>
 8101c3c:	4603      	mov	r3, r0
 8101c3e:	4323      	orrs	r3, r4
 8101c40:	2b00      	cmp	r3, #0
 8101c42:	bf0c      	ite	eq
 8101c44:	2301      	moveq	r3, #1
 8101c46:	2300      	movne	r3, #0
 8101c48:	b2db      	uxtb	r3, r3
 8101c4a:	e008      	b.n	8101c5e <HAL_ADC_ConfigChannel+0x556>
 8101c4c:	4855      	ldr	r0, [pc, #340]	@ (8101da4 <HAL_ADC_ConfigChannel+0x69c>)
 8101c4e:	f7ff fb7f 	bl	8101350 <LL_ADC_IsEnabled>
 8101c52:	4603      	mov	r3, r0
 8101c54:	2b00      	cmp	r3, #0
 8101c56:	bf0c      	ite	eq
 8101c58:	2301      	moveq	r3, #1
 8101c5a:	2300      	movne	r3, #0
 8101c5c:	b2db      	uxtb	r3, r3
 8101c5e:	2b00      	cmp	r3, #0
 8101c60:	d07d      	beq.n	8101d5e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8101c62:	683b      	ldr	r3, [r7, #0]
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	4a50      	ldr	r2, [pc, #320]	@ (8101da8 <HAL_ADC_ConfigChannel+0x6a0>)
 8101c68:	4293      	cmp	r3, r2
 8101c6a:	d130      	bne.n	8101cce <HAL_ADC_ConfigChannel+0x5c6>
 8101c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8101c72:	2b00      	cmp	r3, #0
 8101c74:	d12b      	bne.n	8101cce <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8101da4 <HAL_ADC_ConfigChannel+0x69c>)
 8101c7c:	4293      	cmp	r3, r2
 8101c7e:	f040 8081 	bne.w	8101d84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8101c82:	687b      	ldr	r3, [r7, #4]
 8101c84:	681b      	ldr	r3, [r3, #0]
 8101c86:	4a45      	ldr	r2, [pc, #276]	@ (8101d9c <HAL_ADC_ConfigChannel+0x694>)
 8101c88:	4293      	cmp	r3, r2
 8101c8a:	d004      	beq.n	8101c96 <HAL_ADC_ConfigChannel+0x58e>
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	4a43      	ldr	r2, [pc, #268]	@ (8101da0 <HAL_ADC_ConfigChannel+0x698>)
 8101c92:	4293      	cmp	r3, r2
 8101c94:	d101      	bne.n	8101c9a <HAL_ADC_ConfigChannel+0x592>
 8101c96:	4a45      	ldr	r2, [pc, #276]	@ (8101dac <HAL_ADC_ConfigChannel+0x6a4>)
 8101c98:	e000      	b.n	8101c9c <HAL_ADC_ConfigChannel+0x594>
 8101c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8101d98 <HAL_ADC_ConfigChannel+0x690>)
 8101c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101c9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101ca2:	4619      	mov	r1, r3
 8101ca4:	4610      	mov	r0, r2
 8101ca6:	f7ff fa14 	bl	81010d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101caa:	4b41      	ldr	r3, [pc, #260]	@ (8101db0 <HAL_ADC_ConfigChannel+0x6a8>)
 8101cac:	681b      	ldr	r3, [r3, #0]
 8101cae:	099b      	lsrs	r3, r3, #6
 8101cb0:	4a40      	ldr	r2, [pc, #256]	@ (8101db4 <HAL_ADC_ConfigChannel+0x6ac>)
 8101cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8101cb6:	099b      	lsrs	r3, r3, #6
 8101cb8:	3301      	adds	r3, #1
 8101cba:	005b      	lsls	r3, r3, #1
 8101cbc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101cbe:	e002      	b.n	8101cc6 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8101cc0:	68bb      	ldr	r3, [r7, #8]
 8101cc2:	3b01      	subs	r3, #1
 8101cc4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101cc6:	68bb      	ldr	r3, [r7, #8]
 8101cc8:	2b00      	cmp	r3, #0
 8101cca:	d1f9      	bne.n	8101cc0 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101ccc:	e05a      	b.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8101cce:	683b      	ldr	r3, [r7, #0]
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	4a39      	ldr	r2, [pc, #228]	@ (8101db8 <HAL_ADC_ConfigChannel+0x6b0>)
 8101cd4:	4293      	cmp	r3, r2
 8101cd6:	d11e      	bne.n	8101d16 <HAL_ADC_ConfigChannel+0x60e>
 8101cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101cde:	2b00      	cmp	r3, #0
 8101ce0:	d119      	bne.n	8101d16 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101ce2:	687b      	ldr	r3, [r7, #4]
 8101ce4:	681b      	ldr	r3, [r3, #0]
 8101ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8101da4 <HAL_ADC_ConfigChannel+0x69c>)
 8101ce8:	4293      	cmp	r3, r2
 8101cea:	d14b      	bne.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	681b      	ldr	r3, [r3, #0]
 8101cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8101d9c <HAL_ADC_ConfigChannel+0x694>)
 8101cf2:	4293      	cmp	r3, r2
 8101cf4:	d004      	beq.n	8101d00 <HAL_ADC_ConfigChannel+0x5f8>
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	681b      	ldr	r3, [r3, #0]
 8101cfa:	4a29      	ldr	r2, [pc, #164]	@ (8101da0 <HAL_ADC_ConfigChannel+0x698>)
 8101cfc:	4293      	cmp	r3, r2
 8101cfe:	d101      	bne.n	8101d04 <HAL_ADC_ConfigChannel+0x5fc>
 8101d00:	4a2a      	ldr	r2, [pc, #168]	@ (8101dac <HAL_ADC_ConfigChannel+0x6a4>)
 8101d02:	e000      	b.n	8101d06 <HAL_ADC_ConfigChannel+0x5fe>
 8101d04:	4a24      	ldr	r2, [pc, #144]	@ (8101d98 <HAL_ADC_ConfigChannel+0x690>)
 8101d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101d08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8101d0c:	4619      	mov	r1, r3
 8101d0e:	4610      	mov	r0, r2
 8101d10:	f7ff f9df 	bl	81010d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101d14:	e036      	b.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8101d16:	683b      	ldr	r3, [r7, #0]
 8101d18:	681b      	ldr	r3, [r3, #0]
 8101d1a:	4a28      	ldr	r2, [pc, #160]	@ (8101dbc <HAL_ADC_ConfigChannel+0x6b4>)
 8101d1c:	4293      	cmp	r3, r2
 8101d1e:	d131      	bne.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
 8101d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101d26:	2b00      	cmp	r3, #0
 8101d28:	d12c      	bne.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	681b      	ldr	r3, [r3, #0]
 8101d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8101da4 <HAL_ADC_ConfigChannel+0x69c>)
 8101d30:	4293      	cmp	r3, r2
 8101d32:	d127      	bne.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	681b      	ldr	r3, [r3, #0]
 8101d38:	4a18      	ldr	r2, [pc, #96]	@ (8101d9c <HAL_ADC_ConfigChannel+0x694>)
 8101d3a:	4293      	cmp	r3, r2
 8101d3c:	d004      	beq.n	8101d48 <HAL_ADC_ConfigChannel+0x640>
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	681b      	ldr	r3, [r3, #0]
 8101d42:	4a17      	ldr	r2, [pc, #92]	@ (8101da0 <HAL_ADC_ConfigChannel+0x698>)
 8101d44:	4293      	cmp	r3, r2
 8101d46:	d101      	bne.n	8101d4c <HAL_ADC_ConfigChannel+0x644>
 8101d48:	4a18      	ldr	r2, [pc, #96]	@ (8101dac <HAL_ADC_ConfigChannel+0x6a4>)
 8101d4a:	e000      	b.n	8101d4e <HAL_ADC_ConfigChannel+0x646>
 8101d4c:	4a12      	ldr	r2, [pc, #72]	@ (8101d98 <HAL_ADC_ConfigChannel+0x690>)
 8101d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8101d50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101d54:	4619      	mov	r1, r3
 8101d56:	4610      	mov	r0, r2
 8101d58:	f7ff f9bb 	bl	81010d2 <LL_ADC_SetCommonPathInternalCh>
 8101d5c:	e012      	b.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d62:	f043 0220 	orr.w	r2, r3, #32
 8101d66:	687b      	ldr	r3, [r7, #4]
 8101d68:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8101d6a:	2301      	movs	r3, #1
 8101d6c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8101d70:	e008      	b.n	8101d84 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101d76:	f043 0220 	orr.w	r2, r3, #32
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8101d7e:	2301      	movs	r3, #1
 8101d80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	2200      	movs	r2, #0
 8101d88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8101d8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8101d90:	4618      	mov	r0, r3
 8101d92:	3784      	adds	r7, #132	@ 0x84
 8101d94:	46bd      	mov	sp, r7
 8101d96:	bd90      	pop	{r4, r7, pc}
 8101d98:	58026300 	.word	0x58026300
 8101d9c:	40022000 	.word	0x40022000
 8101da0:	40022100 	.word	0x40022100
 8101da4:	58026000 	.word	0x58026000
 8101da8:	cb840000 	.word	0xcb840000
 8101dac:	40022300 	.word	0x40022300
 8101db0:	10000000 	.word	0x10000000
 8101db4:	053e2d63 	.word	0x053e2d63
 8101db8:	c7520000 	.word	0xc7520000
 8101dbc:	cfb80000 	.word	0xcfb80000

08101dc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8101dc0:	b580      	push	{r7, lr}
 8101dc2:	b084      	sub	sp, #16
 8101dc4:	af00      	add	r7, sp, #0
 8101dc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8101dc8:	687b      	ldr	r3, [r7, #4]
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	4a7a      	ldr	r2, [pc, #488]	@ (8101fb8 <ADC_ConfigureBoostMode+0x1f8>)
 8101dce:	4293      	cmp	r3, r2
 8101dd0:	d004      	beq.n	8101ddc <ADC_ConfigureBoostMode+0x1c>
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	4a79      	ldr	r2, [pc, #484]	@ (8101fbc <ADC_ConfigureBoostMode+0x1fc>)
 8101dd8:	4293      	cmp	r3, r2
 8101dda:	d109      	bne.n	8101df0 <ADC_ConfigureBoostMode+0x30>
 8101ddc:	4b78      	ldr	r3, [pc, #480]	@ (8101fc0 <ADC_ConfigureBoostMode+0x200>)
 8101dde:	689b      	ldr	r3, [r3, #8]
 8101de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101de4:	2b00      	cmp	r3, #0
 8101de6:	bf14      	ite	ne
 8101de8:	2301      	movne	r3, #1
 8101dea:	2300      	moveq	r3, #0
 8101dec:	b2db      	uxtb	r3, r3
 8101dee:	e008      	b.n	8101e02 <ADC_ConfigureBoostMode+0x42>
 8101df0:	4b74      	ldr	r3, [pc, #464]	@ (8101fc4 <ADC_ConfigureBoostMode+0x204>)
 8101df2:	689b      	ldr	r3, [r3, #8]
 8101df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8101df8:	2b00      	cmp	r3, #0
 8101dfa:	bf14      	ite	ne
 8101dfc:	2301      	movne	r3, #1
 8101dfe:	2300      	moveq	r3, #0
 8101e00:	b2db      	uxtb	r3, r3
 8101e02:	2b00      	cmp	r3, #0
 8101e04:	d01c      	beq.n	8101e40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8101e06:	f001 ff45 	bl	8103c94 <HAL_RCC_GetHCLKFreq>
 8101e0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	685b      	ldr	r3, [r3, #4]
 8101e10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101e14:	d010      	beq.n	8101e38 <ADC_ConfigureBoostMode+0x78>
 8101e16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101e1a:	d873      	bhi.n	8101f04 <ADC_ConfigureBoostMode+0x144>
 8101e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101e20:	d002      	beq.n	8101e28 <ADC_ConfigureBoostMode+0x68>
 8101e22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101e26:	d16d      	bne.n	8101f04 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8101e28:	687b      	ldr	r3, [r7, #4]
 8101e2a:	685b      	ldr	r3, [r3, #4]
 8101e2c:	0c1b      	lsrs	r3, r3, #16
 8101e2e:	68fa      	ldr	r2, [r7, #12]
 8101e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8101e34:	60fb      	str	r3, [r7, #12]
        break;
 8101e36:	e068      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8101e38:	68fb      	ldr	r3, [r7, #12]
 8101e3a:	089b      	lsrs	r3, r3, #2
 8101e3c:	60fb      	str	r3, [r7, #12]
        break;
 8101e3e:	e064      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8101e40:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8101e44:	f04f 0100 	mov.w	r1, #0
 8101e48:	f003 f976 	bl	8105138 <HAL_RCCEx_GetPeriphCLKFreq>
 8101e4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	685b      	ldr	r3, [r3, #4]
 8101e52:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8101e56:	d051      	beq.n	8101efc <ADC_ConfigureBoostMode+0x13c>
 8101e58:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8101e5c:	d854      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101e5e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8101e62:	d047      	beq.n	8101ef4 <ADC_ConfigureBoostMode+0x134>
 8101e64:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8101e68:	d84e      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101e6a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8101e6e:	d03d      	beq.n	8101eec <ADC_ConfigureBoostMode+0x12c>
 8101e70:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8101e74:	d848      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101e76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101e7a:	d033      	beq.n	8101ee4 <ADC_ConfigureBoostMode+0x124>
 8101e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101e80:	d842      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101e82:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8101e86:	d029      	beq.n	8101edc <ADC_ConfigureBoostMode+0x11c>
 8101e88:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8101e8c:	d83c      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101e8e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8101e92:	d01a      	beq.n	8101eca <ADC_ConfigureBoostMode+0x10a>
 8101e94:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8101e98:	d836      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101e9a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8101e9e:	d014      	beq.n	8101eca <ADC_ConfigureBoostMode+0x10a>
 8101ea0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8101ea4:	d830      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101eaa:	d00e      	beq.n	8101eca <ADC_ConfigureBoostMode+0x10a>
 8101eac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101eb0:	d82a      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101eb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8101eb6:	d008      	beq.n	8101eca <ADC_ConfigureBoostMode+0x10a>
 8101eb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8101ebc:	d824      	bhi.n	8101f08 <ADC_ConfigureBoostMode+0x148>
 8101ebe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101ec2:	d002      	beq.n	8101eca <ADC_ConfigureBoostMode+0x10a>
 8101ec4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8101ec8:	d11e      	bne.n	8101f08 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	685b      	ldr	r3, [r3, #4]
 8101ece:	0c9b      	lsrs	r3, r3, #18
 8101ed0:	005b      	lsls	r3, r3, #1
 8101ed2:	68fa      	ldr	r2, [r7, #12]
 8101ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8101ed8:	60fb      	str	r3, [r7, #12]
        break;
 8101eda:	e016      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8101edc:	68fb      	ldr	r3, [r7, #12]
 8101ede:	091b      	lsrs	r3, r3, #4
 8101ee0:	60fb      	str	r3, [r7, #12]
        break;
 8101ee2:	e012      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8101ee4:	68fb      	ldr	r3, [r7, #12]
 8101ee6:	095b      	lsrs	r3, r3, #5
 8101ee8:	60fb      	str	r3, [r7, #12]
        break;
 8101eea:	e00e      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8101eec:	68fb      	ldr	r3, [r7, #12]
 8101eee:	099b      	lsrs	r3, r3, #6
 8101ef0:	60fb      	str	r3, [r7, #12]
        break;
 8101ef2:	e00a      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8101ef4:	68fb      	ldr	r3, [r7, #12]
 8101ef6:	09db      	lsrs	r3, r3, #7
 8101ef8:	60fb      	str	r3, [r7, #12]
        break;
 8101efa:	e006      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8101efc:	68fb      	ldr	r3, [r7, #12]
 8101efe:	0a1b      	lsrs	r3, r3, #8
 8101f00:	60fb      	str	r3, [r7, #12]
        break;
 8101f02:	e002      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
        break;
 8101f04:	bf00      	nop
 8101f06:	e000      	b.n	8101f0a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8101f08:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8101f0a:	f7ff f8c3 	bl	8101094 <HAL_GetREVID>
 8101f0e:	4603      	mov	r3, r0
 8101f10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8101f14:	4293      	cmp	r3, r2
 8101f16:	d815      	bhi.n	8101f44 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8101f18:	68fb      	ldr	r3, [r7, #12]
 8101f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8101fc8 <ADC_ConfigureBoostMode+0x208>)
 8101f1c:	4293      	cmp	r3, r2
 8101f1e:	d908      	bls.n	8101f32 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	681b      	ldr	r3, [r3, #0]
 8101f24:	689a      	ldr	r2, [r3, #8]
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	681b      	ldr	r3, [r3, #0]
 8101f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101f2e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8101f30:	e03e      	b.n	8101fb0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8101f32:	687b      	ldr	r3, [r7, #4]
 8101f34:	681b      	ldr	r3, [r3, #0]
 8101f36:	689a      	ldr	r2, [r3, #8]
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8101f40:	609a      	str	r2, [r3, #8]
}
 8101f42:	e035      	b.n	8101fb0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8101f44:	68fb      	ldr	r3, [r7, #12]
 8101f46:	085b      	lsrs	r3, r3, #1
 8101f48:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8101f4a:	68fb      	ldr	r3, [r7, #12]
 8101f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8101fcc <ADC_ConfigureBoostMode+0x20c>)
 8101f4e:	4293      	cmp	r3, r2
 8101f50:	d808      	bhi.n	8101f64 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	681b      	ldr	r3, [r3, #0]
 8101f56:	689a      	ldr	r2, [r3, #8]
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8101f60:	609a      	str	r2, [r3, #8]
}
 8101f62:	e025      	b.n	8101fb0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8101f64:	68fb      	ldr	r3, [r7, #12]
 8101f66:	4a1a      	ldr	r2, [pc, #104]	@ (8101fd0 <ADC_ConfigureBoostMode+0x210>)
 8101f68:	4293      	cmp	r3, r2
 8101f6a:	d80a      	bhi.n	8101f82 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	689b      	ldr	r3, [r3, #8]
 8101f72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	681b      	ldr	r3, [r3, #0]
 8101f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8101f7e:	609a      	str	r2, [r3, #8]
}
 8101f80:	e016      	b.n	8101fb0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8101f82:	68fb      	ldr	r3, [r7, #12]
 8101f84:	4a13      	ldr	r2, [pc, #76]	@ (8101fd4 <ADC_ConfigureBoostMode+0x214>)
 8101f86:	4293      	cmp	r3, r2
 8101f88:	d80a      	bhi.n	8101fa0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	689b      	ldr	r3, [r3, #8]
 8101f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	681b      	ldr	r3, [r3, #0]
 8101f98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8101f9c:	609a      	str	r2, [r3, #8]
}
 8101f9e:	e007      	b.n	8101fb0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	681b      	ldr	r3, [r3, #0]
 8101fa4:	689a      	ldr	r2, [r3, #8]
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	681b      	ldr	r3, [r3, #0]
 8101faa:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8101fae:	609a      	str	r2, [r3, #8]
}
 8101fb0:	bf00      	nop
 8101fb2:	3710      	adds	r7, #16
 8101fb4:	46bd      	mov	sp, r7
 8101fb6:	bd80      	pop	{r7, pc}
 8101fb8:	40022000 	.word	0x40022000
 8101fbc:	40022100 	.word	0x40022100
 8101fc0:	40022300 	.word	0x40022300
 8101fc4:	58026300 	.word	0x58026300
 8101fc8:	01312d00 	.word	0x01312d00
 8101fcc:	005f5e10 	.word	0x005f5e10
 8101fd0:	00bebc20 	.word	0x00bebc20
 8101fd4:	017d7840 	.word	0x017d7840

08101fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101fd8:	b480      	push	{r7}
 8101fda:	b085      	sub	sp, #20
 8101fdc:	af00      	add	r7, sp, #0
 8101fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	f003 0307 	and.w	r3, r3, #7
 8101fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101fe8:	4b0c      	ldr	r3, [pc, #48]	@ (810201c <__NVIC_SetPriorityGrouping+0x44>)
 8101fea:	68db      	ldr	r3, [r3, #12]
 8101fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101fee:	68ba      	ldr	r2, [r7, #8]
 8101ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101ff4:	4013      	ands	r3, r2
 8101ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101ff8:	68fb      	ldr	r3, [r7, #12]
 8101ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101ffc:	68bb      	ldr	r3, [r7, #8]
 8101ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810200a:	4a04      	ldr	r2, [pc, #16]	@ (810201c <__NVIC_SetPriorityGrouping+0x44>)
 810200c:	68bb      	ldr	r3, [r7, #8]
 810200e:	60d3      	str	r3, [r2, #12]
}
 8102010:	bf00      	nop
 8102012:	3714      	adds	r7, #20
 8102014:	46bd      	mov	sp, r7
 8102016:	f85d 7b04 	ldr.w	r7, [sp], #4
 810201a:	4770      	bx	lr
 810201c:	e000ed00 	.word	0xe000ed00

08102020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102020:	b480      	push	{r7}
 8102022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102024:	4b04      	ldr	r3, [pc, #16]	@ (8102038 <__NVIC_GetPriorityGrouping+0x18>)
 8102026:	68db      	ldr	r3, [r3, #12]
 8102028:	0a1b      	lsrs	r3, r3, #8
 810202a:	f003 0307 	and.w	r3, r3, #7
}
 810202e:	4618      	mov	r0, r3
 8102030:	46bd      	mov	sp, r7
 8102032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102036:	4770      	bx	lr
 8102038:	e000ed00 	.word	0xe000ed00

0810203c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810203c:	b480      	push	{r7}
 810203e:	b083      	sub	sp, #12
 8102040:	af00      	add	r7, sp, #0
 8102042:	4603      	mov	r3, r0
 8102044:	6039      	str	r1, [r7, #0]
 8102046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810204c:	2b00      	cmp	r3, #0
 810204e:	db0a      	blt.n	8102066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102050:	683b      	ldr	r3, [r7, #0]
 8102052:	b2da      	uxtb	r2, r3
 8102054:	490c      	ldr	r1, [pc, #48]	@ (8102088 <__NVIC_SetPriority+0x4c>)
 8102056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810205a:	0112      	lsls	r2, r2, #4
 810205c:	b2d2      	uxtb	r2, r2
 810205e:	440b      	add	r3, r1
 8102060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102064:	e00a      	b.n	810207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102066:	683b      	ldr	r3, [r7, #0]
 8102068:	b2da      	uxtb	r2, r3
 810206a:	4908      	ldr	r1, [pc, #32]	@ (810208c <__NVIC_SetPriority+0x50>)
 810206c:	88fb      	ldrh	r3, [r7, #6]
 810206e:	f003 030f 	and.w	r3, r3, #15
 8102072:	3b04      	subs	r3, #4
 8102074:	0112      	lsls	r2, r2, #4
 8102076:	b2d2      	uxtb	r2, r2
 8102078:	440b      	add	r3, r1
 810207a:	761a      	strb	r2, [r3, #24]
}
 810207c:	bf00      	nop
 810207e:	370c      	adds	r7, #12
 8102080:	46bd      	mov	sp, r7
 8102082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102086:	4770      	bx	lr
 8102088:	e000e100 	.word	0xe000e100
 810208c:	e000ed00 	.word	0xe000ed00

08102090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102090:	b480      	push	{r7}
 8102092:	b089      	sub	sp, #36	@ 0x24
 8102094:	af00      	add	r7, sp, #0
 8102096:	60f8      	str	r0, [r7, #12]
 8102098:	60b9      	str	r1, [r7, #8]
 810209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810209c:	68fb      	ldr	r3, [r7, #12]
 810209e:	f003 0307 	and.w	r3, r3, #7
 81020a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81020a4:	69fb      	ldr	r3, [r7, #28]
 81020a6:	f1c3 0307 	rsb	r3, r3, #7
 81020aa:	2b04      	cmp	r3, #4
 81020ac:	bf28      	it	cs
 81020ae:	2304      	movcs	r3, #4
 81020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81020b2:	69fb      	ldr	r3, [r7, #28]
 81020b4:	3304      	adds	r3, #4
 81020b6:	2b06      	cmp	r3, #6
 81020b8:	d902      	bls.n	81020c0 <NVIC_EncodePriority+0x30>
 81020ba:	69fb      	ldr	r3, [r7, #28]
 81020bc:	3b03      	subs	r3, #3
 81020be:	e000      	b.n	81020c2 <NVIC_EncodePriority+0x32>
 81020c0:	2300      	movs	r3, #0
 81020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81020c4:	f04f 32ff 	mov.w	r2, #4294967295
 81020c8:	69bb      	ldr	r3, [r7, #24]
 81020ca:	fa02 f303 	lsl.w	r3, r2, r3
 81020ce:	43da      	mvns	r2, r3
 81020d0:	68bb      	ldr	r3, [r7, #8]
 81020d2:	401a      	ands	r2, r3
 81020d4:	697b      	ldr	r3, [r7, #20]
 81020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81020d8:	f04f 31ff 	mov.w	r1, #4294967295
 81020dc:	697b      	ldr	r3, [r7, #20]
 81020de:	fa01 f303 	lsl.w	r3, r1, r3
 81020e2:	43d9      	mvns	r1, r3
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81020e8:	4313      	orrs	r3, r2
         );
}
 81020ea:	4618      	mov	r0, r3
 81020ec:	3724      	adds	r7, #36	@ 0x24
 81020ee:	46bd      	mov	sp, r7
 81020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020f4:	4770      	bx	lr
	...

081020f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81020f8:	b580      	push	{r7, lr}
 81020fa:	b082      	sub	sp, #8
 81020fc:	af00      	add	r7, sp, #0
 81020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	3b01      	subs	r3, #1
 8102104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102108:	d301      	bcc.n	810210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810210a:	2301      	movs	r3, #1
 810210c:	e00f      	b.n	810212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810210e:	4a0a      	ldr	r2, [pc, #40]	@ (8102138 <SysTick_Config+0x40>)
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	3b01      	subs	r3, #1
 8102114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102116:	210f      	movs	r1, #15
 8102118:	f04f 30ff 	mov.w	r0, #4294967295
 810211c:	f7ff ff8e 	bl	810203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102120:	4b05      	ldr	r3, [pc, #20]	@ (8102138 <SysTick_Config+0x40>)
 8102122:	2200      	movs	r2, #0
 8102124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102126:	4b04      	ldr	r3, [pc, #16]	@ (8102138 <SysTick_Config+0x40>)
 8102128:	2207      	movs	r2, #7
 810212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810212c:	2300      	movs	r3, #0
}
 810212e:	4618      	mov	r0, r3
 8102130:	3708      	adds	r7, #8
 8102132:	46bd      	mov	sp, r7
 8102134:	bd80      	pop	{r7, pc}
 8102136:	bf00      	nop
 8102138:	e000e010 	.word	0xe000e010

0810213c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	b082      	sub	sp, #8
 8102140:	af00      	add	r7, sp, #0
 8102142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102144:	6878      	ldr	r0, [r7, #4]
 8102146:	f7ff ff47 	bl	8101fd8 <__NVIC_SetPriorityGrouping>
}
 810214a:	bf00      	nop
 810214c:	3708      	adds	r7, #8
 810214e:	46bd      	mov	sp, r7
 8102150:	bd80      	pop	{r7, pc}

08102152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102152:	b580      	push	{r7, lr}
 8102154:	b086      	sub	sp, #24
 8102156:	af00      	add	r7, sp, #0
 8102158:	4603      	mov	r3, r0
 810215a:	60b9      	str	r1, [r7, #8]
 810215c:	607a      	str	r2, [r7, #4]
 810215e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102160:	f7ff ff5e 	bl	8102020 <__NVIC_GetPriorityGrouping>
 8102164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102166:	687a      	ldr	r2, [r7, #4]
 8102168:	68b9      	ldr	r1, [r7, #8]
 810216a:	6978      	ldr	r0, [r7, #20]
 810216c:	f7ff ff90 	bl	8102090 <NVIC_EncodePriority>
 8102170:	4602      	mov	r2, r0
 8102172:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102176:	4611      	mov	r1, r2
 8102178:	4618      	mov	r0, r3
 810217a:	f7ff ff5f 	bl	810203c <__NVIC_SetPriority>
}
 810217e:	bf00      	nop
 8102180:	3718      	adds	r7, #24
 8102182:	46bd      	mov	sp, r7
 8102184:	bd80      	pop	{r7, pc}

08102186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102186:	b580      	push	{r7, lr}
 8102188:	b082      	sub	sp, #8
 810218a:	af00      	add	r7, sp, #0
 810218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810218e:	6878      	ldr	r0, [r7, #4]
 8102190:	f7ff ffb2 	bl	81020f8 <SysTick_Config>
 8102194:	4603      	mov	r3, r0
}
 8102196:	4618      	mov	r0, r3
 8102198:	3708      	adds	r7, #8
 810219a:	46bd      	mov	sp, r7
 810219c:	bd80      	pop	{r7, pc}
	...

081021a0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81021a0:	b480      	push	{r7}
 81021a2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81021a4:	4b07      	ldr	r3, [pc, #28]	@ (81021c4 <HAL_GetCurrentCPUID+0x24>)
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	091b      	lsrs	r3, r3, #4
 81021aa:	f003 030f 	and.w	r3, r3, #15
 81021ae:	2b07      	cmp	r3, #7
 81021b0:	d101      	bne.n	81021b6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81021b2:	2303      	movs	r3, #3
 81021b4:	e000      	b.n	81021b8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81021b6:	2301      	movs	r3, #1
  }
}
 81021b8:	4618      	mov	r0, r3
 81021ba:	46bd      	mov	sp, r7
 81021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021c0:	4770      	bx	lr
 81021c2:	bf00      	nop
 81021c4:	e000ed00 	.word	0xe000ed00

081021c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 81021c8:	b580      	push	{r7, lr}
 81021ca:	b098      	sub	sp, #96	@ 0x60
 81021cc:	af00      	add	r7, sp, #0
 81021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 81021d0:	4a84      	ldr	r2, [pc, #528]	@ (81023e4 <HAL_FDCAN_Init+0x21c>)
 81021d2:	f107 030c 	add.w	r3, r7, #12
 81021d6:	4611      	mov	r1, r2
 81021d8:	224c      	movs	r2, #76	@ 0x4c
 81021da:	4618      	mov	r0, r3
 81021dc:	f00a f8f6 	bl	810c3cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	2b00      	cmp	r3, #0
 81021e4:	d101      	bne.n	81021ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 81021e6:	2301      	movs	r3, #1
 81021e8:	e1c6      	b.n	8102578 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	4a7e      	ldr	r2, [pc, #504]	@ (81023e8 <HAL_FDCAN_Init+0x220>)
 81021f0:	4293      	cmp	r3, r2
 81021f2:	d106      	bne.n	8102202 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81021fc:	461a      	mov	r2, r3
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8102208:	b2db      	uxtb	r3, r3
 810220a:	2b00      	cmp	r3, #0
 810220c:	d106      	bne.n	810221c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	2200      	movs	r2, #0
 8102212:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8102216:	6878      	ldr	r0, [r7, #4]
 8102218:	f7fe fc3c 	bl	8100a94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	699a      	ldr	r2, [r3, #24]
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	f022 0210 	bic.w	r2, r2, #16
 810222a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 810222c:	f7fe ff02 	bl	8101034 <HAL_GetTick>
 8102230:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8102232:	e014      	b.n	810225e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8102234:	f7fe fefe 	bl	8101034 <HAL_GetTick>
 8102238:	4602      	mov	r2, r0
 810223a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810223c:	1ad3      	subs	r3, r2, r3
 810223e:	2b0a      	cmp	r3, #10
 8102240:	d90d      	bls.n	810225e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102248:	f043 0201 	orr.w	r2, r3, #1
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	2203      	movs	r2, #3
 8102256:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 810225a:	2301      	movs	r3, #1
 810225c:	e18c      	b.n	8102578 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	681b      	ldr	r3, [r3, #0]
 8102262:	699b      	ldr	r3, [r3, #24]
 8102264:	f003 0308 	and.w	r3, r3, #8
 8102268:	2b08      	cmp	r3, #8
 810226a:	d0e3      	beq.n	8102234 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	699a      	ldr	r2, [r3, #24]
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	f042 0201 	orr.w	r2, r2, #1
 810227a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 810227c:	f7fe feda 	bl	8101034 <HAL_GetTick>
 8102280:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8102282:	e014      	b.n	81022ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8102284:	f7fe fed6 	bl	8101034 <HAL_GetTick>
 8102288:	4602      	mov	r2, r0
 810228a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810228c:	1ad3      	subs	r3, r2, r3
 810228e:	2b0a      	cmp	r3, #10
 8102290:	d90d      	bls.n	81022ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102298:	f043 0201 	orr.w	r2, r3, #1
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81022a2:	687b      	ldr	r3, [r7, #4]
 81022a4:	2203      	movs	r2, #3
 81022a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 81022aa:	2301      	movs	r3, #1
 81022ac:	e164      	b.n	8102578 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	699b      	ldr	r3, [r3, #24]
 81022b4:	f003 0301 	and.w	r3, r3, #1
 81022b8:	2b00      	cmp	r3, #0
 81022ba:	d0e3      	beq.n	8102284 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	681b      	ldr	r3, [r3, #0]
 81022c0:	699a      	ldr	r2, [r3, #24]
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	f042 0202 	orr.w	r2, r2, #2
 81022ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	7c1b      	ldrb	r3, [r3, #16]
 81022d0:	2b01      	cmp	r3, #1
 81022d2:	d108      	bne.n	81022e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	681b      	ldr	r3, [r3, #0]
 81022d8:	699a      	ldr	r2, [r3, #24]
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81022e2:	619a      	str	r2, [r3, #24]
 81022e4:	e007      	b.n	81022f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	699a      	ldr	r2, [r3, #24]
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 81022f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	7c5b      	ldrb	r3, [r3, #17]
 81022fa:	2b01      	cmp	r3, #1
 81022fc:	d108      	bne.n	8102310 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	681b      	ldr	r3, [r3, #0]
 8102302:	699a      	ldr	r2, [r3, #24]
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	681b      	ldr	r3, [r3, #0]
 8102308:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810230c:	619a      	str	r2, [r3, #24]
 810230e:	e007      	b.n	8102320 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	699a      	ldr	r2, [r3, #24]
 8102316:	687b      	ldr	r3, [r7, #4]
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 810231e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	7c9b      	ldrb	r3, [r3, #18]
 8102324:	2b01      	cmp	r3, #1
 8102326:	d108      	bne.n	810233a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	681b      	ldr	r3, [r3, #0]
 810232c:	699a      	ldr	r2, [r3, #24]
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8102336:	619a      	str	r2, [r3, #24]
 8102338:	e007      	b.n	810234a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 810233a:	687b      	ldr	r3, [r7, #4]
 810233c:	681b      	ldr	r3, [r3, #0]
 810233e:	699a      	ldr	r2, [r3, #24]
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8102348:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	699b      	ldr	r3, [r3, #24]
 8102350:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	689a      	ldr	r2, [r3, #8]
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	430a      	orrs	r2, r1
 810235e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	699a      	ldr	r2, [r3, #24]
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 810236e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8102370:	687b      	ldr	r3, [r7, #4]
 8102372:	681b      	ldr	r3, [r3, #0]
 8102374:	691a      	ldr	r2, [r3, #16]
 8102376:	687b      	ldr	r3, [r7, #4]
 8102378:	681b      	ldr	r3, [r3, #0]
 810237a:	f022 0210 	bic.w	r2, r2, #16
 810237e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	68db      	ldr	r3, [r3, #12]
 8102384:	2b01      	cmp	r3, #1
 8102386:	d108      	bne.n	810239a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	699a      	ldr	r2, [r3, #24]
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	f042 0204 	orr.w	r2, r2, #4
 8102396:	619a      	str	r2, [r3, #24]
 8102398:	e030      	b.n	81023fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	68db      	ldr	r3, [r3, #12]
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d02c      	beq.n	81023fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	68db      	ldr	r3, [r3, #12]
 81023a6:	2b02      	cmp	r3, #2
 81023a8:	d020      	beq.n	81023ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 81023aa:	687b      	ldr	r3, [r7, #4]
 81023ac:	681b      	ldr	r3, [r3, #0]
 81023ae:	699a      	ldr	r2, [r3, #24]
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 81023b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	691a      	ldr	r2, [r3, #16]
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	f042 0210 	orr.w	r2, r2, #16
 81023c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	68db      	ldr	r3, [r3, #12]
 81023ce:	2b03      	cmp	r3, #3
 81023d0:	d114      	bne.n	81023fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	681b      	ldr	r3, [r3, #0]
 81023d6:	699a      	ldr	r2, [r3, #24]
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	f042 0220 	orr.w	r2, r2, #32
 81023e0:	619a      	str	r2, [r3, #24]
 81023e2:	e00b      	b.n	81023fc <HAL_FDCAN_Init+0x234>
 81023e4:	0810c40c 	.word	0x0810c40c
 81023e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	699a      	ldr	r2, [r3, #24]
 81023f2:	687b      	ldr	r3, [r7, #4]
 81023f4:	681b      	ldr	r3, [r3, #0]
 81023f6:	f042 0220 	orr.w	r2, r2, #32
 81023fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	699b      	ldr	r3, [r3, #24]
 8102400:	3b01      	subs	r3, #1
 8102402:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8102404:	687b      	ldr	r3, [r7, #4]
 8102406:	69db      	ldr	r3, [r3, #28]
 8102408:	3b01      	subs	r3, #1
 810240a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810240c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	6a1b      	ldr	r3, [r3, #32]
 8102412:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8102414:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	695b      	ldr	r3, [r3, #20]
 810241c:	3b01      	subs	r3, #1
 810241e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8102424:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8102426:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	689b      	ldr	r3, [r3, #8]
 810242c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102430:	d115      	bne.n	810245e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102436:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810243c:	3b01      	subs	r3, #1
 810243e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8102440:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102446:	3b01      	subs	r3, #1
 8102448:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 810244a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102452:	3b01      	subs	r3, #1
 8102454:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 810245a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 810245c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102462:	2b00      	cmp	r3, #0
 8102464:	d00a      	beq.n	810247c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	681b      	ldr	r3, [r3, #0]
 8102476:	430a      	orrs	r2, r1
 8102478:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102484:	4413      	add	r3, r2
 8102486:	2b00      	cmp	r3, #0
 8102488:	d011      	beq.n	81024ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8102492:	f023 0107 	bic.w	r1, r3, #7
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810249a:	009b      	lsls	r3, r3, #2
 810249c:	3360      	adds	r3, #96	@ 0x60
 810249e:	443b      	add	r3, r7
 81024a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	681b      	ldr	r3, [r3, #0]
 81024a8:	430a      	orrs	r2, r1
 81024aa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81024b2:	2b00      	cmp	r3, #0
 81024b4:	d011      	beq.n	81024da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81024be:	f023 0107 	bic.w	r1, r3, #7
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81024c6:	009b      	lsls	r3, r3, #2
 81024c8:	3360      	adds	r3, #96	@ 0x60
 81024ca:	443b      	add	r3, r7
 81024cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	681b      	ldr	r3, [r3, #0]
 81024d4:	430a      	orrs	r2, r1
 81024d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81024de:	2b00      	cmp	r3, #0
 81024e0:	d012      	beq.n	8102508 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81024ea:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81024f2:	009b      	lsls	r3, r3, #2
 81024f4:	3360      	adds	r3, #96	@ 0x60
 81024f6:	443b      	add	r3, r7
 81024f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 81024fc:	011a      	lsls	r2, r3, #4
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	681b      	ldr	r3, [r3, #0]
 8102502:	430a      	orrs	r2, r1
 8102504:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810250c:	2b00      	cmp	r3, #0
 810250e:	d012      	beq.n	8102536 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102518:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102520:	009b      	lsls	r3, r3, #2
 8102522:	3360      	adds	r3, #96	@ 0x60
 8102524:	443b      	add	r3, r7
 8102526:	f853 3c54 	ldr.w	r3, [r3, #-84]
 810252a:	021a      	lsls	r2, r3, #8
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	430a      	orrs	r2, r1
 8102532:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4a11      	ldr	r2, [pc, #68]	@ (8102580 <HAL_FDCAN_Init+0x3b8>)
 810253c:	4293      	cmp	r3, r2
 810253e:	d107      	bne.n	8102550 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	685b      	ldr	r3, [r3, #4]
 8102544:	689a      	ldr	r2, [r3, #8]
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	685b      	ldr	r3, [r3, #4]
 810254a:	f022 0203 	bic.w	r2, r2, #3
 810254e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	2200      	movs	r2, #0
 8102554:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	2200      	movs	r2, #0
 810255c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	2201      	movs	r2, #1
 8102564:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8102568:	6878      	ldr	r0, [r7, #4]
 810256a:	f000 fd43 	bl	8102ff4 <FDCAN_CalcultateRamBlockAddresses>
 810256e:	4603      	mov	r3, r0
 8102570:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8102574:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8102578:	4618      	mov	r0, r3
 810257a:	3760      	adds	r7, #96	@ 0x60
 810257c:	46bd      	mov	sp, r7
 810257e:	bd80      	pop	{r7, pc}
 8102580:	4000a000 	.word	0x4000a000

08102584 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8102584:	b580      	push	{r7, lr}
 8102586:	b086      	sub	sp, #24
 8102588:	af00      	add	r7, sp, #0
 810258a:	60f8      	str	r0, [r7, #12]
 810258c:	60b9      	str	r1, [r7, #8]
 810258e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8102596:	b2db      	uxtb	r3, r3
 8102598:	2b02      	cmp	r3, #2
 810259a:	d141      	bne.n	8102620 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 810259c:	68fb      	ldr	r3, [r7, #12]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81025a4:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 81025a8:	2b00      	cmp	r3, #0
 81025aa:	d109      	bne.n	81025c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81025ac:	68fb      	ldr	r3, [r7, #12]
 81025ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81025b2:	f043 0220 	orr.w	r2, r3, #32
 81025b6:	68fb      	ldr	r3, [r7, #12]
 81025b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 81025bc:	2301      	movs	r3, #1
 81025be:	e038      	b.n	8102632 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 81025c0:	68fb      	ldr	r3, [r7, #12]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 81025c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81025cc:	2b00      	cmp	r3, #0
 81025ce:	d009      	beq.n	81025e4 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 81025d0:	68fb      	ldr	r3, [r7, #12]
 81025d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81025d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 81025da:	68fb      	ldr	r3, [r7, #12]
 81025dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 81025e0:	2301      	movs	r3, #1
 81025e2:	e026      	b.n	8102632 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 81025e4:	68fb      	ldr	r3, [r7, #12]
 81025e6:	681b      	ldr	r3, [r3, #0]
 81025e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 81025ec:	0c1b      	lsrs	r3, r3, #16
 81025ee:	f003 031f 	and.w	r3, r3, #31
 81025f2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 81025f4:	697b      	ldr	r3, [r7, #20]
 81025f6:	687a      	ldr	r2, [r7, #4]
 81025f8:	68b9      	ldr	r1, [r7, #8]
 81025fa:	68f8      	ldr	r0, [r7, #12]
 81025fc:	f000 fe8a 	bl	8103314 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8102600:	68fb      	ldr	r3, [r7, #12]
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	2101      	movs	r1, #1
 8102606:	697a      	ldr	r2, [r7, #20]
 8102608:	fa01 f202 	lsl.w	r2, r1, r2
 810260c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8102610:	2201      	movs	r2, #1
 8102612:	697b      	ldr	r3, [r7, #20]
 8102614:	409a      	lsls	r2, r3
 8102616:	68fb      	ldr	r3, [r7, #12]
 8102618:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 810261c:	2300      	movs	r3, #0
 810261e:	e008      	b.n	8102632 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8102620:	68fb      	ldr	r3, [r7, #12]
 8102622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102626:	f043 0208 	orr.w	r2, r3, #8
 810262a:	68fb      	ldr	r3, [r7, #12]
 810262c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8102630:	2301      	movs	r3, #1
  }
}
 8102632:	4618      	mov	r0, r3
 8102634:	3718      	adds	r7, #24
 8102636:	46bd      	mov	sp, r7
 8102638:	bd80      	pop	{r7, pc}
	...

0810263c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 810263c:	b480      	push	{r7}
 810263e:	b08b      	sub	sp, #44	@ 0x2c
 8102640:	af00      	add	r7, sp, #0
 8102642:	60f8      	str	r0, [r7, #12]
 8102644:	60b9      	str	r1, [r7, #8]
 8102646:	607a      	str	r2, [r7, #4]
 8102648:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 810264a:	2300      	movs	r3, #0
 810264c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8102654:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8102656:	7efb      	ldrb	r3, [r7, #27]
 8102658:	2b02      	cmp	r3, #2
 810265a:	f040 8149 	bne.w	81028f0 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 810265e:	68bb      	ldr	r3, [r7, #8]
 8102660:	2b40      	cmp	r3, #64	@ 0x40
 8102662:	d14c      	bne.n	81026fe <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8102664:	68fb      	ldr	r3, [r7, #12]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810266c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8102670:	2b00      	cmp	r3, #0
 8102672:	d109      	bne.n	8102688 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102674:	68fb      	ldr	r3, [r7, #12]
 8102676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810267a:	f043 0220 	orr.w	r2, r3, #32
 810267e:	68fb      	ldr	r3, [r7, #12]
 8102680:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8102684:	2301      	movs	r3, #1
 8102686:	e13c      	b.n	8102902 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102694:	2b00      	cmp	r3, #0
 8102696:	d109      	bne.n	81026ac <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8102698:	68fb      	ldr	r3, [r7, #12]
 810269a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810269e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81026a2:	68fb      	ldr	r3, [r7, #12]
 81026a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 81026a8:	2301      	movs	r3, #1
 81026aa:	e12a      	b.n	8102902 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 81026ac:	68fb      	ldr	r3, [r7, #12]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81026b4:	0e1b      	lsrs	r3, r3, #24
 81026b6:	f003 0301 	and.w	r3, r3, #1
 81026ba:	2b01      	cmp	r3, #1
 81026bc:	d10a      	bne.n	81026d4 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 81026be:	68fb      	ldr	r3, [r7, #12]
 81026c0:	681b      	ldr	r3, [r3, #0]
 81026c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81026c6:	0fdb      	lsrs	r3, r3, #31
 81026c8:	f003 0301 	and.w	r3, r3, #1
 81026cc:	2b01      	cmp	r3, #1
 81026ce:	d101      	bne.n	81026d4 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 81026d0:	2301      	movs	r3, #1
 81026d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81026dc:	0a1b      	lsrs	r3, r3, #8
 81026de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81026e2:	69fa      	ldr	r2, [r7, #28]
 81026e4:	4413      	add	r3, r2
 81026e6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 81026e8:	68fb      	ldr	r3, [r7, #12]
 81026ea:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81026f0:	69f9      	ldr	r1, [r7, #28]
 81026f2:	fb01 f303 	mul.w	r3, r1, r3
 81026f6:	009b      	lsls	r3, r3, #2
 81026f8:	4413      	add	r3, r2
 81026fa:	627b      	str	r3, [r7, #36]	@ 0x24
 81026fc:	e068      	b.n	81027d0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 81026fe:	68bb      	ldr	r3, [r7, #8]
 8102700:	2b41      	cmp	r3, #65	@ 0x41
 8102702:	d14c      	bne.n	810279e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8102704:	68fb      	ldr	r3, [r7, #12]
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810270c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8102710:	2b00      	cmp	r3, #0
 8102712:	d109      	bne.n	8102728 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8102714:	68fb      	ldr	r3, [r7, #12]
 8102716:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810271a:	f043 0220 	orr.w	r2, r3, #32
 810271e:	68fb      	ldr	r3, [r7, #12]
 8102720:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8102724:	2301      	movs	r3, #1
 8102726:	e0ec      	b.n	8102902 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8102728:	68fb      	ldr	r3, [r7, #12]
 810272a:	681b      	ldr	r3, [r3, #0]
 810272c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102734:	2b00      	cmp	r3, #0
 8102736:	d109      	bne.n	810274c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8102738:	68fb      	ldr	r3, [r7, #12]
 810273a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810273e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102742:	68fb      	ldr	r3, [r7, #12]
 8102744:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8102748:	2301      	movs	r3, #1
 810274a:	e0da      	b.n	8102902 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 810274c:	68fb      	ldr	r3, [r7, #12]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102754:	0e1b      	lsrs	r3, r3, #24
 8102756:	f003 0301 	and.w	r3, r3, #1
 810275a:	2b01      	cmp	r3, #1
 810275c:	d10a      	bne.n	8102774 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 810275e:	68fb      	ldr	r3, [r7, #12]
 8102760:	681b      	ldr	r3, [r3, #0]
 8102762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102766:	0fdb      	lsrs	r3, r3, #31
 8102768:	f003 0301 	and.w	r3, r3, #1
 810276c:	2b01      	cmp	r3, #1
 810276e:	d101      	bne.n	8102774 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8102770:	2301      	movs	r3, #1
 8102772:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8102774:	68fb      	ldr	r3, [r7, #12]
 8102776:	681b      	ldr	r3, [r3, #0]
 8102778:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810277c:	0a1b      	lsrs	r3, r3, #8
 810277e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102782:	69fa      	ldr	r2, [r7, #28]
 8102784:	4413      	add	r3, r2
 8102786:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8102788:	68fb      	ldr	r3, [r7, #12]
 810278a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 810278c:	68fb      	ldr	r3, [r7, #12]
 810278e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102790:	69f9      	ldr	r1, [r7, #28]
 8102792:	fb01 f303 	mul.w	r3, r1, r3
 8102796:	009b      	lsls	r3, r3, #2
 8102798:	4413      	add	r3, r2
 810279a:	627b      	str	r3, [r7, #36]	@ 0x24
 810279c:	e018      	b.n	81027d0 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 810279e:	68fb      	ldr	r3, [r7, #12]
 81027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81027a2:	68ba      	ldr	r2, [r7, #8]
 81027a4:	429a      	cmp	r2, r3
 81027a6:	d309      	bcc.n	81027bc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81027a8:	68fb      	ldr	r3, [r7, #12]
 81027aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81027ae:	f043 0220 	orr.w	r2, r3, #32
 81027b2:	68fb      	ldr	r3, [r7, #12]
 81027b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 81027b8:	2301      	movs	r3, #1
 81027ba:	e0a2      	b.n	8102902 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 81027bc:	68fb      	ldr	r3, [r7, #12]
 81027be:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 81027c0:	68fb      	ldr	r3, [r7, #12]
 81027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027c4:	68b9      	ldr	r1, [r7, #8]
 81027c6:	fb01 f303 	mul.w	r3, r1, r3
 81027ca:	009b      	lsls	r3, r3, #2
 81027cc:	4413      	add	r3, r2
 81027ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 81027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	685b      	ldr	r3, [r3, #4]
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d107      	bne.n	81027f4 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 81027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	0c9b      	lsrs	r3, r3, #18
 81027ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	601a      	str	r2, [r3, #0]
 81027f2:	e005      	b.n	8102800 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 81027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8102800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 810280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8102818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810281a:	3304      	adds	r3, #4
 810281c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 810281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	b29a      	uxth	r2, r3
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8102828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	0c1b      	lsrs	r3, r3, #16
 810282e:	f003 020f 	and.w	r2, r3, #15
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8102836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102838:	681b      	ldr	r3, [r3, #0]
 810283a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8102842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 810284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	0e1b      	lsrs	r3, r3, #24
 8102854:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 810285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810285e:	681b      	ldr	r3, [r3, #0]
 8102860:	0fda      	lsrs	r2, r3, #31
 8102862:	687b      	ldr	r3, [r7, #4]
 8102864:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8102866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102868:	3304      	adds	r3, #4
 810286a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 810286c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810286e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8102870:	2300      	movs	r3, #0
 8102872:	623b      	str	r3, [r7, #32]
 8102874:	e00a      	b.n	810288c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8102876:	697a      	ldr	r2, [r7, #20]
 8102878:	6a3b      	ldr	r3, [r7, #32]
 810287a:	441a      	add	r2, r3
 810287c:	6839      	ldr	r1, [r7, #0]
 810287e:	6a3b      	ldr	r3, [r7, #32]
 8102880:	440b      	add	r3, r1
 8102882:	7812      	ldrb	r2, [r2, #0]
 8102884:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8102886:	6a3b      	ldr	r3, [r7, #32]
 8102888:	3301      	adds	r3, #1
 810288a:	623b      	str	r3, [r7, #32]
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	68db      	ldr	r3, [r3, #12]
 8102890:	4a1f      	ldr	r2, [pc, #124]	@ (8102910 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8102892:	5cd3      	ldrb	r3, [r2, r3]
 8102894:	461a      	mov	r2, r3
 8102896:	6a3b      	ldr	r3, [r7, #32]
 8102898:	4293      	cmp	r3, r2
 810289a:	d3ec      	bcc.n	8102876 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 810289c:	68bb      	ldr	r3, [r7, #8]
 810289e:	2b40      	cmp	r3, #64	@ 0x40
 81028a0:	d105      	bne.n	81028ae <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	681b      	ldr	r3, [r3, #0]
 81028a6:	69fa      	ldr	r2, [r7, #28]
 81028a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 81028ac:	e01e      	b.n	81028ec <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 81028ae:	68bb      	ldr	r3, [r7, #8]
 81028b0:	2b41      	cmp	r3, #65	@ 0x41
 81028b2:	d105      	bne.n	81028c0 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	69fa      	ldr	r2, [r7, #28]
 81028ba:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 81028be:	e015      	b.n	81028ec <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 81028c0:	68bb      	ldr	r3, [r7, #8]
 81028c2:	2b1f      	cmp	r3, #31
 81028c4:	d808      	bhi.n	81028d8 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 81028c6:	68fb      	ldr	r3, [r7, #12]
 81028c8:	681b      	ldr	r3, [r3, #0]
 81028ca:	2101      	movs	r1, #1
 81028cc:	68ba      	ldr	r2, [r7, #8]
 81028ce:	fa01 f202 	lsl.w	r2, r1, r2
 81028d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 81028d6:	e009      	b.n	81028ec <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 81028d8:	68bb      	ldr	r3, [r7, #8]
 81028da:	f003 021f 	and.w	r2, r3, #31
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	2101      	movs	r1, #1
 81028e4:	fa01 f202 	lsl.w	r2, r1, r2
 81028e8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 81028ec:	2300      	movs	r3, #0
 81028ee:	e008      	b.n	8102902 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 81028f0:	68fb      	ldr	r3, [r7, #12]
 81028f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81028f6:	f043 0208 	orr.w	r2, r3, #8
 81028fa:	68fb      	ldr	r3, [r7, #12]
 81028fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8102900:	2301      	movs	r3, #1
  }
}
 8102902:	4618      	mov	r0, r3
 8102904:	372c      	adds	r7, #44	@ 0x2c
 8102906:	46bd      	mov	sp, r7
 8102908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810290c:	4770      	bx	lr
 810290e:	bf00      	nop
 8102910:	0810c4ac 	.word	0x0810c4ac

08102914 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8102914:	b480      	push	{r7}
 8102916:	b085      	sub	sp, #20
 8102918:	af00      	add	r7, sp, #0
 810291a:	6078      	str	r0, [r7, #4]
 810291c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	681b      	ldr	r3, [r3, #0]
 8102922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102924:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8102926:	68fb      	ldr	r3, [r7, #12]
 8102928:	f003 0207 	and.w	r2, r3, #7
 810292c:	683b      	ldr	r3, [r7, #0]
 810292e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8102930:	68fb      	ldr	r3, [r7, #12]
 8102932:	0a1b      	lsrs	r3, r3, #8
 8102934:	f003 0207 	and.w	r2, r3, #7
 8102938:	683b      	ldr	r3, [r7, #0]
 810293a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 810293c:	68fb      	ldr	r3, [r7, #12]
 810293e:	f003 0218 	and.w	r2, r3, #24
 8102942:	683b      	ldr	r3, [r7, #0]
 8102944:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8102946:	68fb      	ldr	r3, [r7, #12]
 8102948:	095b      	lsrs	r3, r3, #5
 810294a:	f003 0201 	and.w	r2, r3, #1
 810294e:	683b      	ldr	r3, [r7, #0]
 8102950:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8102952:	68fb      	ldr	r3, [r7, #12]
 8102954:	099b      	lsrs	r3, r3, #6
 8102956:	f003 0201 	and.w	r2, r3, #1
 810295a:	683b      	ldr	r3, [r7, #0]
 810295c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 810295e:	68fb      	ldr	r3, [r7, #12]
 8102960:	09db      	lsrs	r3, r3, #7
 8102962:	f003 0201 	and.w	r2, r3, #1
 8102966:	683b      	ldr	r3, [r7, #0]
 8102968:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 810296a:	68fb      	ldr	r3, [r7, #12]
 810296c:	0adb      	lsrs	r3, r3, #11
 810296e:	f003 0201 	and.w	r2, r3, #1
 8102972:	683b      	ldr	r3, [r7, #0]
 8102974:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	0b1b      	lsrs	r3, r3, #12
 810297a:	f003 0201 	and.w	r2, r3, #1
 810297e:	683b      	ldr	r3, [r7, #0]
 8102980:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8102982:	68fb      	ldr	r3, [r7, #12]
 8102984:	0b5b      	lsrs	r3, r3, #13
 8102986:	f003 0201 	and.w	r2, r3, #1
 810298a:	683b      	ldr	r3, [r7, #0]
 810298c:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 810298e:	68fb      	ldr	r3, [r7, #12]
 8102990:	0b9b      	lsrs	r3, r3, #14
 8102992:	f003 0201 	and.w	r2, r3, #1
 8102996:	683b      	ldr	r3, [r7, #0]
 8102998:	625a      	str	r2, [r3, #36]	@ 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 810299a:	68fb      	ldr	r3, [r7, #12]
 810299c:	0c1b      	lsrs	r3, r3, #16
 810299e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 81029a2:	683b      	ldr	r3, [r7, #0]
 81029a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Return function status */
  return HAL_OK;
 81029a6:	2300      	movs	r3, #0
}
 81029a8:	4618      	mov	r0, r3
 81029aa:	3714      	adds	r7, #20
 81029ac:	46bd      	mov	sp, r7
 81029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b2:	4770      	bx	lr

081029b4 <HAL_FDCAN_IsTxBufferMessagePending>:
  * @retval Status
  *          - 0 : No pending transmission request on TxBufferIndex.
  *          - 1 : Pending transmission request on TxBufferIndex.
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(const FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
 81029b4:	b480      	push	{r7}
 81029b6:	b083      	sub	sp, #12
 81029b8:	af00      	add	r7, sp, #0
 81029ba:	6078      	str	r0, [r7, #4]
 81029bc:	6039      	str	r1, [r7, #0]
  /* Check pending transmission request on the selected buffer */
  if ((hfdcan->Instance->TXBRP & TxBufferIndex) == 0U)
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 81029c6:	683b      	ldr	r3, [r7, #0]
 81029c8:	4013      	ands	r3, r2
 81029ca:	2b00      	cmp	r3, #0
 81029cc:	d101      	bne.n	81029d2 <HAL_FDCAN_IsTxBufferMessagePending+0x1e>
  {
    return 0;
 81029ce:	2300      	movs	r3, #0
 81029d0:	e000      	b.n	81029d4 <HAL_FDCAN_IsTxBufferMessagePending+0x20>
  }
  return 1;
 81029d2:	2301      	movs	r3, #1
}
 81029d4:	4618      	mov	r0, r3
 81029d6:	370c      	adds	r7, #12
 81029d8:	46bd      	mov	sp, r7
 81029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029de:	4770      	bx	lr

081029e0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 81029e0:	b580      	push	{r7, lr}
 81029e2:	b096      	sub	sp, #88	@ 0x58
 81029e4:	af00      	add	r7, sp, #0
 81029e6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 81029e8:	4b99      	ldr	r3, [pc, #612]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 81029ea:	691b      	ldr	r3, [r3, #16]
 81029ec:	079b      	lsls	r3, r3, #30
 81029ee:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 81029f0:	4b97      	ldr	r3, [pc, #604]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 81029f2:	695b      	ldr	r3, [r3, #20]
 81029f4:	079b      	lsls	r3, r3, #30
 81029f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 81029f8:	4013      	ands	r3, r2
 81029fa:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a02:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8102a06:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8102a10:	4013      	ands	r3, r2
 8102a12:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a1a:	f003 030f 	and.w	r3, r3, #15
 8102a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8102a28:	4013      	ands	r3, r2
 8102a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8102a40:	4013      	ands	r3, r2
 8102a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a4a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8102a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8102a58:	4013      	ands	r3, r2
 8102a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a62:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8102a66:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8102a70:	4013      	ands	r3, r2
 8102a72:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8102a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102a8a:	2b00      	cmp	r3, #0
 8102a8c:	d00f      	beq.n	8102aae <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8102a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d00a      	beq.n	8102aae <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8102aa0:	651a      	str	r2, [r3, #80]	@ 0x50
 8102aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102aa4:	2200      	movs	r2, #0
 8102aa6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8102aa8:	6878      	ldr	r0, [r7, #4]
 8102aaa:	f000 fa57 	bl	8102f5c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8102aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8102ab4:	2b00      	cmp	r3, #0
 8102ab6:	d01c      	beq.n	8102af2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8102ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8102abe:	2b00      	cmp	r3, #0
 8102ac0:	d017      	beq.n	8102af2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8102aca:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8102ad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8102ad6:	4013      	ands	r3, r2
 8102ad8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8102ae2:	651a      	str	r2, [r3, #80]	@ 0x50
 8102ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102ae6:	2200      	movs	r2, #0
 8102ae8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8102aea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8102aec:	6878      	ldr	r0, [r7, #4]
 8102aee:	f000 fa0c 	bl	8102f0a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8102af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8102af4:	2b00      	cmp	r3, #0
 8102af6:	d00f      	beq.n	8102b18 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	681a      	ldr	r2, [r3, #0]
 8102afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8102afe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102b02:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102b06:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b08:	4a51      	ldr	r2, [pc, #324]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8102b0c:	0f9b      	lsrs	r3, r3, #30
 8102b0e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8102b10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8102b12:	6878      	ldr	r0, [r7, #4]
 8102b14:	f000 f9b8 	bl	8102e88 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8102b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102b1a:	2b00      	cmp	r3, #0
 8102b1c:	d00f      	beq.n	8102b3e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8102b1e:	687b      	ldr	r3, [r7, #4]
 8102b20:	681a      	ldr	r2, [r3, #0]
 8102b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102b24:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102b28:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102b2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b2e:	4a48      	ldr	r2, [pc, #288]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8102b32:	0f9b      	lsrs	r3, r3, #30
 8102b34:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8102b36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8102b38:	6878      	ldr	r0, [r7, #4]
 8102b3a:	f000 f9b0 	bl	8102e9e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8102b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102b40:	2b00      	cmp	r3, #0
 8102b42:	d00f      	beq.n	8102b64 <HAL_FDCAN_IRQHandler+0x184>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681a      	ldr	r2, [r3, #0]
 8102b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102b4a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102b4e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102b52:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b54:	4a3e      	ldr	r2, [pc, #248]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102b58:	0f9b      	lsrs	r3, r3, #30
 8102b5a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8102b5c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8102b5e:	6878      	ldr	r0, [r7, #4]
 8102b60:	f000 f9a8 	bl	8102eb4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8102b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8102b66:	2b00      	cmp	r3, #0
 8102b68:	d00f      	beq.n	8102b8a <HAL_FDCAN_IRQHandler+0x1aa>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	681a      	ldr	r2, [r3, #0]
 8102b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8102b70:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102b74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102b78:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b7a:	4a35      	ldr	r2, [pc, #212]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102b7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8102b7e:	0f9b      	lsrs	r3, r3, #30
 8102b80:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8102b82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8102b84:	6878      	ldr	r0, [r7, #4]
 8102b86:	f000 f9a0 	bl	8102eca <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8102b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8102b90:	2b00      	cmp	r3, #0
 8102b92:	d00f      	beq.n	8102bb4 <HAL_FDCAN_IRQHandler+0x1d4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8102b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8102b9a:	2b00      	cmp	r3, #0
 8102b9c:	d00a      	beq.n	8102bb4 <HAL_FDCAN_IRQHandler+0x1d4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8102ba6:	651a      	str	r2, [r3, #80]	@ 0x50
 8102ba8:	4b29      	ldr	r3, [pc, #164]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102baa:	2200      	movs	r2, #0
 8102bac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8102bae:	6878      	ldr	r0, [r7, #4]
 8102bb0:	f000 f996 	bl	8102ee0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8102bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102bba:	2b00      	cmp	r3, #0
 8102bbc:	d01c      	beq.n	8102bf8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8102bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102bc4:	2b00      	cmp	r3, #0
 8102bc6:	d017      	beq.n	8102bf8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102bd0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8102bdc:	4013      	ands	r3, r2
 8102bde:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8102be8:	651a      	str	r2, [r3, #80]	@ 0x50
 8102bea:	4b19      	ldr	r3, [pc, #100]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102bec:	2200      	movs	r2, #0
 8102bee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8102bf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8102bf2:	6878      	ldr	r0, [r7, #4]
 8102bf4:	f000 f97e 	bl	8102ef4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8102bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102bfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8102bfe:	2b00      	cmp	r3, #0
 8102c00:	d00f      	beq.n	8102c22 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8102c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102c04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8102c08:	2b00      	cmp	r3, #0
 8102c0a:	d00a      	beq.n	8102c22 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8102c14:	651a      	str	r2, [r3, #80]	@ 0x50
 8102c16:	4b0e      	ldr	r3, [pc, #56]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102c18:	2200      	movs	r2, #0
 8102c1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8102c1c:	6878      	ldr	r0, [r7, #4]
 8102c1e:	f000 f97f 	bl	8102f20 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8102c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102c28:	2b00      	cmp	r3, #0
 8102c2a:	d013      	beq.n	8102c54 <HAL_FDCAN_IRQHandler+0x274>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8102c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102c32:	2b00      	cmp	r3, #0
 8102c34:	d00e      	beq.n	8102c54 <HAL_FDCAN_IRQHandler+0x274>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8102c3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8102c40:	4b03      	ldr	r3, [pc, #12]	@ (8102c50 <HAL_FDCAN_IRQHandler+0x270>)
 8102c42:	2200      	movs	r2, #0
 8102c44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8102c46:	6878      	ldr	r0, [r7, #4]
 8102c48:	f000 f974 	bl	8102f34 <HAL_FDCAN_TimestampWraparoundCallback>
 8102c4c:	e002      	b.n	8102c54 <HAL_FDCAN_IRQHandler+0x274>
 8102c4e:	bf00      	nop
 8102c50:	4000a800 	.word	0x4000a800
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8102c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102c5a:	2b00      	cmp	r3, #0
 8102c5c:	d00f      	beq.n	8102c7e <HAL_FDCAN_IRQHandler+0x29e>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8102c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102c64:	2b00      	cmp	r3, #0
 8102c66:	d00a      	beq.n	8102c7e <HAL_FDCAN_IRQHandler+0x29e>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	681b      	ldr	r3, [r3, #0]
 8102c6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8102c70:	651a      	str	r2, [r3, #80]	@ 0x50
 8102c72:	4b83      	ldr	r3, [pc, #524]	@ (8102e80 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102c74:	2200      	movs	r2, #0
 8102c76:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8102c78:	6878      	ldr	r0, [r7, #4]
 8102c7a:	f000 f965 	bl	8102f48 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8102c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102c84:	2b00      	cmp	r3, #0
 8102c86:	d014      	beq.n	8102cb2 <HAL_FDCAN_IRQHandler+0x2d2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8102c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	d00f      	beq.n	8102cb2 <HAL_FDCAN_IRQHandler+0x2d2>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8102c9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8102c9c:	4b78      	ldr	r3, [pc, #480]	@ (8102e80 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102c9e:	2200      	movs	r2, #0
 8102ca0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8102ca2:	687b      	ldr	r3, [r7, #4]
 8102ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102ca8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8102cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102cb4:	2b00      	cmp	r3, #0
 8102cb6:	d00f      	beq.n	8102cd8 <HAL_FDCAN_IRQHandler+0x2f8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	681a      	ldr	r2, [r3, #0]
 8102cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102cbe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102cc2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102cc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8102cc8:	4a6d      	ldr	r2, [pc, #436]	@ (8102e80 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8102ccc:	0f9b      	lsrs	r3, r3, #30
 8102cce:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8102cd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8102cd2:	6878      	ldr	r0, [r7, #4]
 8102cd4:	f000 f956 	bl	8102f84 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8102cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	d013      	beq.n	8102d06 <HAL_FDCAN_IRQHandler+0x326>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	681a      	ldr	r2, [r3, #0]
 8102ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102ce4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8102ce8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8102cec:	6513      	str	r3, [r2, #80]	@ 0x50
 8102cee:	4a64      	ldr	r2, [pc, #400]	@ (8102e80 <HAL_FDCAN_IRQHandler+0x4a0>)
 8102cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102cf2:	0f9b      	lsrs	r3, r3, #30
 8102cf4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8102cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8102cfe:	431a      	orrs	r2, r3
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8102d06:	687b      	ldr	r3, [r7, #4]
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8102e84 <HAL_FDCAN_IRQHandler+0x4a4>)
 8102d0c:	4293      	cmp	r3, r2
 8102d0e:	f040 80aa 	bne.w	8102e66 <HAL_FDCAN_IRQHandler+0x486>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	685b      	ldr	r3, [r3, #4]
 8102d16:	689b      	ldr	r3, [r3, #8]
 8102d18:	f003 0303 	and.w	r3, r3, #3
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	f000 80a2 	beq.w	8102e66 <HAL_FDCAN_IRQHandler+0x486>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	685b      	ldr	r3, [r3, #4]
 8102d26:	6a1b      	ldr	r3, [r3, #32]
 8102d28:	f003 030f 	and.w	r3, r3, #15
 8102d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	685b      	ldr	r3, [r3, #4]
 8102d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102d36:	4013      	ands	r3, r2
 8102d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	685b      	ldr	r3, [r3, #4]
 8102d3e:	6a1b      	ldr	r3, [r3, #32]
 8102d40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8102d44:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	685b      	ldr	r3, [r3, #4]
 8102d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102d4e:	4013      	ands	r3, r2
 8102d50:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	685b      	ldr	r3, [r3, #4]
 8102d56:	6a1b      	ldr	r3, [r3, #32]
 8102d58:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8102d5c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	685b      	ldr	r3, [r3, #4]
 8102d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102d66:	4013      	ands	r3, r2
 8102d68:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	685b      	ldr	r3, [r3, #4]
 8102d6e:	6a1b      	ldr	r3, [r3, #32]
 8102d70:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8102d74:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	685b      	ldr	r3, [r3, #4]
 8102d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102d7c:	6a3a      	ldr	r2, [r7, #32]
 8102d7e:	4013      	ands	r3, r2
 8102d80:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	685b      	ldr	r3, [r3, #4]
 8102d86:	6a1b      	ldr	r3, [r3, #32]
 8102d88:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8102d8c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	685b      	ldr	r3, [r3, #4]
 8102d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102d94:	69fa      	ldr	r2, [r7, #28]
 8102d96:	4013      	ands	r3, r2
 8102d98:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	685b      	ldr	r3, [r3, #4]
 8102d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102da0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	685b      	ldr	r3, [r3, #4]
 8102da6:	6a1b      	ldr	r3, [r3, #32]
 8102da8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8102daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102dac:	2b00      	cmp	r3, #0
 8102dae:	d007      	beq.n	8102dc0 <HAL_FDCAN_IRQHandler+0x3e0>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	685b      	ldr	r3, [r3, #4]
 8102db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8102db6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8102db8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8102dba:	6878      	ldr	r0, [r7, #4]
 8102dbc:	f000 f8ed 	bl	8102f9a <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8102dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102dc2:	2b00      	cmp	r3, #0
 8102dc4:	d007      	beq.n	8102dd6 <HAL_FDCAN_IRQHandler+0x3f6>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	685b      	ldr	r3, [r3, #4]
 8102dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102dcc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8102dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8102dd0:	6878      	ldr	r0, [r7, #4]
 8102dd2:	f000 f8ed 	bl	8102fb0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8102dd6:	69bb      	ldr	r3, [r7, #24]
 8102dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102ddc:	2b00      	cmp	r3, #0
 8102dde:	d019      	beq.n	8102e14 <HAL_FDCAN_IRQHandler+0x434>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8102de0:	697b      	ldr	r3, [r7, #20]
 8102de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102de6:	2b00      	cmp	r3, #0
 8102de8:	d014      	beq.n	8102e14 <HAL_FDCAN_IRQHandler+0x434>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	685b      	ldr	r3, [r3, #4]
 8102dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102df0:	0c1b      	lsrs	r3, r3, #16
 8102df2:	b29b      	uxth	r3, r3
 8102df4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	685b      	ldr	r3, [r3, #4]
 8102dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102e00:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	685b      	ldr	r3, [r3, #4]
 8102e06:	2240      	movs	r2, #64	@ 0x40
 8102e08:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8102e0a:	68fa      	ldr	r2, [r7, #12]
 8102e0c:	6939      	ldr	r1, [r7, #16]
 8102e0e:	6878      	ldr	r0, [r7, #4]
 8102e10:	f000 f8d9 	bl	8102fc6 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8102e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102e16:	2b00      	cmp	r3, #0
 8102e18:	d007      	beq.n	8102e2a <HAL_FDCAN_IRQHandler+0x44a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	685b      	ldr	r3, [r3, #4]
 8102e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102e20:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8102e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8102e24:	6878      	ldr	r0, [r7, #4]
 8102e26:	f000 f8da 	bl	8102fde <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8102e2a:	6a3b      	ldr	r3, [r7, #32]
 8102e2c:	2b00      	cmp	r3, #0
 8102e2e:	d00b      	beq.n	8102e48 <HAL_FDCAN_IRQHandler+0x468>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	685b      	ldr	r3, [r3, #4]
 8102e34:	6a3a      	ldr	r2, [r7, #32]
 8102e36:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8102e3e:	6a3b      	ldr	r3, [r7, #32]
 8102e40:	431a      	orrs	r2, r3
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8102e48:	69fb      	ldr	r3, [r7, #28]
 8102e4a:	2b00      	cmp	r3, #0
 8102e4c:	d00b      	beq.n	8102e66 <HAL_FDCAN_IRQHandler+0x486>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	685b      	ldr	r3, [r3, #4]
 8102e52:	69fa      	ldr	r2, [r7, #28]
 8102e54:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8102e5c:	69fb      	ldr	r3, [r7, #28]
 8102e5e:	431a      	orrs	r2, r3
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102e6c:	2b00      	cmp	r3, #0
 8102e6e:	d002      	beq.n	8102e76 <HAL_FDCAN_IRQHandler+0x496>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8102e70:	6878      	ldr	r0, [r7, #4]
 8102e72:	f000 f87d 	bl	8102f70 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8102e76:	bf00      	nop
 8102e78:	3758      	adds	r7, #88	@ 0x58
 8102e7a:	46bd      	mov	sp, r7
 8102e7c:	bd80      	pop	{r7, pc}
 8102e7e:	bf00      	nop
 8102e80:	4000a800 	.word	0x4000a800
 8102e84:	4000a000 	.word	0x4000a000

08102e88 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8102e88:	b480      	push	{r7}
 8102e8a:	b083      	sub	sp, #12
 8102e8c:	af00      	add	r7, sp, #0
 8102e8e:	6078      	str	r0, [r7, #4]
 8102e90:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8102e92:	bf00      	nop
 8102e94:	370c      	adds	r7, #12
 8102e96:	46bd      	mov	sp, r7
 8102e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e9c:	4770      	bx	lr

08102e9e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8102e9e:	b480      	push	{r7}
 8102ea0:	b083      	sub	sp, #12
 8102ea2:	af00      	add	r7, sp, #0
 8102ea4:	6078      	str	r0, [r7, #4]
 8102ea6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8102ea8:	bf00      	nop
 8102eaa:	370c      	adds	r7, #12
 8102eac:	46bd      	mov	sp, r7
 8102eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb2:	4770      	bx	lr

08102eb4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8102eb4:	b480      	push	{r7}
 8102eb6:	b083      	sub	sp, #12
 8102eb8:	af00      	add	r7, sp, #0
 8102eba:	6078      	str	r0, [r7, #4]
 8102ebc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8102ebe:	bf00      	nop
 8102ec0:	370c      	adds	r7, #12
 8102ec2:	46bd      	mov	sp, r7
 8102ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec8:	4770      	bx	lr

08102eca <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8102eca:	b480      	push	{r7}
 8102ecc:	b083      	sub	sp, #12
 8102ece:	af00      	add	r7, sp, #0
 8102ed0:	6078      	str	r0, [r7, #4]
 8102ed2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8102ed4:	bf00      	nop
 8102ed6:	370c      	adds	r7, #12
 8102ed8:	46bd      	mov	sp, r7
 8102eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ede:	4770      	bx	lr

08102ee0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102ee0:	b480      	push	{r7}
 8102ee2:	b083      	sub	sp, #12
 8102ee4:	af00      	add	r7, sp, #0
 8102ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8102ee8:	bf00      	nop
 8102eea:	370c      	adds	r7, #12
 8102eec:	46bd      	mov	sp, r7
 8102eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ef2:	4770      	bx	lr

08102ef4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8102ef4:	b480      	push	{r7}
 8102ef6:	b083      	sub	sp, #12
 8102ef8:	af00      	add	r7, sp, #0
 8102efa:	6078      	str	r0, [r7, #4]
 8102efc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8102efe:	bf00      	nop
 8102f00:	370c      	adds	r7, #12
 8102f02:	46bd      	mov	sp, r7
 8102f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f08:	4770      	bx	lr

08102f0a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8102f0a:	b480      	push	{r7}
 8102f0c:	b083      	sub	sp, #12
 8102f0e:	af00      	add	r7, sp, #0
 8102f10:	6078      	str	r0, [r7, #4]
 8102f12:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8102f14:	bf00      	nop
 8102f16:	370c      	adds	r7, #12
 8102f18:	46bd      	mov	sp, r7
 8102f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f1e:	4770      	bx	lr

08102f20 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102f20:	b480      	push	{r7}
 8102f22:	b083      	sub	sp, #12
 8102f24:	af00      	add	r7, sp, #0
 8102f26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8102f28:	bf00      	nop
 8102f2a:	370c      	adds	r7, #12
 8102f2c:	46bd      	mov	sp, r7
 8102f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f32:	4770      	bx	lr

08102f34 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102f34:	b480      	push	{r7}
 8102f36:	b083      	sub	sp, #12
 8102f38:	af00      	add	r7, sp, #0
 8102f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8102f3c:	bf00      	nop
 8102f3e:	370c      	adds	r7, #12
 8102f40:	46bd      	mov	sp, r7
 8102f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f46:	4770      	bx	lr

08102f48 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102f48:	b480      	push	{r7}
 8102f4a:	b083      	sub	sp, #12
 8102f4c:	af00      	add	r7, sp, #0
 8102f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8102f50:	bf00      	nop
 8102f52:	370c      	adds	r7, #12
 8102f54:	46bd      	mov	sp, r7
 8102f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f5a:	4770      	bx	lr

08102f5c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102f5c:	b480      	push	{r7}
 8102f5e:	b083      	sub	sp, #12
 8102f60:	af00      	add	r7, sp, #0
 8102f62:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8102f64:	bf00      	nop
 8102f66:	370c      	adds	r7, #12
 8102f68:	46bd      	mov	sp, r7
 8102f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f6e:	4770      	bx	lr

08102f70 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102f70:	b480      	push	{r7}
 8102f72:	b083      	sub	sp, #12
 8102f74:	af00      	add	r7, sp, #0
 8102f76:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8102f78:	bf00      	nop
 8102f7a:	370c      	adds	r7, #12
 8102f7c:	46bd      	mov	sp, r7
 8102f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f82:	4770      	bx	lr

08102f84 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8102f84:	b480      	push	{r7}
 8102f86:	b083      	sub	sp, #12
 8102f88:	af00      	add	r7, sp, #0
 8102f8a:	6078      	str	r0, [r7, #4]
 8102f8c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8102f8e:	bf00      	nop
 8102f90:	370c      	adds	r7, #12
 8102f92:	46bd      	mov	sp, r7
 8102f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f98:	4770      	bx	lr

08102f9a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8102f9a:	b480      	push	{r7}
 8102f9c:	b083      	sub	sp, #12
 8102f9e:	af00      	add	r7, sp, #0
 8102fa0:	6078      	str	r0, [r7, #4]
 8102fa2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8102fa4:	bf00      	nop
 8102fa6:	370c      	adds	r7, #12
 8102fa8:	46bd      	mov	sp, r7
 8102faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fae:	4770      	bx	lr

08102fb0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8102fb0:	b480      	push	{r7}
 8102fb2:	b083      	sub	sp, #12
 8102fb4:	af00      	add	r7, sp, #0
 8102fb6:	6078      	str	r0, [r7, #4]
 8102fb8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8102fba:	bf00      	nop
 8102fbc:	370c      	adds	r7, #12
 8102fbe:	46bd      	mov	sp, r7
 8102fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc4:	4770      	bx	lr

08102fc6 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8102fc6:	b480      	push	{r7}
 8102fc8:	b085      	sub	sp, #20
 8102fca:	af00      	add	r7, sp, #0
 8102fcc:	60f8      	str	r0, [r7, #12]
 8102fce:	60b9      	str	r1, [r7, #8]
 8102fd0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8102fd2:	bf00      	nop
 8102fd4:	3714      	adds	r7, #20
 8102fd6:	46bd      	mov	sp, r7
 8102fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fdc:	4770      	bx	lr

08102fde <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8102fde:	b480      	push	{r7}
 8102fe0:	b083      	sub	sp, #12
 8102fe2:	af00      	add	r7, sp, #0
 8102fe4:	6078      	str	r0, [r7, #4]
 8102fe6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8102fe8:	bf00      	nop
 8102fea:	370c      	adds	r7, #12
 8102fec:	46bd      	mov	sp, r7
 8102fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ff2:	4770      	bx	lr

08102ff4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8102ff4:	b480      	push	{r7}
 8102ff6:	b085      	sub	sp, #20
 8102ff8:	af00      	add	r7, sp, #0
 8102ffa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103000:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810300a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810300e:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8103012:	68ba      	ldr	r2, [r7, #8]
 8103014:	0091      	lsls	r1, r2, #2
 8103016:	687a      	ldr	r2, [r7, #4]
 8103018:	6812      	ldr	r2, [r2, #0]
 810301a:	430b      	orrs	r3, r1
 810301c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103028:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103030:	041a      	lsls	r2, r3, #16
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	430a      	orrs	r2, r1
 8103038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103040:	68ba      	ldr	r2, [r7, #8]
 8103042:	4413      	add	r3, r2
 8103044:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810304e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103052:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8103056:	68ba      	ldr	r2, [r7, #8]
 8103058:	0091      	lsls	r1, r2, #2
 810305a:	687a      	ldr	r2, [r7, #4]
 810305c:	6812      	ldr	r2, [r2, #0]
 810305e:	430b      	orrs	r3, r1
 8103060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810306c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103074:	041a      	lsls	r2, r3, #16
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	681b      	ldr	r3, [r3, #0]
 810307a:	430a      	orrs	r2, r1
 810307c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8103080:	687b      	ldr	r3, [r7, #4]
 8103082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103084:	005b      	lsls	r3, r3, #1
 8103086:	68ba      	ldr	r2, [r7, #8]
 8103088:	4413      	add	r3, r2
 810308a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103094:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103098:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 810309c:	68ba      	ldr	r2, [r7, #8]
 810309e:	0091      	lsls	r1, r2, #2
 81030a0:	687a      	ldr	r2, [r7, #4]
 81030a2:	6812      	ldr	r2, [r2, #0]
 81030a4:	430b      	orrs	r3, r1
 81030a6:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	681b      	ldr	r3, [r3, #0]
 81030ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81030b2:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81030ba:	041a      	lsls	r2, r3, #16
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	430a      	orrs	r2, r1
 81030c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81030ca:	687a      	ldr	r2, [r7, #4]
 81030cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 81030ce:	fb02 f303 	mul.w	r3, r2, r3
 81030d2:	68ba      	ldr	r2, [r7, #8]
 81030d4:	4413      	add	r3, r2
 81030d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81030e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81030e4:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81030e8:	68ba      	ldr	r2, [r7, #8]
 81030ea:	0091      	lsls	r1, r2, #2
 81030ec:	687a      	ldr	r2, [r7, #4]
 81030ee:	6812      	ldr	r2, [r2, #0]
 81030f0:	430b      	orrs	r3, r1
 81030f2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81030fe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103106:	041a      	lsls	r2, r3, #16
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	681b      	ldr	r3, [r3, #0]
 810310c:	430a      	orrs	r2, r1
 810310e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103116:	687a      	ldr	r2, [r7, #4]
 8103118:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 810311a:	fb02 f303 	mul.w	r3, r2, r3
 810311e:	68ba      	ldr	r2, [r7, #8]
 8103120:	4413      	add	r3, r2
 8103122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810312c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103130:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8103134:	68ba      	ldr	r2, [r7, #8]
 8103136:	0091      	lsls	r1, r2, #2
 8103138:	687a      	ldr	r2, [r7, #4]
 810313a:	6812      	ldr	r2, [r2, #0]
 810313c:	430b      	orrs	r3, r1
 810313e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103146:	687a      	ldr	r2, [r7, #4]
 8103148:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 810314a:	fb02 f303 	mul.w	r3, r2, r3
 810314e:	68ba      	ldr	r2, [r7, #8]
 8103150:	4413      	add	r3, r2
 8103152:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810315c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103160:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 8103164:	68ba      	ldr	r2, [r7, #8]
 8103166:	0091      	lsls	r1, r2, #2
 8103168:	687a      	ldr	r2, [r7, #4]
 810316a:	6812      	ldr	r2, [r2, #0]
 810316c:	430b      	orrs	r3, r1
 810316e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810317a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103182:	041a      	lsls	r2, r3, #16
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	430a      	orrs	r2, r1
 810318a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103192:	005b      	lsls	r3, r3, #1
 8103194:	68ba      	ldr	r2, [r7, #8]
 8103196:	4413      	add	r3, r2
 8103198:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81031a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81031a6:	f023 03fc 	bic.w	r3, r3, #252	@ 0xfc
 81031aa:	68ba      	ldr	r2, [r7, #8]
 81031ac:	0091      	lsls	r1, r2, #2
 81031ae:	687a      	ldr	r2, [r7, #4]
 81031b0:	6812      	ldr	r2, [r2, #0]
 81031b2:	430b      	orrs	r3, r1
 81031b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	681b      	ldr	r3, [r3, #0]
 81031bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81031c0:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81031c8:	041a      	lsls	r2, r3, #16
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	430a      	orrs	r2, r1
 81031d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681b      	ldr	r3, [r3, #0]
 81031d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 81031dc:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81031e4:	061a      	lsls	r2, r3, #24
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	430a      	orrs	r2, r1
 81031ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81031f4:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 81031f8:	f503 532c 	add.w	r3, r3, #11008	@ 0x2b00
 81031fc:	009a      	lsls	r2, r3, #2
 81031fe:	687b      	ldr	r3, [r7, #4]
 8103200:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810320a:	009b      	lsls	r3, r3, #2
 810320c:	441a      	add	r2, r3
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810321a:	00db      	lsls	r3, r3, #3
 810321c:	441a      	add	r2, r3
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810322a:	6879      	ldr	r1, [r7, #4]
 810322c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 810322e:	fb01 f303 	mul.w	r3, r1, r3
 8103232:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8103234:	441a      	add	r2, r3
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103242:	6879      	ldr	r1, [r7, #4]
 8103244:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8103246:	fb01 f303 	mul.w	r3, r1, r3
 810324a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 810324c:	441a      	add	r2, r3
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810325a:	6879      	ldr	r1, [r7, #4]
 810325c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 810325e:	fb01 f303 	mul.w	r3, r1, r3
 8103262:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8103264:	441a      	add	r2, r3
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103276:	00db      	lsls	r3, r3, #3
 8103278:	441a      	add	r2, r3
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810328a:	6879      	ldr	r1, [r7, #4]
 810328c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 810328e:	fb01 f303 	mul.w	r3, r1, r3
 8103292:	009b      	lsls	r3, r3, #2
 8103294:	441a      	add	r2, r3
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 810329c:	687b      	ldr	r3, [r7, #4]
 810329e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81032a6:	6879      	ldr	r1, [r7, #4]
 81032a8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 81032aa:	fb01 f303 	mul.w	r3, r1, r3
 81032ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 81032b0:	441a      	add	r2, r3
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81032be:	4a14      	ldr	r2, [pc, #80]	@ (8103310 <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 81032c0:	4293      	cmp	r3, r2
 81032c2:	d90d      	bls.n	81032e0 <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81032c4:	687b      	ldr	r3, [r7, #4]
 81032c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81032ca:	f043 0220 	orr.w	r2, r3, #32
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81032d4:	687b      	ldr	r3, [r7, #4]
 81032d6:	2203      	movs	r2, #3
 81032d8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 81032dc:	2301      	movs	r3, #1
 81032de:	e010      	b.n	8103302 <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81032e4:	60fb      	str	r3, [r7, #12]
 81032e6:	e005      	b.n	81032f4 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	2200      	movs	r2, #0
 81032ec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81032ee:	68fb      	ldr	r3, [r7, #12]
 81032f0:	3304      	adds	r3, #4
 81032f2:	60fb      	str	r3, [r7, #12]
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81032fa:	68fa      	ldr	r2, [r7, #12]
 81032fc:	429a      	cmp	r2, r3
 81032fe:	d3f3      	bcc.n	81032e8 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8103300:	2300      	movs	r3, #0
}
 8103302:	4618      	mov	r0, r3
 8103304:	3714      	adds	r7, #20
 8103306:	46bd      	mov	sp, r7
 8103308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810330c:	4770      	bx	lr
 810330e:	bf00      	nop
 8103310:	4000d3fc 	.word	0x4000d3fc

08103314 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8103314:	b480      	push	{r7}
 8103316:	b089      	sub	sp, #36	@ 0x24
 8103318:	af00      	add	r7, sp, #0
 810331a:	60f8      	str	r0, [r7, #12]
 810331c:	60b9      	str	r1, [r7, #8]
 810331e:	607a      	str	r2, [r7, #4]
 8103320:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8103322:	68bb      	ldr	r3, [r7, #8]
 8103324:	685b      	ldr	r3, [r3, #4]
 8103326:	2b00      	cmp	r3, #0
 8103328:	d10a      	bne.n	8103340 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 810332a:	68bb      	ldr	r3, [r7, #8]
 810332c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 810332e:	68bb      	ldr	r3, [r7, #8]
 8103330:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8103332:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8103334:	68bb      	ldr	r3, [r7, #8]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 810333a:	4313      	orrs	r3, r2
 810333c:	61fb      	str	r3, [r7, #28]
 810333e:	e00a      	b.n	8103356 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8103340:	68bb      	ldr	r3, [r7, #8]
 8103342:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8103344:	68bb      	ldr	r3, [r7, #8]
 8103346:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8103348:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 810334a:	68bb      	ldr	r3, [r7, #8]
 810334c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 810334e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8103350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8103354:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8103356:	68bb      	ldr	r3, [r7, #8]
 8103358:	6a1b      	ldr	r3, [r3, #32]
 810335a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 810335c:	68bb      	ldr	r3, [r7, #8]
 810335e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8103360:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8103362:	68bb      	ldr	r3, [r7, #8]
 8103364:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8103366:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8103368:	68bb      	ldr	r3, [r7, #8]
 810336a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 810336c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 810336e:	68bb      	ldr	r3, [r7, #8]
 8103370:	68db      	ldr	r3, [r3, #12]
 8103372:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8103374:	4313      	orrs	r3, r2
 8103376:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8103378:	68fb      	ldr	r3, [r7, #12]
 810337a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 810337e:	68fb      	ldr	r3, [r7, #12]
 8103380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103382:	6839      	ldr	r1, [r7, #0]
 8103384:	fb01 f303 	mul.w	r3, r1, r3
 8103388:	009b      	lsls	r3, r3, #2
 810338a:	4413      	add	r3, r2
 810338c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 810338e:	69bb      	ldr	r3, [r7, #24]
 8103390:	69fa      	ldr	r2, [r7, #28]
 8103392:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8103394:	69bb      	ldr	r3, [r7, #24]
 8103396:	3304      	adds	r3, #4
 8103398:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 810339a:	69bb      	ldr	r3, [r7, #24]
 810339c:	693a      	ldr	r2, [r7, #16]
 810339e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 81033a0:	69bb      	ldr	r3, [r7, #24]
 81033a2:	3304      	adds	r3, #4
 81033a4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 81033a6:	2300      	movs	r3, #0
 81033a8:	617b      	str	r3, [r7, #20]
 81033aa:	e020      	b.n	81033ee <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 81033ac:	697b      	ldr	r3, [r7, #20]
 81033ae:	3303      	adds	r3, #3
 81033b0:	687a      	ldr	r2, [r7, #4]
 81033b2:	4413      	add	r3, r2
 81033b4:	781b      	ldrb	r3, [r3, #0]
 81033b6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 81033b8:	697b      	ldr	r3, [r7, #20]
 81033ba:	3302      	adds	r3, #2
 81033bc:	6879      	ldr	r1, [r7, #4]
 81033be:	440b      	add	r3, r1
 81033c0:	781b      	ldrb	r3, [r3, #0]
 81033c2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 81033c4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 81033c6:	697b      	ldr	r3, [r7, #20]
 81033c8:	3301      	adds	r3, #1
 81033ca:	6879      	ldr	r1, [r7, #4]
 81033cc:	440b      	add	r3, r1
 81033ce:	781b      	ldrb	r3, [r3, #0]
 81033d0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 81033d2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 81033d4:	6879      	ldr	r1, [r7, #4]
 81033d6:	697a      	ldr	r2, [r7, #20]
 81033d8:	440a      	add	r2, r1
 81033da:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 81033dc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 81033de:	69bb      	ldr	r3, [r7, #24]
 81033e0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 81033e2:	69bb      	ldr	r3, [r7, #24]
 81033e4:	3304      	adds	r3, #4
 81033e6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 81033e8:	697b      	ldr	r3, [r7, #20]
 81033ea:	3304      	adds	r3, #4
 81033ec:	617b      	str	r3, [r7, #20]
 81033ee:	68bb      	ldr	r3, [r7, #8]
 81033f0:	68db      	ldr	r3, [r3, #12]
 81033f2:	4a06      	ldr	r2, [pc, #24]	@ (810340c <FDCAN_CopyMessageToRAM+0xf8>)
 81033f4:	5cd3      	ldrb	r3, [r2, r3]
 81033f6:	461a      	mov	r2, r3
 81033f8:	697b      	ldr	r3, [r7, #20]
 81033fa:	4293      	cmp	r3, r2
 81033fc:	d3d6      	bcc.n	81033ac <FDCAN_CopyMessageToRAM+0x98>
  }
}
 81033fe:	bf00      	nop
 8103400:	bf00      	nop
 8103402:	3724      	adds	r7, #36	@ 0x24
 8103404:	46bd      	mov	sp, r7
 8103406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340a:	4770      	bx	lr
 810340c:	0810c4ac 	.word	0x0810c4ac

08103410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103410:	b480      	push	{r7}
 8103412:	b089      	sub	sp, #36	@ 0x24
 8103414:	af00      	add	r7, sp, #0
 8103416:	6078      	str	r0, [r7, #4]
 8103418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810341a:	2300      	movs	r3, #0
 810341c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810341e:	4b89      	ldr	r3, [pc, #548]	@ (8103644 <HAL_GPIO_Init+0x234>)
 8103420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103422:	e194      	b.n	810374e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103424:	683b      	ldr	r3, [r7, #0]
 8103426:	681a      	ldr	r2, [r3, #0]
 8103428:	2101      	movs	r1, #1
 810342a:	69fb      	ldr	r3, [r7, #28]
 810342c:	fa01 f303 	lsl.w	r3, r1, r3
 8103430:	4013      	ands	r3, r2
 8103432:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103434:	693b      	ldr	r3, [r7, #16]
 8103436:	2b00      	cmp	r3, #0
 8103438:	f000 8186 	beq.w	8103748 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810343c:	683b      	ldr	r3, [r7, #0]
 810343e:	685b      	ldr	r3, [r3, #4]
 8103440:	f003 0303 	and.w	r3, r3, #3
 8103444:	2b01      	cmp	r3, #1
 8103446:	d005      	beq.n	8103454 <HAL_GPIO_Init+0x44>
 8103448:	683b      	ldr	r3, [r7, #0]
 810344a:	685b      	ldr	r3, [r3, #4]
 810344c:	f003 0303 	and.w	r3, r3, #3
 8103450:	2b02      	cmp	r3, #2
 8103452:	d130      	bne.n	81034b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	689b      	ldr	r3, [r3, #8]
 8103458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810345a:	69fb      	ldr	r3, [r7, #28]
 810345c:	005b      	lsls	r3, r3, #1
 810345e:	2203      	movs	r2, #3
 8103460:	fa02 f303 	lsl.w	r3, r2, r3
 8103464:	43db      	mvns	r3, r3
 8103466:	69ba      	ldr	r2, [r7, #24]
 8103468:	4013      	ands	r3, r2
 810346a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810346c:	683b      	ldr	r3, [r7, #0]
 810346e:	68da      	ldr	r2, [r3, #12]
 8103470:	69fb      	ldr	r3, [r7, #28]
 8103472:	005b      	lsls	r3, r3, #1
 8103474:	fa02 f303 	lsl.w	r3, r2, r3
 8103478:	69ba      	ldr	r2, [r7, #24]
 810347a:	4313      	orrs	r3, r2
 810347c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	69ba      	ldr	r2, [r7, #24]
 8103482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	685b      	ldr	r3, [r3, #4]
 8103488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810348a:	2201      	movs	r2, #1
 810348c:	69fb      	ldr	r3, [r7, #28]
 810348e:	fa02 f303 	lsl.w	r3, r2, r3
 8103492:	43db      	mvns	r3, r3
 8103494:	69ba      	ldr	r2, [r7, #24]
 8103496:	4013      	ands	r3, r2
 8103498:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810349a:	683b      	ldr	r3, [r7, #0]
 810349c:	685b      	ldr	r3, [r3, #4]
 810349e:	091b      	lsrs	r3, r3, #4
 81034a0:	f003 0201 	and.w	r2, r3, #1
 81034a4:	69fb      	ldr	r3, [r7, #28]
 81034a6:	fa02 f303 	lsl.w	r3, r2, r3
 81034aa:	69ba      	ldr	r2, [r7, #24]
 81034ac:	4313      	orrs	r3, r2
 81034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	69ba      	ldr	r2, [r7, #24]
 81034b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81034b6:	683b      	ldr	r3, [r7, #0]
 81034b8:	685b      	ldr	r3, [r3, #4]
 81034ba:	f003 0303 	and.w	r3, r3, #3
 81034be:	2b03      	cmp	r3, #3
 81034c0:	d017      	beq.n	81034f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	68db      	ldr	r3, [r3, #12]
 81034c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81034c8:	69fb      	ldr	r3, [r7, #28]
 81034ca:	005b      	lsls	r3, r3, #1
 81034cc:	2203      	movs	r2, #3
 81034ce:	fa02 f303 	lsl.w	r3, r2, r3
 81034d2:	43db      	mvns	r3, r3
 81034d4:	69ba      	ldr	r2, [r7, #24]
 81034d6:	4013      	ands	r3, r2
 81034d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81034da:	683b      	ldr	r3, [r7, #0]
 81034dc:	689a      	ldr	r2, [r3, #8]
 81034de:	69fb      	ldr	r3, [r7, #28]
 81034e0:	005b      	lsls	r3, r3, #1
 81034e2:	fa02 f303 	lsl.w	r3, r2, r3
 81034e6:	69ba      	ldr	r2, [r7, #24]
 81034e8:	4313      	orrs	r3, r2
 81034ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	69ba      	ldr	r2, [r7, #24]
 81034f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81034f2:	683b      	ldr	r3, [r7, #0]
 81034f4:	685b      	ldr	r3, [r3, #4]
 81034f6:	f003 0303 	and.w	r3, r3, #3
 81034fa:	2b02      	cmp	r3, #2
 81034fc:	d123      	bne.n	8103546 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81034fe:	69fb      	ldr	r3, [r7, #28]
 8103500:	08da      	lsrs	r2, r3, #3
 8103502:	687b      	ldr	r3, [r7, #4]
 8103504:	3208      	adds	r2, #8
 8103506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810350c:	69fb      	ldr	r3, [r7, #28]
 810350e:	f003 0307 	and.w	r3, r3, #7
 8103512:	009b      	lsls	r3, r3, #2
 8103514:	220f      	movs	r2, #15
 8103516:	fa02 f303 	lsl.w	r3, r2, r3
 810351a:	43db      	mvns	r3, r3
 810351c:	69ba      	ldr	r2, [r7, #24]
 810351e:	4013      	ands	r3, r2
 8103520:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103522:	683b      	ldr	r3, [r7, #0]
 8103524:	691a      	ldr	r2, [r3, #16]
 8103526:	69fb      	ldr	r3, [r7, #28]
 8103528:	f003 0307 	and.w	r3, r3, #7
 810352c:	009b      	lsls	r3, r3, #2
 810352e:	fa02 f303 	lsl.w	r3, r2, r3
 8103532:	69ba      	ldr	r2, [r7, #24]
 8103534:	4313      	orrs	r3, r2
 8103536:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103538:	69fb      	ldr	r3, [r7, #28]
 810353a:	08da      	lsrs	r2, r3, #3
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	3208      	adds	r2, #8
 8103540:	69b9      	ldr	r1, [r7, #24]
 8103542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	681b      	ldr	r3, [r3, #0]
 810354a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810354c:	69fb      	ldr	r3, [r7, #28]
 810354e:	005b      	lsls	r3, r3, #1
 8103550:	2203      	movs	r2, #3
 8103552:	fa02 f303 	lsl.w	r3, r2, r3
 8103556:	43db      	mvns	r3, r3
 8103558:	69ba      	ldr	r2, [r7, #24]
 810355a:	4013      	ands	r3, r2
 810355c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810355e:	683b      	ldr	r3, [r7, #0]
 8103560:	685b      	ldr	r3, [r3, #4]
 8103562:	f003 0203 	and.w	r2, r3, #3
 8103566:	69fb      	ldr	r3, [r7, #28]
 8103568:	005b      	lsls	r3, r3, #1
 810356a:	fa02 f303 	lsl.w	r3, r2, r3
 810356e:	69ba      	ldr	r2, [r7, #24]
 8103570:	4313      	orrs	r3, r2
 8103572:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	69ba      	ldr	r2, [r7, #24]
 8103578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810357a:	683b      	ldr	r3, [r7, #0]
 810357c:	685b      	ldr	r3, [r3, #4]
 810357e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103582:	2b00      	cmp	r3, #0
 8103584:	f000 80e0 	beq.w	8103748 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103588:	4b2f      	ldr	r3, [pc, #188]	@ (8103648 <HAL_GPIO_Init+0x238>)
 810358a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810358e:	4a2e      	ldr	r2, [pc, #184]	@ (8103648 <HAL_GPIO_Init+0x238>)
 8103590:	f043 0302 	orr.w	r3, r3, #2
 8103594:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103598:	4b2b      	ldr	r3, [pc, #172]	@ (8103648 <HAL_GPIO_Init+0x238>)
 810359a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810359e:	f003 0302 	and.w	r3, r3, #2
 81035a2:	60fb      	str	r3, [r7, #12]
 81035a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81035a6:	4a29      	ldr	r2, [pc, #164]	@ (810364c <HAL_GPIO_Init+0x23c>)
 81035a8:	69fb      	ldr	r3, [r7, #28]
 81035aa:	089b      	lsrs	r3, r3, #2
 81035ac:	3302      	adds	r3, #2
 81035ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81035b4:	69fb      	ldr	r3, [r7, #28]
 81035b6:	f003 0303 	and.w	r3, r3, #3
 81035ba:	009b      	lsls	r3, r3, #2
 81035bc:	220f      	movs	r2, #15
 81035be:	fa02 f303 	lsl.w	r3, r2, r3
 81035c2:	43db      	mvns	r3, r3
 81035c4:	69ba      	ldr	r2, [r7, #24]
 81035c6:	4013      	ands	r3, r2
 81035c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	4a20      	ldr	r2, [pc, #128]	@ (8103650 <HAL_GPIO_Init+0x240>)
 81035ce:	4293      	cmp	r3, r2
 81035d0:	d052      	beq.n	8103678 <HAL_GPIO_Init+0x268>
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	4a1f      	ldr	r2, [pc, #124]	@ (8103654 <HAL_GPIO_Init+0x244>)
 81035d6:	4293      	cmp	r3, r2
 81035d8:	d031      	beq.n	810363e <HAL_GPIO_Init+0x22e>
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	4a1e      	ldr	r2, [pc, #120]	@ (8103658 <HAL_GPIO_Init+0x248>)
 81035de:	4293      	cmp	r3, r2
 81035e0:	d02b      	beq.n	810363a <HAL_GPIO_Init+0x22a>
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	4a1d      	ldr	r2, [pc, #116]	@ (810365c <HAL_GPIO_Init+0x24c>)
 81035e6:	4293      	cmp	r3, r2
 81035e8:	d025      	beq.n	8103636 <HAL_GPIO_Init+0x226>
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	4a1c      	ldr	r2, [pc, #112]	@ (8103660 <HAL_GPIO_Init+0x250>)
 81035ee:	4293      	cmp	r3, r2
 81035f0:	d01f      	beq.n	8103632 <HAL_GPIO_Init+0x222>
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	4a1b      	ldr	r2, [pc, #108]	@ (8103664 <HAL_GPIO_Init+0x254>)
 81035f6:	4293      	cmp	r3, r2
 81035f8:	d019      	beq.n	810362e <HAL_GPIO_Init+0x21e>
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	4a1a      	ldr	r2, [pc, #104]	@ (8103668 <HAL_GPIO_Init+0x258>)
 81035fe:	4293      	cmp	r3, r2
 8103600:	d013      	beq.n	810362a <HAL_GPIO_Init+0x21a>
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	4a19      	ldr	r2, [pc, #100]	@ (810366c <HAL_GPIO_Init+0x25c>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d00d      	beq.n	8103626 <HAL_GPIO_Init+0x216>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	4a18      	ldr	r2, [pc, #96]	@ (8103670 <HAL_GPIO_Init+0x260>)
 810360e:	4293      	cmp	r3, r2
 8103610:	d007      	beq.n	8103622 <HAL_GPIO_Init+0x212>
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	4a17      	ldr	r2, [pc, #92]	@ (8103674 <HAL_GPIO_Init+0x264>)
 8103616:	4293      	cmp	r3, r2
 8103618:	d101      	bne.n	810361e <HAL_GPIO_Init+0x20e>
 810361a:	2309      	movs	r3, #9
 810361c:	e02d      	b.n	810367a <HAL_GPIO_Init+0x26a>
 810361e:	230a      	movs	r3, #10
 8103620:	e02b      	b.n	810367a <HAL_GPIO_Init+0x26a>
 8103622:	2308      	movs	r3, #8
 8103624:	e029      	b.n	810367a <HAL_GPIO_Init+0x26a>
 8103626:	2307      	movs	r3, #7
 8103628:	e027      	b.n	810367a <HAL_GPIO_Init+0x26a>
 810362a:	2306      	movs	r3, #6
 810362c:	e025      	b.n	810367a <HAL_GPIO_Init+0x26a>
 810362e:	2305      	movs	r3, #5
 8103630:	e023      	b.n	810367a <HAL_GPIO_Init+0x26a>
 8103632:	2304      	movs	r3, #4
 8103634:	e021      	b.n	810367a <HAL_GPIO_Init+0x26a>
 8103636:	2303      	movs	r3, #3
 8103638:	e01f      	b.n	810367a <HAL_GPIO_Init+0x26a>
 810363a:	2302      	movs	r3, #2
 810363c:	e01d      	b.n	810367a <HAL_GPIO_Init+0x26a>
 810363e:	2301      	movs	r3, #1
 8103640:	e01b      	b.n	810367a <HAL_GPIO_Init+0x26a>
 8103642:	bf00      	nop
 8103644:	580000c0 	.word	0x580000c0
 8103648:	58024400 	.word	0x58024400
 810364c:	58000400 	.word	0x58000400
 8103650:	58020000 	.word	0x58020000
 8103654:	58020400 	.word	0x58020400
 8103658:	58020800 	.word	0x58020800
 810365c:	58020c00 	.word	0x58020c00
 8103660:	58021000 	.word	0x58021000
 8103664:	58021400 	.word	0x58021400
 8103668:	58021800 	.word	0x58021800
 810366c:	58021c00 	.word	0x58021c00
 8103670:	58022000 	.word	0x58022000
 8103674:	58022400 	.word	0x58022400
 8103678:	2300      	movs	r3, #0
 810367a:	69fa      	ldr	r2, [r7, #28]
 810367c:	f002 0203 	and.w	r2, r2, #3
 8103680:	0092      	lsls	r2, r2, #2
 8103682:	4093      	lsls	r3, r2
 8103684:	69ba      	ldr	r2, [r7, #24]
 8103686:	4313      	orrs	r3, r2
 8103688:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810368a:	4938      	ldr	r1, [pc, #224]	@ (810376c <HAL_GPIO_Init+0x35c>)
 810368c:	69fb      	ldr	r3, [r7, #28]
 810368e:	089b      	lsrs	r3, r3, #2
 8103690:	3302      	adds	r3, #2
 8103692:	69ba      	ldr	r2, [r7, #24]
 8103694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 810369c:	681b      	ldr	r3, [r3, #0]
 810369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81036a0:	693b      	ldr	r3, [r7, #16]
 81036a2:	43db      	mvns	r3, r3
 81036a4:	69ba      	ldr	r2, [r7, #24]
 81036a6:	4013      	ands	r3, r2
 81036a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81036aa:	683b      	ldr	r3, [r7, #0]
 81036ac:	685b      	ldr	r3, [r3, #4]
 81036ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81036b2:	2b00      	cmp	r3, #0
 81036b4:	d003      	beq.n	81036be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81036b6:	69ba      	ldr	r2, [r7, #24]
 81036b8:	693b      	ldr	r3, [r7, #16]
 81036ba:	4313      	orrs	r3, r2
 81036bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81036be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81036c2:	69bb      	ldr	r3, [r7, #24]
 81036c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81036c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81036ca:	685b      	ldr	r3, [r3, #4]
 81036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81036ce:	693b      	ldr	r3, [r7, #16]
 81036d0:	43db      	mvns	r3, r3
 81036d2:	69ba      	ldr	r2, [r7, #24]
 81036d4:	4013      	ands	r3, r2
 81036d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81036d8:	683b      	ldr	r3, [r7, #0]
 81036da:	685b      	ldr	r3, [r3, #4]
 81036dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81036e0:	2b00      	cmp	r3, #0
 81036e2:	d003      	beq.n	81036ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81036e4:	69ba      	ldr	r2, [r7, #24]
 81036e6:	693b      	ldr	r3, [r7, #16]
 81036e8:	4313      	orrs	r3, r2
 81036ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81036ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81036f0:	69bb      	ldr	r3, [r7, #24]
 81036f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81036f4:	697b      	ldr	r3, [r7, #20]
 81036f6:	685b      	ldr	r3, [r3, #4]
 81036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81036fa:	693b      	ldr	r3, [r7, #16]
 81036fc:	43db      	mvns	r3, r3
 81036fe:	69ba      	ldr	r2, [r7, #24]
 8103700:	4013      	ands	r3, r2
 8103702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103704:	683b      	ldr	r3, [r7, #0]
 8103706:	685b      	ldr	r3, [r3, #4]
 8103708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810370c:	2b00      	cmp	r3, #0
 810370e:	d003      	beq.n	8103718 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103710:	69ba      	ldr	r2, [r7, #24]
 8103712:	693b      	ldr	r3, [r7, #16]
 8103714:	4313      	orrs	r3, r2
 8103716:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103718:	697b      	ldr	r3, [r7, #20]
 810371a:	69ba      	ldr	r2, [r7, #24]
 810371c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810371e:	697b      	ldr	r3, [r7, #20]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103724:	693b      	ldr	r3, [r7, #16]
 8103726:	43db      	mvns	r3, r3
 8103728:	69ba      	ldr	r2, [r7, #24]
 810372a:	4013      	ands	r3, r2
 810372c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810372e:	683b      	ldr	r3, [r7, #0]
 8103730:	685b      	ldr	r3, [r3, #4]
 8103732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103736:	2b00      	cmp	r3, #0
 8103738:	d003      	beq.n	8103742 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810373a:	69ba      	ldr	r2, [r7, #24]
 810373c:	693b      	ldr	r3, [r7, #16]
 810373e:	4313      	orrs	r3, r2
 8103740:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103742:	697b      	ldr	r3, [r7, #20]
 8103744:	69ba      	ldr	r2, [r7, #24]
 8103746:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103748:	69fb      	ldr	r3, [r7, #28]
 810374a:	3301      	adds	r3, #1
 810374c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810374e:	683b      	ldr	r3, [r7, #0]
 8103750:	681a      	ldr	r2, [r3, #0]
 8103752:	69fb      	ldr	r3, [r7, #28]
 8103754:	fa22 f303 	lsr.w	r3, r2, r3
 8103758:	2b00      	cmp	r3, #0
 810375a:	f47f ae63 	bne.w	8103424 <HAL_GPIO_Init+0x14>
  }
}
 810375e:	bf00      	nop
 8103760:	bf00      	nop
 8103762:	3724      	adds	r7, #36	@ 0x24
 8103764:	46bd      	mov	sp, r7
 8103766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810376a:	4770      	bx	lr
 810376c:	58000400 	.word	0x58000400

08103770 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8103770:	b480      	push	{r7}
 8103772:	b083      	sub	sp, #12
 8103774:	af00      	add	r7, sp, #0
 8103776:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8103778:	4a08      	ldr	r2, [pc, #32]	@ (810379c <HAL_HSEM_FastTake+0x2c>)
 810377a:	687b      	ldr	r3, [r7, #4]
 810377c:	3320      	adds	r3, #32
 810377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103782:	4a07      	ldr	r2, [pc, #28]	@ (81037a0 <HAL_HSEM_FastTake+0x30>)
 8103784:	4293      	cmp	r3, r2
 8103786:	d101      	bne.n	810378c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8103788:	2300      	movs	r3, #0
 810378a:	e000      	b.n	810378e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 810378c:	2301      	movs	r3, #1
}
 810378e:	4618      	mov	r0, r3
 8103790:	370c      	adds	r7, #12
 8103792:	46bd      	mov	sp, r7
 8103794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103798:	4770      	bx	lr
 810379a:	bf00      	nop
 810379c:	58026400 	.word	0x58026400
 81037a0:	80000100 	.word	0x80000100

081037a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81037a4:	b480      	push	{r7}
 81037a6:	b083      	sub	sp, #12
 81037a8:	af00      	add	r7, sp, #0
 81037aa:	6078      	str	r0, [r7, #4]
 81037ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 81037ae:	4906      	ldr	r1, [pc, #24]	@ (81037c8 <HAL_HSEM_Release+0x24>)
 81037b0:	683b      	ldr	r3, [r7, #0]
 81037b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81037bc:	bf00      	nop
 81037be:	370c      	adds	r7, #12
 81037c0:	46bd      	mov	sp, r7
 81037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037c6:	4770      	bx	lr
 81037c8:	58026400 	.word	0x58026400

081037cc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81037cc:	b480      	push	{r7}
 81037ce:	b083      	sub	sp, #12
 81037d0:	af00      	add	r7, sp, #0
 81037d2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81037d4:	4b05      	ldr	r3, [pc, #20]	@ (81037ec <HAL_HSEM_ActivateNotification+0x20>)
 81037d6:	681a      	ldr	r2, [r3, #0]
 81037d8:	4904      	ldr	r1, [pc, #16]	@ (81037ec <HAL_HSEM_ActivateNotification+0x20>)
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	4313      	orrs	r3, r2
 81037de:	600b      	str	r3, [r1, #0]
#endif
}
 81037e0:	bf00      	nop
 81037e2:	370c      	adds	r7, #12
 81037e4:	46bd      	mov	sp, r7
 81037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ea:	4770      	bx	lr
 81037ec:	58026510 	.word	0x58026510

081037f0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 81037f0:	b580      	push	{r7, lr}
 81037f2:	b084      	sub	sp, #16
 81037f4:	af00      	add	r7, sp, #0
 81037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	2b00      	cmp	r3, #0
 81037fc:	d101      	bne.n	8103802 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 81037fe:	2301      	movs	r3, #1
 8103800:	e041      	b.n	8103886 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	681b      	ldr	r3, [r3, #0]
 8103806:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 810380a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	681b      	ldr	r3, [r3, #0]
 8103810:	f245 5255 	movw	r2, #21845	@ 0x5555
 8103814:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	681b      	ldr	r3, [r3, #0]
 810381a:	687a      	ldr	r2, [r7, #4]
 810381c:	6852      	ldr	r2, [r2, #4]
 810381e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	681b      	ldr	r3, [r3, #0]
 8103824:	687a      	ldr	r2, [r7, #4]
 8103826:	6892      	ldr	r2, [r2, #8]
 8103828:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 810382a:	f7fd fc03 	bl	8101034 <HAL_GetTick>
 810382e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8103830:	e00f      	b.n	8103852 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8103832:	f7fd fbff 	bl	8101034 <HAL_GetTick>
 8103836:	4602      	mov	r2, r0
 8103838:	68fb      	ldr	r3, [r7, #12]
 810383a:	1ad3      	subs	r3, r2, r3
 810383c:	2b31      	cmp	r3, #49	@ 0x31
 810383e:	d908      	bls.n	8103852 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	681b      	ldr	r3, [r3, #0]
 8103844:	68db      	ldr	r3, [r3, #12]
 8103846:	f003 0307 	and.w	r3, r3, #7
 810384a:	2b00      	cmp	r3, #0
 810384c:	d001      	beq.n	8103852 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 810384e:	2303      	movs	r3, #3
 8103850:	e019      	b.n	8103886 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	68db      	ldr	r3, [r3, #12]
 8103858:	f003 0307 	and.w	r3, r3, #7
 810385c:	2b00      	cmp	r3, #0
 810385e:	d1e8      	bne.n	8103832 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	691a      	ldr	r2, [r3, #16]
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	68db      	ldr	r3, [r3, #12]
 810386a:	429a      	cmp	r2, r3
 810386c:	d005      	beq.n	810387a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	687a      	ldr	r2, [r7, #4]
 8103874:	68d2      	ldr	r2, [r2, #12]
 8103876:	611a      	str	r2, [r3, #16]
 8103878:	e004      	b.n	8103884 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8103882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8103884:	2300      	movs	r3, #0
}
 8103886:	4618      	mov	r0, r3
 8103888:	3710      	adds	r7, #16
 810388a:	46bd      	mov	sp, r7
 810388c:	bd80      	pop	{r7, pc}
	...

08103890 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103890:	b580      	push	{r7, lr}
 8103892:	b084      	sub	sp, #16
 8103894:	af00      	add	r7, sp, #0
 8103896:	60f8      	str	r0, [r7, #12]
 8103898:	460b      	mov	r3, r1
 810389a:	607a      	str	r2, [r7, #4]
 810389c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810389e:	4b37      	ldr	r3, [pc, #220]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	f023 0201 	bic.w	r2, r3, #1
 81038a6:	4935      	ldr	r1, [pc, #212]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 81038a8:	68fb      	ldr	r3, [r7, #12]
 81038aa:	4313      	orrs	r3, r2
 81038ac:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	2b00      	cmp	r3, #0
 81038b2:	d123      	bne.n	81038fc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81038b4:	f7fe fc74 	bl	81021a0 <HAL_GetCurrentCPUID>
 81038b8:	4603      	mov	r3, r0
 81038ba:	2b03      	cmp	r3, #3
 81038bc:	d158      	bne.n	8103970 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81038be:	4b2f      	ldr	r3, [pc, #188]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 81038c0:	691b      	ldr	r3, [r3, #16]
 81038c2:	4a2e      	ldr	r2, [pc, #184]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 81038c4:	f023 0301 	bic.w	r3, r3, #1
 81038c8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81038ca:	4b2d      	ldr	r3, [pc, #180]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038cc:	691b      	ldr	r3, [r3, #16]
 81038ce:	4a2c      	ldr	r2, [pc, #176]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038d0:	f043 0304 	orr.w	r3, r3, #4
 81038d4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81038d6:	f3bf 8f4f 	dsb	sy
}
 81038da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81038dc:	f3bf 8f6f 	isb	sy
}
 81038e0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81038e2:	7afb      	ldrb	r3, [r7, #11]
 81038e4:	2b01      	cmp	r3, #1
 81038e6:	d101      	bne.n	81038ec <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81038e8:	bf30      	wfi
 81038ea:	e000      	b.n	81038ee <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81038ec:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81038ee:	4b24      	ldr	r3, [pc, #144]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038f0:	691b      	ldr	r3, [r3, #16]
 81038f2:	4a23      	ldr	r2, [pc, #140]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038f4:	f023 0304 	bic.w	r3, r3, #4
 81038f8:	6113      	str	r3, [r2, #16]
 81038fa:	e03c      	b.n	8103976 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	2b01      	cmp	r3, #1
 8103900:	d123      	bne.n	810394a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103902:	f7fe fc4d 	bl	81021a0 <HAL_GetCurrentCPUID>
 8103906:	4603      	mov	r3, r0
 8103908:	2b01      	cmp	r3, #1
 810390a:	d133      	bne.n	8103974 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810390c:	4b1b      	ldr	r3, [pc, #108]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 810390e:	695b      	ldr	r3, [r3, #20]
 8103910:	4a1a      	ldr	r2, [pc, #104]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103912:	f023 0302 	bic.w	r3, r3, #2
 8103916:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103918:	4b19      	ldr	r3, [pc, #100]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810391a:	691b      	ldr	r3, [r3, #16]
 810391c:	4a18      	ldr	r2, [pc, #96]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810391e:	f043 0304 	orr.w	r3, r3, #4
 8103922:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103924:	f3bf 8f4f 	dsb	sy
}
 8103928:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810392a:	f3bf 8f6f 	isb	sy
}
 810392e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103930:	7afb      	ldrb	r3, [r7, #11]
 8103932:	2b01      	cmp	r3, #1
 8103934:	d101      	bne.n	810393a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103936:	bf30      	wfi
 8103938:	e000      	b.n	810393c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810393a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810393c:	4b10      	ldr	r3, [pc, #64]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810393e:	691b      	ldr	r3, [r3, #16]
 8103940:	4a0f      	ldr	r2, [pc, #60]	@ (8103980 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103942:	f023 0304 	bic.w	r3, r3, #4
 8103946:	6113      	str	r3, [r2, #16]
 8103948:	e015      	b.n	8103976 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810394a:	f7fe fc29 	bl	81021a0 <HAL_GetCurrentCPUID>
 810394e:	4603      	mov	r3, r0
 8103950:	2b03      	cmp	r3, #3
 8103952:	d106      	bne.n	8103962 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103954:	4b09      	ldr	r3, [pc, #36]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103956:	691b      	ldr	r3, [r3, #16]
 8103958:	4a08      	ldr	r2, [pc, #32]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 810395a:	f023 0304 	bic.w	r3, r3, #4
 810395e:	6113      	str	r3, [r2, #16]
 8103960:	e009      	b.n	8103976 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103962:	4b06      	ldr	r3, [pc, #24]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103964:	695b      	ldr	r3, [r3, #20]
 8103966:	4a05      	ldr	r2, [pc, #20]	@ (810397c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103968:	f023 0304 	bic.w	r3, r3, #4
 810396c:	6153      	str	r3, [r2, #20]
 810396e:	e002      	b.n	8103976 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103970:	bf00      	nop
 8103972:	e000      	b.n	8103976 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103974:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103976:	3710      	adds	r7, #16
 8103978:	46bd      	mov	sp, r7
 810397a:	bd80      	pop	{r7, pc}
 810397c:	58024800 	.word	0x58024800
 8103980:	e000ed00 	.word	0xe000ed00

08103984 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103984:	b580      	push	{r7, lr}
 8103986:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103988:	f7fe fc0a 	bl	81021a0 <HAL_GetCurrentCPUID>
 810398c:	4603      	mov	r3, r0
 810398e:	2b03      	cmp	r3, #3
 8103990:	d101      	bne.n	8103996 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103992:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103994:	e001      	b.n	810399a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103996:	bf40      	sev
    __WFE ();
 8103998:	bf20      	wfe
}
 810399a:	bf00      	nop
 810399c:	bd80      	pop	{r7, pc}
	...

081039a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81039a0:	b480      	push	{r7}
 81039a2:	b089      	sub	sp, #36	@ 0x24
 81039a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81039a6:	4bb3      	ldr	r3, [pc, #716]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039a8:	691b      	ldr	r3, [r3, #16]
 81039aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81039ae:	2b18      	cmp	r3, #24
 81039b0:	f200 8155 	bhi.w	8103c5e <HAL_RCC_GetSysClockFreq+0x2be>
 81039b4:	a201      	add	r2, pc, #4	@ (adr r2, 81039bc <HAL_RCC_GetSysClockFreq+0x1c>)
 81039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039ba:	bf00      	nop
 81039bc:	08103a21 	.word	0x08103a21
 81039c0:	08103c5f 	.word	0x08103c5f
 81039c4:	08103c5f 	.word	0x08103c5f
 81039c8:	08103c5f 	.word	0x08103c5f
 81039cc:	08103c5f 	.word	0x08103c5f
 81039d0:	08103c5f 	.word	0x08103c5f
 81039d4:	08103c5f 	.word	0x08103c5f
 81039d8:	08103c5f 	.word	0x08103c5f
 81039dc:	08103a47 	.word	0x08103a47
 81039e0:	08103c5f 	.word	0x08103c5f
 81039e4:	08103c5f 	.word	0x08103c5f
 81039e8:	08103c5f 	.word	0x08103c5f
 81039ec:	08103c5f 	.word	0x08103c5f
 81039f0:	08103c5f 	.word	0x08103c5f
 81039f4:	08103c5f 	.word	0x08103c5f
 81039f8:	08103c5f 	.word	0x08103c5f
 81039fc:	08103a4d 	.word	0x08103a4d
 8103a00:	08103c5f 	.word	0x08103c5f
 8103a04:	08103c5f 	.word	0x08103c5f
 8103a08:	08103c5f 	.word	0x08103c5f
 8103a0c:	08103c5f 	.word	0x08103c5f
 8103a10:	08103c5f 	.word	0x08103c5f
 8103a14:	08103c5f 	.word	0x08103c5f
 8103a18:	08103c5f 	.word	0x08103c5f
 8103a1c:	08103a53 	.word	0x08103a53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103a20:	4b94      	ldr	r3, [pc, #592]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	f003 0320 	and.w	r3, r3, #32
 8103a28:	2b00      	cmp	r3, #0
 8103a2a:	d009      	beq.n	8103a40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103a2c:	4b91      	ldr	r3, [pc, #580]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	08db      	lsrs	r3, r3, #3
 8103a32:	f003 0303 	and.w	r3, r3, #3
 8103a36:	4a90      	ldr	r2, [pc, #576]	@ (8103c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103a38:	fa22 f303 	lsr.w	r3, r2, r3
 8103a3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103a3e:	e111      	b.n	8103c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103a40:	4b8d      	ldr	r3, [pc, #564]	@ (8103c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103a42:	61bb      	str	r3, [r7, #24]
      break;
 8103a44:	e10e      	b.n	8103c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103a46:	4b8d      	ldr	r3, [pc, #564]	@ (8103c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103a48:	61bb      	str	r3, [r7, #24]
      break;
 8103a4a:	e10b      	b.n	8103c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8103c80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103a4e:	61bb      	str	r3, [r7, #24]
      break;
 8103a50:	e108      	b.n	8103c64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103a52:	4b88      	ldr	r3, [pc, #544]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103a56:	f003 0303 	and.w	r3, r3, #3
 8103a5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103a5c:	4b85      	ldr	r3, [pc, #532]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103a60:	091b      	lsrs	r3, r3, #4
 8103a62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103a66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103a68:	4b82      	ldr	r3, [pc, #520]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a6c:	f003 0301 	and.w	r3, r3, #1
 8103a70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103a72:	4b80      	ldr	r3, [pc, #512]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103a76:	08db      	lsrs	r3, r3, #3
 8103a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103a7c:	68fa      	ldr	r2, [r7, #12]
 8103a7e:	fb02 f303 	mul.w	r3, r2, r3
 8103a82:	ee07 3a90 	vmov	s15, r3
 8103a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103a8e:	693b      	ldr	r3, [r7, #16]
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	f000 80e1 	beq.w	8103c58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103a96:	697b      	ldr	r3, [r7, #20]
 8103a98:	2b02      	cmp	r3, #2
 8103a9a:	f000 8083 	beq.w	8103ba4 <HAL_RCC_GetSysClockFreq+0x204>
 8103a9e:	697b      	ldr	r3, [r7, #20]
 8103aa0:	2b02      	cmp	r3, #2
 8103aa2:	f200 80a1 	bhi.w	8103be8 <HAL_RCC_GetSysClockFreq+0x248>
 8103aa6:	697b      	ldr	r3, [r7, #20]
 8103aa8:	2b00      	cmp	r3, #0
 8103aaa:	d003      	beq.n	8103ab4 <HAL_RCC_GetSysClockFreq+0x114>
 8103aac:	697b      	ldr	r3, [r7, #20]
 8103aae:	2b01      	cmp	r3, #1
 8103ab0:	d056      	beq.n	8103b60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103ab2:	e099      	b.n	8103be8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	f003 0320 	and.w	r3, r3, #32
 8103abc:	2b00      	cmp	r3, #0
 8103abe:	d02d      	beq.n	8103b1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	08db      	lsrs	r3, r3, #3
 8103ac6:	f003 0303 	and.w	r3, r3, #3
 8103aca:	4a6b      	ldr	r2, [pc, #428]	@ (8103c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103acc:	fa22 f303 	lsr.w	r3, r2, r3
 8103ad0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	ee07 3a90 	vmov	s15, r3
 8103ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103adc:	693b      	ldr	r3, [r7, #16]
 8103ade:	ee07 3a90 	vmov	s15, r3
 8103ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103aea:	4b62      	ldr	r3, [pc, #392]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103af2:	ee07 3a90 	vmov	s15, r3
 8103af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8103afe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8103c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8103b1a:	e087      	b.n	8103c2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103b1c:	693b      	ldr	r3, [r7, #16]
 8103b1e:	ee07 3a90 	vmov	s15, r3
 8103b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8103c88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b2e:	4b51      	ldr	r3, [pc, #324]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b36:	ee07 3a90 	vmov	s15, r3
 8103b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103b42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8103c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103b5e:	e065      	b.n	8103c2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103b60:	693b      	ldr	r3, [r7, #16]
 8103b62:	ee07 3a90 	vmov	s15, r3
 8103b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b72:	4b40      	ldr	r3, [pc, #256]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b7a:	ee07 3a90 	vmov	s15, r3
 8103b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8103b86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8103c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103ba2:	e043      	b.n	8103c2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103ba4:	693b      	ldr	r3, [r7, #16]
 8103ba6:	ee07 3a90 	vmov	s15, r3
 8103baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103c90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103bbe:	ee07 3a90 	vmov	s15, r3
 8103bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8103bca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8103c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103be6:	e021      	b.n	8103c2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103be8:	693b      	ldr	r3, [r7, #16]
 8103bea:	ee07 3a90 	vmov	s15, r3
 8103bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bf2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c02:	ee07 3a90 	vmov	s15, r3
 8103c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103c0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8103c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103c2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103c2c:	4b11      	ldr	r3, [pc, #68]	@ (8103c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103c30:	0a5b      	lsrs	r3, r3, #9
 8103c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103c36:	3301      	adds	r3, #1
 8103c38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8103c3a:	683b      	ldr	r3, [r7, #0]
 8103c3c:	ee07 3a90 	vmov	s15, r3
 8103c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8103c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103c50:	ee17 3a90 	vmov	r3, s15
 8103c54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103c56:	e005      	b.n	8103c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103c58:	2300      	movs	r3, #0
 8103c5a:	61bb      	str	r3, [r7, #24]
      break;
 8103c5c:	e002      	b.n	8103c64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103c5e:	4b07      	ldr	r3, [pc, #28]	@ (8103c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103c60:	61bb      	str	r3, [r7, #24]
      break;
 8103c62:	bf00      	nop
  }

  return sysclockfreq;
 8103c64:	69bb      	ldr	r3, [r7, #24]
}
 8103c66:	4618      	mov	r0, r3
 8103c68:	3724      	adds	r7, #36	@ 0x24
 8103c6a:	46bd      	mov	sp, r7
 8103c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c70:	4770      	bx	lr
 8103c72:	bf00      	nop
 8103c74:	58024400 	.word	0x58024400
 8103c78:	03d09000 	.word	0x03d09000
 8103c7c:	003d0900 	.word	0x003d0900
 8103c80:	017d7840 	.word	0x017d7840
 8103c84:	46000000 	.word	0x46000000
 8103c88:	4c742400 	.word	0x4c742400
 8103c8c:	4a742400 	.word	0x4a742400
 8103c90:	4bbebc20 	.word	0x4bbebc20

08103c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103c94:	b580      	push	{r7, lr}
 8103c96:	b082      	sub	sp, #8
 8103c98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103c9a:	f7ff fe81 	bl	81039a0 <HAL_RCC_GetSysClockFreq>
 8103c9e:	4602      	mov	r2, r0
 8103ca0:	4b11      	ldr	r3, [pc, #68]	@ (8103ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103ca2:	699b      	ldr	r3, [r3, #24]
 8103ca4:	0a1b      	lsrs	r3, r3, #8
 8103ca6:	f003 030f 	and.w	r3, r3, #15
 8103caa:	4910      	ldr	r1, [pc, #64]	@ (8103cec <HAL_RCC_GetHCLKFreq+0x58>)
 8103cac:	5ccb      	ldrb	r3, [r1, r3]
 8103cae:	f003 031f 	and.w	r3, r3, #31
 8103cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8103cb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8103ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103cba:	699b      	ldr	r3, [r3, #24]
 8103cbc:	f003 030f 	and.w	r3, r3, #15
 8103cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8103cec <HAL_RCC_GetHCLKFreq+0x58>)
 8103cc2:	5cd3      	ldrb	r3, [r2, r3]
 8103cc4:	f003 031f 	and.w	r3, r3, #31
 8103cc8:	687a      	ldr	r2, [r7, #4]
 8103cca:	fa22 f303 	lsr.w	r3, r2, r3
 8103cce:	4a08      	ldr	r2, [pc, #32]	@ (8103cf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103cd0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103cd2:	4b07      	ldr	r3, [pc, #28]	@ (8103cf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4a07      	ldr	r2, [pc, #28]	@ (8103cf4 <HAL_RCC_GetHCLKFreq+0x60>)
 8103cd8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103cda:	4b05      	ldr	r3, [pc, #20]	@ (8103cf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103cdc:	681b      	ldr	r3, [r3, #0]
}
 8103cde:	4618      	mov	r0, r3
 8103ce0:	3708      	adds	r7, #8
 8103ce2:	46bd      	mov	sp, r7
 8103ce4:	bd80      	pop	{r7, pc}
 8103ce6:	bf00      	nop
 8103ce8:	58024400 	.word	0x58024400
 8103cec:	0810c478 	.word	0x0810c478
 8103cf0:	10000004 	.word	0x10000004
 8103cf4:	10000000 	.word	0x10000000

08103cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103cf8:	b580      	push	{r7, lr}
 8103cfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103cfc:	f7ff ffca 	bl	8103c94 <HAL_RCC_GetHCLKFreq>
 8103d00:	4602      	mov	r2, r0
 8103d02:	4b06      	ldr	r3, [pc, #24]	@ (8103d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8103d04:	69db      	ldr	r3, [r3, #28]
 8103d06:	091b      	lsrs	r3, r3, #4
 8103d08:	f003 0307 	and.w	r3, r3, #7
 8103d0c:	4904      	ldr	r1, [pc, #16]	@ (8103d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103d0e:	5ccb      	ldrb	r3, [r1, r3]
 8103d10:	f003 031f 	and.w	r3, r3, #31
 8103d14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103d18:	4618      	mov	r0, r3
 8103d1a:	bd80      	pop	{r7, pc}
 8103d1c:	58024400 	.word	0x58024400
 8103d20:	0810c478 	.word	0x0810c478

08103d24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103d28:	b0ca      	sub	sp, #296	@ 0x128
 8103d2a:	af00      	add	r7, sp, #0
 8103d2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103d30:	2300      	movs	r3, #0
 8103d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103d36:	2300      	movs	r3, #0
 8103d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8103d48:	2500      	movs	r5, #0
 8103d4a:	ea54 0305 	orrs.w	r3, r4, r5
 8103d4e:	d049      	beq.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103d56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103d5a:	d02f      	beq.n	8103dbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103d5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103d60:	d828      	bhi.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103d66:	d01a      	beq.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103d68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103d6c:	d822      	bhi.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103d6e:	2b00      	cmp	r3, #0
 8103d70:	d003      	beq.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103d72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103d76:	d007      	beq.n	8103d88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103d78:	e01c      	b.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d7a:	4bb8      	ldr	r3, [pc, #736]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103d7e:	4ab7      	ldr	r2, [pc, #732]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103d86:	e01a      	b.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d8c:	3308      	adds	r3, #8
 8103d8e:	2102      	movs	r1, #2
 8103d90:	4618      	mov	r0, r3
 8103d92:	f002 fb75 	bl	8106480 <RCCEx_PLL2_Config>
 8103d96:	4603      	mov	r3, r0
 8103d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103d9c:	e00f      	b.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103da2:	3328      	adds	r3, #40	@ 0x28
 8103da4:	2102      	movs	r1, #2
 8103da6:	4618      	mov	r0, r3
 8103da8:	f002 fc1c 	bl	81065e4 <RCCEx_PLL3_Config>
 8103dac:	4603      	mov	r3, r0
 8103dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103db2:	e004      	b.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103db4:	2301      	movs	r3, #1
 8103db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103dba:	e000      	b.n	8103dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dc2:	2b00      	cmp	r3, #0
 8103dc4:	d10a      	bne.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103dc6:	4ba5      	ldr	r3, [pc, #660]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103dca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8103dd4:	4aa1      	ldr	r2, [pc, #644]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103dd6:	430b      	orrs	r3, r1
 8103dd8:	6513      	str	r3, [r2, #80]	@ 0x50
 8103dda:	e003      	b.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8103df0:	f04f 0900 	mov.w	r9, #0
 8103df4:	ea58 0309 	orrs.w	r3, r8, r9
 8103df8:	d047      	beq.n	8103e8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8103dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103e00:	2b04      	cmp	r3, #4
 8103e02:	d82a      	bhi.n	8103e5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103e04:	a201      	add	r2, pc, #4	@ (adr r2, 8103e0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e0a:	bf00      	nop
 8103e0c:	08103e21 	.word	0x08103e21
 8103e10:	08103e2f 	.word	0x08103e2f
 8103e14:	08103e45 	.word	0x08103e45
 8103e18:	08103e63 	.word	0x08103e63
 8103e1c:	08103e63 	.word	0x08103e63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e20:	4b8e      	ldr	r3, [pc, #568]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103e24:	4a8d      	ldr	r2, [pc, #564]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e2c:	e01a      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e32:	3308      	adds	r3, #8
 8103e34:	2100      	movs	r1, #0
 8103e36:	4618      	mov	r0, r3
 8103e38:	f002 fb22 	bl	8106480 <RCCEx_PLL2_Config>
 8103e3c:	4603      	mov	r3, r0
 8103e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e42:	e00f      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e48:	3328      	adds	r3, #40	@ 0x28
 8103e4a:	2100      	movs	r1, #0
 8103e4c:	4618      	mov	r0, r3
 8103e4e:	f002 fbc9 	bl	81065e4 <RCCEx_PLL3_Config>
 8103e52:	4603      	mov	r3, r0
 8103e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e58:	e004      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103e5a:	2301      	movs	r3, #1
 8103e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103e60:	e000      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e68:	2b00      	cmp	r3, #0
 8103e6a:	d10a      	bne.n	8103e82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103e6c:	4b7b      	ldr	r3, [pc, #492]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103e70:	f023 0107 	bic.w	r1, r3, #7
 8103e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103e7a:	4a78      	ldr	r2, [pc, #480]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103e7c:	430b      	orrs	r3, r1
 8103e7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103e80:	e003      	b.n	8103e8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8103e96:	f04f 0b00 	mov.w	fp, #0
 8103e9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8103e9e:	d04c      	beq.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103eaa:	d030      	beq.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103eb0:	d829      	bhi.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8103eb4:	d02d      	beq.n	8103f12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103eb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8103eb8:	d825      	bhi.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103eba:	2b80      	cmp	r3, #128	@ 0x80
 8103ebc:	d018      	beq.n	8103ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103ebe:	2b80      	cmp	r3, #128	@ 0x80
 8103ec0:	d821      	bhi.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103ec2:	2b00      	cmp	r3, #0
 8103ec4:	d002      	beq.n	8103ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103ec6:	2b40      	cmp	r3, #64	@ 0x40
 8103ec8:	d007      	beq.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103eca:	e01c      	b.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ecc:	4b63      	ldr	r3, [pc, #396]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ed0:	4a62      	ldr	r2, [pc, #392]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103ed8:	e01c      	b.n	8103f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ede:	3308      	adds	r3, #8
 8103ee0:	2100      	movs	r1, #0
 8103ee2:	4618      	mov	r0, r3
 8103ee4:	f002 facc 	bl	8106480 <RCCEx_PLL2_Config>
 8103ee8:	4603      	mov	r3, r0
 8103eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103eee:	e011      	b.n	8103f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ef4:	3328      	adds	r3, #40	@ 0x28
 8103ef6:	2100      	movs	r1, #0
 8103ef8:	4618      	mov	r0, r3
 8103efa:	f002 fb73 	bl	81065e4 <RCCEx_PLL3_Config>
 8103efe:	4603      	mov	r3, r0
 8103f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103f04:	e006      	b.n	8103f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f06:	2301      	movs	r3, #1
 8103f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103f0c:	e002      	b.n	8103f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103f0e:	bf00      	nop
 8103f10:	e000      	b.n	8103f14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f18:	2b00      	cmp	r3, #0
 8103f1a:	d10a      	bne.n	8103f32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103f1c:	4b4f      	ldr	r3, [pc, #316]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103f2a:	4a4c      	ldr	r2, [pc, #304]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f2c:	430b      	orrs	r3, r1
 8103f2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8103f30:	e003      	b.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8103f46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8103f4a:	2300      	movs	r3, #0
 8103f4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8103f50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103f54:	460b      	mov	r3, r1
 8103f56:	4313      	orrs	r3, r2
 8103f58:	d053      	beq.n	8104002 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103f66:	d035      	beq.n	8103fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103f68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103f6c:	d82e      	bhi.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103f6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103f72:	d031      	beq.n	8103fd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103f74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103f78:	d828      	bhi.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103f7e:	d01a      	beq.n	8103fb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103f80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103f84:	d822      	bhi.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	d003      	beq.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103f8e:	d007      	beq.n	8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103f90:	e01c      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f92:	4b32      	ldr	r3, [pc, #200]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f96:	4a31      	ldr	r2, [pc, #196]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103f9e:	e01c      	b.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fa4:	3308      	adds	r3, #8
 8103fa6:	2100      	movs	r1, #0
 8103fa8:	4618      	mov	r0, r3
 8103faa:	f002 fa69 	bl	8106480 <RCCEx_PLL2_Config>
 8103fae:	4603      	mov	r3, r0
 8103fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103fb4:	e011      	b.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fba:	3328      	adds	r3, #40	@ 0x28
 8103fbc:	2100      	movs	r1, #0
 8103fbe:	4618      	mov	r0, r3
 8103fc0:	f002 fb10 	bl	81065e4 <RCCEx_PLL3_Config>
 8103fc4:	4603      	mov	r3, r0
 8103fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103fca:	e006      	b.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103fcc:	2301      	movs	r3, #1
 8103fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103fd2:	e002      	b.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103fd4:	bf00      	nop
 8103fd6:	e000      	b.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	d10b      	bne.n	8103ffa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103fe2:	4b1e      	ldr	r3, [pc, #120]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103fe6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8103fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103ff2:	4a1a      	ldr	r2, [pc, #104]	@ (810405c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103ff4:	430b      	orrs	r3, r1
 8103ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8103ff8:	e003      	b.n	8104002 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ffe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104006:	e9d3 2300 	ldrd	r2, r3, [r3]
 810400a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810400e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8104012:	2300      	movs	r3, #0
 8104014:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8104018:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810401c:	460b      	mov	r3, r1
 810401e:	4313      	orrs	r3, r2
 8104020:	d056      	beq.n	81040d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810402a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810402e:	d038      	beq.n	81040a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104034:	d831      	bhi.n	810409a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104036:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810403a:	d034      	beq.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810403c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104040:	d82b      	bhi.n	810409a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104046:	d01d      	beq.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104048:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810404c:	d825      	bhi.n	810409a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810404e:	2b00      	cmp	r3, #0
 8104050:	d006      	beq.n	8104060 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8104052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104056:	d00a      	beq.n	810406e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104058:	e01f      	b.n	810409a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810405a:	bf00      	nop
 810405c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104060:	4ba2      	ldr	r3, [pc, #648]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104064:	4aa1      	ldr	r2, [pc, #644]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810406a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810406c:	e01c      	b.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104072:	3308      	adds	r3, #8
 8104074:	2100      	movs	r1, #0
 8104076:	4618      	mov	r0, r3
 8104078:	f002 fa02 	bl	8106480 <RCCEx_PLL2_Config>
 810407c:	4603      	mov	r3, r0
 810407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104082:	e011      	b.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104088:	3328      	adds	r3, #40	@ 0x28
 810408a:	2100      	movs	r1, #0
 810408c:	4618      	mov	r0, r3
 810408e:	f002 faa9 	bl	81065e4 <RCCEx_PLL3_Config>
 8104092:	4603      	mov	r3, r0
 8104094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104098:	e006      	b.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810409a:	2301      	movs	r3, #1
 810409c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81040a0:	e002      	b.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81040a2:	bf00      	nop
 81040a4:	e000      	b.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81040a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81040a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d10b      	bne.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81040b0:	4b8e      	ldr	r3, [pc, #568]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81040b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81040b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81040c0:	4a8a      	ldr	r2, [pc, #552]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81040c2:	430b      	orrs	r3, r1
 81040c4:	6593      	str	r3, [r2, #88]	@ 0x58
 81040c6:	e003      	b.n	81040d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81040cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040d8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 81040dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81040e0:	2300      	movs	r3, #0
 81040e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81040e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81040ea:	460b      	mov	r3, r1
 81040ec:	4313      	orrs	r3, r2
 81040ee:	d03a      	beq.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81040f6:	2b30      	cmp	r3, #48	@ 0x30
 81040f8:	d01f      	beq.n	810413a <HAL_RCCEx_PeriphCLKConfig+0x416>
 81040fa:	2b30      	cmp	r3, #48	@ 0x30
 81040fc:	d819      	bhi.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81040fe:	2b20      	cmp	r3, #32
 8104100:	d00c      	beq.n	810411c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8104102:	2b20      	cmp	r3, #32
 8104104:	d815      	bhi.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104106:	2b00      	cmp	r3, #0
 8104108:	d019      	beq.n	810413e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810410a:	2b10      	cmp	r3, #16
 810410c:	d111      	bne.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810410e:	4b77      	ldr	r3, [pc, #476]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104112:	4a76      	ldr	r2, [pc, #472]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810411a:	e011      	b.n	8104140 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104120:	3308      	adds	r3, #8
 8104122:	2102      	movs	r1, #2
 8104124:	4618      	mov	r0, r3
 8104126:	f002 f9ab 	bl	8106480 <RCCEx_PLL2_Config>
 810412a:	4603      	mov	r3, r0
 810412c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104130:	e006      	b.n	8104140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104132:	2301      	movs	r3, #1
 8104134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104138:	e002      	b.n	8104140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810413a:	bf00      	nop
 810413c:	e000      	b.n	8104140 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810413e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104144:	2b00      	cmp	r3, #0
 8104146:	d10a      	bne.n	810415e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104148:	4b68      	ldr	r3, [pc, #416]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810414c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8104150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104156:	4a65      	ldr	r2, [pc, #404]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104158:	430b      	orrs	r3, r1
 810415a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810415c:	e003      	b.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810415e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810416e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8104172:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8104176:	2300      	movs	r3, #0
 8104178:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 810417c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8104180:	460b      	mov	r3, r1
 8104182:	4313      	orrs	r3, r2
 8104184:	d051      	beq.n	810422a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8104186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810418a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810418c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104190:	d035      	beq.n	81041fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8104192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104196:	d82e      	bhi.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104198:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810419c:	d031      	beq.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810419e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81041a2:	d828      	bhi.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81041a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81041a8:	d01a      	beq.n	81041e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81041aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81041ae:	d822      	bhi.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81041b0:	2b00      	cmp	r3, #0
 81041b2:	d003      	beq.n	81041bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 81041b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81041b8:	d007      	beq.n	81041ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81041ba:	e01c      	b.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81041bc:	4b4b      	ldr	r3, [pc, #300]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81041c0:	4a4a      	ldr	r2, [pc, #296]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81041c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81041c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81041c8:	e01c      	b.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041ce:	3308      	adds	r3, #8
 81041d0:	2100      	movs	r1, #0
 81041d2:	4618      	mov	r0, r3
 81041d4:	f002 f954 	bl	8106480 <RCCEx_PLL2_Config>
 81041d8:	4603      	mov	r3, r0
 81041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81041de:	e011      	b.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81041e4:	3328      	adds	r3, #40	@ 0x28
 81041e6:	2100      	movs	r1, #0
 81041e8:	4618      	mov	r0, r3
 81041ea:	f002 f9fb 	bl	81065e4 <RCCEx_PLL3_Config>
 81041ee:	4603      	mov	r3, r0
 81041f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81041f4:	e006      	b.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041f6:	2301      	movs	r3, #1
 81041f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81041fc:	e002      	b.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81041fe:	bf00      	nop
 8104200:	e000      	b.n	8104204 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104204:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104208:	2b00      	cmp	r3, #0
 810420a:	d10a      	bne.n	8104222 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810420c:	4b37      	ldr	r3, [pc, #220]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810420e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104210:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8104214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810421a:	4a34      	ldr	r2, [pc, #208]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810421c:	430b      	orrs	r3, r1
 810421e:	6513      	str	r3, [r2, #80]	@ 0x50
 8104220:	e003      	b.n	810422a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104232:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8104236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810423a:	2300      	movs	r3, #0
 810423c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8104240:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8104244:	460b      	mov	r3, r1
 8104246:	4313      	orrs	r3, r2
 8104248:	d056      	beq.n	81042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810424e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104254:	d033      	beq.n	81042be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104256:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810425a:	d82c      	bhi.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810425c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104260:	d02f      	beq.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8104262:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104266:	d826      	bhi.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104268:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810426c:	d02b      	beq.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810426e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104272:	d820      	bhi.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104274:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104278:	d012      	beq.n	81042a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810427a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810427e:	d81a      	bhi.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104280:	2b00      	cmp	r3, #0
 8104282:	d022      	beq.n	81042ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8104284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104288:	d115      	bne.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810428e:	3308      	adds	r3, #8
 8104290:	2101      	movs	r1, #1
 8104292:	4618      	mov	r0, r3
 8104294:	f002 f8f4 	bl	8106480 <RCCEx_PLL2_Config>
 8104298:	4603      	mov	r3, r0
 810429a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810429e:	e015      	b.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042a4:	3328      	adds	r3, #40	@ 0x28
 81042a6:	2101      	movs	r1, #1
 81042a8:	4618      	mov	r0, r3
 81042aa:	f002 f99b 	bl	81065e4 <RCCEx_PLL3_Config>
 81042ae:	4603      	mov	r3, r0
 81042b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81042b4:	e00a      	b.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042b6:	2301      	movs	r3, #1
 81042b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81042bc:	e006      	b.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81042be:	bf00      	nop
 81042c0:	e004      	b.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81042c2:	bf00      	nop
 81042c4:	e002      	b.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81042c6:	bf00      	nop
 81042c8:	e000      	b.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81042ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042d0:	2b00      	cmp	r3, #0
 81042d2:	d10d      	bne.n	81042f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81042d4:	4b05      	ldr	r3, [pc, #20]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81042d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81042d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 81042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81042e2:	4a02      	ldr	r2, [pc, #8]	@ (81042ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81042e4:	430b      	orrs	r3, r1
 81042e6:	6513      	str	r3, [r2, #80]	@ 0x50
 81042e8:	e006      	b.n	81042f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81042ea:	bf00      	nop
 81042ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81042f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104300:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8104304:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8104308:	2300      	movs	r3, #0
 810430a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810430e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8104312:	460b      	mov	r3, r1
 8104314:	4313      	orrs	r3, r2
 8104316:	d055      	beq.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810431c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104324:	d033      	beq.n	810438e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8104326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810432a:	d82c      	bhi.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810432c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104330:	d02f      	beq.n	8104392 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8104332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104336:	d826      	bhi.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104338:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810433c:	d02b      	beq.n	8104396 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810433e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104342:	d820      	bhi.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104348:	d012      	beq.n	8104370 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810434a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810434e:	d81a      	bhi.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104350:	2b00      	cmp	r3, #0
 8104352:	d022      	beq.n	810439a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8104354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104358:	d115      	bne.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810435e:	3308      	adds	r3, #8
 8104360:	2101      	movs	r1, #1
 8104362:	4618      	mov	r0, r3
 8104364:	f002 f88c 	bl	8106480 <RCCEx_PLL2_Config>
 8104368:	4603      	mov	r3, r0
 810436a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810436e:	e015      	b.n	810439c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104374:	3328      	adds	r3, #40	@ 0x28
 8104376:	2101      	movs	r1, #1
 8104378:	4618      	mov	r0, r3
 810437a:	f002 f933 	bl	81065e4 <RCCEx_PLL3_Config>
 810437e:	4603      	mov	r3, r0
 8104380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104384:	e00a      	b.n	810439c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8104386:	2301      	movs	r3, #1
 8104388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810438c:	e006      	b.n	810439c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810438e:	bf00      	nop
 8104390:	e004      	b.n	810439c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104392:	bf00      	nop
 8104394:	e002      	b.n	810439c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104396:	bf00      	nop
 8104398:	e000      	b.n	810439c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810439a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810439c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81043a0:	2b00      	cmp	r3, #0
 81043a2:	d10b      	bne.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81043a4:	4ba4      	ldr	r3, [pc, #656]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81043a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81043a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81043b4:	4aa0      	ldr	r2, [pc, #640]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81043b6:	430b      	orrs	r3, r1
 81043b8:	6593      	str	r3, [r2, #88]	@ 0x58
 81043ba:	e003      	b.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81043c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81043d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81043d4:	2300      	movs	r3, #0
 81043d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81043da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81043de:	460b      	mov	r3, r1
 81043e0:	4313      	orrs	r3, r2
 81043e2:	d037      	beq.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81043ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81043ee:	d00e      	beq.n	810440e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81043f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81043f4:	d816      	bhi.n	8104424 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81043f6:	2b00      	cmp	r3, #0
 81043f8:	d018      	beq.n	810442c <HAL_RCCEx_PeriphCLKConfig+0x708>
 81043fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81043fe:	d111      	bne.n	8104424 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104400:	4b8d      	ldr	r3, [pc, #564]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104404:	4a8c      	ldr	r2, [pc, #560]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810440a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810440c:	e00f      	b.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104412:	3308      	adds	r3, #8
 8104414:	2101      	movs	r1, #1
 8104416:	4618      	mov	r0, r3
 8104418:	f002 f832 	bl	8106480 <RCCEx_PLL2_Config>
 810441c:	4603      	mov	r3, r0
 810441e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104422:	e004      	b.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104424:	2301      	movs	r3, #1
 8104426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810442a:	e000      	b.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810442c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810442e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104432:	2b00      	cmp	r3, #0
 8104434:	d10a      	bne.n	810444c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104436:	4b80      	ldr	r3, [pc, #512]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810443a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104444:	4a7c      	ldr	r2, [pc, #496]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104446:	430b      	orrs	r3, r1
 8104448:	6513      	str	r3, [r2, #80]	@ 0x50
 810444a:	e003      	b.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810444c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104458:	e9d3 2300 	ldrd	r2, r3, [r3]
 810445c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8104460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8104464:	2300      	movs	r3, #0
 8104466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810446a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810446e:	460b      	mov	r3, r1
 8104470:	4313      	orrs	r3, r2
 8104472:	d039      	beq.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8104474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810447a:	2b03      	cmp	r3, #3
 810447c:	d81c      	bhi.n	81044b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810447e:	a201      	add	r2, pc, #4	@ (adr r2, 8104484 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8104480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104484:	081044c1 	.word	0x081044c1
 8104488:	08104495 	.word	0x08104495
 810448c:	081044a3 	.word	0x081044a3
 8104490:	081044c1 	.word	0x081044c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104494:	4b68      	ldr	r3, [pc, #416]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104498:	4a67      	ldr	r2, [pc, #412]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810449a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810449e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81044a0:	e00f      	b.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044a6:	3308      	adds	r3, #8
 81044a8:	2102      	movs	r1, #2
 81044aa:	4618      	mov	r0, r3
 81044ac:	f001 ffe8 	bl	8106480 <RCCEx_PLL2_Config>
 81044b0:	4603      	mov	r3, r0
 81044b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81044b6:	e004      	b.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81044b8:	2301      	movs	r3, #1
 81044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81044be:	e000      	b.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81044c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81044c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d10a      	bne.n	81044e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81044ca:	4b5b      	ldr	r3, [pc, #364]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81044cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81044ce:	f023 0103 	bic.w	r1, r3, #3
 81044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81044d8:	4a57      	ldr	r2, [pc, #348]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81044da:	430b      	orrs	r3, r1
 81044dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81044de:	e003      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81044e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81044f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81044f8:	2300      	movs	r3, #0
 81044fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81044fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8104502:	460b      	mov	r3, r1
 8104504:	4313      	orrs	r3, r2
 8104506:	f000 809f 	beq.w	8104648 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810450a:	4b4c      	ldr	r3, [pc, #304]	@ (810463c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	4a4b      	ldr	r2, [pc, #300]	@ (810463c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8104510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104514:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104516:	f7fc fd8d 	bl	8101034 <HAL_GetTick>
 810451a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810451e:	e00b      	b.n	8104538 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104520:	f7fc fd88 	bl	8101034 <HAL_GetTick>
 8104524:	4602      	mov	r2, r0
 8104526:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810452a:	1ad3      	subs	r3, r2, r3
 810452c:	2b64      	cmp	r3, #100	@ 0x64
 810452e:	d903      	bls.n	8104538 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8104530:	2303      	movs	r3, #3
 8104532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104536:	e005      	b.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104538:	4b40      	ldr	r3, [pc, #256]	@ (810463c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104540:	2b00      	cmp	r3, #0
 8104542:	d0ed      	beq.n	8104520 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8104544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104548:	2b00      	cmp	r3, #0
 810454a:	d179      	bne.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810454c:	4b3a      	ldr	r3, [pc, #232]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810454e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8104550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104554:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104558:	4053      	eors	r3, r2
 810455a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810455e:	2b00      	cmp	r3, #0
 8104560:	d015      	beq.n	810458e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104562:	4b35      	ldr	r3, [pc, #212]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810456a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810456e:	4b32      	ldr	r3, [pc, #200]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104572:	4a31      	ldr	r2, [pc, #196]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8104578:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810457a:	4b2f      	ldr	r3, [pc, #188]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810457e:	4a2e      	ldr	r2, [pc, #184]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8104584:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104586:	4a2c      	ldr	r2, [pc, #176]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810458c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104592:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810459a:	d118      	bne.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810459c:	f7fc fd4a 	bl	8101034 <HAL_GetTick>
 81045a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81045a4:	e00d      	b.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81045a6:	f7fc fd45 	bl	8101034 <HAL_GetTick>
 81045aa:	4602      	mov	r2, r0
 81045ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81045b0:	1ad2      	subs	r2, r2, r3
 81045b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 81045b6:	429a      	cmp	r2, r3
 81045b8:	d903      	bls.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81045ba:	2303      	movs	r3, #3
 81045bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81045c0:	e005      	b.n	81045ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81045c2:	4b1d      	ldr	r3, [pc, #116]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81045c6:	f003 0302 	and.w	r3, r3, #2
 81045ca:	2b00      	cmp	r3, #0
 81045cc:	d0eb      	beq.n	81045a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81045d2:	2b00      	cmp	r3, #0
 81045d4:	d12b      	bne.n	810462e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81045de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81045e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81045e6:	d110      	bne.n	810460a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81045e8:	4b13      	ldr	r3, [pc, #76]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81045ea:	691b      	ldr	r3, [r3, #16]
 81045ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81045f8:	091b      	lsrs	r3, r3, #4
 81045fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81045fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8104602:	4a0d      	ldr	r2, [pc, #52]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104604:	430b      	orrs	r3, r1
 8104606:	6113      	str	r3, [r2, #16]
 8104608:	e005      	b.n	8104616 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810460a:	4b0b      	ldr	r3, [pc, #44]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810460c:	691b      	ldr	r3, [r3, #16]
 810460e:	4a0a      	ldr	r2, [pc, #40]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104610:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8104614:	6113      	str	r3, [r2, #16]
 8104616:	4b08      	ldr	r3, [pc, #32]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104618:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810461a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810461e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104626:	4a04      	ldr	r2, [pc, #16]	@ (8104638 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104628:	430b      	orrs	r3, r1
 810462a:	6713      	str	r3, [r2, #112]	@ 0x70
 810462c:	e00c      	b.n	8104648 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8104636:	e007      	b.n	8104648 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8104638:	58024400 	.word	0x58024400
 810463c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104650:	f002 0301 	and.w	r3, r2, #1
 8104654:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8104658:	2300      	movs	r3, #0
 810465a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810465e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8104662:	460b      	mov	r3, r1
 8104664:	4313      	orrs	r3, r2
 8104666:	f000 8089 	beq.w	810477c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810466e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104670:	2b28      	cmp	r3, #40	@ 0x28
 8104672:	d86b      	bhi.n	810474c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8104674:	a201      	add	r2, pc, #4	@ (adr r2, 810467c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8104676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810467a:	bf00      	nop
 810467c:	08104755 	.word	0x08104755
 8104680:	0810474d 	.word	0x0810474d
 8104684:	0810474d 	.word	0x0810474d
 8104688:	0810474d 	.word	0x0810474d
 810468c:	0810474d 	.word	0x0810474d
 8104690:	0810474d 	.word	0x0810474d
 8104694:	0810474d 	.word	0x0810474d
 8104698:	0810474d 	.word	0x0810474d
 810469c:	08104721 	.word	0x08104721
 81046a0:	0810474d 	.word	0x0810474d
 81046a4:	0810474d 	.word	0x0810474d
 81046a8:	0810474d 	.word	0x0810474d
 81046ac:	0810474d 	.word	0x0810474d
 81046b0:	0810474d 	.word	0x0810474d
 81046b4:	0810474d 	.word	0x0810474d
 81046b8:	0810474d 	.word	0x0810474d
 81046bc:	08104737 	.word	0x08104737
 81046c0:	0810474d 	.word	0x0810474d
 81046c4:	0810474d 	.word	0x0810474d
 81046c8:	0810474d 	.word	0x0810474d
 81046cc:	0810474d 	.word	0x0810474d
 81046d0:	0810474d 	.word	0x0810474d
 81046d4:	0810474d 	.word	0x0810474d
 81046d8:	0810474d 	.word	0x0810474d
 81046dc:	08104755 	.word	0x08104755
 81046e0:	0810474d 	.word	0x0810474d
 81046e4:	0810474d 	.word	0x0810474d
 81046e8:	0810474d 	.word	0x0810474d
 81046ec:	0810474d 	.word	0x0810474d
 81046f0:	0810474d 	.word	0x0810474d
 81046f4:	0810474d 	.word	0x0810474d
 81046f8:	0810474d 	.word	0x0810474d
 81046fc:	08104755 	.word	0x08104755
 8104700:	0810474d 	.word	0x0810474d
 8104704:	0810474d 	.word	0x0810474d
 8104708:	0810474d 	.word	0x0810474d
 810470c:	0810474d 	.word	0x0810474d
 8104710:	0810474d 	.word	0x0810474d
 8104714:	0810474d 	.word	0x0810474d
 8104718:	0810474d 	.word	0x0810474d
 810471c:	08104755 	.word	0x08104755
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104724:	3308      	adds	r3, #8
 8104726:	2101      	movs	r1, #1
 8104728:	4618      	mov	r0, r3
 810472a:	f001 fea9 	bl	8106480 <RCCEx_PLL2_Config>
 810472e:	4603      	mov	r3, r0
 8104730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104734:	e00f      	b.n	8104756 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810473a:	3328      	adds	r3, #40	@ 0x28
 810473c:	2101      	movs	r1, #1
 810473e:	4618      	mov	r0, r3
 8104740:	f001 ff50 	bl	81065e4 <RCCEx_PLL3_Config>
 8104744:	4603      	mov	r3, r0
 8104746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810474a:	e004      	b.n	8104756 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810474c:	2301      	movs	r3, #1
 810474e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104752:	e000      	b.n	8104756 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8104754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810475a:	2b00      	cmp	r3, #0
 810475c:	d10a      	bne.n	8104774 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810475e:	4bbf      	ldr	r3, [pc, #764]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104762:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8104766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810476a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810476c:	4abb      	ldr	r2, [pc, #748]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810476e:	430b      	orrs	r3, r1
 8104770:	6553      	str	r3, [r2, #84]	@ 0x54
 8104772:	e003      	b.n	810477c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104784:	f002 0302 	and.w	r3, r2, #2
 8104788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810478c:	2300      	movs	r3, #0
 810478e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8104792:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8104796:	460b      	mov	r3, r1
 8104798:	4313      	orrs	r3, r2
 810479a:	d041      	beq.n	8104820 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81047a2:	2b05      	cmp	r3, #5
 81047a4:	d824      	bhi.n	81047f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81047a6:	a201      	add	r2, pc, #4	@ (adr r2, 81047ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81047ac:	081047f9 	.word	0x081047f9
 81047b0:	081047c5 	.word	0x081047c5
 81047b4:	081047db 	.word	0x081047db
 81047b8:	081047f9 	.word	0x081047f9
 81047bc:	081047f9 	.word	0x081047f9
 81047c0:	081047f9 	.word	0x081047f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047c8:	3308      	adds	r3, #8
 81047ca:	2101      	movs	r1, #1
 81047cc:	4618      	mov	r0, r3
 81047ce:	f001 fe57 	bl	8106480 <RCCEx_PLL2_Config>
 81047d2:	4603      	mov	r3, r0
 81047d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81047d8:	e00f      	b.n	81047fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047de:	3328      	adds	r3, #40	@ 0x28
 81047e0:	2101      	movs	r1, #1
 81047e2:	4618      	mov	r0, r3
 81047e4:	f001 fefe 	bl	81065e4 <RCCEx_PLL3_Config>
 81047e8:	4603      	mov	r3, r0
 81047ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81047ee:	e004      	b.n	81047fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047f0:	2301      	movs	r3, #1
 81047f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81047f6:	e000      	b.n	81047fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81047f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81047fe:	2b00      	cmp	r3, #0
 8104800:	d10a      	bne.n	8104818 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104802:	4b96      	ldr	r3, [pc, #600]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104806:	f023 0107 	bic.w	r1, r3, #7
 810480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810480e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104810:	4a92      	ldr	r2, [pc, #584]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104812:	430b      	orrs	r3, r1
 8104814:	6553      	str	r3, [r2, #84]	@ 0x54
 8104816:	e003      	b.n	8104820 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810481c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104828:	f002 0304 	and.w	r3, r2, #4
 810482c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8104830:	2300      	movs	r3, #0
 8104832:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8104836:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810483a:	460b      	mov	r3, r1
 810483c:	4313      	orrs	r3, r2
 810483e:	d044      	beq.n	81048ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104848:	2b05      	cmp	r3, #5
 810484a:	d825      	bhi.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810484c:	a201      	add	r2, pc, #4	@ (adr r2, 8104854 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104852:	bf00      	nop
 8104854:	081048a1 	.word	0x081048a1
 8104858:	0810486d 	.word	0x0810486d
 810485c:	08104883 	.word	0x08104883
 8104860:	081048a1 	.word	0x081048a1
 8104864:	081048a1 	.word	0x081048a1
 8104868:	081048a1 	.word	0x081048a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104870:	3308      	adds	r3, #8
 8104872:	2101      	movs	r1, #1
 8104874:	4618      	mov	r0, r3
 8104876:	f001 fe03 	bl	8106480 <RCCEx_PLL2_Config>
 810487a:	4603      	mov	r3, r0
 810487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104880:	e00f      	b.n	81048a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104886:	3328      	adds	r3, #40	@ 0x28
 8104888:	2101      	movs	r1, #1
 810488a:	4618      	mov	r0, r3
 810488c:	f001 feaa 	bl	81065e4 <RCCEx_PLL3_Config>
 8104890:	4603      	mov	r3, r0
 8104892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104896:	e004      	b.n	81048a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104898:	2301      	movs	r3, #1
 810489a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810489e:	e000      	b.n	81048a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81048a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81048a6:	2b00      	cmp	r3, #0
 81048a8:	d10b      	bne.n	81048c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81048aa:	4b6c      	ldr	r3, [pc, #432]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81048ae:	f023 0107 	bic.w	r1, r3, #7
 81048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81048ba:	4a68      	ldr	r2, [pc, #416]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81048bc:	430b      	orrs	r3, r1
 81048be:	6593      	str	r3, [r2, #88]	@ 0x58
 81048c0:	e003      	b.n	81048ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81048c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048d2:	f002 0320 	and.w	r3, r2, #32
 81048d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81048da:	2300      	movs	r3, #0
 81048dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81048e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81048e4:	460b      	mov	r3, r1
 81048e6:	4313      	orrs	r3, r2
 81048e8:	d055      	beq.n	8104996 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81048f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81048f6:	d033      	beq.n	8104960 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81048f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81048fc:	d82c      	bhi.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104902:	d02f      	beq.n	8104964 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104908:	d826      	bhi.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810490a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810490e:	d02b      	beq.n	8104968 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8104910:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104914:	d820      	bhi.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810491a:	d012      	beq.n	8104942 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810491c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104920:	d81a      	bhi.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104922:	2b00      	cmp	r3, #0
 8104924:	d022      	beq.n	810496c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8104926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810492a:	d115      	bne.n	8104958 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104930:	3308      	adds	r3, #8
 8104932:	2100      	movs	r1, #0
 8104934:	4618      	mov	r0, r3
 8104936:	f001 fda3 	bl	8106480 <RCCEx_PLL2_Config>
 810493a:	4603      	mov	r3, r0
 810493c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104940:	e015      	b.n	810496e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104946:	3328      	adds	r3, #40	@ 0x28
 8104948:	2102      	movs	r1, #2
 810494a:	4618      	mov	r0, r3
 810494c:	f001 fe4a 	bl	81065e4 <RCCEx_PLL3_Config>
 8104950:	4603      	mov	r3, r0
 8104952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104956:	e00a      	b.n	810496e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104958:	2301      	movs	r3, #1
 810495a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810495e:	e006      	b.n	810496e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104960:	bf00      	nop
 8104962:	e004      	b.n	810496e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104964:	bf00      	nop
 8104966:	e002      	b.n	810496e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104968:	bf00      	nop
 810496a:	e000      	b.n	810496e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810496c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810496e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104972:	2b00      	cmp	r3, #0
 8104974:	d10b      	bne.n	810498e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104976:	4b39      	ldr	r3, [pc, #228]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810497a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104986:	4a35      	ldr	r2, [pc, #212]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104988:	430b      	orrs	r3, r1
 810498a:	6553      	str	r3, [r2, #84]	@ 0x54
 810498c:	e003      	b.n	8104996 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810498e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810499e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81049a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81049a6:	2300      	movs	r3, #0
 81049a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81049ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81049b0:	460b      	mov	r3, r1
 81049b2:	4313      	orrs	r3, r2
 81049b4:	d058      	beq.n	8104a68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81049b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81049be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81049c2:	d033      	beq.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81049c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81049c8:	d82c      	bhi.n	8104a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81049ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81049ce:	d02f      	beq.n	8104a30 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81049d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81049d4:	d826      	bhi.n	8104a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81049d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81049da:	d02b      	beq.n	8104a34 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81049dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81049e0:	d820      	bhi.n	8104a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81049e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81049e6:	d012      	beq.n	8104a0e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81049e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81049ec:	d81a      	bhi.n	8104a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81049ee:	2b00      	cmp	r3, #0
 81049f0:	d022      	beq.n	8104a38 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81049f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81049f6:	d115      	bne.n	8104a24 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049fc:	3308      	adds	r3, #8
 81049fe:	2100      	movs	r1, #0
 8104a00:	4618      	mov	r0, r3
 8104a02:	f001 fd3d 	bl	8106480 <RCCEx_PLL2_Config>
 8104a06:	4603      	mov	r3, r0
 8104a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104a0c:	e015      	b.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a12:	3328      	adds	r3, #40	@ 0x28
 8104a14:	2102      	movs	r1, #2
 8104a16:	4618      	mov	r0, r3
 8104a18:	f001 fde4 	bl	81065e4 <RCCEx_PLL3_Config>
 8104a1c:	4603      	mov	r3, r0
 8104a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104a22:	e00a      	b.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a24:	2301      	movs	r3, #1
 8104a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104a2a:	e006      	b.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104a2c:	bf00      	nop
 8104a2e:	e004      	b.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104a30:	bf00      	nop
 8104a32:	e002      	b.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104a34:	bf00      	nop
 8104a36:	e000      	b.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a3e:	2b00      	cmp	r3, #0
 8104a40:	d10e      	bne.n	8104a60 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104a42:	4b06      	ldr	r3, [pc, #24]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8104a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104a52:	4a02      	ldr	r2, [pc, #8]	@ (8104a5c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104a54:	430b      	orrs	r3, r1
 8104a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8104a58:	e006      	b.n	8104a68 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8104a5a:	bf00      	nop
 8104a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8104a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8104a78:	2300      	movs	r3, #0
 8104a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8104a7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8104a82:	460b      	mov	r3, r1
 8104a84:	4313      	orrs	r3, r2
 8104a86:	d055      	beq.n	8104b34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104a90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104a94:	d033      	beq.n	8104afe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8104a96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104a9a:	d82c      	bhi.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104aa0:	d02f      	beq.n	8104b02 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8104aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104aa6:	d826      	bhi.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104aa8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104aac:	d02b      	beq.n	8104b06 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8104aae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104ab2:	d820      	bhi.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104ab8:	d012      	beq.n	8104ae0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8104aba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104abe:	d81a      	bhi.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104ac0:	2b00      	cmp	r3, #0
 8104ac2:	d022      	beq.n	8104b0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8104ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104ac8:	d115      	bne.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ace:	3308      	adds	r3, #8
 8104ad0:	2100      	movs	r1, #0
 8104ad2:	4618      	mov	r0, r3
 8104ad4:	f001 fcd4 	bl	8106480 <RCCEx_PLL2_Config>
 8104ad8:	4603      	mov	r3, r0
 8104ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104ade:	e015      	b.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ae4:	3328      	adds	r3, #40	@ 0x28
 8104ae6:	2102      	movs	r1, #2
 8104ae8:	4618      	mov	r0, r3
 8104aea:	f001 fd7b 	bl	81065e4 <RCCEx_PLL3_Config>
 8104aee:	4603      	mov	r3, r0
 8104af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104af4:	e00a      	b.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104af6:	2301      	movs	r3, #1
 8104af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104afc:	e006      	b.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104afe:	bf00      	nop
 8104b00:	e004      	b.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104b02:	bf00      	nop
 8104b04:	e002      	b.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104b06:	bf00      	nop
 8104b08:	e000      	b.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b10:	2b00      	cmp	r3, #0
 8104b12:	d10b      	bne.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104b14:	4ba1      	ldr	r3, [pc, #644]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8104b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104b24:	4a9d      	ldr	r2, [pc, #628]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b26:	430b      	orrs	r3, r1
 8104b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8104b2a:	e003      	b.n	8104b34 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b3c:	f002 0308 	and.w	r3, r2, #8
 8104b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8104b44:	2300      	movs	r3, #0
 8104b46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8104b4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8104b4e:	460b      	mov	r3, r1
 8104b50:	4313      	orrs	r3, r2
 8104b52:	d01e      	beq.n	8104b92 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104b60:	d10c      	bne.n	8104b7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b66:	3328      	adds	r3, #40	@ 0x28
 8104b68:	2102      	movs	r1, #2
 8104b6a:	4618      	mov	r0, r3
 8104b6c:	f001 fd3a 	bl	81065e4 <RCCEx_PLL3_Config>
 8104b70:	4603      	mov	r3, r0
 8104b72:	2b00      	cmp	r3, #0
 8104b74:	d002      	beq.n	8104b7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8104b76:	2301      	movs	r3, #1
 8104b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104b7c:	4b87      	ldr	r3, [pc, #540]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104b80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104b8c:	4a83      	ldr	r2, [pc, #524]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104b8e:	430b      	orrs	r3, r1
 8104b90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b9a:	f002 0310 	and.w	r3, r2, #16
 8104b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8104ba2:	2300      	movs	r3, #0
 8104ba4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8104ba8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8104bac:	460b      	mov	r3, r1
 8104bae:	4313      	orrs	r3, r2
 8104bb0:	d01e      	beq.n	8104bf0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8104bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104bbe:	d10c      	bne.n	8104bda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bc4:	3328      	adds	r3, #40	@ 0x28
 8104bc6:	2102      	movs	r1, #2
 8104bc8:	4618      	mov	r0, r3
 8104bca:	f001 fd0b 	bl	81065e4 <RCCEx_PLL3_Config>
 8104bce:	4603      	mov	r3, r0
 8104bd0:	2b00      	cmp	r3, #0
 8104bd2:	d002      	beq.n	8104bda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8104bd4:	2301      	movs	r3, #1
 8104bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104bda:	4b70      	ldr	r3, [pc, #448]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104bde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8104bea:	4a6c      	ldr	r2, [pc, #432]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104bec:	430b      	orrs	r3, r1
 8104bee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bf8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8104bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8104c00:	2300      	movs	r3, #0
 8104c02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8104c06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8104c0a:	460b      	mov	r3, r1
 8104c0c:	4313      	orrs	r3, r2
 8104c0e:	d03e      	beq.n	8104c8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8104c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104c18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c1c:	d022      	beq.n	8104c64 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8104c1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104c22:	d81b      	bhi.n	8104c5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8104c24:	2b00      	cmp	r3, #0
 8104c26:	d003      	beq.n	8104c30 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8104c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104c2c:	d00b      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8104c2e:	e015      	b.n	8104c5c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c34:	3308      	adds	r3, #8
 8104c36:	2100      	movs	r1, #0
 8104c38:	4618      	mov	r0, r3
 8104c3a:	f001 fc21 	bl	8106480 <RCCEx_PLL2_Config>
 8104c3e:	4603      	mov	r3, r0
 8104c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104c44:	e00f      	b.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c4a:	3328      	adds	r3, #40	@ 0x28
 8104c4c:	2102      	movs	r1, #2
 8104c4e:	4618      	mov	r0, r3
 8104c50:	f001 fcc8 	bl	81065e4 <RCCEx_PLL3_Config>
 8104c54:	4603      	mov	r3, r0
 8104c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104c5a:	e004      	b.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104c5c:	2301      	movs	r3, #1
 8104c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104c62:	e000      	b.n	8104c66 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8104c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c6a:	2b00      	cmp	r3, #0
 8104c6c:	d10b      	bne.n	8104c86 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104c72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8104c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104c7e:	4a47      	ldr	r2, [pc, #284]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104c80:	430b      	orrs	r3, r1
 8104c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8104c84:	e003      	b.n	8104c8e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8104c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8104c9c:	2300      	movs	r3, #0
 8104c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8104ca0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8104ca4:	460b      	mov	r3, r1
 8104ca6:	4313      	orrs	r3, r2
 8104ca8:	d03b      	beq.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104cb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104cb6:	d01f      	beq.n	8104cf8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8104cb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104cbc:	d818      	bhi.n	8104cf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8104cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104cc2:	d003      	beq.n	8104ccc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8104cc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104cc8:	d007      	beq.n	8104cda <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8104cca:	e011      	b.n	8104cf0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ccc:	4b33      	ldr	r3, [pc, #204]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cd0:	4a32      	ldr	r2, [pc, #200]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104cd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8104cd8:	e00f      	b.n	8104cfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cde:	3328      	adds	r3, #40	@ 0x28
 8104ce0:	2101      	movs	r1, #1
 8104ce2:	4618      	mov	r0, r3
 8104ce4:	f001 fc7e 	bl	81065e4 <RCCEx_PLL3_Config>
 8104ce8:	4603      	mov	r3, r0
 8104cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8104cee:	e004      	b.n	8104cfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104cf0:	2301      	movs	r3, #1
 8104cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104cf6:	e000      	b.n	8104cfa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8104cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104cfe:	2b00      	cmp	r3, #0
 8104d00:	d10b      	bne.n	8104d1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104d02:	4b26      	ldr	r3, [pc, #152]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104d06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8104d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104d12:	4a22      	ldr	r2, [pc, #136]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d14:	430b      	orrs	r3, r1
 8104d16:	6553      	str	r3, [r2, #84]	@ 0x54
 8104d18:	e003      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8104d2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8104d30:	2300      	movs	r3, #0
 8104d32:	677b      	str	r3, [r7, #116]	@ 0x74
 8104d34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8104d38:	460b      	mov	r3, r1
 8104d3a:	4313      	orrs	r3, r2
 8104d3c:	d034      	beq.n	8104da8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104d44:	2b00      	cmp	r3, #0
 8104d46:	d003      	beq.n	8104d50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8104d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104d4c:	d007      	beq.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8104d4e:	e011      	b.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d50:	4b12      	ldr	r3, [pc, #72]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d54:	4a11      	ldr	r2, [pc, #68]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104d5c:	e00e      	b.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d62:	3308      	adds	r3, #8
 8104d64:	2102      	movs	r1, #2
 8104d66:	4618      	mov	r0, r3
 8104d68:	f001 fb8a 	bl	8106480 <RCCEx_PLL2_Config>
 8104d6c:	4603      	mov	r3, r0
 8104d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104d72:	e003      	b.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8104d74:	2301      	movs	r3, #1
 8104d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d80:	2b00      	cmp	r3, #0
 8104d82:	d10d      	bne.n	8104da0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104d84:	4b05      	ldr	r3, [pc, #20]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104d88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104d92:	4a02      	ldr	r2, [pc, #8]	@ (8104d9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104d94:	430b      	orrs	r3, r1
 8104d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104d98:	e006      	b.n	8104da8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8104d9a:	bf00      	nop
 8104d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104db0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104db6:	2300      	movs	r3, #0
 8104db8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8104dba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8104dbe:	460b      	mov	r3, r1
 8104dc0:	4313      	orrs	r3, r2
 8104dc2:	d00c      	beq.n	8104dde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dc8:	3328      	adds	r3, #40	@ 0x28
 8104dca:	2102      	movs	r1, #2
 8104dcc:	4618      	mov	r0, r3
 8104dce:	f001 fc09 	bl	81065e4 <RCCEx_PLL3_Config>
 8104dd2:	4603      	mov	r3, r0
 8104dd4:	2b00      	cmp	r3, #0
 8104dd6:	d002      	beq.n	8104dde <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8104dd8:	2301      	movs	r3, #1
 8104dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104de6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8104dea:	663b      	str	r3, [r7, #96]	@ 0x60
 8104dec:	2300      	movs	r3, #0
 8104dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8104df0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8104df4:	460b      	mov	r3, r1
 8104df6:	4313      	orrs	r3, r2
 8104df8:	d038      	beq.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8104dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104e06:	d018      	beq.n	8104e3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8104e08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104e0c:	d811      	bhi.n	8104e32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104e12:	d014      	beq.n	8104e3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104e18:	d80b      	bhi.n	8104e32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104e1a:	2b00      	cmp	r3, #0
 8104e1c:	d011      	beq.n	8104e42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8104e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104e22:	d106      	bne.n	8104e32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e24:	4bc3      	ldr	r3, [pc, #780]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e28:	4ac2      	ldr	r2, [pc, #776]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104e30:	e008      	b.n	8104e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e32:	2301      	movs	r3, #1
 8104e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104e38:	e004      	b.n	8104e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104e3a:	bf00      	nop
 8104e3c:	e002      	b.n	8104e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104e3e:	bf00      	nop
 8104e40:	e000      	b.n	8104e44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	d10b      	bne.n	8104e64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104e4c:	4bb9      	ldr	r3, [pc, #740]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104e50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104e5c:	4ab5      	ldr	r2, [pc, #724]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e5e:	430b      	orrs	r3, r1
 8104e60:	6553      	str	r3, [r2, #84]	@ 0x54
 8104e62:	e003      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8104e78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8104e7a:	2300      	movs	r3, #0
 8104e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8104e7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104e82:	460b      	mov	r3, r1
 8104e84:	4313      	orrs	r3, r2
 8104e86:	d009      	beq.n	8104e9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104e88:	4baa      	ldr	r3, [pc, #680]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104e96:	4aa7      	ldr	r2, [pc, #668]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104e98:	430b      	orrs	r3, r1
 8104e9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ea4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8104ea8:	653b      	str	r3, [r7, #80]	@ 0x50
 8104eaa:	2300      	movs	r3, #0
 8104eac:	657b      	str	r3, [r7, #84]	@ 0x54
 8104eae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104eb2:	460b      	mov	r3, r1
 8104eb4:	4313      	orrs	r3, r2
 8104eb6:	d00a      	beq.n	8104ece <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104eb8:	4b9e      	ldr	r3, [pc, #632]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104eba:	691b      	ldr	r3, [r3, #16]
 8104ebc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8104ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ec4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8104ec8:	4a9a      	ldr	r2, [pc, #616]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104eca:	430b      	orrs	r3, r1
 8104ecc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ed6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8104eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104edc:	2300      	movs	r3, #0
 8104ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104ee0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8104ee4:	460b      	mov	r3, r1
 8104ee6:	4313      	orrs	r3, r2
 8104ee8:	d009      	beq.n	8104efe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104eea:	4b92      	ldr	r3, [pc, #584]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104eee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8104ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104ef8:	4a8e      	ldr	r2, [pc, #568]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104efa:	430b      	orrs	r3, r1
 8104efc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8104f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8104f0c:	2300      	movs	r3, #0
 8104f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8104f10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8104f14:	460b      	mov	r3, r1
 8104f16:	4313      	orrs	r3, r2
 8104f18:	d00e      	beq.n	8104f38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104f1a:	4b86      	ldr	r3, [pc, #536]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f1c:	691b      	ldr	r3, [r3, #16]
 8104f1e:	4a85      	ldr	r2, [pc, #532]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8104f24:	6113      	str	r3, [r2, #16]
 8104f26:	4b83      	ldr	r3, [pc, #524]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f28:	6919      	ldr	r1, [r3, #16]
 8104f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104f32:	4a80      	ldr	r2, [pc, #512]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f34:	430b      	orrs	r3, r1
 8104f36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8104f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8104f46:	2300      	movs	r3, #0
 8104f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104f4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8104f4e:	460b      	mov	r3, r1
 8104f50:	4313      	orrs	r3, r2
 8104f52:	d009      	beq.n	8104f68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104f54:	4b77      	ldr	r3, [pc, #476]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104f58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f62:	4a74      	ldr	r2, [pc, #464]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f64:	430b      	orrs	r3, r1
 8104f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8104f74:	633b      	str	r3, [r7, #48]	@ 0x30
 8104f76:	2300      	movs	r3, #0
 8104f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8104f7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8104f7e:	460b      	mov	r3, r1
 8104f80:	4313      	orrs	r3, r2
 8104f82:	d00a      	beq.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104f84:	4b6b      	ldr	r3, [pc, #428]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104f88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104f94:	4a67      	ldr	r2, [pc, #412]	@ (8105134 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104f96:	430b      	orrs	r3, r1
 8104f98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fa2:	2100      	movs	r1, #0
 8104fa4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8104fa6:	f003 0301 	and.w	r3, r3, #1
 8104faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104fac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104fb0:	460b      	mov	r3, r1
 8104fb2:	4313      	orrs	r3, r2
 8104fb4:	d011      	beq.n	8104fda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fba:	3308      	adds	r3, #8
 8104fbc:	2100      	movs	r1, #0
 8104fbe:	4618      	mov	r0, r3
 8104fc0:	f001 fa5e 	bl	8106480 <RCCEx_PLL2_Config>
 8104fc4:	4603      	mov	r3, r0
 8104fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104fce:	2b00      	cmp	r3, #0
 8104fd0:	d003      	beq.n	8104fda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fe2:	2100      	movs	r1, #0
 8104fe4:	6239      	str	r1, [r7, #32]
 8104fe6:	f003 0302 	and.w	r3, r3, #2
 8104fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8104fec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104ff0:	460b      	mov	r3, r1
 8104ff2:	4313      	orrs	r3, r2
 8104ff4:	d011      	beq.n	810501a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ffa:	3308      	adds	r3, #8
 8104ffc:	2101      	movs	r1, #1
 8104ffe:	4618      	mov	r0, r3
 8105000:	f001 fa3e 	bl	8106480 <RCCEx_PLL2_Config>
 8105004:	4603      	mov	r3, r0
 8105006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810500e:	2b00      	cmp	r3, #0
 8105010:	d003      	beq.n	810501a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105022:	2100      	movs	r1, #0
 8105024:	61b9      	str	r1, [r7, #24]
 8105026:	f003 0304 	and.w	r3, r3, #4
 810502a:	61fb      	str	r3, [r7, #28]
 810502c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105030:	460b      	mov	r3, r1
 8105032:	4313      	orrs	r3, r2
 8105034:	d011      	beq.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810503a:	3308      	adds	r3, #8
 810503c:	2102      	movs	r1, #2
 810503e:	4618      	mov	r0, r3
 8105040:	f001 fa1e 	bl	8106480 <RCCEx_PLL2_Config>
 8105044:	4603      	mov	r3, r0
 8105046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810504a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810504e:	2b00      	cmp	r3, #0
 8105050:	d003      	beq.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105062:	2100      	movs	r1, #0
 8105064:	6139      	str	r1, [r7, #16]
 8105066:	f003 0308 	and.w	r3, r3, #8
 810506a:	617b      	str	r3, [r7, #20]
 810506c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8105070:	460b      	mov	r3, r1
 8105072:	4313      	orrs	r3, r2
 8105074:	d011      	beq.n	810509a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810507a:	3328      	adds	r3, #40	@ 0x28
 810507c:	2100      	movs	r1, #0
 810507e:	4618      	mov	r0, r3
 8105080:	f001 fab0 	bl	81065e4 <RCCEx_PLL3_Config>
 8105084:	4603      	mov	r3, r0
 8105086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 810508a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810508e:	2b00      	cmp	r3, #0
 8105090:	d003      	beq.n	810509a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81050a2:	2100      	movs	r1, #0
 81050a4:	60b9      	str	r1, [r7, #8]
 81050a6:	f003 0310 	and.w	r3, r3, #16
 81050aa:	60fb      	str	r3, [r7, #12]
 81050ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81050b0:	460b      	mov	r3, r1
 81050b2:	4313      	orrs	r3, r2
 81050b4:	d011      	beq.n	81050da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050ba:	3328      	adds	r3, #40	@ 0x28
 81050bc:	2101      	movs	r1, #1
 81050be:	4618      	mov	r0, r3
 81050c0:	f001 fa90 	bl	81065e4 <RCCEx_PLL3_Config>
 81050c4:	4603      	mov	r3, r0
 81050c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81050ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81050ce:	2b00      	cmp	r3, #0
 81050d0:	d003      	beq.n	81050da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81050d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81050e2:	2100      	movs	r1, #0
 81050e4:	6039      	str	r1, [r7, #0]
 81050e6:	f003 0320 	and.w	r3, r3, #32
 81050ea:	607b      	str	r3, [r7, #4]
 81050ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 81050f0:	460b      	mov	r3, r1
 81050f2:	4313      	orrs	r3, r2
 81050f4:	d011      	beq.n	810511a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050fa:	3328      	adds	r3, #40	@ 0x28
 81050fc:	2102      	movs	r1, #2
 81050fe:	4618      	mov	r0, r3
 8105100:	f001 fa70 	bl	81065e4 <RCCEx_PLL3_Config>
 8105104:	4603      	mov	r3, r0
 8105106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810510a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810510e:	2b00      	cmp	r3, #0
 8105110:	d003      	beq.n	810511a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810511a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810511e:	2b00      	cmp	r3, #0
 8105120:	d101      	bne.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8105122:	2300      	movs	r3, #0
 8105124:	e000      	b.n	8105128 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105126:	2301      	movs	r3, #1
}
 8105128:	4618      	mov	r0, r3
 810512a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810512e:	46bd      	mov	sp, r7
 8105130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105134:	58024400 	.word	0x58024400

08105138 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8105138:	b580      	push	{r7, lr}
 810513a:	b090      	sub	sp, #64	@ 0x40
 810513c:	af00      	add	r7, sp, #0
 810513e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105146:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810514a:	430b      	orrs	r3, r1
 810514c:	f040 8094 	bne.w	8105278 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8105150:	4b9e      	ldr	r3, [pc, #632]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105154:	f003 0307 	and.w	r3, r3, #7
 8105158:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810515c:	2b04      	cmp	r3, #4
 810515e:	f200 8087 	bhi.w	8105270 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8105162:	a201      	add	r2, pc, #4	@ (adr r2, 8105168 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8105164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105168:	0810517d 	.word	0x0810517d
 810516c:	081051a5 	.word	0x081051a5
 8105170:	081051cd 	.word	0x081051cd
 8105174:	08105269 	.word	0x08105269
 8105178:	081051f5 	.word	0x081051f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810517c:	4b93      	ldr	r3, [pc, #588]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105184:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105188:	d108      	bne.n	810519c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810518a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810518e:	4618      	mov	r0, r3
 8105190:	f001 f810 	bl	81061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105198:	f000 bd45 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810519c:	2300      	movs	r3, #0
 810519e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051a0:	f000 bd41 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81051a4:	4b89      	ldr	r3, [pc, #548]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81051ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81051b0:	d108      	bne.n	81051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81051b2:	f107 0318 	add.w	r3, r7, #24
 81051b6:	4618      	mov	r0, r3
 81051b8:	f000 fd54 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81051bc:	69bb      	ldr	r3, [r7, #24]
 81051be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051c0:	f000 bd31 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051c4:	2300      	movs	r3, #0
 81051c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051c8:	f000 bd2d 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81051cc:	4b7f      	ldr	r3, [pc, #508]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81051d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81051d8:	d108      	bne.n	81051ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81051da:	f107 030c 	add.w	r3, r7, #12
 81051de:	4618      	mov	r0, r3
 81051e0:	f000 fe94 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81051e4:	68fb      	ldr	r3, [r7, #12]
 81051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051e8:	f000 bd1d 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051ec:	2300      	movs	r3, #0
 81051ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81051f0:	f000 bd19 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81051f4:	4b75      	ldr	r3, [pc, #468]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81051f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81051f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81051fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81051fe:	4b73      	ldr	r3, [pc, #460]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	f003 0304 	and.w	r3, r3, #4
 8105206:	2b04      	cmp	r3, #4
 8105208:	d10c      	bne.n	8105224 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810520a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810520c:	2b00      	cmp	r3, #0
 810520e:	d109      	bne.n	8105224 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105210:	4b6e      	ldr	r3, [pc, #440]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	08db      	lsrs	r3, r3, #3
 8105216:	f003 0303 	and.w	r3, r3, #3
 810521a:	4a6d      	ldr	r2, [pc, #436]	@ (81053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810521c:	fa22 f303 	lsr.w	r3, r2, r3
 8105220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105222:	e01f      	b.n	8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105224:	4b69      	ldr	r3, [pc, #420]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105226:	681b      	ldr	r3, [r3, #0]
 8105228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810522c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105230:	d106      	bne.n	8105240 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8105232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105238:	d102      	bne.n	8105240 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810523a:	4b66      	ldr	r3, [pc, #408]	@ (81053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810523c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810523e:	e011      	b.n	8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105240:	4b62      	ldr	r3, [pc, #392]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105242:	681b      	ldr	r3, [r3, #0]
 8105244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810524c:	d106      	bne.n	810525c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810524e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105254:	d102      	bne.n	810525c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105256:	4b60      	ldr	r3, [pc, #384]	@ (81053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8105258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810525a:	e003      	b.n	8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810525c:	2300      	movs	r3, #0
 810525e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105260:	f000 bce1 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105264:	f000 bcdf 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105268:	4b5c      	ldr	r3, [pc, #368]	@ (81053dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810526a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810526c:	f000 bcdb 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105270:	2300      	movs	r3, #0
 8105272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105274:	f000 bcd7 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8105278:	e9d7 2300 	ldrd	r2, r3, [r7]
 810527c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8105280:	430b      	orrs	r3, r1
 8105282:	f040 80ad 	bne.w	81053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8105286:	4b51      	ldr	r3, [pc, #324]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810528a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 810528e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8105290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105296:	d056      	beq.n	8105346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8105298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810529a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810529e:	f200 8090 	bhi.w	81053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81052a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81052a4:	2bc0      	cmp	r3, #192	@ 0xc0
 81052a6:	f000 8088 	beq.w	81053ba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81052ac:	2bc0      	cmp	r3, #192	@ 0xc0
 81052ae:	f200 8088 	bhi.w	81053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81052b4:	2b80      	cmp	r3, #128	@ 0x80
 81052b6:	d032      	beq.n	810531e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81052ba:	2b80      	cmp	r3, #128	@ 0x80
 81052bc:	f200 8081 	bhi.w	81053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81052c2:	2b00      	cmp	r3, #0
 81052c4:	d003      	beq.n	81052ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81052c8:	2b40      	cmp	r3, #64	@ 0x40
 81052ca:	d014      	beq.n	81052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 81052cc:	e079      	b.n	81053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81052ce:	4b3f      	ldr	r3, [pc, #252]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81052d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81052da:	d108      	bne.n	81052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81052dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81052e0:	4618      	mov	r0, r3
 81052e2:	f000 ff67 	bl	81061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81052e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052ea:	f000 bc9c 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052ee:	2300      	movs	r3, #0
 81052f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81052f2:	f000 bc98 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81052f6:	4b35      	ldr	r3, [pc, #212]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81052f8:	681b      	ldr	r3, [r3, #0]
 81052fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81052fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105302:	d108      	bne.n	8105316 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105304:	f107 0318 	add.w	r3, r7, #24
 8105308:	4618      	mov	r0, r3
 810530a:	f000 fcab 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810530e:	69bb      	ldr	r3, [r7, #24]
 8105310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105312:	f000 bc88 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105316:	2300      	movs	r3, #0
 8105318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810531a:	f000 bc84 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810531e:	4b2b      	ldr	r3, [pc, #172]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105320:	681b      	ldr	r3, [r3, #0]
 8105322:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810532a:	d108      	bne.n	810533e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810532c:	f107 030c 	add.w	r3, r7, #12
 8105330:	4618      	mov	r0, r3
 8105332:	f000 fdeb 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105336:	68fb      	ldr	r3, [r7, #12]
 8105338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810533a:	f000 bc74 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810533e:	2300      	movs	r3, #0
 8105340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105342:	f000 bc70 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105346:	4b21      	ldr	r3, [pc, #132]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810534a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810534e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105350:	4b1e      	ldr	r3, [pc, #120]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	f003 0304 	and.w	r3, r3, #4
 8105358:	2b04      	cmp	r3, #4
 810535a:	d10c      	bne.n	8105376 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810535c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810535e:	2b00      	cmp	r3, #0
 8105360:	d109      	bne.n	8105376 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105362:	4b1a      	ldr	r3, [pc, #104]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105364:	681b      	ldr	r3, [r3, #0]
 8105366:	08db      	lsrs	r3, r3, #3
 8105368:	f003 0303 	and.w	r3, r3, #3
 810536c:	4a18      	ldr	r2, [pc, #96]	@ (81053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810536e:	fa22 f303 	lsr.w	r3, r2, r3
 8105372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105374:	e01f      	b.n	81053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105376:	4b15      	ldr	r3, [pc, #84]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810537e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105382:	d106      	bne.n	8105392 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8105384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105386:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810538a:	d102      	bne.n	8105392 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810538c:	4b11      	ldr	r3, [pc, #68]	@ (81053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810538e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105390:	e011      	b.n	81053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105392:	4b0e      	ldr	r3, [pc, #56]	@ (81053cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810539a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810539e:	d106      	bne.n	81053ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81053a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81053a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81053a6:	d102      	bne.n	81053ae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81053a8:	4b0b      	ldr	r3, [pc, #44]	@ (81053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81053ac:	e003      	b.n	81053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81053ae:	2300      	movs	r3, #0
 81053b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81053b2:	f000 bc38 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81053b6:	f000 bc36 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81053ba:	4b08      	ldr	r3, [pc, #32]	@ (81053dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81053bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053be:	f000 bc32 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81053c2:	2300      	movs	r3, #0
 81053c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81053c6:	f000 bc2e 	b.w	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81053ca:	bf00      	nop
 81053cc:	58024400 	.word	0x58024400
 81053d0:	03d09000 	.word	0x03d09000
 81053d4:	003d0900 	.word	0x003d0900
 81053d8:	017d7840 	.word	0x017d7840
 81053dc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81053e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81053e4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 81053e8:	430b      	orrs	r3, r1
 81053ea:	f040 809c 	bne.w	8105526 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 81053ee:	4b9e      	ldr	r3, [pc, #632]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81053f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81053f2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 81053f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81053fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81053fe:	d054      	beq.n	81054aa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8105400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105402:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105406:	f200 808b 	bhi.w	8105520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810540a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810540c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105410:	f000 8083 	beq.w	810551a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8105414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105416:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810541a:	f200 8081 	bhi.w	8105520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810541e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105424:	d02f      	beq.n	8105486 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8105426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810542c:	d878      	bhi.n	8105520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105430:	2b00      	cmp	r3, #0
 8105432:	d004      	beq.n	810543e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8105434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105436:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810543a:	d012      	beq.n	8105462 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810543c:	e070      	b.n	8105520 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810543e:	4b8a      	ldr	r3, [pc, #552]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105440:	681b      	ldr	r3, [r3, #0]
 8105442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810544a:	d107      	bne.n	810545c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810544c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105450:	4618      	mov	r0, r3
 8105452:	f000 feaf 	bl	81061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810545a:	e3e4      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810545c:	2300      	movs	r3, #0
 810545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105460:	e3e1      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105462:	4b81      	ldr	r3, [pc, #516]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810546a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810546e:	d107      	bne.n	8105480 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105470:	f107 0318 	add.w	r3, r7, #24
 8105474:	4618      	mov	r0, r3
 8105476:	f000 fbf5 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810547a:	69bb      	ldr	r3, [r7, #24]
 810547c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810547e:	e3d2      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105480:	2300      	movs	r3, #0
 8105482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105484:	e3cf      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105486:	4b78      	ldr	r3, [pc, #480]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810548e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105492:	d107      	bne.n	81054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105494:	f107 030c 	add.w	r3, r7, #12
 8105498:	4618      	mov	r0, r3
 810549a:	f000 fd37 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810549e:	68fb      	ldr	r3, [r7, #12]
 81054a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054a2:	e3c0      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054a4:	2300      	movs	r3, #0
 81054a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81054a8:	e3bd      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81054aa:	4b6f      	ldr	r3, [pc, #444]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81054ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81054ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81054b2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81054b4:	4b6c      	ldr	r3, [pc, #432]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	f003 0304 	and.w	r3, r3, #4
 81054bc:	2b04      	cmp	r3, #4
 81054be:	d10c      	bne.n	81054da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81054c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81054c2:	2b00      	cmp	r3, #0
 81054c4:	d109      	bne.n	81054da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054c6:	4b68      	ldr	r3, [pc, #416]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	08db      	lsrs	r3, r3, #3
 81054cc:	f003 0303 	and.w	r3, r3, #3
 81054d0:	4a66      	ldr	r2, [pc, #408]	@ (810566c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81054d2:	fa22 f303 	lsr.w	r3, r2, r3
 81054d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81054d8:	e01e      	b.n	8105518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81054da:	4b63      	ldr	r3, [pc, #396]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81054e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81054e6:	d106      	bne.n	81054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 81054e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81054ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81054ee:	d102      	bne.n	81054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81054f0:	4b5f      	ldr	r3, [pc, #380]	@ (8105670 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81054f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81054f4:	e010      	b.n	8105518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81054f6:	4b5c      	ldr	r3, [pc, #368]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81054f8:	681b      	ldr	r3, [r3, #0]
 81054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81054fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105502:	d106      	bne.n	8105512 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8105504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810550a:	d102      	bne.n	8105512 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810550c:	4b59      	ldr	r3, [pc, #356]	@ (8105674 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810550e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105510:	e002      	b.n	8105518 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105512:	2300      	movs	r3, #0
 8105514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8105516:	e386      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105518:	e385      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810551a:	4b57      	ldr	r3, [pc, #348]	@ (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810551c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810551e:	e382      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105520:	2300      	movs	r3, #0
 8105522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105524:	e37f      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8105526:	e9d7 2300 	ldrd	r2, r3, [r7]
 810552a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810552e:	430b      	orrs	r3, r1
 8105530:	f040 80a7 	bne.w	8105682 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8105534:	4b4c      	ldr	r3, [pc, #304]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105538:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810553c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105540:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105544:	d055      	beq.n	81055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8105546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810554c:	f200 8096 	bhi.w	810567c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105552:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105556:	f000 8084 	beq.w	8105662 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810555c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105560:	f200 808c 	bhi.w	810567c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105566:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810556a:	d030      	beq.n	81055ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810556e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105572:	f200 8083 	bhi.w	810567c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105578:	2b00      	cmp	r3, #0
 810557a:	d004      	beq.n	8105586 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810557e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105582:	d012      	beq.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8105584:	e07a      	b.n	810567c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105586:	4b38      	ldr	r3, [pc, #224]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810558e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105592:	d107      	bne.n	81055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105598:	4618      	mov	r0, r3
 810559a:	f000 fe0b 	bl	81061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81055a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81055a2:	e340      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81055a4:	2300      	movs	r3, #0
 81055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055a8:	e33d      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81055aa:	4b2f      	ldr	r3, [pc, #188]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81055ac:	681b      	ldr	r3, [r3, #0]
 81055ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81055b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81055b6:	d107      	bne.n	81055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81055b8:	f107 0318 	add.w	r3, r7, #24
 81055bc:	4618      	mov	r0, r3
 81055be:	f000 fb51 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81055c2:	69bb      	ldr	r3, [r7, #24]
 81055c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81055c6:	e32e      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81055c8:	2300      	movs	r3, #0
 81055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055cc:	e32b      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81055ce:	4b26      	ldr	r3, [pc, #152]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81055d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81055da:	d107      	bne.n	81055ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81055dc:	f107 030c 	add.w	r3, r7, #12
 81055e0:	4618      	mov	r0, r3
 81055e2:	f000 fc93 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81055e6:	68fb      	ldr	r3, [r7, #12]
 81055e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81055ea:	e31c      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81055ec:	2300      	movs	r3, #0
 81055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81055f0:	e319      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81055f2:	4b1d      	ldr	r3, [pc, #116]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81055f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81055f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81055fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81055fc:	4b1a      	ldr	r3, [pc, #104]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	f003 0304 	and.w	r3, r3, #4
 8105604:	2b04      	cmp	r3, #4
 8105606:	d10c      	bne.n	8105622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8105608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810560a:	2b00      	cmp	r3, #0
 810560c:	d109      	bne.n	8105622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810560e:	4b16      	ldr	r3, [pc, #88]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105610:	681b      	ldr	r3, [r3, #0]
 8105612:	08db      	lsrs	r3, r3, #3
 8105614:	f003 0303 	and.w	r3, r3, #3
 8105618:	4a14      	ldr	r2, [pc, #80]	@ (810566c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810561a:	fa22 f303 	lsr.w	r3, r2, r3
 810561e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105620:	e01e      	b.n	8105660 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105622:	4b11      	ldr	r3, [pc, #68]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810562a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810562e:	d106      	bne.n	810563e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8105630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105636:	d102      	bne.n	810563e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105638:	4b0d      	ldr	r3, [pc, #52]	@ (8105670 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810563c:	e010      	b.n	8105660 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810563e:	4b0a      	ldr	r3, [pc, #40]	@ (8105668 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105640:	681b      	ldr	r3, [r3, #0]
 8105642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810564a:	d106      	bne.n	810565a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810564c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810564e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105652:	d102      	bne.n	810565a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105654:	4b07      	ldr	r3, [pc, #28]	@ (8105674 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105658:	e002      	b.n	8105660 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810565a:	2300      	movs	r3, #0
 810565c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810565e:	e2e2      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105660:	e2e1      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105662:	4b05      	ldr	r3, [pc, #20]	@ (8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105666:	e2de      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105668:	58024400 	.word	0x58024400
 810566c:	03d09000 	.word	0x03d09000
 8105670:	003d0900 	.word	0x003d0900
 8105674:	017d7840 	.word	0x017d7840
 8105678:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810567c:	2300      	movs	r3, #0
 810567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105680:	e2d1      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105686:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 810568a:	430b      	orrs	r3, r1
 810568c:	f040 809c 	bne.w	81057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105690:	4b93      	ldr	r3, [pc, #588]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105694:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8105698:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810569c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81056a0:	d054      	beq.n	810574c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81056a8:	f200 808b 	bhi.w	81057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81056b2:	f000 8083 	beq.w	81057bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81056bc:	f200 8081 	bhi.w	81057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81056c6:	d02f      	beq.n	8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81056ce:	d878      	bhi.n	81057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81056d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d004      	beq.n	81056e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81056d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81056dc:	d012      	beq.n	8105704 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81056de:	e070      	b.n	81057c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81056e0:	4b7f      	ldr	r3, [pc, #508]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81056e2:	681b      	ldr	r3, [r3, #0]
 81056e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81056e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81056ec:	d107      	bne.n	81056fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81056ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81056f2:	4618      	mov	r0, r3
 81056f4:	f000 fd5e 	bl	81061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81056fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81056fc:	e293      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81056fe:	2300      	movs	r3, #0
 8105700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105702:	e290      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105704:	4b76      	ldr	r3, [pc, #472]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810570c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105710:	d107      	bne.n	8105722 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105712:	f107 0318 	add.w	r3, r7, #24
 8105716:	4618      	mov	r0, r3
 8105718:	f000 faa4 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810571c:	69bb      	ldr	r3, [r7, #24]
 810571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105720:	e281      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105722:	2300      	movs	r3, #0
 8105724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105726:	e27e      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105728:	4b6d      	ldr	r3, [pc, #436]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810572a:	681b      	ldr	r3, [r3, #0]
 810572c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105734:	d107      	bne.n	8105746 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105736:	f107 030c 	add.w	r3, r7, #12
 810573a:	4618      	mov	r0, r3
 810573c:	f000 fbe6 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105740:	68fb      	ldr	r3, [r7, #12]
 8105742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105744:	e26f      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105746:	2300      	movs	r3, #0
 8105748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810574a:	e26c      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810574c:	4b64      	ldr	r3, [pc, #400]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810574e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105750:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105754:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105756:	4b62      	ldr	r3, [pc, #392]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	f003 0304 	and.w	r3, r3, #4
 810575e:	2b04      	cmp	r3, #4
 8105760:	d10c      	bne.n	810577c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8105762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8105764:	2b00      	cmp	r3, #0
 8105766:	d109      	bne.n	810577c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105768:	4b5d      	ldr	r3, [pc, #372]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810576a:	681b      	ldr	r3, [r3, #0]
 810576c:	08db      	lsrs	r3, r3, #3
 810576e:	f003 0303 	and.w	r3, r3, #3
 8105772:	4a5c      	ldr	r2, [pc, #368]	@ (81058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105774:	fa22 f303 	lsr.w	r3, r2, r3
 8105778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810577a:	e01e      	b.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810577c:	4b58      	ldr	r3, [pc, #352]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810577e:	681b      	ldr	r3, [r3, #0]
 8105780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105788:	d106      	bne.n	8105798 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810578a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810578c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105790:	d102      	bne.n	8105798 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105792:	4b55      	ldr	r3, [pc, #340]	@ (81058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8105794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105796:	e010      	b.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105798:	4b51      	ldr	r3, [pc, #324]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81057a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81057a4:	d106      	bne.n	81057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81057a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81057a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81057ac:	d102      	bne.n	81057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81057ae:	4b4f      	ldr	r3, [pc, #316]	@ (81058ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81057b2:	e002      	b.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81057b4:	2300      	movs	r3, #0
 81057b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81057b8:	e235      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81057ba:	e234      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81057bc:	4b4c      	ldr	r3, [pc, #304]	@ (81058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81057be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81057c0:	e231      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81057c2:	2300      	movs	r3, #0
 81057c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81057c6:	e22e      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81057c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81057cc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81057d0:	430b      	orrs	r3, r1
 81057d2:	f040 808f 	bne.w	81058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81057d6:	4b42      	ldr	r3, [pc, #264]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81057d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81057da:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81057de:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81057e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81057e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81057e6:	d06b      	beq.n	81058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 81057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81057ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81057ee:	d874      	bhi.n	81058da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81057f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81057f6:	d056      	beq.n	81058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81057fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81057fe:	d86c      	bhi.n	81058da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105802:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105806:	d03b      	beq.n	8105880 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8105808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810580a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810580e:	d864      	bhi.n	81058da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105816:	d021      	beq.n	810585c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8105818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810581a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810581e:	d85c      	bhi.n	81058da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105822:	2b00      	cmp	r3, #0
 8105824:	d004      	beq.n	8105830 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8105826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810582c:	d004      	beq.n	8105838 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810582e:	e054      	b.n	81058da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8105830:	f7fe fa62 	bl	8103cf8 <HAL_RCC_GetPCLK1Freq>
 8105834:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105836:	e1f6      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105838:	4b29      	ldr	r3, [pc, #164]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810583a:	681b      	ldr	r3, [r3, #0]
 810583c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105840:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105844:	d107      	bne.n	8105856 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105846:	f107 0318 	add.w	r3, r7, #24
 810584a:	4618      	mov	r0, r3
 810584c:	f000 fa0a 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105850:	69fb      	ldr	r3, [r7, #28]
 8105852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105854:	e1e7      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105856:	2300      	movs	r3, #0
 8105858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810585a:	e1e4      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810585c:	4b20      	ldr	r3, [pc, #128]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810585e:	681b      	ldr	r3, [r3, #0]
 8105860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105868:	d107      	bne.n	810587a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810586a:	f107 030c 	add.w	r3, r7, #12
 810586e:	4618      	mov	r0, r3
 8105870:	f000 fb4c 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105874:	693b      	ldr	r3, [r7, #16]
 8105876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105878:	e1d5      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810587a:	2300      	movs	r3, #0
 810587c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810587e:	e1d2      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105880:	4b17      	ldr	r3, [pc, #92]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	f003 0304 	and.w	r3, r3, #4
 8105888:	2b04      	cmp	r3, #4
 810588a:	d109      	bne.n	81058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810588c:	4b14      	ldr	r3, [pc, #80]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	08db      	lsrs	r3, r3, #3
 8105892:	f003 0303 	and.w	r3, r3, #3
 8105896:	4a13      	ldr	r2, [pc, #76]	@ (81058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8105898:	fa22 f303 	lsr.w	r3, r2, r3
 810589c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810589e:	e1c2      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058a0:	2300      	movs	r3, #0
 81058a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058a4:	e1bf      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81058a6:	4b0e      	ldr	r3, [pc, #56]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81058ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81058b2:	d102      	bne.n	81058ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81058b4:	4b0c      	ldr	r3, [pc, #48]	@ (81058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058b8:	e1b5      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058ba:	2300      	movs	r3, #0
 81058bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058be:	e1b2      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81058c0:	4b07      	ldr	r3, [pc, #28]	@ (81058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81058c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81058cc:	d102      	bne.n	81058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81058ce:	4b07      	ldr	r3, [pc, #28]	@ (81058ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81058d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81058d2:	e1a8      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81058d4:	2300      	movs	r3, #0
 81058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058d8:	e1a5      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81058da:	2300      	movs	r3, #0
 81058dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81058de:	e1a2      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81058e0:	58024400 	.word	0x58024400
 81058e4:	03d09000 	.word	0x03d09000
 81058e8:	003d0900 	.word	0x003d0900
 81058ec:	017d7840 	.word	0x017d7840
 81058f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81058f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81058f8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 81058fc:	430b      	orrs	r3, r1
 81058fe:	d173      	bne.n	81059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105900:	4b9c      	ldr	r3, [pc, #624]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8105908:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810590c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105910:	d02f      	beq.n	8105972 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8105912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105918:	d863      	bhi.n	81059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810591c:	2b00      	cmp	r3, #0
 810591e:	d004      	beq.n	810592a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8105920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105926:	d012      	beq.n	810594e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8105928:	e05b      	b.n	81059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810592a:	4b92      	ldr	r3, [pc, #584]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810592c:	681b      	ldr	r3, [r3, #0]
 810592e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105932:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105936:	d107      	bne.n	8105948 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105938:	f107 0318 	add.w	r3, r7, #24
 810593c:	4618      	mov	r0, r3
 810593e:	f000 f991 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105942:	69bb      	ldr	r3, [r7, #24]
 8105944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105946:	e16e      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105948:	2300      	movs	r3, #0
 810594a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810594c:	e16b      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810594e:	4b89      	ldr	r3, [pc, #548]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810595a:	d107      	bne.n	810596c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810595c:	f107 030c 	add.w	r3, r7, #12
 8105960:	4618      	mov	r0, r3
 8105962:	f000 fad3 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105966:	697b      	ldr	r3, [r7, #20]
 8105968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810596a:	e15c      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810596c:	2300      	movs	r3, #0
 810596e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105970:	e159      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105972:	4b80      	ldr	r3, [pc, #512]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105976:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810597a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810597c:	4b7d      	ldr	r3, [pc, #500]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810597e:	681b      	ldr	r3, [r3, #0]
 8105980:	f003 0304 	and.w	r3, r3, #4
 8105984:	2b04      	cmp	r3, #4
 8105986:	d10c      	bne.n	81059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8105988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810598a:	2b00      	cmp	r3, #0
 810598c:	d109      	bne.n	81059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810598e:	4b79      	ldr	r3, [pc, #484]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105990:	681b      	ldr	r3, [r3, #0]
 8105992:	08db      	lsrs	r3, r3, #3
 8105994:	f003 0303 	and.w	r3, r3, #3
 8105998:	4a77      	ldr	r2, [pc, #476]	@ (8105b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810599a:	fa22 f303 	lsr.w	r3, r2, r3
 810599e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81059a0:	e01e      	b.n	81059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81059a2:	4b74      	ldr	r3, [pc, #464]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81059aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81059ae:	d106      	bne.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81059b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81059b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81059b6:	d102      	bne.n	81059be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81059b8:	4b70      	ldr	r3, [pc, #448]	@ (8105b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81059bc:	e010      	b.n	81059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81059be:	4b6d      	ldr	r3, [pc, #436]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81059c0:	681b      	ldr	r3, [r3, #0]
 81059c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81059c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81059ca:	d106      	bne.n	81059da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81059ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81059d2:	d102      	bne.n	81059da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81059d4:	4b6a      	ldr	r3, [pc, #424]	@ (8105b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81059d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81059d8:	e002      	b.n	81059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81059da:	2300      	movs	r3, #0
 81059dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81059de:	e122      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81059e0:	e121      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81059e2:	2300      	movs	r3, #0
 81059e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81059e6:	e11e      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81059e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81059ec:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 81059f0:	430b      	orrs	r3, r1
 81059f2:	d133      	bne.n	8105a5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81059f4:	4b5f      	ldr	r3, [pc, #380]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81059f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81059f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81059fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81059fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a00:	2b00      	cmp	r3, #0
 8105a02:	d004      	beq.n	8105a0e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8105a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105a0a:	d012      	beq.n	8105a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8105a0c:	e023      	b.n	8105a56 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105a0e:	4b59      	ldr	r3, [pc, #356]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105a16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105a1a:	d107      	bne.n	8105a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105a20:	4618      	mov	r0, r3
 8105a22:	f000 fbc7 	bl	81061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a2a:	e0fc      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a2c:	2300      	movs	r3, #0
 8105a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a30:	e0f9      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105a32:	4b50      	ldr	r3, [pc, #320]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105a34:	681b      	ldr	r3, [r3, #0]
 8105a36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105a3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105a3e:	d107      	bne.n	8105a50 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a40:	f107 0318 	add.w	r3, r7, #24
 8105a44:	4618      	mov	r0, r3
 8105a46:	f000 f90d 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105a4a:	6a3b      	ldr	r3, [r7, #32]
 8105a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a4e:	e0ea      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a50:	2300      	movs	r3, #0
 8105a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a54:	e0e7      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105a56:	2300      	movs	r3, #0
 8105a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a5a:	e0e4      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105a60:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8105a64:	430b      	orrs	r3, r1
 8105a66:	f040 808d 	bne.w	8105b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8105a6a:	4b42      	ldr	r3, [pc, #264]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105a6e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8105a72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105a7a:	d06b      	beq.n	8105b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8105a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105a82:	d874      	bhi.n	8105b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105a8a:	d056      	beq.n	8105b3a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8105a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105a92:	d86c      	bhi.n	8105b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105a9a:	d03b      	beq.n	8105b14 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8105a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105a9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105aa2:	d864      	bhi.n	8105b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105aaa:	d021      	beq.n	8105af0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8105aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105ab2:	d85c      	bhi.n	8105b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ab6:	2b00      	cmp	r3, #0
 8105ab8:	d004      	beq.n	8105ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8105aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105abc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105ac0:	d004      	beq.n	8105acc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8105ac2:	e054      	b.n	8105b6e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105ac4:	f000 f8b8 	bl	8105c38 <HAL_RCCEx_GetD3PCLK1Freq>
 8105ac8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105aca:	e0ac      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105acc:	4b29      	ldr	r3, [pc, #164]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105ace:	681b      	ldr	r3, [r3, #0]
 8105ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105ad4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105ad8:	d107      	bne.n	8105aea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ada:	f107 0318 	add.w	r3, r7, #24
 8105ade:	4618      	mov	r0, r3
 8105ae0:	f000 f8c0 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105ae4:	69fb      	ldr	r3, [r7, #28]
 8105ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105ae8:	e09d      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105aea:	2300      	movs	r3, #0
 8105aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105aee:	e09a      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105af0:	4b20      	ldr	r3, [pc, #128]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105af2:	681b      	ldr	r3, [r3, #0]
 8105af4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8105af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105afc:	d107      	bne.n	8105b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105afe:	f107 030c 	add.w	r3, r7, #12
 8105b02:	4618      	mov	r0, r3
 8105b04:	f000 fa02 	bl	8105f0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105b08:	693b      	ldr	r3, [r7, #16]
 8105b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b0c:	e08b      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b0e:	2300      	movs	r3, #0
 8105b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105b12:	e088      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105b14:	4b17      	ldr	r3, [pc, #92]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	f003 0304 	and.w	r3, r3, #4
 8105b1c:	2b04      	cmp	r3, #4
 8105b1e:	d109      	bne.n	8105b34 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105b20:	4b14      	ldr	r3, [pc, #80]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105b22:	681b      	ldr	r3, [r3, #0]
 8105b24:	08db      	lsrs	r3, r3, #3
 8105b26:	f003 0303 	and.w	r3, r3, #3
 8105b2a:	4a13      	ldr	r2, [pc, #76]	@ (8105b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8105b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b32:	e078      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b34:	2300      	movs	r3, #0
 8105b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105b38:	e075      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105b3c:	681b      	ldr	r3, [r3, #0]
 8105b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105b46:	d102      	bne.n	8105b4e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8105b48:	4b0c      	ldr	r3, [pc, #48]	@ (8105b7c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b4c:	e06b      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b4e:	2300      	movs	r3, #0
 8105b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105b52:	e068      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105b54:	4b07      	ldr	r3, [pc, #28]	@ (8105b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105b56:	681b      	ldr	r3, [r3, #0]
 8105b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105b60:	d102      	bne.n	8105b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8105b62:	4b07      	ldr	r3, [pc, #28]	@ (8105b80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8105b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105b66:	e05e      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105b68:	2300      	movs	r3, #0
 8105b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105b6c:	e05b      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8105b6e:	2300      	movs	r3, #0
 8105b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105b72:	e058      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105b74:	58024400 	.word	0x58024400
 8105b78:	03d09000 	.word	0x03d09000
 8105b7c:	003d0900 	.word	0x003d0900
 8105b80:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105b88:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8105b8c:	430b      	orrs	r3, r1
 8105b8e:	d148      	bne.n	8105c22 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8105b90:	4b27      	ldr	r3, [pc, #156]	@ (8105c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105b94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8105b98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8105b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105ba0:	d02a      	beq.n	8105bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8105ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105ba8:	d838      	bhi.n	8105c1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8105baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105bac:	2b00      	cmp	r3, #0
 8105bae:	d004      	beq.n	8105bba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8105bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105bb6:	d00d      	beq.n	8105bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8105bb8:	e030      	b.n	8105c1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105bba:	4b1d      	ldr	r3, [pc, #116]	@ (8105c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105bc6:	d102      	bne.n	8105bce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8105bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8105c34 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8105bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105bcc:	e02b      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105bce:	2300      	movs	r3, #0
 8105bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105bd2:	e028      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105bd4:	4b16      	ldr	r3, [pc, #88]	@ (8105c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8105bdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105be0:	d107      	bne.n	8105bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105be6:	4618      	mov	r0, r3
 8105be8:	f000 fae4 	bl	81061b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105bf0:	e019      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105bf2:	2300      	movs	r3, #0
 8105bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105bf6:	e016      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8105c30 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105bfa:	681b      	ldr	r3, [r3, #0]
 8105bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105c04:	d107      	bne.n	8105c16 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105c06:	f107 0318 	add.w	r3, r7, #24
 8105c0a:	4618      	mov	r0, r3
 8105c0c:	f000 f82a 	bl	8105c64 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105c10:	69fb      	ldr	r3, [r7, #28]
 8105c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105c14:	e007      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105c16:	2300      	movs	r3, #0
 8105c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c1a:	e004      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105c1c:	2300      	movs	r3, #0
 8105c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c20:	e001      	b.n	8105c26 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8105c22:	2300      	movs	r3, #0
 8105c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8105c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8105c28:	4618      	mov	r0, r3
 8105c2a:	3740      	adds	r7, #64	@ 0x40
 8105c2c:	46bd      	mov	sp, r7
 8105c2e:	bd80      	pop	{r7, pc}
 8105c30:	58024400 	.word	0x58024400
 8105c34:	017d7840 	.word	0x017d7840

08105c38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105c38:	b580      	push	{r7, lr}
 8105c3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105c3c:	f7fe f82a 	bl	8103c94 <HAL_RCC_GetHCLKFreq>
 8105c40:	4602      	mov	r2, r0
 8105c42:	4b06      	ldr	r3, [pc, #24]	@ (8105c5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105c44:	6a1b      	ldr	r3, [r3, #32]
 8105c46:	091b      	lsrs	r3, r3, #4
 8105c48:	f003 0307 	and.w	r3, r3, #7
 8105c4c:	4904      	ldr	r1, [pc, #16]	@ (8105c60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105c4e:	5ccb      	ldrb	r3, [r1, r3]
 8105c50:	f003 031f 	and.w	r3, r3, #31
 8105c54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105c58:	4618      	mov	r0, r3
 8105c5a:	bd80      	pop	{r7, pc}
 8105c5c:	58024400 	.word	0x58024400
 8105c60:	0810c478 	.word	0x0810c478

08105c64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105c64:	b480      	push	{r7}
 8105c66:	b089      	sub	sp, #36	@ 0x24
 8105c68:	af00      	add	r7, sp, #0
 8105c6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105c6c:	4ba1      	ldr	r3, [pc, #644]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105c70:	f003 0303 	and.w	r3, r3, #3
 8105c74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105c76:	4b9f      	ldr	r3, [pc, #636]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105c7a:	0b1b      	lsrs	r3, r3, #12
 8105c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105c80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105c82:	4b9c      	ldr	r3, [pc, #624]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105c86:	091b      	lsrs	r3, r3, #4
 8105c88:	f003 0301 	and.w	r3, r3, #1
 8105c8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105c8e:	4b99      	ldr	r3, [pc, #612]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105c92:	08db      	lsrs	r3, r3, #3
 8105c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105c98:	693a      	ldr	r2, [r7, #16]
 8105c9a:	fb02 f303 	mul.w	r3, r2, r3
 8105c9e:	ee07 3a90 	vmov	s15, r3
 8105ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ca6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105caa:	697b      	ldr	r3, [r7, #20]
 8105cac:	2b00      	cmp	r3, #0
 8105cae:	f000 8111 	beq.w	8105ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105cb2:	69bb      	ldr	r3, [r7, #24]
 8105cb4:	2b02      	cmp	r3, #2
 8105cb6:	f000 8083 	beq.w	8105dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105cba:	69bb      	ldr	r3, [r7, #24]
 8105cbc:	2b02      	cmp	r3, #2
 8105cbe:	f200 80a1 	bhi.w	8105e04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105cc2:	69bb      	ldr	r3, [r7, #24]
 8105cc4:	2b00      	cmp	r3, #0
 8105cc6:	d003      	beq.n	8105cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105cc8:	69bb      	ldr	r3, [r7, #24]
 8105cca:	2b01      	cmp	r3, #1
 8105ccc:	d056      	beq.n	8105d7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105cce:	e099      	b.n	8105e04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105cd0:	4b88      	ldr	r3, [pc, #544]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	f003 0320 	and.w	r3, r3, #32
 8105cd8:	2b00      	cmp	r3, #0
 8105cda:	d02d      	beq.n	8105d38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105cdc:	4b85      	ldr	r3, [pc, #532]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105cde:	681b      	ldr	r3, [r3, #0]
 8105ce0:	08db      	lsrs	r3, r3, #3
 8105ce2:	f003 0303 	and.w	r3, r3, #3
 8105ce6:	4a84      	ldr	r2, [pc, #528]	@ (8105ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8105cec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105cee:	68bb      	ldr	r3, [r7, #8]
 8105cf0:	ee07 3a90 	vmov	s15, r3
 8105cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cf8:	697b      	ldr	r3, [r7, #20]
 8105cfa:	ee07 3a90 	vmov	s15, r3
 8105cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d06:	4b7b      	ldr	r3, [pc, #492]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d0e:	ee07 3a90 	vmov	s15, r3
 8105d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105efc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105d36:	e087      	b.n	8105e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105d38:	697b      	ldr	r3, [r7, #20]
 8105d3a:	ee07 3a90 	vmov	s15, r3
 8105d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105f00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d52:	ee07 3a90 	vmov	s15, r3
 8105d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105efc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105d7a:	e065      	b.n	8105e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105d7c:	697b      	ldr	r3, [r7, #20]
 8105d7e:	ee07 3a90 	vmov	s15, r3
 8105d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d8e:	4b59      	ldr	r3, [pc, #356]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d96:	ee07 3a90 	vmov	s15, r3
 8105d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105da2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105efc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105dbe:	e043      	b.n	8105e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105dc0:	697b      	ldr	r3, [r7, #20]
 8105dc2:	ee07 3a90 	vmov	s15, r3
 8105dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105dca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105f08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105dd2:	4b48      	ldr	r3, [pc, #288]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105dda:	ee07 3a90 	vmov	s15, r3
 8105dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8105de6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105efc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e02:	e021      	b.n	8105e48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105e04:	697b      	ldr	r3, [r7, #20]
 8105e06:	ee07 3a90 	vmov	s15, r3
 8105e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e16:	4b37      	ldr	r3, [pc, #220]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e1e:	ee07 3a90 	vmov	s15, r3
 8105e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105efc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105e48:	4b2a      	ldr	r3, [pc, #168]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e4c:	0a5b      	lsrs	r3, r3, #9
 8105e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105e52:	ee07 3a90 	vmov	s15, r3
 8105e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8105e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e6e:	ee17 2a90 	vmov	r2, s15
 8105e72:	687b      	ldr	r3, [r7, #4]
 8105e74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105e76:	4b1f      	ldr	r3, [pc, #124]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e7a:	0c1b      	lsrs	r3, r3, #16
 8105e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105e80:	ee07 3a90 	vmov	s15, r3
 8105e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105e8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105e90:	edd7 6a07 	vldr	s13, [r7, #28]
 8105e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105e9c:	ee17 2a90 	vmov	r2, s15
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105ea4:	4b13      	ldr	r3, [pc, #76]	@ (8105ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105ea8:	0e1b      	lsrs	r3, r3, #24
 8105eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105eae:	ee07 3a90 	vmov	s15, r3
 8105eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105eb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105eba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105eca:	ee17 2a90 	vmov	r2, s15
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105ed2:	e008      	b.n	8105ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	2200      	movs	r2, #0
 8105ed8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	2200      	movs	r2, #0
 8105ede:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	2200      	movs	r2, #0
 8105ee4:	609a      	str	r2, [r3, #8]
}
 8105ee6:	bf00      	nop
 8105ee8:	3724      	adds	r7, #36	@ 0x24
 8105eea:	46bd      	mov	sp, r7
 8105eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ef0:	4770      	bx	lr
 8105ef2:	bf00      	nop
 8105ef4:	58024400 	.word	0x58024400
 8105ef8:	03d09000 	.word	0x03d09000
 8105efc:	46000000 	.word	0x46000000
 8105f00:	4c742400 	.word	0x4c742400
 8105f04:	4a742400 	.word	0x4a742400
 8105f08:	4bbebc20 	.word	0x4bbebc20

08105f0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105f0c:	b480      	push	{r7}
 8105f0e:	b089      	sub	sp, #36	@ 0x24
 8105f10:	af00      	add	r7, sp, #0
 8105f12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105f14:	4ba1      	ldr	r3, [pc, #644]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f18:	f003 0303 	and.w	r3, r3, #3
 8105f1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105f1e:	4b9f      	ldr	r3, [pc, #636]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f22:	0d1b      	lsrs	r3, r3, #20
 8105f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105f28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105f2a:	4b9c      	ldr	r3, [pc, #624]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f2e:	0a1b      	lsrs	r3, r3, #8
 8105f30:	f003 0301 	and.w	r3, r3, #1
 8105f34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105f36:	4b99      	ldr	r3, [pc, #612]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105f3a:	08db      	lsrs	r3, r3, #3
 8105f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105f40:	693a      	ldr	r2, [r7, #16]
 8105f42:	fb02 f303 	mul.w	r3, r2, r3
 8105f46:	ee07 3a90 	vmov	s15, r3
 8105f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105f52:	697b      	ldr	r3, [r7, #20]
 8105f54:	2b00      	cmp	r3, #0
 8105f56:	f000 8111 	beq.w	810617c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105f5a:	69bb      	ldr	r3, [r7, #24]
 8105f5c:	2b02      	cmp	r3, #2
 8105f5e:	f000 8083 	beq.w	8106068 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105f62:	69bb      	ldr	r3, [r7, #24]
 8105f64:	2b02      	cmp	r3, #2
 8105f66:	f200 80a1 	bhi.w	81060ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105f6a:	69bb      	ldr	r3, [r7, #24]
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	d003      	beq.n	8105f78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105f70:	69bb      	ldr	r3, [r7, #24]
 8105f72:	2b01      	cmp	r3, #1
 8105f74:	d056      	beq.n	8106024 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105f76:	e099      	b.n	81060ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f78:	4b88      	ldr	r3, [pc, #544]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f7a:	681b      	ldr	r3, [r3, #0]
 8105f7c:	f003 0320 	and.w	r3, r3, #32
 8105f80:	2b00      	cmp	r3, #0
 8105f82:	d02d      	beq.n	8105fe0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f84:	4b85      	ldr	r3, [pc, #532]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	08db      	lsrs	r3, r3, #3
 8105f8a:	f003 0303 	and.w	r3, r3, #3
 8105f8e:	4a84      	ldr	r2, [pc, #528]	@ (81061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105f90:	fa22 f303 	lsr.w	r3, r2, r3
 8105f94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105f96:	68bb      	ldr	r3, [r7, #8]
 8105f98:	ee07 3a90 	vmov	s15, r3
 8105f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fa0:	697b      	ldr	r3, [r7, #20]
 8105fa2:	ee07 3a90 	vmov	s15, r3
 8105fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105fae:	4b7b      	ldr	r3, [pc, #492]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105fb6:	ee07 3a90 	vmov	s15, r3
 8105fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8105fc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105fda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105fde:	e087      	b.n	81060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105fe0:	697b      	ldr	r3, [r7, #20]
 8105fe2:	ee07 3a90 	vmov	s15, r3
 8105fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81061a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ff2:	4b6a      	ldr	r3, [pc, #424]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8105ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ffa:	ee07 3a90 	vmov	s15, r3
 8105ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106002:	ed97 6a03 	vldr	s12, [r7, #12]
 8106006:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810600a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810601e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106022:	e065      	b.n	81060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106024:	697b      	ldr	r3, [r7, #20]
 8106026:	ee07 3a90 	vmov	s15, r3
 810602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810602e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81061ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106036:	4b59      	ldr	r3, [pc, #356]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810603e:	ee07 3a90 	vmov	s15, r3
 8106042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106046:	ed97 6a03 	vldr	s12, [r7, #12]
 810604a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106066:	e043      	b.n	81060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106068:	697b      	ldr	r3, [r7, #20]
 810606a:	ee07 3a90 	vmov	s15, r3
 810606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106072:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810607a:	4b48      	ldr	r3, [pc, #288]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106082:	ee07 3a90 	vmov	s15, r3
 8106086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810608a:	ed97 6a03 	vldr	s12, [r7, #12]
 810608e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810609a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81060aa:	e021      	b.n	81060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81060ac:	697b      	ldr	r3, [r7, #20]
 81060ae:	ee07 3a90 	vmov	s15, r3
 81060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81061ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81060ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060be:	4b37      	ldr	r3, [pc, #220]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81060c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060c6:	ee07 3a90 	vmov	s15, r3
 81060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81060d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81061a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81060d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81060ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81060f0:	4b2a      	ldr	r3, [pc, #168]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81060f4:	0a5b      	lsrs	r3, r3, #9
 81060f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81060fa:	ee07 3a90 	vmov	s15, r3
 81060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106106:	ee37 7a87 	vadd.f32	s14, s15, s14
 810610a:	edd7 6a07 	vldr	s13, [r7, #28]
 810610e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106116:	ee17 2a90 	vmov	r2, s15
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810611e:	4b1f      	ldr	r3, [pc, #124]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106122:	0c1b      	lsrs	r3, r3, #16
 8106124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106128:	ee07 3a90 	vmov	s15, r3
 810612c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106138:	edd7 6a07 	vldr	s13, [r7, #28]
 810613c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106144:	ee17 2a90 	vmov	r2, s15
 8106148:	687b      	ldr	r3, [r7, #4]
 810614a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810614c:	4b13      	ldr	r3, [pc, #76]	@ (810619c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810614e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106150:	0e1b      	lsrs	r3, r3, #24
 8106152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106156:	ee07 3a90 	vmov	s15, r3
 810615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810615e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106166:	edd7 6a07 	vldr	s13, [r7, #28]
 810616a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810616e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106172:	ee17 2a90 	vmov	r2, s15
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810617a:	e008      	b.n	810618e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810617c:	687b      	ldr	r3, [r7, #4]
 810617e:	2200      	movs	r2, #0
 8106180:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	2200      	movs	r2, #0
 8106186:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	2200      	movs	r2, #0
 810618c:	609a      	str	r2, [r3, #8]
}
 810618e:	bf00      	nop
 8106190:	3724      	adds	r7, #36	@ 0x24
 8106192:	46bd      	mov	sp, r7
 8106194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106198:	4770      	bx	lr
 810619a:	bf00      	nop
 810619c:	58024400 	.word	0x58024400
 81061a0:	03d09000 	.word	0x03d09000
 81061a4:	46000000 	.word	0x46000000
 81061a8:	4c742400 	.word	0x4c742400
 81061ac:	4a742400 	.word	0x4a742400
 81061b0:	4bbebc20 	.word	0x4bbebc20

081061b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81061b4:	b480      	push	{r7}
 81061b6:	b089      	sub	sp, #36	@ 0x24
 81061b8:	af00      	add	r7, sp, #0
 81061ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81061bc:	4ba0      	ldr	r3, [pc, #640]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81061c0:	f003 0303 	and.w	r3, r3, #3
 81061c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81061c6:	4b9e      	ldr	r3, [pc, #632]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81061c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81061ca:	091b      	lsrs	r3, r3, #4
 81061cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81061d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81061d2:	4b9b      	ldr	r3, [pc, #620]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81061d6:	f003 0301 	and.w	r3, r3, #1
 81061da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81061dc:	4b98      	ldr	r3, [pc, #608]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81061de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81061e0:	08db      	lsrs	r3, r3, #3
 81061e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81061e6:	693a      	ldr	r2, [r7, #16]
 81061e8:	fb02 f303 	mul.w	r3, r2, r3
 81061ec:	ee07 3a90 	vmov	s15, r3
 81061f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81061f8:	697b      	ldr	r3, [r7, #20]
 81061fa:	2b00      	cmp	r3, #0
 81061fc:	f000 8111 	beq.w	8106422 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8106200:	69bb      	ldr	r3, [r7, #24]
 8106202:	2b02      	cmp	r3, #2
 8106204:	f000 8083 	beq.w	810630e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8106208:	69bb      	ldr	r3, [r7, #24]
 810620a:	2b02      	cmp	r3, #2
 810620c:	f200 80a1 	bhi.w	8106352 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8106210:	69bb      	ldr	r3, [r7, #24]
 8106212:	2b00      	cmp	r3, #0
 8106214:	d003      	beq.n	810621e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8106216:	69bb      	ldr	r3, [r7, #24]
 8106218:	2b01      	cmp	r3, #1
 810621a:	d056      	beq.n	81062ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810621c:	e099      	b.n	8106352 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810621e:	4b88      	ldr	r3, [pc, #544]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	f003 0320 	and.w	r3, r3, #32
 8106226:	2b00      	cmp	r3, #0
 8106228:	d02d      	beq.n	8106286 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810622a:	4b85      	ldr	r3, [pc, #532]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810622c:	681b      	ldr	r3, [r3, #0]
 810622e:	08db      	lsrs	r3, r3, #3
 8106230:	f003 0303 	and.w	r3, r3, #3
 8106234:	4a83      	ldr	r2, [pc, #524]	@ (8106444 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8106236:	fa22 f303 	lsr.w	r3, r2, r3
 810623a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810623c:	68bb      	ldr	r3, [r7, #8]
 810623e:	ee07 3a90 	vmov	s15, r3
 8106242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106246:	697b      	ldr	r3, [r7, #20]
 8106248:	ee07 3a90 	vmov	s15, r3
 810624c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106254:	4b7a      	ldr	r3, [pc, #488]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810625c:	ee07 3a90 	vmov	s15, r3
 8106260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106264:	ed97 6a03 	vldr	s12, [r7, #12]
 8106268:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8106448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810626c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810627c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106280:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106284:	e087      	b.n	8106396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106286:	697b      	ldr	r3, [r7, #20]
 8106288:	ee07 3a90 	vmov	s15, r3
 810628c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106290:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810644c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106298:	4b69      	ldr	r3, [pc, #420]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810629a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062a0:	ee07 3a90 	vmov	s15, r3
 81062a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062a8:	ed97 6a03 	vldr	s12, [r7, #12]
 81062ac:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8106448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81062b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81062bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062c8:	e065      	b.n	8106396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81062ca:	697b      	ldr	r3, [r7, #20]
 81062cc:	ee07 3a90 	vmov	s15, r3
 81062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062d4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8106450 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81062d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062dc:	4b58      	ldr	r3, [pc, #352]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81062e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062e4:	ee07 3a90 	vmov	s15, r3
 81062e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062ec:	ed97 6a03 	vldr	s12, [r7, #12]
 81062f0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8106448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81062f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106308:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810630c:	e043      	b.n	8106396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810630e:	697b      	ldr	r3, [r7, #20]
 8106310:	ee07 3a90 	vmov	s15, r3
 8106314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106318:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8106454 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810631c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106320:	4b47      	ldr	r3, [pc, #284]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106328:	ee07 3a90 	vmov	s15, r3
 810632c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106330:	ed97 6a03 	vldr	s12, [r7, #12]
 8106334:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8106448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106338:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810633c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106340:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106348:	ee67 7a27 	vmul.f32	s15, s14, s15
 810634c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106350:	e021      	b.n	8106396 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106352:	697b      	ldr	r3, [r7, #20]
 8106354:	ee07 3a90 	vmov	s15, r3
 8106358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810635c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810644c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8106360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106364:	4b36      	ldr	r3, [pc, #216]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810636c:	ee07 3a90 	vmov	s15, r3
 8106370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106374:	ed97 6a03 	vldr	s12, [r7, #12]
 8106378:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8106448 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810637c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106384:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810638c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106390:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106394:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8106396:	4b2a      	ldr	r3, [pc, #168]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810639a:	0a5b      	lsrs	r3, r3, #9
 810639c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81063a0:	ee07 3a90 	vmov	s15, r3
 81063a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81063ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 81063b0:	edd7 6a07 	vldr	s13, [r7, #28]
 81063b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81063b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81063bc:	ee17 2a90 	vmov	r2, s15
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81063c4:	4b1e      	ldr	r3, [pc, #120]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81063c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81063c8:	0c1b      	lsrs	r3, r3, #16
 81063ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81063ce:	ee07 3a90 	vmov	s15, r3
 81063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81063da:	ee37 7a87 	vadd.f32	s14, s15, s14
 81063de:	edd7 6a07 	vldr	s13, [r7, #28]
 81063e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81063e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81063ea:	ee17 2a90 	vmov	r2, s15
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 81063f2:	4b13      	ldr	r3, [pc, #76]	@ (8106440 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81063f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81063f6:	0e1b      	lsrs	r3, r3, #24
 81063f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81063fc:	ee07 3a90 	vmov	s15, r3
 8106400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106404:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106408:	ee37 7a87 	vadd.f32	s14, s15, s14
 810640c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106418:	ee17 2a90 	vmov	r2, s15
 810641c:	687b      	ldr	r3, [r7, #4]
 810641e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106420:	e008      	b.n	8106434 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	2200      	movs	r2, #0
 8106426:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	2200      	movs	r2, #0
 810642c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	2200      	movs	r2, #0
 8106432:	609a      	str	r2, [r3, #8]
}
 8106434:	bf00      	nop
 8106436:	3724      	adds	r7, #36	@ 0x24
 8106438:	46bd      	mov	sp, r7
 810643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810643e:	4770      	bx	lr
 8106440:	58024400 	.word	0x58024400
 8106444:	03d09000 	.word	0x03d09000
 8106448:	46000000 	.word	0x46000000
 810644c:	4c742400 	.word	0x4c742400
 8106450:	4a742400 	.word	0x4a742400
 8106454:	4bbebc20 	.word	0x4bbebc20

08106458 <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
 8106458:	b480      	push	{r7}
 810645a:	b083      	sub	sp, #12
 810645c:	af00      	add	r7, sp, #0
 810645e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
 8106460:	4b06      	ldr	r3, [pc, #24]	@ (810647c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 8106462:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8106466:	4905      	ldr	r1, [pc, #20]	@ (810647c <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	4313      	orrs	r3, r2
 810646c:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
}
 8106470:	bf00      	nop
 8106472:	370c      	adds	r7, #12
 8106474:	46bd      	mov	sp, r7
 8106476:	f85d 7b04 	ldr.w	r7, [sp], #4
 810647a:	4770      	bx	lr
 810647c:	58024400 	.word	0x58024400

08106480 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106480:	b580      	push	{r7, lr}
 8106482:	b084      	sub	sp, #16
 8106484:	af00      	add	r7, sp, #0
 8106486:	6078      	str	r0, [r7, #4]
 8106488:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810648a:	2300      	movs	r3, #0
 810648c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810648e:	4b54      	ldr	r3, [pc, #336]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106492:	f003 0303 	and.w	r3, r3, #3
 8106496:	2b03      	cmp	r3, #3
 8106498:	d101      	bne.n	810649e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810649a:	2301      	movs	r3, #1
 810649c:	e09b      	b.n	81065d6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810649e:	4b50      	ldr	r3, [pc, #320]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81064a0:	681b      	ldr	r3, [r3, #0]
 81064a2:	4a4f      	ldr	r2, [pc, #316]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81064a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81064a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81064aa:	f7fa fdc3 	bl	8101034 <HAL_GetTick>
 81064ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81064b0:	e008      	b.n	81064c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81064b2:	f7fa fdbf 	bl	8101034 <HAL_GetTick>
 81064b6:	4602      	mov	r2, r0
 81064b8:	68bb      	ldr	r3, [r7, #8]
 81064ba:	1ad3      	subs	r3, r2, r3
 81064bc:	2b02      	cmp	r3, #2
 81064be:	d901      	bls.n	81064c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81064c0:	2303      	movs	r3, #3
 81064c2:	e088      	b.n	81065d6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81064c4:	4b46      	ldr	r3, [pc, #280]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81064c6:	681b      	ldr	r3, [r3, #0]
 81064c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81064cc:	2b00      	cmp	r3, #0
 81064ce:	d1f0      	bne.n	81064b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81064d0:	4b43      	ldr	r3, [pc, #268]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81064d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81064d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	031b      	lsls	r3, r3, #12
 81064de:	4940      	ldr	r1, [pc, #256]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81064e0:	4313      	orrs	r3, r2
 81064e2:	628b      	str	r3, [r1, #40]	@ 0x28
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	685b      	ldr	r3, [r3, #4]
 81064e8:	3b01      	subs	r3, #1
 81064ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	689b      	ldr	r3, [r3, #8]
 81064f2:	3b01      	subs	r3, #1
 81064f4:	025b      	lsls	r3, r3, #9
 81064f6:	b29b      	uxth	r3, r3
 81064f8:	431a      	orrs	r2, r3
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	68db      	ldr	r3, [r3, #12]
 81064fe:	3b01      	subs	r3, #1
 8106500:	041b      	lsls	r3, r3, #16
 8106502:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8106506:	431a      	orrs	r2, r3
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	691b      	ldr	r3, [r3, #16]
 810650c:	3b01      	subs	r3, #1
 810650e:	061b      	lsls	r3, r3, #24
 8106510:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106514:	4932      	ldr	r1, [pc, #200]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106516:	4313      	orrs	r3, r2
 8106518:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810651a:	4b31      	ldr	r3, [pc, #196]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810651e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	695b      	ldr	r3, [r3, #20]
 8106526:	492e      	ldr	r1, [pc, #184]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106528:	4313      	orrs	r3, r2
 810652a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810652c:	4b2c      	ldr	r3, [pc, #176]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106530:	f023 0220 	bic.w	r2, r3, #32
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	699b      	ldr	r3, [r3, #24]
 8106538:	4929      	ldr	r1, [pc, #164]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810653a:	4313      	orrs	r3, r2
 810653c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810653e:	4b28      	ldr	r3, [pc, #160]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106542:	4a27      	ldr	r2, [pc, #156]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106544:	f023 0310 	bic.w	r3, r3, #16
 8106548:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810654a:	4b25      	ldr	r3, [pc, #148]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810654c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810654e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106552:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8106556:	687a      	ldr	r2, [r7, #4]
 8106558:	69d2      	ldr	r2, [r2, #28]
 810655a:	00d2      	lsls	r2, r2, #3
 810655c:	4920      	ldr	r1, [pc, #128]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810655e:	4313      	orrs	r3, r2
 8106560:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106562:	4b1f      	ldr	r3, [pc, #124]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106566:	4a1e      	ldr	r2, [pc, #120]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106568:	f043 0310 	orr.w	r3, r3, #16
 810656c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810656e:	683b      	ldr	r3, [r7, #0]
 8106570:	2b00      	cmp	r3, #0
 8106572:	d106      	bne.n	8106582 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106574:	4b1a      	ldr	r3, [pc, #104]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106578:	4a19      	ldr	r2, [pc, #100]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810657a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810657e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106580:	e00f      	b.n	81065a2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106582:	683b      	ldr	r3, [r7, #0]
 8106584:	2b01      	cmp	r3, #1
 8106586:	d106      	bne.n	8106596 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8106588:	4b15      	ldr	r3, [pc, #84]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810658a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810658c:	4a14      	ldr	r2, [pc, #80]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810658e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106592:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106594:	e005      	b.n	81065a2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106596:	4b12      	ldr	r3, [pc, #72]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 8106598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810659a:	4a11      	ldr	r2, [pc, #68]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 810659c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81065a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81065a2:	4b0f      	ldr	r3, [pc, #60]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81065a4:	681b      	ldr	r3, [r3, #0]
 81065a6:	4a0e      	ldr	r2, [pc, #56]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81065a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81065ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81065ae:	f7fa fd41 	bl	8101034 <HAL_GetTick>
 81065b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81065b4:	e008      	b.n	81065c8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81065b6:	f7fa fd3d 	bl	8101034 <HAL_GetTick>
 81065ba:	4602      	mov	r2, r0
 81065bc:	68bb      	ldr	r3, [r7, #8]
 81065be:	1ad3      	subs	r3, r2, r3
 81065c0:	2b02      	cmp	r3, #2
 81065c2:	d901      	bls.n	81065c8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81065c4:	2303      	movs	r3, #3
 81065c6:	e006      	b.n	81065d6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81065c8:	4b05      	ldr	r3, [pc, #20]	@ (81065e0 <RCCEx_PLL2_Config+0x160>)
 81065ca:	681b      	ldr	r3, [r3, #0]
 81065cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81065d0:	2b00      	cmp	r3, #0
 81065d2:	d0f0      	beq.n	81065b6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81065d6:	4618      	mov	r0, r3
 81065d8:	3710      	adds	r7, #16
 81065da:	46bd      	mov	sp, r7
 81065dc:	bd80      	pop	{r7, pc}
 81065de:	bf00      	nop
 81065e0:	58024400 	.word	0x58024400

081065e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81065e4:	b580      	push	{r7, lr}
 81065e6:	b084      	sub	sp, #16
 81065e8:	af00      	add	r7, sp, #0
 81065ea:	6078      	str	r0, [r7, #4]
 81065ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81065ee:	2300      	movs	r3, #0
 81065f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81065f2:	4b54      	ldr	r3, [pc, #336]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81065f6:	f003 0303 	and.w	r3, r3, #3
 81065fa:	2b03      	cmp	r3, #3
 81065fc:	d101      	bne.n	8106602 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81065fe:	2301      	movs	r3, #1
 8106600:	e09b      	b.n	810673a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106602:	4b50      	ldr	r3, [pc, #320]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106604:	681b      	ldr	r3, [r3, #0]
 8106606:	4a4f      	ldr	r2, [pc, #316]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810660c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810660e:	f7fa fd11 	bl	8101034 <HAL_GetTick>
 8106612:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106614:	e008      	b.n	8106628 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106616:	f7fa fd0d 	bl	8101034 <HAL_GetTick>
 810661a:	4602      	mov	r2, r0
 810661c:	68bb      	ldr	r3, [r7, #8]
 810661e:	1ad3      	subs	r3, r2, r3
 8106620:	2b02      	cmp	r3, #2
 8106622:	d901      	bls.n	8106628 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106624:	2303      	movs	r3, #3
 8106626:	e088      	b.n	810673a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106628:	4b46      	ldr	r3, [pc, #280]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106630:	2b00      	cmp	r3, #0
 8106632:	d1f0      	bne.n	8106616 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106634:	4b43      	ldr	r3, [pc, #268]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106638:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	051b      	lsls	r3, r3, #20
 8106642:	4940      	ldr	r1, [pc, #256]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106644:	4313      	orrs	r3, r2
 8106646:	628b      	str	r3, [r1, #40]	@ 0x28
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	685b      	ldr	r3, [r3, #4]
 810664c:	3b01      	subs	r3, #1
 810664e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	689b      	ldr	r3, [r3, #8]
 8106656:	3b01      	subs	r3, #1
 8106658:	025b      	lsls	r3, r3, #9
 810665a:	b29b      	uxth	r3, r3
 810665c:	431a      	orrs	r2, r3
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	68db      	ldr	r3, [r3, #12]
 8106662:	3b01      	subs	r3, #1
 8106664:	041b      	lsls	r3, r3, #16
 8106666:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810666a:	431a      	orrs	r2, r3
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	691b      	ldr	r3, [r3, #16]
 8106670:	3b01      	subs	r3, #1
 8106672:	061b      	lsls	r3, r3, #24
 8106674:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106678:	4932      	ldr	r1, [pc, #200]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 810667a:	4313      	orrs	r3, r2
 810667c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810667e:	4b31      	ldr	r3, [pc, #196]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106682:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	695b      	ldr	r3, [r3, #20]
 810668a:	492e      	ldr	r1, [pc, #184]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 810668c:	4313      	orrs	r3, r2
 810668e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106690:	4b2c      	ldr	r3, [pc, #176]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106694:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	699b      	ldr	r3, [r3, #24]
 810669c:	4929      	ldr	r1, [pc, #164]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 810669e:	4313      	orrs	r3, r2
 81066a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81066a2:	4b28      	ldr	r3, [pc, #160]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066a6:	4a27      	ldr	r2, [pc, #156]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81066ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81066ae:	4b25      	ldr	r3, [pc, #148]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81066b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81066b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81066ba:	687a      	ldr	r2, [r7, #4]
 81066bc:	69d2      	ldr	r2, [r2, #28]
 81066be:	00d2      	lsls	r2, r2, #3
 81066c0:	4920      	ldr	r1, [pc, #128]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066c2:	4313      	orrs	r3, r2
 81066c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81066c6:	4b1f      	ldr	r3, [pc, #124]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066ca:	4a1e      	ldr	r2, [pc, #120]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81066d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81066d2:	683b      	ldr	r3, [r7, #0]
 81066d4:	2b00      	cmp	r3, #0
 81066d6:	d106      	bne.n	81066e6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81066d8:	4b1a      	ldr	r3, [pc, #104]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066dc:	4a19      	ldr	r2, [pc, #100]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81066e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81066e4:	e00f      	b.n	8106706 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81066e6:	683b      	ldr	r3, [r7, #0]
 81066e8:	2b01      	cmp	r3, #1
 81066ea:	d106      	bne.n	81066fa <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81066ec:	4b15      	ldr	r3, [pc, #84]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066f0:	4a14      	ldr	r2, [pc, #80]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81066f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81066f8:	e005      	b.n	8106706 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81066fa:	4b12      	ldr	r3, [pc, #72]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 81066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81066fe:	4a11      	ldr	r2, [pc, #68]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8106704:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106706:	4b0f      	ldr	r3, [pc, #60]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	4a0e      	ldr	r2, [pc, #56]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 810670c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8106710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106712:	f7fa fc8f 	bl	8101034 <HAL_GetTick>
 8106716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106718:	e008      	b.n	810672c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810671a:	f7fa fc8b 	bl	8101034 <HAL_GetTick>
 810671e:	4602      	mov	r2, r0
 8106720:	68bb      	ldr	r3, [r7, #8]
 8106722:	1ad3      	subs	r3, r2, r3
 8106724:	2b02      	cmp	r3, #2
 8106726:	d901      	bls.n	810672c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106728:	2303      	movs	r3, #3
 810672a:	e006      	b.n	810673a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810672c:	4b05      	ldr	r3, [pc, #20]	@ (8106744 <RCCEx_PLL3_Config+0x160>)
 810672e:	681b      	ldr	r3, [r3, #0]
 8106730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106734:	2b00      	cmp	r3, #0
 8106736:	d0f0      	beq.n	810671a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106738:	7bfb      	ldrb	r3, [r7, #15]
}
 810673a:	4618      	mov	r0, r3
 810673c:	3710      	adds	r7, #16
 810673e:	46bd      	mov	sp, r7
 8106740:	bd80      	pop	{r7, pc}
 8106742:	bf00      	nop
 8106744:	58024400 	.word	0x58024400

08106748 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8106748:	b580      	push	{r7, lr}
 810674a:	b08a      	sub	sp, #40	@ 0x28
 810674c:	af00      	add	r7, sp, #0
 810674e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	2b00      	cmp	r3, #0
 8106754:	d101      	bne.n	810675a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8106756:	2301      	movs	r3, #1
 8106758:	e075      	b.n	8106846 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8106760:	b2db      	uxtb	r3, r3
 8106762:	2b00      	cmp	r3, #0
 8106764:	d105      	bne.n	8106772 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	2200      	movs	r2, #0
 810676a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810676c:	6878      	ldr	r0, [r7, #4]
 810676e:	f7fa fa27 	bl	8100bc0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	2204      	movs	r2, #4
 8106776:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810677a:	6878      	ldr	r0, [r7, #4]
 810677c:	f000 f868 	bl	8106850 <HAL_SD_InitCard>
 8106780:	4603      	mov	r3, r0
 8106782:	2b00      	cmp	r3, #0
 8106784:	d001      	beq.n	810678a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8106786:	2301      	movs	r3, #1
 8106788:	e05d      	b.n	8106846 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810678a:	f107 0308 	add.w	r3, r7, #8
 810678e:	4619      	mov	r1, r3
 8106790:	6878      	ldr	r0, [r7, #4]
 8106792:	f000 fbed 	bl	8106f70 <HAL_SD_GetCardStatus>
 8106796:	4603      	mov	r3, r0
 8106798:	2b00      	cmp	r3, #0
 810679a:	d001      	beq.n	81067a0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 810679c:	2301      	movs	r3, #1
 810679e:	e052      	b.n	8106846 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 81067a0:	7e3b      	ldrb	r3, [r7, #24]
 81067a2:	b2db      	uxtb	r3, r3
 81067a4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 81067a6:	7e7b      	ldrb	r3, [r7, #25]
 81067a8:	b2db      	uxtb	r3, r3
 81067aa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81067b0:	2b01      	cmp	r3, #1
 81067b2:	d10a      	bne.n	81067ca <HAL_SD_Init+0x82>
 81067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81067b6:	2b00      	cmp	r3, #0
 81067b8:	d102      	bne.n	81067c0 <HAL_SD_Init+0x78>
 81067ba:	6a3b      	ldr	r3, [r7, #32]
 81067bc:	2b00      	cmp	r3, #0
 81067be:	d004      	beq.n	81067ca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81067c6:	659a      	str	r2, [r3, #88]	@ 0x58
 81067c8:	e00b      	b.n	81067e2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81067ca:	687b      	ldr	r3, [r7, #4]
 81067cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81067ce:	2b01      	cmp	r3, #1
 81067d0:	d104      	bne.n	81067dc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81067d8:	659a      	str	r2, [r3, #88]	@ 0x58
 81067da:	e002      	b.n	81067e2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 81067dc:	687b      	ldr	r3, [r7, #4]
 81067de:	2200      	movs	r2, #0
 81067e0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	68db      	ldr	r3, [r3, #12]
 81067e6:	4619      	mov	r1, r3
 81067e8:	6878      	ldr	r0, [r7, #4]
 81067ea:	f000 fcab 	bl	8107144 <HAL_SD_ConfigWideBusOperation>
 81067ee:	4603      	mov	r3, r0
 81067f0:	2b00      	cmp	r3, #0
 81067f2:	d001      	beq.n	81067f8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 81067f4:	2301      	movs	r3, #1
 81067f6:	e026      	b.n	8106846 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 81067f8:	f7fa fc1c 	bl	8101034 <HAL_GetTick>
 81067fc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 81067fe:	e011      	b.n	8106824 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8106800:	f7fa fc18 	bl	8101034 <HAL_GetTick>
 8106804:	4602      	mov	r2, r0
 8106806:	69fb      	ldr	r3, [r7, #28]
 8106808:	1ad3      	subs	r3, r2, r3
 810680a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810680e:	d109      	bne.n	8106824 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8106816:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	2201      	movs	r2, #1
 810681c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8106820:	2303      	movs	r3, #3
 8106822:	e010      	b.n	8106846 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8106824:	6878      	ldr	r0, [r7, #4]
 8106826:	f000 fd9f 	bl	8107368 <HAL_SD_GetCardState>
 810682a:	4603      	mov	r3, r0
 810682c:	2b04      	cmp	r3, #4
 810682e:	d1e7      	bne.n	8106800 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	2200      	movs	r2, #0
 8106834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	2200      	movs	r2, #0
 810683a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	2201      	movs	r2, #1
 8106840:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8106844:	2300      	movs	r3, #0
}
 8106846:	4618      	mov	r0, r3
 8106848:	3728      	adds	r7, #40	@ 0x28
 810684a:	46bd      	mov	sp, r7
 810684c:	bd80      	pop	{r7, pc}
	...

08106850 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8106850:	b590      	push	{r4, r7, lr}
 8106852:	b08d      	sub	sp, #52	@ 0x34
 8106854:	af02      	add	r7, sp, #8
 8106856:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8106858:	2300      	movs	r3, #0
 810685a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810685c:	2300      	movs	r3, #0
 810685e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8106860:	2300      	movs	r3, #0
 8106862:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8106864:	2300      	movs	r3, #0
 8106866:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8106868:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 810686c:	f04f 0100 	mov.w	r1, #0
 8106870:	f7fe fc62 	bl	8105138 <HAL_RCCEx_GetPeriphCLKFreq>
 8106874:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8106876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106878:	2b00      	cmp	r3, #0
 810687a:	d109      	bne.n	8106890 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	2201      	movs	r2, #1
 8106880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 810688a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810688c:	2301      	movs	r3, #1
 810688e:	e070      	b.n	8106972 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8106890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106892:	0a1b      	lsrs	r3, r3, #8
 8106894:	4a39      	ldr	r2, [pc, #228]	@ (810697c <HAL_SD_InitCard+0x12c>)
 8106896:	fba2 2303 	umull	r2, r3, r2, r3
 810689a:	091b      	lsrs	r3, r3, #4
 810689c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 810689e:	687b      	ldr	r3, [r7, #4]
 81068a0:	681c      	ldr	r4, [r3, #0]
 81068a2:	466a      	mov	r2, sp
 81068a4:	f107 0318 	add.w	r3, r7, #24
 81068a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 81068ac:	e882 0003 	stmia.w	r2, {r0, r1}
 81068b0:	f107 030c 	add.w	r3, r7, #12
 81068b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 81068b6:	4620      	mov	r0, r4
 81068b8:	f001 fa94 	bl	8107de4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	681b      	ldr	r3, [r3, #0]
 81068c0:	4618      	mov	r0, r3
 81068c2:	f001 fac6 	bl	8107e52 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 81068c6:	69fb      	ldr	r3, [r7, #28]
 81068c8:	2b00      	cmp	r3, #0
 81068ca:	d005      	beq.n	81068d8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 81068cc:	69fb      	ldr	r3, [r7, #28]
 81068ce:	005b      	lsls	r3, r3, #1
 81068d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 81068d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 81068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81068da:	2b00      	cmp	r3, #0
 81068dc:	d007      	beq.n	81068ee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81068de:	4a28      	ldr	r2, [pc, #160]	@ (8106980 <HAL_SD_InitCard+0x130>)
 81068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81068e2:	fbb2 f3f3 	udiv	r3, r2, r3
 81068e6:	3301      	adds	r3, #1
 81068e8:	4618      	mov	r0, r3
 81068ea:	f7fa fbaf 	bl	810104c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 81068ee:	6878      	ldr	r0, [r7, #4]
 81068f0:	f000 fe28 	bl	8107544 <SD_PowerON>
 81068f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81068f6:	6a3b      	ldr	r3, [r7, #32]
 81068f8:	2b00      	cmp	r3, #0
 81068fa:	d00b      	beq.n	8106914 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	2201      	movs	r2, #1
 8106900:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106908:	6a3b      	ldr	r3, [r7, #32]
 810690a:	431a      	orrs	r2, r3
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8106910:	2301      	movs	r3, #1
 8106912:	e02e      	b.n	8106972 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8106914:	6878      	ldr	r0, [r7, #4]
 8106916:	f000 fd47 	bl	81073a8 <SD_InitCard>
 810691a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810691c:	6a3b      	ldr	r3, [r7, #32]
 810691e:	2b00      	cmp	r3, #0
 8106920:	d00b      	beq.n	810693a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	2201      	movs	r2, #1
 8106926:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810692e:	6a3b      	ldr	r3, [r7, #32]
 8106930:	431a      	orrs	r2, r3
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8106936:	2301      	movs	r3, #1
 8106938:	e01b      	b.n	8106972 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810693a:	687b      	ldr	r3, [r7, #4]
 810693c:	681b      	ldr	r3, [r3, #0]
 810693e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8106942:	4618      	mov	r0, r3
 8106944:	f001 fb1a 	bl	8107f7c <SDMMC_CmdBlockLength>
 8106948:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810694a:	6a3b      	ldr	r3, [r7, #32]
 810694c:	2b00      	cmp	r3, #0
 810694e:	d00f      	beq.n	8106970 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106950:	687b      	ldr	r3, [r7, #4]
 8106952:	681b      	ldr	r3, [r3, #0]
 8106954:	4a0b      	ldr	r2, [pc, #44]	@ (8106984 <HAL_SD_InitCard+0x134>)
 8106956:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8106958:	687b      	ldr	r3, [r7, #4]
 810695a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810695c:	6a3b      	ldr	r3, [r7, #32]
 810695e:	431a      	orrs	r2, r3
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	2201      	movs	r2, #1
 8106968:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 810696c:	2301      	movs	r3, #1
 810696e:	e000      	b.n	8106972 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8106970:	2300      	movs	r3, #0
}
 8106972:	4618      	mov	r0, r3
 8106974:	372c      	adds	r7, #44	@ 0x2c
 8106976:	46bd      	mov	sp, r7
 8106978:	bd90      	pop	{r4, r7, pc}
 810697a:	bf00      	nop
 810697c:	014f8b59 	.word	0x014f8b59
 8106980:	00012110 	.word	0x00012110
 8106984:	1fe00fff 	.word	0x1fe00fff

08106988 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8106988:	b580      	push	{r7, lr}
 810698a:	b08c      	sub	sp, #48	@ 0x30
 810698c:	af00      	add	r7, sp, #0
 810698e:	60f8      	str	r0, [r7, #12]
 8106990:	60b9      	str	r1, [r7, #8]
 8106992:	607a      	str	r2, [r7, #4]
 8106994:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8106996:	687b      	ldr	r3, [r7, #4]
 8106998:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 810699a:	68bb      	ldr	r3, [r7, #8]
 810699c:	2b00      	cmp	r3, #0
 810699e:	d107      	bne.n	81069b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 81069a0:	68fb      	ldr	r3, [r7, #12]
 81069a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81069a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81069a8:	68fb      	ldr	r3, [r7, #12]
 81069aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81069ac:	2301      	movs	r3, #1
 81069ae:	e08d      	b.n	8106acc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 81069b0:	68fb      	ldr	r3, [r7, #12]
 81069b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81069b6:	b2db      	uxtb	r3, r3
 81069b8:	2b01      	cmp	r3, #1
 81069ba:	f040 8086 	bne.w	8106aca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 81069be:	68fb      	ldr	r3, [r7, #12]
 81069c0:	2200      	movs	r2, #0
 81069c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 81069c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81069c6:	683b      	ldr	r3, [r7, #0]
 81069c8:	441a      	add	r2, r3
 81069ca:	68fb      	ldr	r3, [r7, #12]
 81069cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81069ce:	429a      	cmp	r2, r3
 81069d0:	d907      	bls.n	81069e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 81069d2:	68fb      	ldr	r3, [r7, #12]
 81069d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81069d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 81069da:	68fb      	ldr	r3, [r7, #12]
 81069dc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 81069de:	2301      	movs	r3, #1
 81069e0:	e074      	b.n	8106acc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 81069e2:	68fb      	ldr	r3, [r7, #12]
 81069e4:	2203      	movs	r2, #3
 81069e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 81069ea:	68fb      	ldr	r3, [r7, #12]
 81069ec:	681b      	ldr	r3, [r3, #0]
 81069ee:	2200      	movs	r2, #0
 81069f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 81069f2:	68fb      	ldr	r3, [r7, #12]
 81069f4:	68ba      	ldr	r2, [r7, #8]
 81069f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 81069f8:	683b      	ldr	r3, [r7, #0]
 81069fa:	025a      	lsls	r2, r3, #9
 81069fc:	68fb      	ldr	r3, [r7, #12]
 81069fe:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8106a00:	68fb      	ldr	r3, [r7, #12]
 8106a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106a04:	2b01      	cmp	r3, #1
 8106a06:	d002      	beq.n	8106a0e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8106a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106a0a:	025b      	lsls	r3, r3, #9
 8106a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8106a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8106a12:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8106a14:	683b      	ldr	r3, [r7, #0]
 8106a16:	025b      	lsls	r3, r3, #9
 8106a18:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8106a1a:	2390      	movs	r3, #144	@ 0x90
 8106a1c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8106a1e:	2302      	movs	r3, #2
 8106a20:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8106a22:	2300      	movs	r3, #0
 8106a24:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8106a26:	2300      	movs	r3, #0
 8106a28:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8106a2a:	68fb      	ldr	r3, [r7, #12]
 8106a2c:	681b      	ldr	r3, [r3, #0]
 8106a2e:	f107 0210 	add.w	r2, r7, #16
 8106a32:	4611      	mov	r1, r2
 8106a34:	4618      	mov	r0, r3
 8106a36:	f001 fa75 	bl	8107f24 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8106a3a:	68fb      	ldr	r3, [r7, #12]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	68da      	ldr	r2, [r3, #12]
 8106a40:	68fb      	ldr	r3, [r7, #12]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8106a48:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8106a4a:	68fb      	ldr	r3, [r7, #12]
 8106a4c:	681b      	ldr	r3, [r3, #0]
 8106a4e:	68ba      	ldr	r2, [r7, #8]
 8106a50:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8106a52:	68fb      	ldr	r3, [r7, #12]
 8106a54:	681b      	ldr	r3, [r3, #0]
 8106a56:	2201      	movs	r2, #1
 8106a58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8106a5a:	683b      	ldr	r3, [r7, #0]
 8106a5c:	2b01      	cmp	r3, #1
 8106a5e:	d90a      	bls.n	8106a76 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8106a60:	68fb      	ldr	r3, [r7, #12]
 8106a62:	2282      	movs	r2, #130	@ 0x82
 8106a64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8106a66:	68fb      	ldr	r3, [r7, #12]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106a6c:	4618      	mov	r0, r3
 8106a6e:	f001 facb 	bl	8108008 <SDMMC_CmdReadMultiBlock>
 8106a72:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8106a74:	e009      	b.n	8106a8a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8106a76:	68fb      	ldr	r3, [r7, #12]
 8106a78:	2281      	movs	r2, #129	@ 0x81
 8106a7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8106a7c:	68fb      	ldr	r3, [r7, #12]
 8106a7e:	681b      	ldr	r3, [r3, #0]
 8106a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106a82:	4618      	mov	r0, r3
 8106a84:	f001 fa9d 	bl	8107fc2 <SDMMC_CmdReadSingleBlock>
 8106a88:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8106a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a8c:	2b00      	cmp	r3, #0
 8106a8e:	d012      	beq.n	8106ab6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106a90:	68fb      	ldr	r3, [r7, #12]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	4a0f      	ldr	r2, [pc, #60]	@ (8106ad4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8106a96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8106a98:	68fb      	ldr	r3, [r7, #12]
 8106a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a9e:	431a      	orrs	r2, r3
 8106aa0:	68fb      	ldr	r3, [r7, #12]
 8106aa2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8106aa4:	68fb      	ldr	r3, [r7, #12]
 8106aa6:	2201      	movs	r2, #1
 8106aa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8106aac:	68fb      	ldr	r3, [r7, #12]
 8106aae:	2200      	movs	r2, #0
 8106ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8106ab2:	2301      	movs	r3, #1
 8106ab4:	e00a      	b.n	8106acc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8106ab6:	68fb      	ldr	r3, [r7, #12]
 8106ab8:	681b      	ldr	r3, [r3, #0]
 8106aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8106abc:	68fb      	ldr	r3, [r7, #12]
 8106abe:	681b      	ldr	r3, [r3, #0]
 8106ac0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8106ac4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8106ac6:	2300      	movs	r3, #0
 8106ac8:	e000      	b.n	8106acc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8106aca:	2302      	movs	r3, #2
  }
}
 8106acc:	4618      	mov	r0, r3
 8106ace:	3730      	adds	r7, #48	@ 0x30
 8106ad0:	46bd      	mov	sp, r7
 8106ad2:	bd80      	pop	{r7, pc}
 8106ad4:	1fe00fff 	.word	0x1fe00fff

08106ad8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8106ad8:	b580      	push	{r7, lr}
 8106ada:	b08c      	sub	sp, #48	@ 0x30
 8106adc:	af00      	add	r7, sp, #0
 8106ade:	60f8      	str	r0, [r7, #12]
 8106ae0:	60b9      	str	r1, [r7, #8]
 8106ae2:	607a      	str	r2, [r7, #4]
 8106ae4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8106aea:	68bb      	ldr	r3, [r7, #8]
 8106aec:	2b00      	cmp	r3, #0
 8106aee:	d107      	bne.n	8106b00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8106af0:	68fb      	ldr	r3, [r7, #12]
 8106af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106af4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8106af8:	68fb      	ldr	r3, [r7, #12]
 8106afa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8106afc:	2301      	movs	r3, #1
 8106afe:	e08d      	b.n	8106c1c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8106b00:	68fb      	ldr	r3, [r7, #12]
 8106b02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8106b06:	b2db      	uxtb	r3, r3
 8106b08:	2b01      	cmp	r3, #1
 8106b0a:	f040 8086 	bne.w	8106c1a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8106b0e:	68fb      	ldr	r3, [r7, #12]
 8106b10:	2200      	movs	r2, #0
 8106b12:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8106b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8106b16:	683b      	ldr	r3, [r7, #0]
 8106b18:	441a      	add	r2, r3
 8106b1a:	68fb      	ldr	r3, [r7, #12]
 8106b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106b1e:	429a      	cmp	r2, r3
 8106b20:	d907      	bls.n	8106b32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8106b22:	68fb      	ldr	r3, [r7, #12]
 8106b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106b26:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8106b2a:	68fb      	ldr	r3, [r7, #12]
 8106b2c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8106b2e:	2301      	movs	r3, #1
 8106b30:	e074      	b.n	8106c1c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8106b32:	68fb      	ldr	r3, [r7, #12]
 8106b34:	2203      	movs	r2, #3
 8106b36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8106b3a:	68fb      	ldr	r3, [r7, #12]
 8106b3c:	681b      	ldr	r3, [r3, #0]
 8106b3e:	2200      	movs	r2, #0
 8106b40:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8106b42:	68fb      	ldr	r3, [r7, #12]
 8106b44:	68ba      	ldr	r2, [r7, #8]
 8106b46:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8106b48:	683b      	ldr	r3, [r7, #0]
 8106b4a:	025a      	lsls	r2, r3, #9
 8106b4c:	68fb      	ldr	r3, [r7, #12]
 8106b4e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8106b50:	68fb      	ldr	r3, [r7, #12]
 8106b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106b54:	2b01      	cmp	r3, #1
 8106b56:	d002      	beq.n	8106b5e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8106b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106b5a:	025b      	lsls	r3, r3, #9
 8106b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8106b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8106b62:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8106b64:	683b      	ldr	r3, [r7, #0]
 8106b66:	025b      	lsls	r3, r3, #9
 8106b68:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8106b6a:	2390      	movs	r3, #144	@ 0x90
 8106b6c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8106b6e:	2300      	movs	r3, #0
 8106b70:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8106b72:	2300      	movs	r3, #0
 8106b74:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8106b76:	2300      	movs	r3, #0
 8106b78:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8106b7a:	68fb      	ldr	r3, [r7, #12]
 8106b7c:	681b      	ldr	r3, [r3, #0]
 8106b7e:	f107 0210 	add.w	r2, r7, #16
 8106b82:	4611      	mov	r1, r2
 8106b84:	4618      	mov	r0, r3
 8106b86:	f001 f9cd 	bl	8107f24 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8106b8a:	68fb      	ldr	r3, [r7, #12]
 8106b8c:	681b      	ldr	r3, [r3, #0]
 8106b8e:	68da      	ldr	r2, [r3, #12]
 8106b90:	68fb      	ldr	r3, [r7, #12]
 8106b92:	681b      	ldr	r3, [r3, #0]
 8106b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8106b98:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8106b9a:	68fb      	ldr	r3, [r7, #12]
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	68ba      	ldr	r2, [r7, #8]
 8106ba0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8106ba2:	68fb      	ldr	r3, [r7, #12]
 8106ba4:	681b      	ldr	r3, [r3, #0]
 8106ba6:	2201      	movs	r2, #1
 8106ba8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8106baa:	683b      	ldr	r3, [r7, #0]
 8106bac:	2b01      	cmp	r3, #1
 8106bae:	d90a      	bls.n	8106bc6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8106bb0:	68fb      	ldr	r3, [r7, #12]
 8106bb2:	22a0      	movs	r2, #160	@ 0xa0
 8106bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8106bb6:	68fb      	ldr	r3, [r7, #12]
 8106bb8:	681b      	ldr	r3, [r3, #0]
 8106bba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106bbc:	4618      	mov	r0, r3
 8106bbe:	f001 fa69 	bl	8108094 <SDMMC_CmdWriteMultiBlock>
 8106bc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8106bc4:	e009      	b.n	8106bda <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8106bc6:	68fb      	ldr	r3, [r7, #12]
 8106bc8:	2290      	movs	r2, #144	@ 0x90
 8106bca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8106bcc:	68fb      	ldr	r3, [r7, #12]
 8106bce:	681b      	ldr	r3, [r3, #0]
 8106bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8106bd2:	4618      	mov	r0, r3
 8106bd4:	f001 fa3b 	bl	810804e <SDMMC_CmdWriteSingleBlock>
 8106bd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8106bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106bdc:	2b00      	cmp	r3, #0
 8106bde:	d012      	beq.n	8106c06 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106be0:	68fb      	ldr	r3, [r7, #12]
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	4a0f      	ldr	r2, [pc, #60]	@ (8106c24 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8106be6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8106be8:	68fb      	ldr	r3, [r7, #12]
 8106bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106bee:	431a      	orrs	r2, r3
 8106bf0:	68fb      	ldr	r3, [r7, #12]
 8106bf2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8106bf4:	68fb      	ldr	r3, [r7, #12]
 8106bf6:	2201      	movs	r2, #1
 8106bf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8106bfc:	68fb      	ldr	r3, [r7, #12]
 8106bfe:	2200      	movs	r2, #0
 8106c00:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8106c02:	2301      	movs	r3, #1
 8106c04:	e00a      	b.n	8106c1c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8106c06:	68fb      	ldr	r3, [r7, #12]
 8106c08:	681b      	ldr	r3, [r3, #0]
 8106c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8106c0c:	68fb      	ldr	r3, [r7, #12]
 8106c0e:	681b      	ldr	r3, [r3, #0]
 8106c10:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8106c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8106c16:	2300      	movs	r3, #0
 8106c18:	e000      	b.n	8106c1c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8106c1a:	2302      	movs	r3, #2
  }
}
 8106c1c:	4618      	mov	r0, r3
 8106c1e:	3730      	adds	r7, #48	@ 0x30
 8106c20:	46bd      	mov	sp, r7
 8106c22:	bd80      	pop	{r7, pc}
 8106c24:	1fe00fff 	.word	0x1fe00fff

08106c28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8106c28:	b480      	push	{r7}
 8106c2a:	b083      	sub	sp, #12
 8106c2c:	af00      	add	r7, sp, #0
 8106c2e:	6078      	str	r0, [r7, #4]
 8106c30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106c36:	0f9b      	lsrs	r3, r3, #30
 8106c38:	b2da      	uxtb	r2, r3
 8106c3a:	683b      	ldr	r3, [r7, #0]
 8106c3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8106c3e:	687b      	ldr	r3, [r7, #4]
 8106c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106c42:	0e9b      	lsrs	r3, r3, #26
 8106c44:	b2db      	uxtb	r3, r3
 8106c46:	f003 030f 	and.w	r3, r3, #15
 8106c4a:	b2da      	uxtb	r2, r3
 8106c4c:	683b      	ldr	r3, [r7, #0]
 8106c4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8106c50:	687b      	ldr	r3, [r7, #4]
 8106c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106c54:	0e1b      	lsrs	r3, r3, #24
 8106c56:	b2db      	uxtb	r3, r3
 8106c58:	f003 0303 	and.w	r3, r3, #3
 8106c5c:	b2da      	uxtb	r2, r3
 8106c5e:	683b      	ldr	r3, [r7, #0]
 8106c60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106c66:	0c1b      	lsrs	r3, r3, #16
 8106c68:	b2da      	uxtb	r2, r3
 8106c6a:	683b      	ldr	r3, [r7, #0]
 8106c6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8106c6e:	687b      	ldr	r3, [r7, #4]
 8106c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106c72:	0a1b      	lsrs	r3, r3, #8
 8106c74:	b2da      	uxtb	r2, r3
 8106c76:	683b      	ldr	r3, [r7, #0]
 8106c78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8106c7e:	b2da      	uxtb	r2, r3
 8106c80:	683b      	ldr	r3, [r7, #0]
 8106c82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106c88:	0d1b      	lsrs	r3, r3, #20
 8106c8a:	b29a      	uxth	r2, r3
 8106c8c:	683b      	ldr	r3, [r7, #0]
 8106c8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106c94:	0c1b      	lsrs	r3, r3, #16
 8106c96:	b2db      	uxtb	r3, r3
 8106c98:	f003 030f 	and.w	r3, r3, #15
 8106c9c:	b2da      	uxtb	r2, r3
 8106c9e:	683b      	ldr	r3, [r7, #0]
 8106ca0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106ca6:	0bdb      	lsrs	r3, r3, #15
 8106ca8:	b2db      	uxtb	r3, r3
 8106caa:	f003 0301 	and.w	r3, r3, #1
 8106cae:	b2da      	uxtb	r2, r3
 8106cb0:	683b      	ldr	r3, [r7, #0]
 8106cb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106cb8:	0b9b      	lsrs	r3, r3, #14
 8106cba:	b2db      	uxtb	r3, r3
 8106cbc:	f003 0301 	and.w	r3, r3, #1
 8106cc0:	b2da      	uxtb	r2, r3
 8106cc2:	683b      	ldr	r3, [r7, #0]
 8106cc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106cca:	0b5b      	lsrs	r3, r3, #13
 8106ccc:	b2db      	uxtb	r3, r3
 8106cce:	f003 0301 	and.w	r3, r3, #1
 8106cd2:	b2da      	uxtb	r2, r3
 8106cd4:	683b      	ldr	r3, [r7, #0]
 8106cd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106cdc:	0b1b      	lsrs	r3, r3, #12
 8106cde:	b2db      	uxtb	r3, r3
 8106ce0:	f003 0301 	and.w	r3, r3, #1
 8106ce4:	b2da      	uxtb	r2, r3
 8106ce6:	683b      	ldr	r3, [r7, #0]
 8106ce8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8106cea:	683b      	ldr	r3, [r7, #0]
 8106cec:	2200      	movs	r2, #0
 8106cee:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106cf4:	2b00      	cmp	r3, #0
 8106cf6:	d163      	bne.n	8106dc0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106cfc:	009a      	lsls	r2, r3, #2
 8106cfe:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8106d02:	4013      	ands	r3, r2
 8106d04:	687a      	ldr	r2, [r7, #4]
 8106d06:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8106d08:	0f92      	lsrs	r2, r2, #30
 8106d0a:	431a      	orrs	r2, r3
 8106d0c:	683b      	ldr	r3, [r7, #0]
 8106d0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106d14:	0edb      	lsrs	r3, r3, #27
 8106d16:	b2db      	uxtb	r3, r3
 8106d18:	f003 0307 	and.w	r3, r3, #7
 8106d1c:	b2da      	uxtb	r2, r3
 8106d1e:	683b      	ldr	r3, [r7, #0]
 8106d20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106d26:	0e1b      	lsrs	r3, r3, #24
 8106d28:	b2db      	uxtb	r3, r3
 8106d2a:	f003 0307 	and.w	r3, r3, #7
 8106d2e:	b2da      	uxtb	r2, r3
 8106d30:	683b      	ldr	r3, [r7, #0]
 8106d32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106d38:	0d5b      	lsrs	r3, r3, #21
 8106d3a:	b2db      	uxtb	r3, r3
 8106d3c:	f003 0307 	and.w	r3, r3, #7
 8106d40:	b2da      	uxtb	r2, r3
 8106d42:	683b      	ldr	r3, [r7, #0]
 8106d44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106d4a:	0c9b      	lsrs	r3, r3, #18
 8106d4c:	b2db      	uxtb	r3, r3
 8106d4e:	f003 0307 	and.w	r3, r3, #7
 8106d52:	b2da      	uxtb	r2, r3
 8106d54:	683b      	ldr	r3, [r7, #0]
 8106d56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106d5c:	0bdb      	lsrs	r3, r3, #15
 8106d5e:	b2db      	uxtb	r3, r3
 8106d60:	f003 0307 	and.w	r3, r3, #7
 8106d64:	b2da      	uxtb	r2, r3
 8106d66:	683b      	ldr	r3, [r7, #0]
 8106d68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8106d6a:	683b      	ldr	r3, [r7, #0]
 8106d6c:	691b      	ldr	r3, [r3, #16]
 8106d6e:	1c5a      	adds	r2, r3, #1
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8106d74:	683b      	ldr	r3, [r7, #0]
 8106d76:	7e1b      	ldrb	r3, [r3, #24]
 8106d78:	b2db      	uxtb	r3, r3
 8106d7a:	f003 0307 	and.w	r3, r3, #7
 8106d7e:	3302      	adds	r3, #2
 8106d80:	2201      	movs	r2, #1
 8106d82:	fa02 f303 	lsl.w	r3, r2, r3
 8106d86:	687a      	ldr	r2, [r7, #4]
 8106d88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8106d8a:	fb03 f202 	mul.w	r2, r3, r2
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8106d92:	683b      	ldr	r3, [r7, #0]
 8106d94:	7a1b      	ldrb	r3, [r3, #8]
 8106d96:	b2db      	uxtb	r3, r3
 8106d98:	f003 030f 	and.w	r3, r3, #15
 8106d9c:	2201      	movs	r2, #1
 8106d9e:	409a      	lsls	r2, r3
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8106da4:	687b      	ldr	r3, [r7, #4]
 8106da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106da8:	687a      	ldr	r2, [r7, #4]
 8106daa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8106dac:	0a52      	lsrs	r2, r2, #9
 8106dae:	fb03 f202 	mul.w	r2, r3, r2
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8106dbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8106dbe:	e031      	b.n	8106e24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106dc4:	2b01      	cmp	r3, #1
 8106dc6:	d11d      	bne.n	8106e04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8106dc8:	687b      	ldr	r3, [r7, #4]
 8106dca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106dcc:	041b      	lsls	r3, r3, #16
 8106dce:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8106dd2:	687b      	ldr	r3, [r7, #4]
 8106dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106dd6:	0c1b      	lsrs	r3, r3, #16
 8106dd8:	431a      	orrs	r2, r3
 8106dda:	683b      	ldr	r3, [r7, #0]
 8106ddc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8106dde:	683b      	ldr	r3, [r7, #0]
 8106de0:	691b      	ldr	r3, [r3, #16]
 8106de2:	3301      	adds	r3, #1
 8106de4:	029a      	lsls	r2, r3, #10
 8106de6:	687b      	ldr	r3, [r7, #4]
 8106de8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8106dea:	687b      	ldr	r3, [r7, #4]
 8106dec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8106df2:	687b      	ldr	r3, [r7, #4]
 8106df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8106df8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	655a      	str	r2, [r3, #84]	@ 0x54
 8106e02:	e00f      	b.n	8106e24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106e04:	687b      	ldr	r3, [r7, #4]
 8106e06:	681b      	ldr	r3, [r3, #0]
 8106e08:	4a58      	ldr	r2, [pc, #352]	@ (8106f6c <HAL_SD_GetCardCSD+0x344>)
 8106e0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8106e10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	2201      	movs	r2, #1
 8106e1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8106e20:	2301      	movs	r3, #1
 8106e22:	e09d      	b.n	8106f60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106e28:	0b9b      	lsrs	r3, r3, #14
 8106e2a:	b2db      	uxtb	r3, r3
 8106e2c:	f003 0301 	and.w	r3, r3, #1
 8106e30:	b2da      	uxtb	r2, r3
 8106e32:	683b      	ldr	r3, [r7, #0]
 8106e34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106e3a:	09db      	lsrs	r3, r3, #7
 8106e3c:	b2db      	uxtb	r3, r3
 8106e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106e42:	b2da      	uxtb	r2, r3
 8106e44:	683b      	ldr	r3, [r7, #0]
 8106e46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106e4c:	b2db      	uxtb	r3, r3
 8106e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106e52:	b2da      	uxtb	r2, r3
 8106e54:	683b      	ldr	r3, [r7, #0]
 8106e56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106e5c:	0fdb      	lsrs	r3, r3, #31
 8106e5e:	b2da      	uxtb	r2, r3
 8106e60:	683b      	ldr	r3, [r7, #0]
 8106e62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106e68:	0f5b      	lsrs	r3, r3, #29
 8106e6a:	b2db      	uxtb	r3, r3
 8106e6c:	f003 0303 	and.w	r3, r3, #3
 8106e70:	b2da      	uxtb	r2, r3
 8106e72:	683b      	ldr	r3, [r7, #0]
 8106e74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8106e76:	687b      	ldr	r3, [r7, #4]
 8106e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106e7a:	0e9b      	lsrs	r3, r3, #26
 8106e7c:	b2db      	uxtb	r3, r3
 8106e7e:	f003 0307 	and.w	r3, r3, #7
 8106e82:	b2da      	uxtb	r2, r3
 8106e84:	683b      	ldr	r3, [r7, #0]
 8106e86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8106e88:	687b      	ldr	r3, [r7, #4]
 8106e8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106e8c:	0d9b      	lsrs	r3, r3, #22
 8106e8e:	b2db      	uxtb	r3, r3
 8106e90:	f003 030f 	and.w	r3, r3, #15
 8106e94:	b2da      	uxtb	r2, r3
 8106e96:	683b      	ldr	r3, [r7, #0]
 8106e98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8106e9a:	687b      	ldr	r3, [r7, #4]
 8106e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106e9e:	0d5b      	lsrs	r3, r3, #21
 8106ea0:	b2db      	uxtb	r3, r3
 8106ea2:	f003 0301 	and.w	r3, r3, #1
 8106ea6:	b2da      	uxtb	r2, r3
 8106ea8:	683b      	ldr	r3, [r7, #0]
 8106eaa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8106eae:	683b      	ldr	r3, [r7, #0]
 8106eb0:	2200      	movs	r2, #0
 8106eb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106eba:	0c1b      	lsrs	r3, r3, #16
 8106ebc:	b2db      	uxtb	r3, r3
 8106ebe:	f003 0301 	and.w	r3, r3, #1
 8106ec2:	b2da      	uxtb	r2, r3
 8106ec4:	683b      	ldr	r3, [r7, #0]
 8106ec6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8106eca:	687b      	ldr	r3, [r7, #4]
 8106ecc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106ece:	0bdb      	lsrs	r3, r3, #15
 8106ed0:	b2db      	uxtb	r3, r3
 8106ed2:	f003 0301 	and.w	r3, r3, #1
 8106ed6:	b2da      	uxtb	r2, r3
 8106ed8:	683b      	ldr	r3, [r7, #0]
 8106eda:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106ee2:	0b9b      	lsrs	r3, r3, #14
 8106ee4:	b2db      	uxtb	r3, r3
 8106ee6:	f003 0301 	and.w	r3, r3, #1
 8106eea:	b2da      	uxtb	r2, r3
 8106eec:	683b      	ldr	r3, [r7, #0]
 8106eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8106ef2:	687b      	ldr	r3, [r7, #4]
 8106ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106ef6:	0b5b      	lsrs	r3, r3, #13
 8106ef8:	b2db      	uxtb	r3, r3
 8106efa:	f003 0301 	and.w	r3, r3, #1
 8106efe:	b2da      	uxtb	r2, r3
 8106f00:	683b      	ldr	r3, [r7, #0]
 8106f02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8106f06:	687b      	ldr	r3, [r7, #4]
 8106f08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106f0a:	0b1b      	lsrs	r3, r3, #12
 8106f0c:	b2db      	uxtb	r3, r3
 8106f0e:	f003 0301 	and.w	r3, r3, #1
 8106f12:	b2da      	uxtb	r2, r3
 8106f14:	683b      	ldr	r3, [r7, #0]
 8106f16:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106f1e:	0a9b      	lsrs	r3, r3, #10
 8106f20:	b2db      	uxtb	r3, r3
 8106f22:	f003 0303 	and.w	r3, r3, #3
 8106f26:	b2da      	uxtb	r2, r3
 8106f28:	683b      	ldr	r3, [r7, #0]
 8106f2a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106f32:	0a1b      	lsrs	r3, r3, #8
 8106f34:	b2db      	uxtb	r3, r3
 8106f36:	f003 0303 	and.w	r3, r3, #3
 8106f3a:	b2da      	uxtb	r2, r3
 8106f3c:	683b      	ldr	r3, [r7, #0]
 8106f3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8106f42:	687b      	ldr	r3, [r7, #4]
 8106f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8106f46:	085b      	lsrs	r3, r3, #1
 8106f48:	b2db      	uxtb	r3, r3
 8106f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106f4e:	b2da      	uxtb	r2, r3
 8106f50:	683b      	ldr	r3, [r7, #0]
 8106f52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8106f56:	683b      	ldr	r3, [r7, #0]
 8106f58:	2201      	movs	r2, #1
 8106f5a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8106f5e:	2300      	movs	r3, #0
}
 8106f60:	4618      	mov	r0, r3
 8106f62:	370c      	adds	r7, #12
 8106f64:	46bd      	mov	sp, r7
 8106f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f6a:	4770      	bx	lr
 8106f6c:	1fe00fff 	.word	0x1fe00fff

08106f70 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8106f70:	b580      	push	{r7, lr}
 8106f72:	b094      	sub	sp, #80	@ 0x50
 8106f74:	af00      	add	r7, sp, #0
 8106f76:	6078      	str	r0, [r7, #4]
 8106f78:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8106f7a:	2300      	movs	r3, #0
 8106f7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8106f86:	b2db      	uxtb	r3, r3
 8106f88:	2b03      	cmp	r3, #3
 8106f8a:	d101      	bne.n	8106f90 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8106f8c:	2301      	movs	r3, #1
 8106f8e:	e0a7      	b.n	81070e0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8106f90:	f107 0308 	add.w	r3, r7, #8
 8106f94:	4619      	mov	r1, r3
 8106f96:	6878      	ldr	r0, [r7, #4]
 8106f98:	f000 fb62 	bl	8107660 <SD_SendSDStatus>
 8106f9c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8106f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8106fa0:	2b00      	cmp	r3, #0
 8106fa2:	d011      	beq.n	8106fc8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	4a4f      	ldr	r2, [pc, #316]	@ (81070e8 <HAL_SD_GetCardStatus+0x178>)
 8106faa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8106fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8106fb2:	431a      	orrs	r2, r3
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	2201      	movs	r2, #1
 8106fbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8106fc0:	2301      	movs	r3, #1
 8106fc2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8106fc6:	e070      	b.n	81070aa <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8106fc8:	68bb      	ldr	r3, [r7, #8]
 8106fca:	099b      	lsrs	r3, r3, #6
 8106fcc:	b2db      	uxtb	r3, r3
 8106fce:	f003 0303 	and.w	r3, r3, #3
 8106fd2:	b2da      	uxtb	r2, r3
 8106fd4:	683b      	ldr	r3, [r7, #0]
 8106fd6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8106fd8:	68bb      	ldr	r3, [r7, #8]
 8106fda:	095b      	lsrs	r3, r3, #5
 8106fdc:	b2db      	uxtb	r3, r3
 8106fde:	f003 0301 	and.w	r3, r3, #1
 8106fe2:	b2da      	uxtb	r2, r3
 8106fe4:	683b      	ldr	r3, [r7, #0]
 8106fe6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8106fe8:	68bb      	ldr	r3, [r7, #8]
 8106fea:	0a1b      	lsrs	r3, r3, #8
 8106fec:	b29b      	uxth	r3, r3
 8106fee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8106ff2:	b29a      	uxth	r2, r3
 8106ff4:	68bb      	ldr	r3, [r7, #8]
 8106ff6:	0e1b      	lsrs	r3, r3, #24
 8106ff8:	b29b      	uxth	r3, r3
 8106ffa:	4313      	orrs	r3, r2
 8106ffc:	b29a      	uxth	r2, r3
 8106ffe:	683b      	ldr	r3, [r7, #0]
 8107000:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8107002:	68fb      	ldr	r3, [r7, #12]
 8107004:	061a      	lsls	r2, r3, #24
 8107006:	68fb      	ldr	r3, [r7, #12]
 8107008:	021b      	lsls	r3, r3, #8
 810700a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810700e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8107010:	68fb      	ldr	r3, [r7, #12]
 8107012:	0a1b      	lsrs	r3, r3, #8
 8107014:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8107018:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810701a:	68fb      	ldr	r3, [r7, #12]
 810701c:	0e1b      	lsrs	r3, r3, #24
 810701e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8107020:	683b      	ldr	r3, [r7, #0]
 8107022:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8107024:	693b      	ldr	r3, [r7, #16]
 8107026:	b2da      	uxtb	r2, r3
 8107028:	683b      	ldr	r3, [r7, #0]
 810702a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 810702c:	693b      	ldr	r3, [r7, #16]
 810702e:	0a1b      	lsrs	r3, r3, #8
 8107030:	b2da      	uxtb	r2, r3
 8107032:	683b      	ldr	r3, [r7, #0]
 8107034:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8107036:	693b      	ldr	r3, [r7, #16]
 8107038:	0d1b      	lsrs	r3, r3, #20
 810703a:	b2db      	uxtb	r3, r3
 810703c:	f003 030f 	and.w	r3, r3, #15
 8107040:	b2da      	uxtb	r2, r3
 8107042:	683b      	ldr	r3, [r7, #0]
 8107044:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8107046:	693b      	ldr	r3, [r7, #16]
 8107048:	0c1b      	lsrs	r3, r3, #16
 810704a:	b29b      	uxth	r3, r3
 810704c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8107050:	b29a      	uxth	r2, r3
 8107052:	697b      	ldr	r3, [r7, #20]
 8107054:	b29b      	uxth	r3, r3
 8107056:	b2db      	uxtb	r3, r3
 8107058:	b29b      	uxth	r3, r3
 810705a:	4313      	orrs	r3, r2
 810705c:	b29a      	uxth	r2, r3
 810705e:	683b      	ldr	r3, [r7, #0]
 8107060:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8107062:	697b      	ldr	r3, [r7, #20]
 8107064:	0a9b      	lsrs	r3, r3, #10
 8107066:	b2db      	uxtb	r3, r3
 8107068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810706c:	b2da      	uxtb	r2, r3
 810706e:	683b      	ldr	r3, [r7, #0]
 8107070:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8107072:	697b      	ldr	r3, [r7, #20]
 8107074:	0a1b      	lsrs	r3, r3, #8
 8107076:	b2db      	uxtb	r3, r3
 8107078:	f003 0303 	and.w	r3, r3, #3
 810707c:	b2da      	uxtb	r2, r3
 810707e:	683b      	ldr	r3, [r7, #0]
 8107080:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8107082:	697b      	ldr	r3, [r7, #20]
 8107084:	091b      	lsrs	r3, r3, #4
 8107086:	b2db      	uxtb	r3, r3
 8107088:	f003 030f 	and.w	r3, r3, #15
 810708c:	b2da      	uxtb	r2, r3
 810708e:	683b      	ldr	r3, [r7, #0]
 8107090:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8107092:	697b      	ldr	r3, [r7, #20]
 8107094:	b2db      	uxtb	r3, r3
 8107096:	f003 030f 	and.w	r3, r3, #15
 810709a:	b2da      	uxtb	r2, r3
 810709c:	683b      	ldr	r3, [r7, #0]
 810709e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 81070a0:	69bb      	ldr	r3, [r7, #24]
 81070a2:	0e1b      	lsrs	r3, r3, #24
 81070a4:	b2da      	uxtb	r2, r3
 81070a6:	683b      	ldr	r3, [r7, #0]
 81070a8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 81070aa:	687b      	ldr	r3, [r7, #4]
 81070ac:	681b      	ldr	r3, [r3, #0]
 81070ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81070b2:	4618      	mov	r0, r3
 81070b4:	f000 ff62 	bl	8107f7c <SDMMC_CmdBlockLength>
 81070b8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81070ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81070bc:	2b00      	cmp	r3, #0
 81070be:	d00d      	beq.n	81070dc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	681b      	ldr	r3, [r3, #0]
 81070c4:	4a08      	ldr	r2, [pc, #32]	@ (81070e8 <HAL_SD_GetCardStatus+0x178>)
 81070c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81070cc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	2201      	movs	r2, #1
 81070d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 81070d6:	2301      	movs	r3, #1
 81070d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 81070dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 81070e0:	4618      	mov	r0, r3
 81070e2:	3750      	adds	r7, #80	@ 0x50
 81070e4:	46bd      	mov	sp, r7
 81070e6:	bd80      	pop	{r7, pc}
 81070e8:	1fe00fff 	.word	0x1fe00fff

081070ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 81070ec:	b480      	push	{r7}
 81070ee:	b083      	sub	sp, #12
 81070f0:	af00      	add	r7, sp, #0
 81070f2:	6078      	str	r0, [r7, #4]
 81070f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81070fa:	683b      	ldr	r3, [r7, #0]
 81070fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8107102:	683b      	ldr	r3, [r7, #0]
 8107104:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810710a:	683b      	ldr	r3, [r7, #0]
 810710c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8107112:	683b      	ldr	r3, [r7, #0]
 8107114:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810711a:	683b      	ldr	r3, [r7, #0]
 810711c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8107122:	683b      	ldr	r3, [r7, #0]
 8107124:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8107126:	687b      	ldr	r3, [r7, #4]
 8107128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810712a:	683b      	ldr	r3, [r7, #0]
 810712c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107132:	683b      	ldr	r3, [r7, #0]
 8107134:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8107136:	2300      	movs	r3, #0
}
 8107138:	4618      	mov	r0, r3
 810713a:	370c      	adds	r7, #12
 810713c:	46bd      	mov	sp, r7
 810713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107142:	4770      	bx	lr

08107144 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8107144:	b590      	push	{r4, r7, lr}
 8107146:	b08d      	sub	sp, #52	@ 0x34
 8107148:	af02      	add	r7, sp, #8
 810714a:	6078      	str	r0, [r7, #4]
 810714c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 810714e:	2300      	movs	r3, #0
 8107150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	2203      	movs	r2, #3
 8107158:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 810715c:	687b      	ldr	r3, [r7, #4]
 810715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107160:	2b03      	cmp	r3, #3
 8107162:	d02e      	beq.n	81071c2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8107164:	683b      	ldr	r3, [r7, #0]
 8107166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810716a:	d106      	bne.n	810717a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810716c:	687b      	ldr	r3, [r7, #4]
 810716e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107170:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8107174:	687b      	ldr	r3, [r7, #4]
 8107176:	635a      	str	r2, [r3, #52]	@ 0x34
 8107178:	e029      	b.n	81071ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810717a:	683b      	ldr	r3, [r7, #0]
 810717c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8107180:	d10a      	bne.n	8107198 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8107182:	6878      	ldr	r0, [r7, #4]
 8107184:	f000 fb64 	bl	8107850 <SD_WideBus_Enable>
 8107188:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810718e:	6a3b      	ldr	r3, [r7, #32]
 8107190:	431a      	orrs	r2, r3
 8107192:	687b      	ldr	r3, [r7, #4]
 8107194:	635a      	str	r2, [r3, #52]	@ 0x34
 8107196:	e01a      	b.n	81071ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8107198:	683b      	ldr	r3, [r7, #0]
 810719a:	2b00      	cmp	r3, #0
 810719c:	d10a      	bne.n	81071b4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 810719e:	6878      	ldr	r0, [r7, #4]
 81071a0:	f000 fba1 	bl	81078e6 <SD_WideBus_Disable>
 81071a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 81071a6:	687b      	ldr	r3, [r7, #4]
 81071a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81071aa:	6a3b      	ldr	r3, [r7, #32]
 81071ac:	431a      	orrs	r2, r3
 81071ae:	687b      	ldr	r3, [r7, #4]
 81071b0:	635a      	str	r2, [r3, #52]	@ 0x34
 81071b2:	e00c      	b.n	81071ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 81071b4:	687b      	ldr	r3, [r7, #4]
 81071b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81071b8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	635a      	str	r2, [r3, #52]	@ 0x34
 81071c0:	e005      	b.n	81071ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81071c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 81071ca:	687b      	ldr	r3, [r7, #4]
 81071cc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 81071ce:	687b      	ldr	r3, [r7, #4]
 81071d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81071d2:	2b00      	cmp	r3, #0
 81071d4:	d007      	beq.n	81071e6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	681b      	ldr	r3, [r3, #0]
 81071da:	4a5f      	ldr	r2, [pc, #380]	@ (8107358 <HAL_SD_ConfigWideBusOperation+0x214>)
 81071dc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 81071de:	2301      	movs	r3, #1
 81071e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 81071e4:	e096      	b.n	8107314 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81071e6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 81071ea:	f04f 0100 	mov.w	r1, #0
 81071ee:	f7fd ffa3 	bl	8105138 <HAL_RCCEx_GetPeriphCLKFreq>
 81071f2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 81071f4:	69fb      	ldr	r3, [r7, #28]
 81071f6:	2b00      	cmp	r3, #0
 81071f8:	f000 8083 	beq.w	8107302 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 81071fc:	687b      	ldr	r3, [r7, #4]
 81071fe:	685b      	ldr	r3, [r3, #4]
 8107200:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	689b      	ldr	r3, [r3, #8]
 8107206:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8107208:	683b      	ldr	r3, [r7, #0]
 810720a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	691b      	ldr	r3, [r3, #16]
 8107210:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	695a      	ldr	r2, [r3, #20]
 8107216:	69fb      	ldr	r3, [r7, #28]
 8107218:	4950      	ldr	r1, [pc, #320]	@ (810735c <HAL_SD_ConfigWideBusOperation+0x218>)
 810721a:	fba1 1303 	umull	r1, r3, r1, r3
 810721e:	0e1b      	lsrs	r3, r3, #24
 8107220:	429a      	cmp	r2, r3
 8107222:	d303      	bcc.n	810722c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8107224:	687b      	ldr	r3, [r7, #4]
 8107226:	695b      	ldr	r3, [r3, #20]
 8107228:	61bb      	str	r3, [r7, #24]
 810722a:	e05a      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 810722c:	687b      	ldr	r3, [r7, #4]
 810722e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107234:	d103      	bne.n	810723e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	695b      	ldr	r3, [r3, #20]
 810723a:	61bb      	str	r3, [r7, #24]
 810723c:	e051      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 810723e:	687b      	ldr	r3, [r7, #4]
 8107240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107246:	d126      	bne.n	8107296 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8107248:	687b      	ldr	r3, [r7, #4]
 810724a:	695b      	ldr	r3, [r3, #20]
 810724c:	2b00      	cmp	r3, #0
 810724e:	d10e      	bne.n	810726e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8107250:	69fb      	ldr	r3, [r7, #28]
 8107252:	4a43      	ldr	r2, [pc, #268]	@ (8107360 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8107254:	4293      	cmp	r3, r2
 8107256:	d906      	bls.n	8107266 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8107258:	69fb      	ldr	r3, [r7, #28]
 810725a:	4a40      	ldr	r2, [pc, #256]	@ (810735c <HAL_SD_ConfigWideBusOperation+0x218>)
 810725c:	fba2 2303 	umull	r2, r3, r2, r3
 8107260:	0e5b      	lsrs	r3, r3, #25
 8107262:	61bb      	str	r3, [r7, #24]
 8107264:	e03d      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8107266:	687b      	ldr	r3, [r7, #4]
 8107268:	695b      	ldr	r3, [r3, #20]
 810726a:	61bb      	str	r3, [r7, #24]
 810726c:	e039      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 810726e:	687b      	ldr	r3, [r7, #4]
 8107270:	695b      	ldr	r3, [r3, #20]
 8107272:	005b      	lsls	r3, r3, #1
 8107274:	69fa      	ldr	r2, [r7, #28]
 8107276:	fbb2 f3f3 	udiv	r3, r2, r3
 810727a:	4a39      	ldr	r2, [pc, #228]	@ (8107360 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810727c:	4293      	cmp	r3, r2
 810727e:	d906      	bls.n	810728e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8107280:	69fb      	ldr	r3, [r7, #28]
 8107282:	4a36      	ldr	r2, [pc, #216]	@ (810735c <HAL_SD_ConfigWideBusOperation+0x218>)
 8107284:	fba2 2303 	umull	r2, r3, r2, r3
 8107288:	0e5b      	lsrs	r3, r3, #25
 810728a:	61bb      	str	r3, [r7, #24]
 810728c:	e029      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810728e:	687b      	ldr	r3, [r7, #4]
 8107290:	695b      	ldr	r3, [r3, #20]
 8107292:	61bb      	str	r3, [r7, #24]
 8107294:	e025      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8107296:	687b      	ldr	r3, [r7, #4]
 8107298:	695b      	ldr	r3, [r3, #20]
 810729a:	2b00      	cmp	r3, #0
 810729c:	d10e      	bne.n	81072bc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 810729e:	69fb      	ldr	r3, [r7, #28]
 81072a0:	4a30      	ldr	r2, [pc, #192]	@ (8107364 <HAL_SD_ConfigWideBusOperation+0x220>)
 81072a2:	4293      	cmp	r3, r2
 81072a4:	d906      	bls.n	81072b4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 81072a6:	69fb      	ldr	r3, [r7, #28]
 81072a8:	4a2c      	ldr	r2, [pc, #176]	@ (810735c <HAL_SD_ConfigWideBusOperation+0x218>)
 81072aa:	fba2 2303 	umull	r2, r3, r2, r3
 81072ae:	0e1b      	lsrs	r3, r3, #24
 81072b0:	61bb      	str	r3, [r7, #24]
 81072b2:	e016      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	695b      	ldr	r3, [r3, #20]
 81072b8:	61bb      	str	r3, [r7, #24]
 81072ba:	e012      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 81072bc:	687b      	ldr	r3, [r7, #4]
 81072be:	695b      	ldr	r3, [r3, #20]
 81072c0:	005b      	lsls	r3, r3, #1
 81072c2:	69fa      	ldr	r2, [r7, #28]
 81072c4:	fbb2 f3f3 	udiv	r3, r2, r3
 81072c8:	4a26      	ldr	r2, [pc, #152]	@ (8107364 <HAL_SD_ConfigWideBusOperation+0x220>)
 81072ca:	4293      	cmp	r3, r2
 81072cc:	d906      	bls.n	81072dc <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 81072ce:	69fb      	ldr	r3, [r7, #28]
 81072d0:	4a22      	ldr	r2, [pc, #136]	@ (810735c <HAL_SD_ConfigWideBusOperation+0x218>)
 81072d2:	fba2 2303 	umull	r2, r3, r2, r3
 81072d6:	0e1b      	lsrs	r3, r3, #24
 81072d8:	61bb      	str	r3, [r7, #24]
 81072da:	e002      	b.n	81072e2 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81072dc:	687b      	ldr	r3, [r7, #4]
 81072de:	695b      	ldr	r3, [r3, #20]
 81072e0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 81072e2:	687b      	ldr	r3, [r7, #4]
 81072e4:	681c      	ldr	r4, [r3, #0]
 81072e6:	466a      	mov	r2, sp
 81072e8:	f107 0314 	add.w	r3, r7, #20
 81072ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 81072f0:	e882 0003 	stmia.w	r2, {r0, r1}
 81072f4:	f107 0308 	add.w	r3, r7, #8
 81072f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 81072fa:	4620      	mov	r0, r4
 81072fc:	f000 fd72 	bl	8107de4 <SDMMC_Init>
 8107300:	e008      	b.n	8107314 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107306:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 810730a:	687b      	ldr	r3, [r7, #4]
 810730c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 810730e:	2301      	movs	r3, #1
 8107310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8107314:	687b      	ldr	r3, [r7, #4]
 8107316:	681b      	ldr	r3, [r3, #0]
 8107318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 810731c:	4618      	mov	r0, r3
 810731e:	f000 fe2d 	bl	8107f7c <SDMMC_CmdBlockLength>
 8107322:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8107324:	6a3b      	ldr	r3, [r7, #32]
 8107326:	2b00      	cmp	r3, #0
 8107328:	d00c      	beq.n	8107344 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810732a:	687b      	ldr	r3, [r7, #4]
 810732c:	681b      	ldr	r3, [r3, #0]
 810732e:	4a0a      	ldr	r2, [pc, #40]	@ (8107358 <HAL_SD_ConfigWideBusOperation+0x214>)
 8107330:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8107332:	687b      	ldr	r3, [r7, #4]
 8107334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107336:	6a3b      	ldr	r3, [r7, #32]
 8107338:	431a      	orrs	r2, r3
 810733a:	687b      	ldr	r3, [r7, #4]
 810733c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 810733e:	2301      	movs	r3, #1
 8107340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8107344:	687b      	ldr	r3, [r7, #4]
 8107346:	2201      	movs	r2, #1
 8107348:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 810734c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8107350:	4618      	mov	r0, r3
 8107352:	372c      	adds	r7, #44	@ 0x2c
 8107354:	46bd      	mov	sp, r7
 8107356:	bd90      	pop	{r4, r7, pc}
 8107358:	1fe00fff 	.word	0x1fe00fff
 810735c:	55e63b89 	.word	0x55e63b89
 8107360:	02faf080 	.word	0x02faf080
 8107364:	017d7840 	.word	0x017d7840

08107368 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8107368:	b580      	push	{r7, lr}
 810736a:	b086      	sub	sp, #24
 810736c:	af00      	add	r7, sp, #0
 810736e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8107370:	2300      	movs	r3, #0
 8107372:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8107374:	f107 030c 	add.w	r3, r7, #12
 8107378:	4619      	mov	r1, r3
 810737a:	6878      	ldr	r0, [r7, #4]
 810737c:	f000 fa40 	bl	8107800 <SD_SendStatus>
 8107380:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8107382:	697b      	ldr	r3, [r7, #20]
 8107384:	2b00      	cmp	r3, #0
 8107386:	d005      	beq.n	8107394 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8107388:	687b      	ldr	r3, [r7, #4]
 810738a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810738c:	697b      	ldr	r3, [r7, #20]
 810738e:	431a      	orrs	r2, r3
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	0a5b      	lsrs	r3, r3, #9
 8107398:	f003 030f 	and.w	r3, r3, #15
 810739c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 810739e:	693b      	ldr	r3, [r7, #16]
}
 81073a0:	4618      	mov	r0, r3
 81073a2:	3718      	adds	r7, #24
 81073a4:	46bd      	mov	sp, r7
 81073a6:	bd80      	pop	{r7, pc}

081073a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 81073a8:	b580      	push	{r7, lr}
 81073aa:	b090      	sub	sp, #64	@ 0x40
 81073ac:	af00      	add	r7, sp, #0
 81073ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 81073b0:	2300      	movs	r3, #0
 81073b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 81073b4:	f7f9 fe3e 	bl	8101034 <HAL_GetTick>
 81073b8:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 81073ba:	687b      	ldr	r3, [r7, #4]
 81073bc:	681b      	ldr	r3, [r3, #0]
 81073be:	4618      	mov	r0, r3
 81073c0:	f000 fd58 	bl	8107e74 <SDMMC_GetPowerState>
 81073c4:	4603      	mov	r3, r0
 81073c6:	2b00      	cmp	r3, #0
 81073c8:	d102      	bne.n	81073d0 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81073ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 81073ce:	e0b5      	b.n	810753c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 81073d0:	687b      	ldr	r3, [r7, #4]
 81073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81073d4:	2b03      	cmp	r3, #3
 81073d6:	d02e      	beq.n	8107436 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 81073d8:	687b      	ldr	r3, [r7, #4]
 81073da:	681b      	ldr	r3, [r3, #0]
 81073dc:	4618      	mov	r0, r3
 81073de:	f000 ff65 	bl	81082ac <SDMMC_CmdSendCID>
 81073e2:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 81073e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073e6:	2b00      	cmp	r3, #0
 81073e8:	d001      	beq.n	81073ee <SD_InitCard+0x46>
    {
      return errorstate;
 81073ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073ec:	e0a6      	b.n	810753c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81073ee:	687b      	ldr	r3, [r7, #4]
 81073f0:	681b      	ldr	r3, [r3, #0]
 81073f2:	2100      	movs	r1, #0
 81073f4:	4618      	mov	r0, r3
 81073f6:	f000 fd82 	bl	8107efe <SDMMC_GetResponse>
 81073fa:	4602      	mov	r2, r0
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	681b      	ldr	r3, [r3, #0]
 8107404:	2104      	movs	r1, #4
 8107406:	4618      	mov	r0, r3
 8107408:	f000 fd79 	bl	8107efe <SDMMC_GetResponse>
 810740c:	4602      	mov	r2, r0
 810740e:	687b      	ldr	r3, [r7, #4]
 8107410:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	681b      	ldr	r3, [r3, #0]
 8107416:	2108      	movs	r1, #8
 8107418:	4618      	mov	r0, r3
 810741a:	f000 fd70 	bl	8107efe <SDMMC_GetResponse>
 810741e:	4602      	mov	r2, r0
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	210c      	movs	r1, #12
 810742a:	4618      	mov	r0, r3
 810742c:	f000 fd67 	bl	8107efe <SDMMC_GetResponse>
 8107430:	4602      	mov	r2, r0
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8107436:	687b      	ldr	r3, [r7, #4]
 8107438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810743a:	2b03      	cmp	r3, #3
 810743c:	d01d      	beq.n	810747a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 810743e:	e019      	b.n	8107474 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8107440:	687b      	ldr	r3, [r7, #4]
 8107442:	681b      	ldr	r3, [r3, #0]
 8107444:	f107 020a 	add.w	r2, r7, #10
 8107448:	4611      	mov	r1, r2
 810744a:	4618      	mov	r0, r3
 810744c:	f000 ff6d 	bl	810832a <SDMMC_CmdSetRelAdd>
 8107450:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8107452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107454:	2b00      	cmp	r3, #0
 8107456:	d001      	beq.n	810745c <SD_InitCard+0xb4>
      {
        return errorstate;
 8107458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810745a:	e06f      	b.n	810753c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 810745c:	f7f9 fdea 	bl	8101034 <HAL_GetTick>
 8107460:	4602      	mov	r2, r0
 8107462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107464:	1ad3      	subs	r3, r2, r3
 8107466:	f241 3287 	movw	r2, #4999	@ 0x1387
 810746a:	4293      	cmp	r3, r2
 810746c:	d902      	bls.n	8107474 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 810746e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8107472:	e063      	b.n	810753c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8107474:	897b      	ldrh	r3, [r7, #10]
 8107476:	2b00      	cmp	r3, #0
 8107478:	d0e2      	beq.n	8107440 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810747e:	2b03      	cmp	r3, #3
 8107480:	d036      	beq.n	81074f0 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8107482:	897b      	ldrh	r3, [r7, #10]
 8107484:	461a      	mov	r2, r3
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810748a:	687b      	ldr	r3, [r7, #4]
 810748c:	681a      	ldr	r2, [r3, #0]
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107492:	041b      	lsls	r3, r3, #16
 8107494:	4619      	mov	r1, r3
 8107496:	4610      	mov	r0, r2
 8107498:	f000 ff27 	bl	81082ea <SDMMC_CmdSendCSD>
 810749c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 810749e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81074a0:	2b00      	cmp	r3, #0
 81074a2:	d001      	beq.n	81074a8 <SD_InitCard+0x100>
    {
      return errorstate;
 81074a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81074a6:	e049      	b.n	810753c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	681b      	ldr	r3, [r3, #0]
 81074ac:	2100      	movs	r1, #0
 81074ae:	4618      	mov	r0, r3
 81074b0:	f000 fd25 	bl	8107efe <SDMMC_GetResponse>
 81074b4:	4602      	mov	r2, r0
 81074b6:	687b      	ldr	r3, [r7, #4]
 81074b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 81074ba:	687b      	ldr	r3, [r7, #4]
 81074bc:	681b      	ldr	r3, [r3, #0]
 81074be:	2104      	movs	r1, #4
 81074c0:	4618      	mov	r0, r3
 81074c2:	f000 fd1c 	bl	8107efe <SDMMC_GetResponse>
 81074c6:	4602      	mov	r2, r0
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	2108      	movs	r1, #8
 81074d2:	4618      	mov	r0, r3
 81074d4:	f000 fd13 	bl	8107efe <SDMMC_GetResponse>
 81074d8:	4602      	mov	r2, r0
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	681b      	ldr	r3, [r3, #0]
 81074e2:	210c      	movs	r1, #12
 81074e4:	4618      	mov	r0, r3
 81074e6:	f000 fd0a 	bl	8107efe <SDMMC_GetResponse>
 81074ea:	4602      	mov	r2, r0
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 81074f0:	687b      	ldr	r3, [r7, #4]
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	2104      	movs	r1, #4
 81074f6:	4618      	mov	r0, r3
 81074f8:	f000 fd01 	bl	8107efe <SDMMC_GetResponse>
 81074fc:	4603      	mov	r3, r0
 81074fe:	0d1a      	lsrs	r2, r3, #20
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8107504:	f107 030c 	add.w	r3, r7, #12
 8107508:	4619      	mov	r1, r3
 810750a:	6878      	ldr	r0, [r7, #4]
 810750c:	f7ff fb8c 	bl	8106c28 <HAL_SD_GetCardCSD>
 8107510:	4603      	mov	r3, r0
 8107512:	2b00      	cmp	r3, #0
 8107514:	d002      	beq.n	810751c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8107516:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 810751a:	e00f      	b.n	810753c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810751c:	687b      	ldr	r3, [r7, #4]
 810751e:	681a      	ldr	r2, [r3, #0]
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107524:	041b      	lsls	r3, r3, #16
 8107526:	4619      	mov	r1, r3
 8107528:	4610      	mov	r0, r2
 810752a:	f000 fdd6 	bl	81080da <SDMMC_CmdSelDesel>
 810752e:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8107530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107532:	2b00      	cmp	r3, #0
 8107534:	d001      	beq.n	810753a <SD_InitCard+0x192>
  {
    return errorstate;
 8107536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107538:	e000      	b.n	810753c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810753a:	2300      	movs	r3, #0
}
 810753c:	4618      	mov	r0, r3
 810753e:	3740      	adds	r7, #64	@ 0x40
 8107540:	46bd      	mov	sp, r7
 8107542:	bd80      	pop	{r7, pc}

08107544 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8107544:	b580      	push	{r7, lr}
 8107546:	b086      	sub	sp, #24
 8107548:	af00      	add	r7, sp, #0
 810754a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810754c:	2300      	movs	r3, #0
 810754e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8107550:	2300      	movs	r3, #0
 8107552:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8107554:	2300      	movs	r3, #0
 8107556:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	681b      	ldr	r3, [r3, #0]
 810755c:	4618      	mov	r0, r3
 810755e:	f000 fddf 	bl	8108120 <SDMMC_CmdGoIdleState>
 8107562:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8107564:	68fb      	ldr	r3, [r7, #12]
 8107566:	2b00      	cmp	r3, #0
 8107568:	d001      	beq.n	810756e <SD_PowerON+0x2a>
  {
    return errorstate;
 810756a:	68fb      	ldr	r3, [r7, #12]
 810756c:	e072      	b.n	8107654 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	4618      	mov	r0, r3
 8107574:	f000 fdf2 	bl	810815c <SDMMC_CmdOperCond>
 8107578:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 810757a:	68fb      	ldr	r3, [r7, #12]
 810757c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8107580:	d10d      	bne.n	810759e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8107582:	687b      	ldr	r3, [r7, #4]
 8107584:	2200      	movs	r2, #0
 8107586:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8107588:	687b      	ldr	r3, [r7, #4]
 810758a:	681b      	ldr	r3, [r3, #0]
 810758c:	4618      	mov	r0, r3
 810758e:	f000 fdc7 	bl	8108120 <SDMMC_CmdGoIdleState>
 8107592:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8107594:	68fb      	ldr	r3, [r7, #12]
 8107596:	2b00      	cmp	r3, #0
 8107598:	d004      	beq.n	81075a4 <SD_PowerON+0x60>
    {
      return errorstate;
 810759a:	68fb      	ldr	r3, [r7, #12]
 810759c:	e05a      	b.n	8107654 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 810759e:	687b      	ldr	r3, [r7, #4]
 81075a0:	2201      	movs	r2, #1
 81075a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 81075a4:	687b      	ldr	r3, [r7, #4]
 81075a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81075a8:	2b01      	cmp	r3, #1
 81075aa:	d137      	bne.n	810761c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	2100      	movs	r1, #0
 81075b2:	4618      	mov	r0, r3
 81075b4:	f000 fdf2 	bl	810819c <SDMMC_CmdAppCommand>
 81075b8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81075ba:	68fb      	ldr	r3, [r7, #12]
 81075bc:	2b00      	cmp	r3, #0
 81075be:	d02d      	beq.n	810761c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81075c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 81075c4:	e046      	b.n	8107654 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	681b      	ldr	r3, [r3, #0]
 81075ca:	2100      	movs	r1, #0
 81075cc:	4618      	mov	r0, r3
 81075ce:	f000 fde5 	bl	810819c <SDMMC_CmdAppCommand>
 81075d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81075d4:	68fb      	ldr	r3, [r7, #12]
 81075d6:	2b00      	cmp	r3, #0
 81075d8:	d001      	beq.n	81075de <SD_PowerON+0x9a>
    {
      return errorstate;
 81075da:	68fb      	ldr	r3, [r7, #12]
 81075dc:	e03a      	b.n	8107654 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 81075de:	687b      	ldr	r3, [r7, #4]
 81075e0:	681b      	ldr	r3, [r3, #0]
 81075e2:	491e      	ldr	r1, [pc, #120]	@ (810765c <SD_PowerON+0x118>)
 81075e4:	4618      	mov	r0, r3
 81075e6:	f000 fdfc 	bl	81081e2 <SDMMC_CmdAppOperCommand>
 81075ea:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 81075ec:	68fb      	ldr	r3, [r7, #12]
 81075ee:	2b00      	cmp	r3, #0
 81075f0:	d002      	beq.n	81075f8 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81075f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 81075f6:	e02d      	b.n	8107654 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	681b      	ldr	r3, [r3, #0]
 81075fc:	2100      	movs	r1, #0
 81075fe:	4618      	mov	r0, r3
 8107600:	f000 fc7d 	bl	8107efe <SDMMC_GetResponse>
 8107604:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8107606:	697b      	ldr	r3, [r7, #20]
 8107608:	0fdb      	lsrs	r3, r3, #31
 810760a:	2b01      	cmp	r3, #1
 810760c:	d101      	bne.n	8107612 <SD_PowerON+0xce>
 810760e:	2301      	movs	r3, #1
 8107610:	e000      	b.n	8107614 <SD_PowerON+0xd0>
 8107612:	2300      	movs	r3, #0
 8107614:	613b      	str	r3, [r7, #16]

    count++;
 8107616:	68bb      	ldr	r3, [r7, #8]
 8107618:	3301      	adds	r3, #1
 810761a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810761c:	68bb      	ldr	r3, [r7, #8]
 810761e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8107622:	4293      	cmp	r3, r2
 8107624:	d802      	bhi.n	810762c <SD_PowerON+0xe8>
 8107626:	693b      	ldr	r3, [r7, #16]
 8107628:	2b00      	cmp	r3, #0
 810762a:	d0cc      	beq.n	81075c6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810762c:	68bb      	ldr	r3, [r7, #8]
 810762e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8107632:	4293      	cmp	r3, r2
 8107634:	d902      	bls.n	810763c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8107636:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810763a:	e00b      	b.n	8107654 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	2200      	movs	r2, #0
 8107640:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8107642:	697b      	ldr	r3, [r7, #20]
 8107644:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8107648:	2b00      	cmp	r3, #0
 810764a:	d002      	beq.n	8107652 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810764c:	687b      	ldr	r3, [r7, #4]
 810764e:	2201      	movs	r2, #1
 8107650:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8107652:	2300      	movs	r3, #0
}
 8107654:	4618      	mov	r0, r3
 8107656:	3718      	adds	r7, #24
 8107658:	46bd      	mov	sp, r7
 810765a:	bd80      	pop	{r7, pc}
 810765c:	c1100000 	.word	0xc1100000

08107660 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8107660:	b580      	push	{r7, lr}
 8107662:	b08c      	sub	sp, #48	@ 0x30
 8107664:	af00      	add	r7, sp, #0
 8107666:	6078      	str	r0, [r7, #4]
 8107668:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810766a:	f7f9 fce3 	bl	8101034 <HAL_GetTick>
 810766e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8107670:	683b      	ldr	r3, [r7, #0]
 8107672:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8107674:	687b      	ldr	r3, [r7, #4]
 8107676:	681b      	ldr	r3, [r3, #0]
 8107678:	2100      	movs	r1, #0
 810767a:	4618      	mov	r0, r3
 810767c:	f000 fc3f 	bl	8107efe <SDMMC_GetResponse>
 8107680:	4603      	mov	r3, r0
 8107682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810768a:	d102      	bne.n	8107692 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810768c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107690:	e0b0      	b.n	81077f4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8107692:	687b      	ldr	r3, [r7, #4]
 8107694:	681b      	ldr	r3, [r3, #0]
 8107696:	2140      	movs	r1, #64	@ 0x40
 8107698:	4618      	mov	r0, r3
 810769a:	f000 fc6f 	bl	8107f7c <SDMMC_CmdBlockLength>
 810769e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81076a0:	6a3b      	ldr	r3, [r7, #32]
 81076a2:	2b00      	cmp	r3, #0
 81076a4:	d005      	beq.n	81076b2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81076aa:	687b      	ldr	r3, [r7, #4]
 81076ac:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 81076ae:	6a3b      	ldr	r3, [r7, #32]
 81076b0:	e0a0      	b.n	81077f4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	681a      	ldr	r2, [r3, #0]
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81076ba:	041b      	lsls	r3, r3, #16
 81076bc:	4619      	mov	r1, r3
 81076be:	4610      	mov	r0, r2
 81076c0:	f000 fd6c 	bl	810819c <SDMMC_CmdAppCommand>
 81076c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81076c6:	6a3b      	ldr	r3, [r7, #32]
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	d005      	beq.n	81076d8 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81076cc:	687b      	ldr	r3, [r7, #4]
 81076ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81076d0:	687b      	ldr	r3, [r7, #4]
 81076d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 81076d4:	6a3b      	ldr	r3, [r7, #32]
 81076d6:	e08d      	b.n	81077f4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81076d8:	f04f 33ff 	mov.w	r3, #4294967295
 81076dc:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 81076de:	2340      	movs	r3, #64	@ 0x40
 81076e0:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 81076e2:	2360      	movs	r3, #96	@ 0x60
 81076e4:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81076e6:	2302      	movs	r3, #2
 81076e8:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81076ea:	2300      	movs	r3, #0
 81076ec:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81076ee:	2301      	movs	r3, #1
 81076f0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	681b      	ldr	r3, [r3, #0]
 81076f6:	f107 0208 	add.w	r2, r7, #8
 81076fa:	4611      	mov	r1, r2
 81076fc:	4618      	mov	r0, r3
 81076fe:	f000 fc11 	bl	8107f24 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8107702:	687b      	ldr	r3, [r7, #4]
 8107704:	681b      	ldr	r3, [r3, #0]
 8107706:	4618      	mov	r0, r3
 8107708:	f000 fe54 	bl	81083b4 <SDMMC_CmdStatusRegister>
 810770c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810770e:	6a3b      	ldr	r3, [r7, #32]
 8107710:	2b00      	cmp	r3, #0
 8107712:	d02b      	beq.n	810776c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8107714:	687b      	ldr	r3, [r7, #4]
 8107716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 810771c:	6a3b      	ldr	r3, [r7, #32]
 810771e:	e069      	b.n	81077f4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8107720:	687b      	ldr	r3, [r7, #4]
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810772a:	2b00      	cmp	r3, #0
 810772c:	d013      	beq.n	8107756 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810772e:	2300      	movs	r3, #0
 8107730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107732:	e00d      	b.n	8107750 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	681b      	ldr	r3, [r3, #0]
 8107738:	4618      	mov	r0, r3
 810773a:	f000 fb7d 	bl	8107e38 <SDMMC_ReadFIFO>
 810773e:	4602      	mov	r2, r0
 8107740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107742:	601a      	str	r2, [r3, #0]
        pData++;
 8107744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107746:	3304      	adds	r3, #4
 8107748:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 810774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810774c:	3301      	adds	r3, #1
 810774e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8107750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107752:	2b07      	cmp	r3, #7
 8107754:	d9ee      	bls.n	8107734 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8107756:	f7f9 fc6d 	bl	8101034 <HAL_GetTick>
 810775a:	4602      	mov	r2, r0
 810775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810775e:	1ad3      	subs	r3, r2, r3
 8107760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107764:	d102      	bne.n	810776c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8107766:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810776a:	e043      	b.n	81077f4 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810776c:	687b      	ldr	r3, [r7, #4]
 810776e:	681b      	ldr	r3, [r3, #0]
 8107770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107772:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8107776:	2b00      	cmp	r3, #0
 8107778:	d0d2      	beq.n	8107720 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107780:	f003 0308 	and.w	r3, r3, #8
 8107784:	2b00      	cmp	r3, #0
 8107786:	d001      	beq.n	810778c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8107788:	2308      	movs	r3, #8
 810778a:	e033      	b.n	81077f4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810778c:	687b      	ldr	r3, [r7, #4]
 810778e:	681b      	ldr	r3, [r3, #0]
 8107790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107792:	f003 0302 	and.w	r3, r3, #2
 8107796:	2b00      	cmp	r3, #0
 8107798:	d001      	beq.n	810779e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810779a:	2302      	movs	r3, #2
 810779c:	e02a      	b.n	81077f4 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810779e:	687b      	ldr	r3, [r7, #4]
 81077a0:	681b      	ldr	r3, [r3, #0]
 81077a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81077a4:	f003 0320 	and.w	r3, r3, #32
 81077a8:	2b00      	cmp	r3, #0
 81077aa:	d017      	beq.n	81077dc <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 81077ac:	2320      	movs	r3, #32
 81077ae:	e021      	b.n	81077f4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	681b      	ldr	r3, [r3, #0]
 81077b4:	4618      	mov	r0, r3
 81077b6:	f000 fb3f 	bl	8107e38 <SDMMC_ReadFIFO>
 81077ba:	4602      	mov	r2, r0
 81077bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81077be:	601a      	str	r2, [r3, #0]
    pData++;
 81077c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81077c2:	3304      	adds	r3, #4
 81077c4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81077c6:	f7f9 fc35 	bl	8101034 <HAL_GetTick>
 81077ca:	4602      	mov	r2, r0
 81077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81077ce:	1ad3      	subs	r3, r2, r3
 81077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81077d4:	d102      	bne.n	81077dc <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81077d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81077da:	e00b      	b.n	81077f4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81077e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 81077e6:	2b00      	cmp	r3, #0
 81077e8:	d1e2      	bne.n	81077b0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	681b      	ldr	r3, [r3, #0]
 81077ee:	4a03      	ldr	r2, [pc, #12]	@ (81077fc <SD_SendSDStatus+0x19c>)
 81077f0:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 81077f2:	2300      	movs	r3, #0
}
 81077f4:	4618      	mov	r0, r3
 81077f6:	3730      	adds	r7, #48	@ 0x30
 81077f8:	46bd      	mov	sp, r7
 81077fa:	bd80      	pop	{r7, pc}
 81077fc:	18000f3a 	.word	0x18000f3a

08107800 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8107800:	b580      	push	{r7, lr}
 8107802:	b084      	sub	sp, #16
 8107804:	af00      	add	r7, sp, #0
 8107806:	6078      	str	r0, [r7, #4]
 8107808:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810780a:	683b      	ldr	r3, [r7, #0]
 810780c:	2b00      	cmp	r3, #0
 810780e:	d102      	bne.n	8107816 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8107810:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8107814:	e018      	b.n	8107848 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	681a      	ldr	r2, [r3, #0]
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810781e:	041b      	lsls	r3, r3, #16
 8107820:	4619      	mov	r1, r3
 8107822:	4610      	mov	r0, r2
 8107824:	f000 fda3 	bl	810836e <SDMMC_CmdSendStatus>
 8107828:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810782a:	68fb      	ldr	r3, [r7, #12]
 810782c:	2b00      	cmp	r3, #0
 810782e:	d001      	beq.n	8107834 <SD_SendStatus+0x34>
  {
    return errorstate;
 8107830:	68fb      	ldr	r3, [r7, #12]
 8107832:	e009      	b.n	8107848 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8107834:	687b      	ldr	r3, [r7, #4]
 8107836:	681b      	ldr	r3, [r3, #0]
 8107838:	2100      	movs	r1, #0
 810783a:	4618      	mov	r0, r3
 810783c:	f000 fb5f 	bl	8107efe <SDMMC_GetResponse>
 8107840:	4602      	mov	r2, r0
 8107842:	683b      	ldr	r3, [r7, #0]
 8107844:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8107846:	2300      	movs	r3, #0
}
 8107848:	4618      	mov	r0, r3
 810784a:	3710      	adds	r7, #16
 810784c:	46bd      	mov	sp, r7
 810784e:	bd80      	pop	{r7, pc}

08107850 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8107850:	b580      	push	{r7, lr}
 8107852:	b086      	sub	sp, #24
 8107854:	af00      	add	r7, sp, #0
 8107856:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8107858:	2300      	movs	r3, #0
 810785a:	60fb      	str	r3, [r7, #12]
 810785c:	2300      	movs	r3, #0
 810785e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	2100      	movs	r1, #0
 8107866:	4618      	mov	r0, r3
 8107868:	f000 fb49 	bl	8107efe <SDMMC_GetResponse>
 810786c:	4603      	mov	r3, r0
 810786e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107872:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107876:	d102      	bne.n	810787e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8107878:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810787c:	e02f      	b.n	81078de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810787e:	f107 030c 	add.w	r3, r7, #12
 8107882:	4619      	mov	r1, r3
 8107884:	6878      	ldr	r0, [r7, #4]
 8107886:	f000 f879 	bl	810797c <SD_FindSCR>
 810788a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810788c:	697b      	ldr	r3, [r7, #20]
 810788e:	2b00      	cmp	r3, #0
 8107890:	d001      	beq.n	8107896 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8107892:	697b      	ldr	r3, [r7, #20]
 8107894:	e023      	b.n	81078de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8107896:	693b      	ldr	r3, [r7, #16]
 8107898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810789c:	2b00      	cmp	r3, #0
 810789e:	d01c      	beq.n	81078da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81078a0:	687b      	ldr	r3, [r7, #4]
 81078a2:	681a      	ldr	r2, [r3, #0]
 81078a4:	687b      	ldr	r3, [r7, #4]
 81078a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81078a8:	041b      	lsls	r3, r3, #16
 81078aa:	4619      	mov	r1, r3
 81078ac:	4610      	mov	r0, r2
 81078ae:	f000 fc75 	bl	810819c <SDMMC_CmdAppCommand>
 81078b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81078b4:	697b      	ldr	r3, [r7, #20]
 81078b6:	2b00      	cmp	r3, #0
 81078b8:	d001      	beq.n	81078be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 81078ba:	697b      	ldr	r3, [r7, #20]
 81078bc:	e00f      	b.n	81078de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 81078be:	687b      	ldr	r3, [r7, #4]
 81078c0:	681b      	ldr	r3, [r3, #0]
 81078c2:	2102      	movs	r1, #2
 81078c4:	4618      	mov	r0, r3
 81078c6:	f000 fcac 	bl	8108222 <SDMMC_CmdBusWidth>
 81078ca:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81078cc:	697b      	ldr	r3, [r7, #20]
 81078ce:	2b00      	cmp	r3, #0
 81078d0:	d001      	beq.n	81078d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 81078d2:	697b      	ldr	r3, [r7, #20]
 81078d4:	e003      	b.n	81078de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 81078d6:	2300      	movs	r3, #0
 81078d8:	e001      	b.n	81078de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81078da:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 81078de:	4618      	mov	r0, r3
 81078e0:	3718      	adds	r7, #24
 81078e2:	46bd      	mov	sp, r7
 81078e4:	bd80      	pop	{r7, pc}

081078e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 81078e6:	b580      	push	{r7, lr}
 81078e8:	b086      	sub	sp, #24
 81078ea:	af00      	add	r7, sp, #0
 81078ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 81078ee:	2300      	movs	r3, #0
 81078f0:	60fb      	str	r3, [r7, #12]
 81078f2:	2300      	movs	r3, #0
 81078f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 81078f6:	687b      	ldr	r3, [r7, #4]
 81078f8:	681b      	ldr	r3, [r3, #0]
 81078fa:	2100      	movs	r1, #0
 81078fc:	4618      	mov	r0, r3
 81078fe:	f000 fafe 	bl	8107efe <SDMMC_GetResponse>
 8107902:	4603      	mov	r3, r0
 8107904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810790c:	d102      	bne.n	8107914 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810790e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8107912:	e02f      	b.n	8107974 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8107914:	f107 030c 	add.w	r3, r7, #12
 8107918:	4619      	mov	r1, r3
 810791a:	6878      	ldr	r0, [r7, #4]
 810791c:	f000 f82e 	bl	810797c <SD_FindSCR>
 8107920:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8107922:	697b      	ldr	r3, [r7, #20]
 8107924:	2b00      	cmp	r3, #0
 8107926:	d001      	beq.n	810792c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8107928:	697b      	ldr	r3, [r7, #20]
 810792a:	e023      	b.n	8107974 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810792c:	693b      	ldr	r3, [r7, #16]
 810792e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107932:	2b00      	cmp	r3, #0
 8107934:	d01c      	beq.n	8107970 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	681a      	ldr	r2, [r3, #0]
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810793e:	041b      	lsls	r3, r3, #16
 8107940:	4619      	mov	r1, r3
 8107942:	4610      	mov	r0, r2
 8107944:	f000 fc2a 	bl	810819c <SDMMC_CmdAppCommand>
 8107948:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810794a:	697b      	ldr	r3, [r7, #20]
 810794c:	2b00      	cmp	r3, #0
 810794e:	d001      	beq.n	8107954 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8107950:	697b      	ldr	r3, [r7, #20]
 8107952:	e00f      	b.n	8107974 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	681b      	ldr	r3, [r3, #0]
 8107958:	2100      	movs	r1, #0
 810795a:	4618      	mov	r0, r3
 810795c:	f000 fc61 	bl	8108222 <SDMMC_CmdBusWidth>
 8107960:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8107962:	697b      	ldr	r3, [r7, #20]
 8107964:	2b00      	cmp	r3, #0
 8107966:	d001      	beq.n	810796c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8107968:	697b      	ldr	r3, [r7, #20]
 810796a:	e003      	b.n	8107974 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810796c:	2300      	movs	r3, #0
 810796e:	e001      	b.n	8107974 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8107970:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8107974:	4618      	mov	r0, r3
 8107976:	3718      	adds	r7, #24
 8107978:	46bd      	mov	sp, r7
 810797a:	bd80      	pop	{r7, pc}

0810797c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810797c:	b580      	push	{r7, lr}
 810797e:	b08e      	sub	sp, #56	@ 0x38
 8107980:	af00      	add	r7, sp, #0
 8107982:	6078      	str	r0, [r7, #4]
 8107984:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8107986:	f7f9 fb55 	bl	8101034 <HAL_GetTick>
 810798a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 810798c:	2300      	movs	r3, #0
 810798e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8107990:	2300      	movs	r3, #0
 8107992:	60bb      	str	r3, [r7, #8]
 8107994:	2300      	movs	r3, #0
 8107996:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8107998:	683b      	ldr	r3, [r7, #0]
 810799a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810799c:	687b      	ldr	r3, [r7, #4]
 810799e:	681b      	ldr	r3, [r3, #0]
 81079a0:	2108      	movs	r1, #8
 81079a2:	4618      	mov	r0, r3
 81079a4:	f000 faea 	bl	8107f7c <SDMMC_CmdBlockLength>
 81079a8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81079ac:	2b00      	cmp	r3, #0
 81079ae:	d001      	beq.n	81079b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 81079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81079b2:	e0ad      	b.n	8107b10 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 81079b4:	687b      	ldr	r3, [r7, #4]
 81079b6:	681a      	ldr	r2, [r3, #0]
 81079b8:	687b      	ldr	r3, [r7, #4]
 81079ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81079bc:	041b      	lsls	r3, r3, #16
 81079be:	4619      	mov	r1, r3
 81079c0:	4610      	mov	r0, r2
 81079c2:	f000 fbeb 	bl	810819c <SDMMC_CmdAppCommand>
 81079c6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81079ca:	2b00      	cmp	r3, #0
 81079cc:	d001      	beq.n	81079d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 81079ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81079d0:	e09e      	b.n	8107b10 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81079d2:	f04f 33ff 	mov.w	r3, #4294967295
 81079d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 81079d8:	2308      	movs	r3, #8
 81079da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 81079dc:	2330      	movs	r3, #48	@ 0x30
 81079de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81079e0:	2302      	movs	r3, #2
 81079e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81079e4:	2300      	movs	r3, #0
 81079e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 81079e8:	2301      	movs	r3, #1
 81079ea:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	681b      	ldr	r3, [r3, #0]
 81079f0:	f107 0210 	add.w	r2, r7, #16
 81079f4:	4611      	mov	r1, r2
 81079f6:	4618      	mov	r0, r3
 81079f8:	f000 fa94 	bl	8107f24 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 81079fc:	687b      	ldr	r3, [r7, #4]
 81079fe:	681b      	ldr	r3, [r3, #0]
 8107a00:	4618      	mov	r0, r3
 8107a02:	f000 fc31 	bl	8108268 <SDMMC_CmdSendSCR>
 8107a06:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8107a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107a0a:	2b00      	cmp	r3, #0
 8107a0c:	d027      	beq.n	8107a5e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8107a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107a10:	e07e      	b.n	8107b10 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8107a12:	687b      	ldr	r3, [r7, #4]
 8107a14:	681b      	ldr	r3, [r3, #0]
 8107a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107a18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8107a1c:	2b00      	cmp	r3, #0
 8107a1e:	d113      	bne.n	8107a48 <SD_FindSCR+0xcc>
 8107a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a22:	2b00      	cmp	r3, #0
 8107a24:	d110      	bne.n	8107a48 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	681b      	ldr	r3, [r3, #0]
 8107a2a:	4618      	mov	r0, r3
 8107a2c:	f000 fa04 	bl	8107e38 <SDMMC_ReadFIFO>
 8107a30:	4603      	mov	r3, r0
 8107a32:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	681b      	ldr	r3, [r3, #0]
 8107a38:	4618      	mov	r0, r3
 8107a3a:	f000 f9fd 	bl	8107e38 <SDMMC_ReadFIFO>
 8107a3e:	4603      	mov	r3, r0
 8107a40:	60fb      	str	r3, [r7, #12]
      index++;
 8107a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a44:	3301      	adds	r3, #1
 8107a46:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8107a48:	f7f9 faf4 	bl	8101034 <HAL_GetTick>
 8107a4c:	4602      	mov	r2, r0
 8107a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107a50:	1ad3      	subs	r3, r2, r3
 8107a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107a56:	d102      	bne.n	8107a5e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8107a58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8107a5c:	e058      	b.n	8107b10 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8107a5e:	687b      	ldr	r3, [r7, #4]
 8107a60:	681b      	ldr	r3, [r3, #0]
 8107a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107a64:	f240 532a 	movw	r3, #1322	@ 0x52a
 8107a68:	4013      	ands	r3, r2
 8107a6a:	2b00      	cmp	r3, #0
 8107a6c:	d0d1      	beq.n	8107a12 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	681b      	ldr	r3, [r3, #0]
 8107a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107a74:	f003 0308 	and.w	r3, r3, #8
 8107a78:	2b00      	cmp	r3, #0
 8107a7a:	d005      	beq.n	8107a88 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	681b      	ldr	r3, [r3, #0]
 8107a80:	2208      	movs	r2, #8
 8107a82:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8107a84:	2308      	movs	r3, #8
 8107a86:	e043      	b.n	8107b10 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	681b      	ldr	r3, [r3, #0]
 8107a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107a8e:	f003 0302 	and.w	r3, r3, #2
 8107a92:	2b00      	cmp	r3, #0
 8107a94:	d005      	beq.n	8107aa2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8107a96:	687b      	ldr	r3, [r7, #4]
 8107a98:	681b      	ldr	r3, [r3, #0]
 8107a9a:	2202      	movs	r2, #2
 8107a9c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8107a9e:	2302      	movs	r3, #2
 8107aa0:	e036      	b.n	8107b10 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8107aa2:	687b      	ldr	r3, [r7, #4]
 8107aa4:	681b      	ldr	r3, [r3, #0]
 8107aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107aa8:	f003 0320 	and.w	r3, r3, #32
 8107aac:	2b00      	cmp	r3, #0
 8107aae:	d005      	beq.n	8107abc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	681b      	ldr	r3, [r3, #0]
 8107ab4:	2220      	movs	r2, #32
 8107ab6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8107ab8:	2320      	movs	r3, #32
 8107aba:	e029      	b.n	8107b10 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	681b      	ldr	r3, [r3, #0]
 8107ac0:	4a15      	ldr	r2, [pc, #84]	@ (8107b18 <SD_FindSCR+0x19c>)
 8107ac2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8107ac4:	68fb      	ldr	r3, [r7, #12]
 8107ac6:	061a      	lsls	r2, r3, #24
 8107ac8:	68fb      	ldr	r3, [r7, #12]
 8107aca:	021b      	lsls	r3, r3, #8
 8107acc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8107ad0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8107ad2:	68fb      	ldr	r3, [r7, #12]
 8107ad4:	0a1b      	lsrs	r3, r3, #8
 8107ad6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8107ada:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8107adc:	68fb      	ldr	r3, [r7, #12]
 8107ade:	0e1b      	lsrs	r3, r3, #24
 8107ae0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8107ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ae4:	601a      	str	r2, [r3, #0]
    scr++;
 8107ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ae8:	3304      	adds	r3, #4
 8107aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8107aec:	68bb      	ldr	r3, [r7, #8]
 8107aee:	061a      	lsls	r2, r3, #24
 8107af0:	68bb      	ldr	r3, [r7, #8]
 8107af2:	021b      	lsls	r3, r3, #8
 8107af4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8107af8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8107afa:	68bb      	ldr	r3, [r7, #8]
 8107afc:	0a1b      	lsrs	r3, r3, #8
 8107afe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8107b02:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8107b04:	68bb      	ldr	r3, [r7, #8]
 8107b06:	0e1b      	lsrs	r3, r3, #24
 8107b08:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8107b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107b0c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8107b0e:	2300      	movs	r3, #0
}
 8107b10:	4618      	mov	r0, r3
 8107b12:	3738      	adds	r7, #56	@ 0x38
 8107b14:	46bd      	mov	sp, r7
 8107b16:	bd80      	pop	{r7, pc}
 8107b18:	18000f3a 	.word	0x18000f3a

08107b1c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8107b1c:	b580      	push	{r7, lr}
 8107b1e:	b084      	sub	sp, #16
 8107b20:	af00      	add	r7, sp, #0
 8107b22:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8107b24:	687b      	ldr	r3, [r7, #4]
 8107b26:	2b00      	cmp	r3, #0
 8107b28:	d101      	bne.n	8107b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8107b2a:	2301      	movs	r3, #1
 8107b2c:	e10f      	b.n	8107d4e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	2200      	movs	r2, #0
 8107b32:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8107b34:	687b      	ldr	r3, [r7, #4]
 8107b36:	681b      	ldr	r3, [r3, #0]
 8107b38:	4a87      	ldr	r2, [pc, #540]	@ (8107d58 <HAL_SPI_Init+0x23c>)
 8107b3a:	4293      	cmp	r3, r2
 8107b3c:	d00f      	beq.n	8107b5e <HAL_SPI_Init+0x42>
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	681b      	ldr	r3, [r3, #0]
 8107b42:	4a86      	ldr	r2, [pc, #536]	@ (8107d5c <HAL_SPI_Init+0x240>)
 8107b44:	4293      	cmp	r3, r2
 8107b46:	d00a      	beq.n	8107b5e <HAL_SPI_Init+0x42>
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	4a84      	ldr	r2, [pc, #528]	@ (8107d60 <HAL_SPI_Init+0x244>)
 8107b4e:	4293      	cmp	r3, r2
 8107b50:	d005      	beq.n	8107b5e <HAL_SPI_Init+0x42>
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	68db      	ldr	r3, [r3, #12]
 8107b56:	2b0f      	cmp	r3, #15
 8107b58:	d901      	bls.n	8107b5e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8107b5a:	2301      	movs	r3, #1
 8107b5c:	e0f7      	b.n	8107d4e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8107b5e:	6878      	ldr	r0, [r7, #4]
 8107b60:	f000 f900 	bl	8107d64 <SPI_GetPacketSize>
 8107b64:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	681b      	ldr	r3, [r3, #0]
 8107b6a:	4a7b      	ldr	r2, [pc, #492]	@ (8107d58 <HAL_SPI_Init+0x23c>)
 8107b6c:	4293      	cmp	r3, r2
 8107b6e:	d00c      	beq.n	8107b8a <HAL_SPI_Init+0x6e>
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	4a79      	ldr	r2, [pc, #484]	@ (8107d5c <HAL_SPI_Init+0x240>)
 8107b76:	4293      	cmp	r3, r2
 8107b78:	d007      	beq.n	8107b8a <HAL_SPI_Init+0x6e>
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	4a78      	ldr	r2, [pc, #480]	@ (8107d60 <HAL_SPI_Init+0x244>)
 8107b80:	4293      	cmp	r3, r2
 8107b82:	d002      	beq.n	8107b8a <HAL_SPI_Init+0x6e>
 8107b84:	68fb      	ldr	r3, [r7, #12]
 8107b86:	2b08      	cmp	r3, #8
 8107b88:	d811      	bhi.n	8107bae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8107b8e:	4a72      	ldr	r2, [pc, #456]	@ (8107d58 <HAL_SPI_Init+0x23c>)
 8107b90:	4293      	cmp	r3, r2
 8107b92:	d009      	beq.n	8107ba8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	681b      	ldr	r3, [r3, #0]
 8107b98:	4a70      	ldr	r2, [pc, #448]	@ (8107d5c <HAL_SPI_Init+0x240>)
 8107b9a:	4293      	cmp	r3, r2
 8107b9c:	d004      	beq.n	8107ba8 <HAL_SPI_Init+0x8c>
 8107b9e:	687b      	ldr	r3, [r7, #4]
 8107ba0:	681b      	ldr	r3, [r3, #0]
 8107ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8107d60 <HAL_SPI_Init+0x244>)
 8107ba4:	4293      	cmp	r3, r2
 8107ba6:	d104      	bne.n	8107bb2 <HAL_SPI_Init+0x96>
 8107ba8:	68fb      	ldr	r3, [r7, #12]
 8107baa:	2b10      	cmp	r3, #16
 8107bac:	d901      	bls.n	8107bb2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8107bae:	2301      	movs	r3, #1
 8107bb0:	e0cd      	b.n	8107d4e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8107bb2:	687b      	ldr	r3, [r7, #4]
 8107bb4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8107bb8:	b2db      	uxtb	r3, r3
 8107bba:	2b00      	cmp	r3, #0
 8107bbc:	d106      	bne.n	8107bcc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8107bbe:	687b      	ldr	r3, [r7, #4]
 8107bc0:	2200      	movs	r2, #0
 8107bc2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8107bc6:	6878      	ldr	r0, [r7, #4]
 8107bc8:	f7f9 f888 	bl	8100cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	2202      	movs	r2, #2
 8107bd0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	681b      	ldr	r3, [r3, #0]
 8107bd8:	681a      	ldr	r2, [r3, #0]
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	681b      	ldr	r3, [r3, #0]
 8107bde:	f022 0201 	bic.w	r2, r2, #1
 8107be2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	681b      	ldr	r3, [r3, #0]
 8107be8:	689b      	ldr	r3, [r3, #8]
 8107bea:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8107bee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	699b      	ldr	r3, [r3, #24]
 8107bf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107bf8:	d119      	bne.n	8107c2e <HAL_SPI_Init+0x112>
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	685b      	ldr	r3, [r3, #4]
 8107bfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107c02:	d103      	bne.n	8107c0c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8107c08:	2b00      	cmp	r3, #0
 8107c0a:	d008      	beq.n	8107c1e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8107c10:	2b00      	cmp	r3, #0
 8107c12:	d10c      	bne.n	8107c2e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8107c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107c1c:	d107      	bne.n	8107c2e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	681b      	ldr	r3, [r3, #0]
 8107c22:	681a      	ldr	r2, [r3, #0]
 8107c24:	687b      	ldr	r3, [r7, #4]
 8107c26:	681b      	ldr	r3, [r3, #0]
 8107c28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8107c2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	685b      	ldr	r3, [r3, #4]
 8107c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107c36:	2b00      	cmp	r3, #0
 8107c38:	d00f      	beq.n	8107c5a <HAL_SPI_Init+0x13e>
 8107c3a:	687b      	ldr	r3, [r7, #4]
 8107c3c:	68db      	ldr	r3, [r3, #12]
 8107c3e:	2b06      	cmp	r3, #6
 8107c40:	d90b      	bls.n	8107c5a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	681b      	ldr	r3, [r3, #0]
 8107c46:	681b      	ldr	r3, [r3, #0]
 8107c48:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	430a      	orrs	r2, r1
 8107c56:	601a      	str	r2, [r3, #0]
 8107c58:	e007      	b.n	8107c6a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	681b      	ldr	r3, [r3, #0]
 8107c5e:	681a      	ldr	r2, [r3, #0]
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8107c68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8107c6a:	687b      	ldr	r3, [r7, #4]
 8107c6c:	69da      	ldr	r2, [r3, #28]
 8107c6e:	687b      	ldr	r3, [r7, #4]
 8107c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c72:	431a      	orrs	r2, r3
 8107c74:	68bb      	ldr	r3, [r7, #8]
 8107c76:	431a      	orrs	r2, r3
 8107c78:	687b      	ldr	r3, [r7, #4]
 8107c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107c7c:	ea42 0103 	orr.w	r1, r2, r3
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	68da      	ldr	r2, [r3, #12]
 8107c84:	687b      	ldr	r3, [r7, #4]
 8107c86:	681b      	ldr	r3, [r3, #0]
 8107c88:	430a      	orrs	r2, r1
 8107c8a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107c94:	431a      	orrs	r2, r3
 8107c96:	687b      	ldr	r3, [r7, #4]
 8107c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107c9a:	431a      	orrs	r2, r3
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	699b      	ldr	r3, [r3, #24]
 8107ca0:	431a      	orrs	r2, r3
 8107ca2:	687b      	ldr	r3, [r7, #4]
 8107ca4:	691b      	ldr	r3, [r3, #16]
 8107ca6:	431a      	orrs	r2, r3
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	695b      	ldr	r3, [r3, #20]
 8107cac:	431a      	orrs	r2, r3
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	6a1b      	ldr	r3, [r3, #32]
 8107cb2:	431a      	orrs	r2, r3
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	685b      	ldr	r3, [r3, #4]
 8107cb8:	431a      	orrs	r2, r3
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107cbe:	431a      	orrs	r2, r3
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	689b      	ldr	r3, [r3, #8]
 8107cc4:	431a      	orrs	r2, r3
 8107cc6:	687b      	ldr	r3, [r7, #4]
 8107cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8107cca:	ea42 0103 	orr.w	r1, r2, r3
 8107cce:	687b      	ldr	r3, [r7, #4]
 8107cd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	681b      	ldr	r3, [r3, #0]
 8107cd6:	430a      	orrs	r2, r1
 8107cd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	685b      	ldr	r3, [r3, #4]
 8107cde:	2b00      	cmp	r3, #0
 8107ce0:	d113      	bne.n	8107d0a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	681b      	ldr	r3, [r3, #0]
 8107ce6:	689b      	ldr	r3, [r3, #8]
 8107ce8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	681b      	ldr	r3, [r3, #0]
 8107cf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107cf4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	681b      	ldr	r3, [r3, #0]
 8107cfa:	689b      	ldr	r3, [r3, #8]
 8107cfc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	681b      	ldr	r3, [r3, #0]
 8107d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8107d08:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8107d0a:	687b      	ldr	r3, [r7, #4]
 8107d0c:	681b      	ldr	r3, [r3, #0]
 8107d0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	681b      	ldr	r3, [r3, #0]
 8107d14:	f022 0201 	bic.w	r2, r2, #1
 8107d18:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8107d1a:	687b      	ldr	r3, [r7, #4]
 8107d1c:	685b      	ldr	r3, [r3, #4]
 8107d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107d22:	2b00      	cmp	r3, #0
 8107d24:	d00a      	beq.n	8107d3c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	681b      	ldr	r3, [r3, #0]
 8107d2a:	68db      	ldr	r3, [r3, #12]
 8107d2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	430a      	orrs	r2, r1
 8107d3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8107d3c:	687b      	ldr	r3, [r7, #4]
 8107d3e:	2200      	movs	r2, #0
 8107d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	2201      	movs	r2, #1
 8107d48:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8107d4c:	2300      	movs	r3, #0
}
 8107d4e:	4618      	mov	r0, r3
 8107d50:	3710      	adds	r7, #16
 8107d52:	46bd      	mov	sp, r7
 8107d54:	bd80      	pop	{r7, pc}
 8107d56:	bf00      	nop
 8107d58:	40013000 	.word	0x40013000
 8107d5c:	40003800 	.word	0x40003800
 8107d60:	40003c00 	.word	0x40003c00

08107d64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8107d64:	b480      	push	{r7}
 8107d66:	b085      	sub	sp, #20
 8107d68:	af00      	add	r7, sp, #0
 8107d6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107d70:	095b      	lsrs	r3, r3, #5
 8107d72:	3301      	adds	r3, #1
 8107d74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	68db      	ldr	r3, [r3, #12]
 8107d7a:	3301      	adds	r3, #1
 8107d7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8107d7e:	68bb      	ldr	r3, [r7, #8]
 8107d80:	3307      	adds	r3, #7
 8107d82:	08db      	lsrs	r3, r3, #3
 8107d84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8107d86:	68bb      	ldr	r3, [r7, #8]
 8107d88:	68fa      	ldr	r2, [r7, #12]
 8107d8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8107d8e:	4618      	mov	r0, r3
 8107d90:	3714      	adds	r7, #20
 8107d92:	46bd      	mov	sp, r7
 8107d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d98:	4770      	bx	lr

08107d9a <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8107d9a:	b580      	push	{r7, lr}
 8107d9c:	b082      	sub	sp, #8
 8107d9e:	af00      	add	r7, sp, #0
 8107da0:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	2b00      	cmp	r3, #0
 8107da6:	d101      	bne.n	8107dac <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8107da8:	2301      	movs	r3, #1
 8107daa:	e016      	b.n	8107dda <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8107dac:	6878      	ldr	r0, [r7, #4]
 8107dae:	f7f9 f823 	bl	8100df8 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	68da      	ldr	r2, [r3, #12]
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	681b      	ldr	r3, [r3, #0]
 8107dba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8107dbe:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	691a      	ldr	r2, [r3, #16]
 8107dc4:	687b      	ldr	r3, [r7, #4]
 8107dc6:	685b      	ldr	r3, [r3, #4]
 8107dc8:	ea42 0103 	orr.w	r1, r2, r3
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	689a      	ldr	r2, [r3, #8]
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	681b      	ldr	r3, [r3, #0]
 8107dd4:	430a      	orrs	r2, r1
 8107dd6:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8107dd8:	2300      	movs	r3, #0
}
 8107dda:	4618      	mov	r0, r3
 8107ddc:	3708      	adds	r7, #8
 8107dde:	46bd      	mov	sp, r7
 8107de0:	bd80      	pop	{r7, pc}
	...

08107de4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8107de4:	b084      	sub	sp, #16
 8107de6:	b480      	push	{r7}
 8107de8:	b085      	sub	sp, #20
 8107dea:	af00      	add	r7, sp, #0
 8107dec:	6078      	str	r0, [r7, #4]
 8107dee:	f107 001c 	add.w	r0, r7, #28
 8107df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8107df6:	2300      	movs	r3, #0
 8107df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8107dfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8107dfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8107dfe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8107e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8107e02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8107e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8107e06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8107e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8107e0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8107e0c:	68fa      	ldr	r2, [r7, #12]
 8107e0e:	4313      	orrs	r3, r2
 8107e10:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	685a      	ldr	r2, [r3, #4]
 8107e16:	4b07      	ldr	r3, [pc, #28]	@ (8107e34 <SDMMC_Init+0x50>)
 8107e18:	4013      	ands	r3, r2
 8107e1a:	68fa      	ldr	r2, [r7, #12]
 8107e1c:	431a      	orrs	r2, r3
 8107e1e:	687b      	ldr	r3, [r7, #4]
 8107e20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8107e22:	2300      	movs	r3, #0
}
 8107e24:	4618      	mov	r0, r3
 8107e26:	3714      	adds	r7, #20
 8107e28:	46bd      	mov	sp, r7
 8107e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e2e:	b004      	add	sp, #16
 8107e30:	4770      	bx	lr
 8107e32:	bf00      	nop
 8107e34:	ffc02c00 	.word	0xffc02c00

08107e38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8107e38:	b480      	push	{r7}
 8107e3a:	b083      	sub	sp, #12
 8107e3c:	af00      	add	r7, sp, #0
 8107e3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8107e46:	4618      	mov	r0, r3
 8107e48:	370c      	adds	r7, #12
 8107e4a:	46bd      	mov	sp, r7
 8107e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e50:	4770      	bx	lr

08107e52 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8107e52:	b480      	push	{r7}
 8107e54:	b083      	sub	sp, #12
 8107e56:	af00      	add	r7, sp, #0
 8107e58:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	681b      	ldr	r3, [r3, #0]
 8107e5e:	f043 0203 	orr.w	r2, r3, #3
 8107e62:	687b      	ldr	r3, [r7, #4]
 8107e64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8107e66:	2300      	movs	r3, #0
}
 8107e68:	4618      	mov	r0, r3
 8107e6a:	370c      	adds	r7, #12
 8107e6c:	46bd      	mov	sp, r7
 8107e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e72:	4770      	bx	lr

08107e74 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8107e74:	b480      	push	{r7}
 8107e76:	b083      	sub	sp, #12
 8107e78:	af00      	add	r7, sp, #0
 8107e7a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	681b      	ldr	r3, [r3, #0]
 8107e80:	f003 0303 	and.w	r3, r3, #3
}
 8107e84:	4618      	mov	r0, r3
 8107e86:	370c      	adds	r7, #12
 8107e88:	46bd      	mov	sp, r7
 8107e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e8e:	4770      	bx	lr

08107e90 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8107e90:	b480      	push	{r7}
 8107e92:	b085      	sub	sp, #20
 8107e94:	af00      	add	r7, sp, #0
 8107e96:	6078      	str	r0, [r7, #4]
 8107e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8107e9a:	2300      	movs	r3, #0
 8107e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8107e9e:	683b      	ldr	r3, [r7, #0]
 8107ea0:	681a      	ldr	r2, [r3, #0]
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8107ea6:	683b      	ldr	r3, [r7, #0]
 8107ea8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8107eaa:	683b      	ldr	r3, [r7, #0]
 8107eac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8107eae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8107eb0:	683b      	ldr	r3, [r7, #0]
 8107eb2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8107eb4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8107eb6:	683b      	ldr	r3, [r7, #0]
 8107eb8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8107eba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8107ebc:	68fa      	ldr	r2, [r7, #12]
 8107ebe:	4313      	orrs	r3, r2
 8107ec0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	68da      	ldr	r2, [r3, #12]
 8107ec6:	4b06      	ldr	r3, [pc, #24]	@ (8107ee0 <SDMMC_SendCommand+0x50>)
 8107ec8:	4013      	ands	r3, r2
 8107eca:	68fa      	ldr	r2, [r7, #12]
 8107ecc:	431a      	orrs	r2, r3
 8107ece:	687b      	ldr	r3, [r7, #4]
 8107ed0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8107ed2:	2300      	movs	r3, #0
}
 8107ed4:	4618      	mov	r0, r3
 8107ed6:	3714      	adds	r7, #20
 8107ed8:	46bd      	mov	sp, r7
 8107eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ede:	4770      	bx	lr
 8107ee0:	fffee0c0 	.word	0xfffee0c0

08107ee4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8107ee4:	b480      	push	{r7}
 8107ee6:	b083      	sub	sp, #12
 8107ee8:	af00      	add	r7, sp, #0
 8107eea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8107eec:	687b      	ldr	r3, [r7, #4]
 8107eee:	691b      	ldr	r3, [r3, #16]
 8107ef0:	b2db      	uxtb	r3, r3
}
 8107ef2:	4618      	mov	r0, r3
 8107ef4:	370c      	adds	r7, #12
 8107ef6:	46bd      	mov	sp, r7
 8107ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107efc:	4770      	bx	lr

08107efe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8107efe:	b480      	push	{r7}
 8107f00:	b085      	sub	sp, #20
 8107f02:	af00      	add	r7, sp, #0
 8107f04:	6078      	str	r0, [r7, #4]
 8107f06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	3314      	adds	r3, #20
 8107f0c:	461a      	mov	r2, r3
 8107f0e:	683b      	ldr	r3, [r7, #0]
 8107f10:	4413      	add	r3, r2
 8107f12:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8107f14:	68fb      	ldr	r3, [r7, #12]
 8107f16:	681b      	ldr	r3, [r3, #0]
}
 8107f18:	4618      	mov	r0, r3
 8107f1a:	3714      	adds	r7, #20
 8107f1c:	46bd      	mov	sp, r7
 8107f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f22:	4770      	bx	lr

08107f24 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8107f24:	b480      	push	{r7}
 8107f26:	b085      	sub	sp, #20
 8107f28:	af00      	add	r7, sp, #0
 8107f2a:	6078      	str	r0, [r7, #4]
 8107f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8107f2e:	2300      	movs	r3, #0
 8107f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8107f32:	683b      	ldr	r3, [r7, #0]
 8107f34:	681a      	ldr	r2, [r3, #0]
 8107f36:	687b      	ldr	r3, [r7, #4]
 8107f38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8107f3a:	683b      	ldr	r3, [r7, #0]
 8107f3c:	685a      	ldr	r2, [r3, #4]
 8107f3e:	687b      	ldr	r3, [r7, #4]
 8107f40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8107f42:	683b      	ldr	r3, [r7, #0]
 8107f44:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8107f46:	683b      	ldr	r3, [r7, #0]
 8107f48:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8107f4a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8107f4c:	683b      	ldr	r3, [r7, #0]
 8107f4e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8107f50:	431a      	orrs	r2, r3
                       Data->DPSM);
 8107f52:	683b      	ldr	r3, [r7, #0]
 8107f54:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8107f56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8107f58:	68fa      	ldr	r2, [r7, #12]
 8107f5a:	4313      	orrs	r3, r2
 8107f5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8107f66:	68fb      	ldr	r3, [r7, #12]
 8107f68:	431a      	orrs	r2, r3
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8107f6e:	2300      	movs	r3, #0

}
 8107f70:	4618      	mov	r0, r3
 8107f72:	3714      	adds	r7, #20
 8107f74:	46bd      	mov	sp, r7
 8107f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f7a:	4770      	bx	lr

08107f7c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8107f7c:	b580      	push	{r7, lr}
 8107f7e:	b088      	sub	sp, #32
 8107f80:	af00      	add	r7, sp, #0
 8107f82:	6078      	str	r0, [r7, #4]
 8107f84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8107f86:	683b      	ldr	r3, [r7, #0]
 8107f88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8107f8a:	2310      	movs	r3, #16
 8107f8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107f8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107f94:	2300      	movs	r3, #0
 8107f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107f9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107f9e:	f107 0308 	add.w	r3, r7, #8
 8107fa2:	4619      	mov	r1, r3
 8107fa4:	6878      	ldr	r0, [r7, #4]
 8107fa6:	f7ff ff73 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8107faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107fae:	2110      	movs	r1, #16
 8107fb0:	6878      	ldr	r0, [r7, #4]
 8107fb2:	f000 fa21 	bl	81083f8 <SDMMC_GetCmdResp1>
 8107fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107fb8:	69fb      	ldr	r3, [r7, #28]
}
 8107fba:	4618      	mov	r0, r3
 8107fbc:	3720      	adds	r7, #32
 8107fbe:	46bd      	mov	sp, r7
 8107fc0:	bd80      	pop	{r7, pc}

08107fc2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8107fc2:	b580      	push	{r7, lr}
 8107fc4:	b088      	sub	sp, #32
 8107fc6:	af00      	add	r7, sp, #0
 8107fc8:	6078      	str	r0, [r7, #4]
 8107fca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8107fcc:	683b      	ldr	r3, [r7, #0]
 8107fce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8107fd0:	2311      	movs	r3, #17
 8107fd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8107fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8107fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8107fda:	2300      	movs	r3, #0
 8107fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8107fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8107fe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8107fe4:	f107 0308 	add.w	r3, r7, #8
 8107fe8:	4619      	mov	r1, r3
 8107fea:	6878      	ldr	r0, [r7, #4]
 8107fec:	f7ff ff50 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8107ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8107ff4:	2111      	movs	r1, #17
 8107ff6:	6878      	ldr	r0, [r7, #4]
 8107ff8:	f000 f9fe 	bl	81083f8 <SDMMC_GetCmdResp1>
 8107ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8107ffe:	69fb      	ldr	r3, [r7, #28]
}
 8108000:	4618      	mov	r0, r3
 8108002:	3720      	adds	r7, #32
 8108004:	46bd      	mov	sp, r7
 8108006:	bd80      	pop	{r7, pc}

08108008 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8108008:	b580      	push	{r7, lr}
 810800a:	b088      	sub	sp, #32
 810800c:	af00      	add	r7, sp, #0
 810800e:	6078      	str	r0, [r7, #4]
 8108010:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8108012:	683b      	ldr	r3, [r7, #0]
 8108014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8108016:	2312      	movs	r3, #18
 8108018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810801a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810801e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108020:	2300      	movs	r3, #0
 8108022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108028:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810802a:	f107 0308 	add.w	r3, r7, #8
 810802e:	4619      	mov	r1, r3
 8108030:	6878      	ldr	r0, [r7, #4]
 8108032:	f7ff ff2d 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8108036:	f241 3288 	movw	r2, #5000	@ 0x1388
 810803a:	2112      	movs	r1, #18
 810803c:	6878      	ldr	r0, [r7, #4]
 810803e:	f000 f9db 	bl	81083f8 <SDMMC_GetCmdResp1>
 8108042:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108044:	69fb      	ldr	r3, [r7, #28]
}
 8108046:	4618      	mov	r0, r3
 8108048:	3720      	adds	r7, #32
 810804a:	46bd      	mov	sp, r7
 810804c:	bd80      	pop	{r7, pc}

0810804e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 810804e:	b580      	push	{r7, lr}
 8108050:	b088      	sub	sp, #32
 8108052:	af00      	add	r7, sp, #0
 8108054:	6078      	str	r0, [r7, #4]
 8108056:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8108058:	683b      	ldr	r3, [r7, #0]
 810805a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 810805c:	2318      	movs	r3, #24
 810805e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108066:	2300      	movs	r3, #0
 8108068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810806a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810806e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108070:	f107 0308 	add.w	r3, r7, #8
 8108074:	4619      	mov	r1, r3
 8108076:	6878      	ldr	r0, [r7, #4]
 8108078:	f7ff ff0a 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 810807c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108080:	2118      	movs	r1, #24
 8108082:	6878      	ldr	r0, [r7, #4]
 8108084:	f000 f9b8 	bl	81083f8 <SDMMC_GetCmdResp1>
 8108088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810808a:	69fb      	ldr	r3, [r7, #28]
}
 810808c:	4618      	mov	r0, r3
 810808e:	3720      	adds	r7, #32
 8108090:	46bd      	mov	sp, r7
 8108092:	bd80      	pop	{r7, pc}

08108094 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8108094:	b580      	push	{r7, lr}
 8108096:	b088      	sub	sp, #32
 8108098:	af00      	add	r7, sp, #0
 810809a:	6078      	str	r0, [r7, #4]
 810809c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 810809e:	683b      	ldr	r3, [r7, #0]
 81080a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 81080a2:	2319      	movs	r3, #25
 81080a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81080a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81080aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81080ac:	2300      	movs	r3, #0
 81080ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81080b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81080b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81080b6:	f107 0308 	add.w	r3, r7, #8
 81080ba:	4619      	mov	r1, r3
 81080bc:	6878      	ldr	r0, [r7, #4]
 81080be:	f7ff fee7 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 81080c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 81080c6:	2119      	movs	r1, #25
 81080c8:	6878      	ldr	r0, [r7, #4]
 81080ca:	f000 f995 	bl	81083f8 <SDMMC_GetCmdResp1>
 81080ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81080d0:	69fb      	ldr	r3, [r7, #28]
}
 81080d2:	4618      	mov	r0, r3
 81080d4:	3720      	adds	r7, #32
 81080d6:	46bd      	mov	sp, r7
 81080d8:	bd80      	pop	{r7, pc}

081080da <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 81080da:	b580      	push	{r7, lr}
 81080dc:	b088      	sub	sp, #32
 81080de:	af00      	add	r7, sp, #0
 81080e0:	6078      	str	r0, [r7, #4]
 81080e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 81080e4:	683b      	ldr	r3, [r7, #0]
 81080e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 81080e8:	2307      	movs	r3, #7
 81080ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81080ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81080f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81080f2:	2300      	movs	r3, #0
 81080f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81080f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81080fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81080fc:	f107 0308 	add.w	r3, r7, #8
 8108100:	4619      	mov	r1, r3
 8108102:	6878      	ldr	r0, [r7, #4]
 8108104:	f7ff fec4 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8108108:	f241 3288 	movw	r2, #5000	@ 0x1388
 810810c:	2107      	movs	r1, #7
 810810e:	6878      	ldr	r0, [r7, #4]
 8108110:	f000 f972 	bl	81083f8 <SDMMC_GetCmdResp1>
 8108114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108116:	69fb      	ldr	r3, [r7, #28]
}
 8108118:	4618      	mov	r0, r3
 810811a:	3720      	adds	r7, #32
 810811c:	46bd      	mov	sp, r7
 810811e:	bd80      	pop	{r7, pc}

08108120 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8108120:	b580      	push	{r7, lr}
 8108122:	b088      	sub	sp, #32
 8108124:	af00      	add	r7, sp, #0
 8108126:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8108128:	2300      	movs	r3, #0
 810812a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810812c:	2300      	movs	r3, #0
 810812e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8108130:	2300      	movs	r3, #0
 8108132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108134:	2300      	movs	r3, #0
 8108136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810813c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810813e:	f107 0308 	add.w	r3, r7, #8
 8108142:	4619      	mov	r1, r3
 8108144:	6878      	ldr	r0, [r7, #4]
 8108146:	f7ff fea3 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810814a:	6878      	ldr	r0, [r7, #4]
 810814c:	f000 fb96 	bl	810887c <SDMMC_GetCmdError>
 8108150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108152:	69fb      	ldr	r3, [r7, #28]
}
 8108154:	4618      	mov	r0, r3
 8108156:	3720      	adds	r7, #32
 8108158:	46bd      	mov	sp, r7
 810815a:	bd80      	pop	{r7, pc}

0810815c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810815c:	b580      	push	{r7, lr}
 810815e:	b088      	sub	sp, #32
 8108160:	af00      	add	r7, sp, #0
 8108162:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8108164:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8108168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810816a:	2308      	movs	r3, #8
 810816c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810816e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108174:	2300      	movs	r3, #0
 8108176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810817c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810817e:	f107 0308 	add.w	r3, r7, #8
 8108182:	4619      	mov	r1, r3
 8108184:	6878      	ldr	r0, [r7, #4]
 8108186:	f7ff fe83 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810818a:	6878      	ldr	r0, [r7, #4]
 810818c:	f000 fb28 	bl	81087e0 <SDMMC_GetCmdResp7>
 8108190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108192:	69fb      	ldr	r3, [r7, #28]
}
 8108194:	4618      	mov	r0, r3
 8108196:	3720      	adds	r7, #32
 8108198:	46bd      	mov	sp, r7
 810819a:	bd80      	pop	{r7, pc}

0810819c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810819c:	b580      	push	{r7, lr}
 810819e:	b088      	sub	sp, #32
 81081a0:	af00      	add	r7, sp, #0
 81081a2:	6078      	str	r0, [r7, #4]
 81081a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 81081a6:	683b      	ldr	r3, [r7, #0]
 81081a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 81081aa:	2337      	movs	r3, #55	@ 0x37
 81081ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81081ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81081b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81081b4:	2300      	movs	r3, #0
 81081b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81081b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81081bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81081be:	f107 0308 	add.w	r3, r7, #8
 81081c2:	4619      	mov	r1, r3
 81081c4:	6878      	ldr	r0, [r7, #4]
 81081c6:	f7ff fe63 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 81081ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 81081ce:	2137      	movs	r1, #55	@ 0x37
 81081d0:	6878      	ldr	r0, [r7, #4]
 81081d2:	f000 f911 	bl	81083f8 <SDMMC_GetCmdResp1>
 81081d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81081d8:	69fb      	ldr	r3, [r7, #28]
}
 81081da:	4618      	mov	r0, r3
 81081dc:	3720      	adds	r7, #32
 81081de:	46bd      	mov	sp, r7
 81081e0:	bd80      	pop	{r7, pc}

081081e2 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81081e2:	b580      	push	{r7, lr}
 81081e4:	b088      	sub	sp, #32
 81081e6:	af00      	add	r7, sp, #0
 81081e8:	6078      	str	r0, [r7, #4]
 81081ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 81081ec:	683b      	ldr	r3, [r7, #0]
 81081ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 81081f0:	2329      	movs	r3, #41	@ 0x29
 81081f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81081f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81081f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81081fa:	2300      	movs	r3, #0
 81081fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81081fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108202:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108204:	f107 0308 	add.w	r3, r7, #8
 8108208:	4619      	mov	r1, r3
 810820a:	6878      	ldr	r0, [r7, #4]
 810820c:	f7ff fe40 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8108210:	6878      	ldr	r0, [r7, #4]
 8108212:	f000 fa2d 	bl	8108670 <SDMMC_GetCmdResp3>
 8108216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108218:	69fb      	ldr	r3, [r7, #28]
}
 810821a:	4618      	mov	r0, r3
 810821c:	3720      	adds	r7, #32
 810821e:	46bd      	mov	sp, r7
 8108220:	bd80      	pop	{r7, pc}

08108222 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8108222:	b580      	push	{r7, lr}
 8108224:	b088      	sub	sp, #32
 8108226:	af00      	add	r7, sp, #0
 8108228:	6078      	str	r0, [r7, #4]
 810822a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810822c:	683b      	ldr	r3, [r7, #0]
 810822e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8108230:	2306      	movs	r3, #6
 8108232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108234:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810823a:	2300      	movs	r3, #0
 810823c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810823e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108244:	f107 0308 	add.w	r3, r7, #8
 8108248:	4619      	mov	r1, r3
 810824a:	6878      	ldr	r0, [r7, #4]
 810824c:	f7ff fe20 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8108250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108254:	2106      	movs	r1, #6
 8108256:	6878      	ldr	r0, [r7, #4]
 8108258:	f000 f8ce 	bl	81083f8 <SDMMC_GetCmdResp1>
 810825c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810825e:	69fb      	ldr	r3, [r7, #28]
}
 8108260:	4618      	mov	r0, r3
 8108262:	3720      	adds	r7, #32
 8108264:	46bd      	mov	sp, r7
 8108266:	bd80      	pop	{r7, pc}

08108268 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8108268:	b580      	push	{r7, lr}
 810826a:	b088      	sub	sp, #32
 810826c:	af00      	add	r7, sp, #0
 810826e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8108270:	2300      	movs	r3, #0
 8108272:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8108274:	2333      	movs	r3, #51	@ 0x33
 8108276:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810827c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810827e:	2300      	movs	r3, #0
 8108280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108286:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108288:	f107 0308 	add.w	r3, r7, #8
 810828c:	4619      	mov	r1, r3
 810828e:	6878      	ldr	r0, [r7, #4]
 8108290:	f7ff fdfe 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8108294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108298:	2133      	movs	r1, #51	@ 0x33
 810829a:	6878      	ldr	r0, [r7, #4]
 810829c:	f000 f8ac 	bl	81083f8 <SDMMC_GetCmdResp1>
 81082a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81082a2:	69fb      	ldr	r3, [r7, #28]
}
 81082a4:	4618      	mov	r0, r3
 81082a6:	3720      	adds	r7, #32
 81082a8:	46bd      	mov	sp, r7
 81082aa:	bd80      	pop	{r7, pc}

081082ac <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 81082ac:	b580      	push	{r7, lr}
 81082ae:	b088      	sub	sp, #32
 81082b0:	af00      	add	r7, sp, #0
 81082b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 81082b4:	2300      	movs	r3, #0
 81082b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 81082b8:	2302      	movs	r3, #2
 81082ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 81082bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81082c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81082c2:	2300      	movs	r3, #0
 81082c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81082c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81082ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81082cc:	f107 0308 	add.w	r3, r7, #8
 81082d0:	4619      	mov	r1, r3
 81082d2:	6878      	ldr	r0, [r7, #4]
 81082d4:	f7ff fddc 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 81082d8:	6878      	ldr	r0, [r7, #4]
 81082da:	f000 f97f 	bl	81085dc <SDMMC_GetCmdResp2>
 81082de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81082e0:	69fb      	ldr	r3, [r7, #28]
}
 81082e2:	4618      	mov	r0, r3
 81082e4:	3720      	adds	r7, #32
 81082e6:	46bd      	mov	sp, r7
 81082e8:	bd80      	pop	{r7, pc}

081082ea <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81082ea:	b580      	push	{r7, lr}
 81082ec:	b088      	sub	sp, #32
 81082ee:	af00      	add	r7, sp, #0
 81082f0:	6078      	str	r0, [r7, #4]
 81082f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 81082f4:	683b      	ldr	r3, [r7, #0]
 81082f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 81082f8:	2309      	movs	r3, #9
 81082fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 81082fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8108300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108302:	2300      	movs	r3, #0
 8108304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810830a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810830c:	f107 0308 	add.w	r3, r7, #8
 8108310:	4619      	mov	r1, r3
 8108312:	6878      	ldr	r0, [r7, #4]
 8108314:	f7ff fdbc 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8108318:	6878      	ldr	r0, [r7, #4]
 810831a:	f000 f95f 	bl	81085dc <SDMMC_GetCmdResp2>
 810831e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108320:	69fb      	ldr	r3, [r7, #28]
}
 8108322:	4618      	mov	r0, r3
 8108324:	3720      	adds	r7, #32
 8108326:	46bd      	mov	sp, r7
 8108328:	bd80      	pop	{r7, pc}

0810832a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810832a:	b580      	push	{r7, lr}
 810832c:	b088      	sub	sp, #32
 810832e:	af00      	add	r7, sp, #0
 8108330:	6078      	str	r0, [r7, #4]
 8108332:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8108334:	2300      	movs	r3, #0
 8108336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8108338:	2303      	movs	r3, #3
 810833a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810833c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108342:	2300      	movs	r3, #0
 8108344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8108346:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810834a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810834c:	f107 0308 	add.w	r3, r7, #8
 8108350:	4619      	mov	r1, r3
 8108352:	6878      	ldr	r0, [r7, #4]
 8108354:	f7ff fd9c 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8108358:	683a      	ldr	r2, [r7, #0]
 810835a:	2103      	movs	r1, #3
 810835c:	6878      	ldr	r0, [r7, #4]
 810835e:	f000 f9c7 	bl	81086f0 <SDMMC_GetCmdResp6>
 8108362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8108364:	69fb      	ldr	r3, [r7, #28]
}
 8108366:	4618      	mov	r0, r3
 8108368:	3720      	adds	r7, #32
 810836a:	46bd      	mov	sp, r7
 810836c:	bd80      	pop	{r7, pc}

0810836e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810836e:	b580      	push	{r7, lr}
 8108370:	b088      	sub	sp, #32
 8108372:	af00      	add	r7, sp, #0
 8108374:	6078      	str	r0, [r7, #4]
 8108376:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8108378:	683b      	ldr	r3, [r7, #0]
 810837a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810837c:	230d      	movs	r3, #13
 810837e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8108380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8108386:	2300      	movs	r3, #0
 8108388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810838a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810838e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8108390:	f107 0308 	add.w	r3, r7, #8
 8108394:	4619      	mov	r1, r3
 8108396:	6878      	ldr	r0, [r7, #4]
 8108398:	f7ff fd7a 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810839c:	f241 3288 	movw	r2, #5000	@ 0x1388
 81083a0:	210d      	movs	r1, #13
 81083a2:	6878      	ldr	r0, [r7, #4]
 81083a4:	f000 f828 	bl	81083f8 <SDMMC_GetCmdResp1>
 81083a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81083aa:	69fb      	ldr	r3, [r7, #28]
}
 81083ac:	4618      	mov	r0, r3
 81083ae:	3720      	adds	r7, #32
 81083b0:	46bd      	mov	sp, r7
 81083b2:	bd80      	pop	{r7, pc}

081083b4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 81083b4:	b580      	push	{r7, lr}
 81083b6:	b088      	sub	sp, #32
 81083b8:	af00      	add	r7, sp, #0
 81083ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 81083bc:	2300      	movs	r3, #0
 81083be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 81083c0:	230d      	movs	r3, #13
 81083c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81083c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81083c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81083ca:	2300      	movs	r3, #0
 81083cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81083ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81083d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81083d4:	f107 0308 	add.w	r3, r7, #8
 81083d8:	4619      	mov	r1, r3
 81083da:	6878      	ldr	r0, [r7, #4]
 81083dc:	f7ff fd58 	bl	8107e90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 81083e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 81083e4:	210d      	movs	r1, #13
 81083e6:	6878      	ldr	r0, [r7, #4]
 81083e8:	f000 f806 	bl	81083f8 <SDMMC_GetCmdResp1>
 81083ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81083ee:	69fb      	ldr	r3, [r7, #28]
}
 81083f0:	4618      	mov	r0, r3
 81083f2:	3720      	adds	r7, #32
 81083f4:	46bd      	mov	sp, r7
 81083f6:	bd80      	pop	{r7, pc}

081083f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 81083f8:	b580      	push	{r7, lr}
 81083fa:	b088      	sub	sp, #32
 81083fc:	af00      	add	r7, sp, #0
 81083fe:	60f8      	str	r0, [r7, #12]
 8108400:	460b      	mov	r3, r1
 8108402:	607a      	str	r2, [r7, #4]
 8108404:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8108406:	4b70      	ldr	r3, [pc, #448]	@ (81085c8 <SDMMC_GetCmdResp1+0x1d0>)
 8108408:	681b      	ldr	r3, [r3, #0]
 810840a:	4a70      	ldr	r2, [pc, #448]	@ (81085cc <SDMMC_GetCmdResp1+0x1d4>)
 810840c:	fba2 2303 	umull	r2, r3, r2, r3
 8108410:	0a5a      	lsrs	r2, r3, #9
 8108412:	687b      	ldr	r3, [r7, #4]
 8108414:	fb02 f303 	mul.w	r3, r2, r3
 8108418:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810841a:	69fb      	ldr	r3, [r7, #28]
 810841c:	1e5a      	subs	r2, r3, #1
 810841e:	61fa      	str	r2, [r7, #28]
 8108420:	2b00      	cmp	r3, #0
 8108422:	d102      	bne.n	810842a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8108424:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108428:	e0c9      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810842a:	68fb      	ldr	r3, [r7, #12]
 810842c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810842e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8108430:	69ba      	ldr	r2, [r7, #24]
 8108432:	4b67      	ldr	r3, [pc, #412]	@ (81085d0 <SDMMC_GetCmdResp1+0x1d8>)
 8108434:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8108436:	2b00      	cmp	r3, #0
 8108438:	d0ef      	beq.n	810841a <SDMMC_GetCmdResp1+0x22>
 810843a:	69bb      	ldr	r3, [r7, #24]
 810843c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8108440:	2b00      	cmp	r3, #0
 8108442:	d1ea      	bne.n	810841a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8108444:	68fb      	ldr	r3, [r7, #12]
 8108446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108448:	f003 0304 	and.w	r3, r3, #4
 810844c:	2b00      	cmp	r3, #0
 810844e:	d004      	beq.n	810845a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8108450:	68fb      	ldr	r3, [r7, #12]
 8108452:	2204      	movs	r2, #4
 8108454:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8108456:	2304      	movs	r3, #4
 8108458:	e0b1      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810845a:	68fb      	ldr	r3, [r7, #12]
 810845c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810845e:	f003 0301 	and.w	r3, r3, #1
 8108462:	2b00      	cmp	r3, #0
 8108464:	d004      	beq.n	8108470 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8108466:	68fb      	ldr	r3, [r7, #12]
 8108468:	2201      	movs	r2, #1
 810846a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810846c:	2301      	movs	r3, #1
 810846e:	e0a6      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8108470:	68fb      	ldr	r3, [r7, #12]
 8108472:	4a58      	ldr	r2, [pc, #352]	@ (81085d4 <SDMMC_GetCmdResp1+0x1dc>)
 8108474:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8108476:	68f8      	ldr	r0, [r7, #12]
 8108478:	f7ff fd34 	bl	8107ee4 <SDMMC_GetCommandResponse>
 810847c:	4603      	mov	r3, r0
 810847e:	461a      	mov	r2, r3
 8108480:	7afb      	ldrb	r3, [r7, #11]
 8108482:	4293      	cmp	r3, r2
 8108484:	d001      	beq.n	810848a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8108486:	2301      	movs	r3, #1
 8108488:	e099      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810848a:	2100      	movs	r1, #0
 810848c:	68f8      	ldr	r0, [r7, #12]
 810848e:	f7ff fd36 	bl	8107efe <SDMMC_GetResponse>
 8108492:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8108494:	697a      	ldr	r2, [r7, #20]
 8108496:	4b50      	ldr	r3, [pc, #320]	@ (81085d8 <SDMMC_GetCmdResp1+0x1e0>)
 8108498:	4013      	ands	r3, r2
 810849a:	2b00      	cmp	r3, #0
 810849c:	d101      	bne.n	81084a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810849e:	2300      	movs	r3, #0
 81084a0:	e08d      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 81084a2:	697b      	ldr	r3, [r7, #20]
 81084a4:	2b00      	cmp	r3, #0
 81084a6:	da02      	bge.n	81084ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 81084a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81084ac:	e087      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 81084ae:	697b      	ldr	r3, [r7, #20]
 81084b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81084b4:	2b00      	cmp	r3, #0
 81084b6:	d001      	beq.n	81084bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 81084b8:	2340      	movs	r3, #64	@ 0x40
 81084ba:	e080      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 81084bc:	697b      	ldr	r3, [r7, #20]
 81084be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81084c2:	2b00      	cmp	r3, #0
 81084c4:	d001      	beq.n	81084ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 81084c6:	2380      	movs	r3, #128	@ 0x80
 81084c8:	e079      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 81084ca:	697b      	ldr	r3, [r7, #20]
 81084cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81084d0:	2b00      	cmp	r3, #0
 81084d2:	d002      	beq.n	81084da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 81084d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81084d8:	e071      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 81084da:	697b      	ldr	r3, [r7, #20]
 81084dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81084e0:	2b00      	cmp	r3, #0
 81084e2:	d002      	beq.n	81084ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 81084e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81084e8:	e069      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 81084ea:	697b      	ldr	r3, [r7, #20]
 81084ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81084f0:	2b00      	cmp	r3, #0
 81084f2:	d002      	beq.n	81084fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 81084f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81084f8:	e061      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 81084fa:	697b      	ldr	r3, [r7, #20]
 81084fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8108500:	2b00      	cmp	r3, #0
 8108502:	d002      	beq.n	810850a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8108504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8108508:	e059      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810850a:	697b      	ldr	r3, [r7, #20]
 810850c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8108510:	2b00      	cmp	r3, #0
 8108512:	d002      	beq.n	810851a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8108514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8108518:	e051      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810851a:	697b      	ldr	r3, [r7, #20]
 810851c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8108520:	2b00      	cmp	r3, #0
 8108522:	d002      	beq.n	810852a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8108524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8108528:	e049      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810852a:	697b      	ldr	r3, [r7, #20]
 810852c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8108530:	2b00      	cmp	r3, #0
 8108532:	d002      	beq.n	810853a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8108534:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8108538:	e041      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810853a:	697b      	ldr	r3, [r7, #20]
 810853c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8108540:	2b00      	cmp	r3, #0
 8108542:	d002      	beq.n	810854a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8108544:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108548:	e039      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810854a:	697b      	ldr	r3, [r7, #20]
 810854c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8108550:	2b00      	cmp	r3, #0
 8108552:	d002      	beq.n	810855a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8108554:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8108558:	e031      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810855a:	697b      	ldr	r3, [r7, #20]
 810855c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108560:	2b00      	cmp	r3, #0
 8108562:	d002      	beq.n	810856a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8108564:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8108568:	e029      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810856a:	697b      	ldr	r3, [r7, #20]
 810856c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108570:	2b00      	cmp	r3, #0
 8108572:	d002      	beq.n	810857a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8108574:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8108578:	e021      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810857a:	697b      	ldr	r3, [r7, #20]
 810857c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8108580:	2b00      	cmp	r3, #0
 8108582:	d002      	beq.n	810858a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8108584:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8108588:	e019      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810858a:	697b      	ldr	r3, [r7, #20]
 810858c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8108590:	2b00      	cmp	r3, #0
 8108592:	d002      	beq.n	810859a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8108594:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8108598:	e011      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810859a:	697b      	ldr	r3, [r7, #20]
 810859c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81085a0:	2b00      	cmp	r3, #0
 81085a2:	d002      	beq.n	81085aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 81085a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81085a8:	e009      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 81085aa:	697b      	ldr	r3, [r7, #20]
 81085ac:	f003 0308 	and.w	r3, r3, #8
 81085b0:	2b00      	cmp	r3, #0
 81085b2:	d002      	beq.n	81085ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 81085b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 81085b8:	e001      	b.n	81085be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 81085ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 81085be:	4618      	mov	r0, r3
 81085c0:	3720      	adds	r7, #32
 81085c2:	46bd      	mov	sp, r7
 81085c4:	bd80      	pop	{r7, pc}
 81085c6:	bf00      	nop
 81085c8:	10000000 	.word	0x10000000
 81085cc:	10624dd3 	.word	0x10624dd3
 81085d0:	00200045 	.word	0x00200045
 81085d4:	002000c5 	.word	0x002000c5
 81085d8:	fdffe008 	.word	0xfdffe008

081085dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 81085dc:	b480      	push	{r7}
 81085de:	b085      	sub	sp, #20
 81085e0:	af00      	add	r7, sp, #0
 81085e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81085e4:	4b1f      	ldr	r3, [pc, #124]	@ (8108664 <SDMMC_GetCmdResp2+0x88>)
 81085e6:	681b      	ldr	r3, [r3, #0]
 81085e8:	4a1f      	ldr	r2, [pc, #124]	@ (8108668 <SDMMC_GetCmdResp2+0x8c>)
 81085ea:	fba2 2303 	umull	r2, r3, r2, r3
 81085ee:	0a5b      	lsrs	r3, r3, #9
 81085f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 81085f4:	fb02 f303 	mul.w	r3, r2, r3
 81085f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81085fa:	68fb      	ldr	r3, [r7, #12]
 81085fc:	1e5a      	subs	r2, r3, #1
 81085fe:	60fa      	str	r2, [r7, #12]
 8108600:	2b00      	cmp	r3, #0
 8108602:	d102      	bne.n	810860a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8108604:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108608:	e026      	b.n	8108658 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810860a:	687b      	ldr	r3, [r7, #4]
 810860c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810860e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108610:	68bb      	ldr	r3, [r7, #8]
 8108612:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8108616:	2b00      	cmp	r3, #0
 8108618:	d0ef      	beq.n	81085fa <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810861a:	68bb      	ldr	r3, [r7, #8]
 810861c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108620:	2b00      	cmp	r3, #0
 8108622:	d1ea      	bne.n	81085fa <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8108624:	687b      	ldr	r3, [r7, #4]
 8108626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108628:	f003 0304 	and.w	r3, r3, #4
 810862c:	2b00      	cmp	r3, #0
 810862e:	d004      	beq.n	810863a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8108630:	687b      	ldr	r3, [r7, #4]
 8108632:	2204      	movs	r2, #4
 8108634:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8108636:	2304      	movs	r3, #4
 8108638:	e00e      	b.n	8108658 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810863a:	687b      	ldr	r3, [r7, #4]
 810863c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810863e:	f003 0301 	and.w	r3, r3, #1
 8108642:	2b00      	cmp	r3, #0
 8108644:	d004      	beq.n	8108650 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8108646:	687b      	ldr	r3, [r7, #4]
 8108648:	2201      	movs	r2, #1
 810864a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810864c:	2301      	movs	r3, #1
 810864e:	e003      	b.n	8108658 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8108650:	687b      	ldr	r3, [r7, #4]
 8108652:	4a06      	ldr	r2, [pc, #24]	@ (810866c <SDMMC_GetCmdResp2+0x90>)
 8108654:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8108656:	2300      	movs	r3, #0
}
 8108658:	4618      	mov	r0, r3
 810865a:	3714      	adds	r7, #20
 810865c:	46bd      	mov	sp, r7
 810865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108662:	4770      	bx	lr
 8108664:	10000000 	.word	0x10000000
 8108668:	10624dd3 	.word	0x10624dd3
 810866c:	002000c5 	.word	0x002000c5

08108670 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8108670:	b480      	push	{r7}
 8108672:	b085      	sub	sp, #20
 8108674:	af00      	add	r7, sp, #0
 8108676:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8108678:	4b1a      	ldr	r3, [pc, #104]	@ (81086e4 <SDMMC_GetCmdResp3+0x74>)
 810867a:	681b      	ldr	r3, [r3, #0]
 810867c:	4a1a      	ldr	r2, [pc, #104]	@ (81086e8 <SDMMC_GetCmdResp3+0x78>)
 810867e:	fba2 2303 	umull	r2, r3, r2, r3
 8108682:	0a5b      	lsrs	r3, r3, #9
 8108684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108688:	fb02 f303 	mul.w	r3, r2, r3
 810868c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810868e:	68fb      	ldr	r3, [r7, #12]
 8108690:	1e5a      	subs	r2, r3, #1
 8108692:	60fa      	str	r2, [r7, #12]
 8108694:	2b00      	cmp	r3, #0
 8108696:	d102      	bne.n	810869e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8108698:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810869c:	e01b      	b.n	81086d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81086a2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81086a4:	68bb      	ldr	r3, [r7, #8]
 81086a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 81086aa:	2b00      	cmp	r3, #0
 81086ac:	d0ef      	beq.n	810868e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81086ae:	68bb      	ldr	r3, [r7, #8]
 81086b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81086b4:	2b00      	cmp	r3, #0
 81086b6:	d1ea      	bne.n	810868e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81086b8:	687b      	ldr	r3, [r7, #4]
 81086ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81086bc:	f003 0304 	and.w	r3, r3, #4
 81086c0:	2b00      	cmp	r3, #0
 81086c2:	d004      	beq.n	81086ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81086c4:	687b      	ldr	r3, [r7, #4]
 81086c6:	2204      	movs	r2, #4
 81086c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81086ca:	2304      	movs	r3, #4
 81086cc:	e003      	b.n	81086d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81086ce:	687b      	ldr	r3, [r7, #4]
 81086d0:	4a06      	ldr	r2, [pc, #24]	@ (81086ec <SDMMC_GetCmdResp3+0x7c>)
 81086d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 81086d4:	2300      	movs	r3, #0
}
 81086d6:	4618      	mov	r0, r3
 81086d8:	3714      	adds	r7, #20
 81086da:	46bd      	mov	sp, r7
 81086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086e0:	4770      	bx	lr
 81086e2:	bf00      	nop
 81086e4:	10000000 	.word	0x10000000
 81086e8:	10624dd3 	.word	0x10624dd3
 81086ec:	002000c5 	.word	0x002000c5

081086f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 81086f0:	b580      	push	{r7, lr}
 81086f2:	b088      	sub	sp, #32
 81086f4:	af00      	add	r7, sp, #0
 81086f6:	60f8      	str	r0, [r7, #12]
 81086f8:	460b      	mov	r3, r1
 81086fa:	607a      	str	r2, [r7, #4]
 81086fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81086fe:	4b35      	ldr	r3, [pc, #212]	@ (81087d4 <SDMMC_GetCmdResp6+0xe4>)
 8108700:	681b      	ldr	r3, [r3, #0]
 8108702:	4a35      	ldr	r2, [pc, #212]	@ (81087d8 <SDMMC_GetCmdResp6+0xe8>)
 8108704:	fba2 2303 	umull	r2, r3, r2, r3
 8108708:	0a5b      	lsrs	r3, r3, #9
 810870a:	f241 3288 	movw	r2, #5000	@ 0x1388
 810870e:	fb02 f303 	mul.w	r3, r2, r3
 8108712:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8108714:	69fb      	ldr	r3, [r7, #28]
 8108716:	1e5a      	subs	r2, r3, #1
 8108718:	61fa      	str	r2, [r7, #28]
 810871a:	2b00      	cmp	r3, #0
 810871c:	d102      	bne.n	8108724 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810871e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8108722:	e052      	b.n	81087ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8108724:	68fb      	ldr	r3, [r7, #12]
 8108726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108728:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810872a:	69bb      	ldr	r3, [r7, #24]
 810872c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8108730:	2b00      	cmp	r3, #0
 8108732:	d0ef      	beq.n	8108714 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8108734:	69bb      	ldr	r3, [r7, #24]
 8108736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810873a:	2b00      	cmp	r3, #0
 810873c:	d1ea      	bne.n	8108714 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810873e:	68fb      	ldr	r3, [r7, #12]
 8108740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108742:	f003 0304 	and.w	r3, r3, #4
 8108746:	2b00      	cmp	r3, #0
 8108748:	d004      	beq.n	8108754 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810874a:	68fb      	ldr	r3, [r7, #12]
 810874c:	2204      	movs	r2, #4
 810874e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8108750:	2304      	movs	r3, #4
 8108752:	e03a      	b.n	81087ca <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8108754:	68fb      	ldr	r3, [r7, #12]
 8108756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108758:	f003 0301 	and.w	r3, r3, #1
 810875c:	2b00      	cmp	r3, #0
 810875e:	d004      	beq.n	810876a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8108760:	68fb      	ldr	r3, [r7, #12]
 8108762:	2201      	movs	r2, #1
 8108764:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8108766:	2301      	movs	r3, #1
 8108768:	e02f      	b.n	81087ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810876a:	68f8      	ldr	r0, [r7, #12]
 810876c:	f7ff fbba 	bl	8107ee4 <SDMMC_GetCommandResponse>
 8108770:	4603      	mov	r3, r0
 8108772:	461a      	mov	r2, r3
 8108774:	7afb      	ldrb	r3, [r7, #11]
 8108776:	4293      	cmp	r3, r2
 8108778:	d001      	beq.n	810877e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810877a:	2301      	movs	r3, #1
 810877c:	e025      	b.n	81087ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810877e:	68fb      	ldr	r3, [r7, #12]
 8108780:	4a16      	ldr	r2, [pc, #88]	@ (81087dc <SDMMC_GetCmdResp6+0xec>)
 8108782:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8108784:	2100      	movs	r1, #0
 8108786:	68f8      	ldr	r0, [r7, #12]
 8108788:	f7ff fbb9 	bl	8107efe <SDMMC_GetResponse>
 810878c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810878e:	697b      	ldr	r3, [r7, #20]
 8108790:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8108794:	2b00      	cmp	r3, #0
 8108796:	d106      	bne.n	81087a6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8108798:	697b      	ldr	r3, [r7, #20]
 810879a:	0c1b      	lsrs	r3, r3, #16
 810879c:	b29a      	uxth	r2, r3
 810879e:	687b      	ldr	r3, [r7, #4]
 81087a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 81087a2:	2300      	movs	r3, #0
 81087a4:	e011      	b.n	81087ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 81087a6:	697b      	ldr	r3, [r7, #20]
 81087a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81087ac:	2b00      	cmp	r3, #0
 81087ae:	d002      	beq.n	81087b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 81087b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 81087b4:	e009      	b.n	81087ca <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 81087b6:	697b      	ldr	r3, [r7, #20]
 81087b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81087bc:	2b00      	cmp	r3, #0
 81087be:	d002      	beq.n	81087c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 81087c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81087c4:	e001      	b.n	81087ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 81087c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 81087ca:	4618      	mov	r0, r3
 81087cc:	3720      	adds	r7, #32
 81087ce:	46bd      	mov	sp, r7
 81087d0:	bd80      	pop	{r7, pc}
 81087d2:	bf00      	nop
 81087d4:	10000000 	.word	0x10000000
 81087d8:	10624dd3 	.word	0x10624dd3
 81087dc:	002000c5 	.word	0x002000c5

081087e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 81087e0:	b480      	push	{r7}
 81087e2:	b085      	sub	sp, #20
 81087e4:	af00      	add	r7, sp, #0
 81087e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81087e8:	4b22      	ldr	r3, [pc, #136]	@ (8108874 <SDMMC_GetCmdResp7+0x94>)
 81087ea:	681b      	ldr	r3, [r3, #0]
 81087ec:	4a22      	ldr	r2, [pc, #136]	@ (8108878 <SDMMC_GetCmdResp7+0x98>)
 81087ee:	fba2 2303 	umull	r2, r3, r2, r3
 81087f2:	0a5b      	lsrs	r3, r3, #9
 81087f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 81087f8:	fb02 f303 	mul.w	r3, r2, r3
 81087fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81087fe:	68fb      	ldr	r3, [r7, #12]
 8108800:	1e5a      	subs	r2, r3, #1
 8108802:	60fa      	str	r2, [r7, #12]
 8108804:	2b00      	cmp	r3, #0
 8108806:	d102      	bne.n	810880e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8108808:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810880c:	e02c      	b.n	8108868 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810880e:	687b      	ldr	r3, [r7, #4]
 8108810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108812:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108814:	68bb      	ldr	r3, [r7, #8]
 8108816:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810881a:	2b00      	cmp	r3, #0
 810881c:	d0ef      	beq.n	81087fe <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810881e:	68bb      	ldr	r3, [r7, #8]
 8108820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8108824:	2b00      	cmp	r3, #0
 8108826:	d1ea      	bne.n	81087fe <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8108828:	687b      	ldr	r3, [r7, #4]
 810882a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810882c:	f003 0304 	and.w	r3, r3, #4
 8108830:	2b00      	cmp	r3, #0
 8108832:	d004      	beq.n	810883e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8108834:	687b      	ldr	r3, [r7, #4]
 8108836:	2204      	movs	r2, #4
 8108838:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810883a:	2304      	movs	r3, #4
 810883c:	e014      	b.n	8108868 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810883e:	687b      	ldr	r3, [r7, #4]
 8108840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108842:	f003 0301 	and.w	r3, r3, #1
 8108846:	2b00      	cmp	r3, #0
 8108848:	d004      	beq.n	8108854 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810884a:	687b      	ldr	r3, [r7, #4]
 810884c:	2201      	movs	r2, #1
 810884e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8108850:	2301      	movs	r3, #1
 8108852:	e009      	b.n	8108868 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810885c:	2b00      	cmp	r3, #0
 810885e:	d002      	beq.n	8108866 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8108860:	687b      	ldr	r3, [r7, #4]
 8108862:	2240      	movs	r2, #64	@ 0x40
 8108864:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8108866:	2300      	movs	r3, #0

}
 8108868:	4618      	mov	r0, r3
 810886a:	3714      	adds	r7, #20
 810886c:	46bd      	mov	sp, r7
 810886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108872:	4770      	bx	lr
 8108874:	10000000 	.word	0x10000000
 8108878:	10624dd3 	.word	0x10624dd3

0810887c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810887c:	b480      	push	{r7}
 810887e:	b085      	sub	sp, #20
 8108880:	af00      	add	r7, sp, #0
 8108882:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8108884:	4b11      	ldr	r3, [pc, #68]	@ (81088cc <SDMMC_GetCmdError+0x50>)
 8108886:	681b      	ldr	r3, [r3, #0]
 8108888:	4a11      	ldr	r2, [pc, #68]	@ (81088d0 <SDMMC_GetCmdError+0x54>)
 810888a:	fba2 2303 	umull	r2, r3, r2, r3
 810888e:	0a5b      	lsrs	r3, r3, #9
 8108890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8108894:	fb02 f303 	mul.w	r3, r2, r3
 8108898:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810889a:	68fb      	ldr	r3, [r7, #12]
 810889c:	1e5a      	subs	r2, r3, #1
 810889e:	60fa      	str	r2, [r7, #12]
 81088a0:	2b00      	cmp	r3, #0
 81088a2:	d102      	bne.n	81088aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 81088a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 81088a8:	e009      	b.n	81088be <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 81088aa:	687b      	ldr	r3, [r7, #4]
 81088ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81088ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81088b2:	2b00      	cmp	r3, #0
 81088b4:	d0f1      	beq.n	810889a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	4a06      	ldr	r2, [pc, #24]	@ (81088d4 <SDMMC_GetCmdError+0x58>)
 81088ba:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 81088bc:	2300      	movs	r3, #0
}
 81088be:	4618      	mov	r0, r3
 81088c0:	3714      	adds	r7, #20
 81088c2:	46bd      	mov	sp, r7
 81088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088c8:	4770      	bx	lr
 81088ca:	bf00      	nop
 81088cc:	10000000 	.word	0x10000000
 81088d0:	10624dd3 	.word	0x10624dd3
 81088d4:	002000c5 	.word	0x002000c5

081088d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 81088d8:	b580      	push	{r7, lr}
 81088da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 81088dc:	4904      	ldr	r1, [pc, #16]	@ (81088f0 <MX_FATFS_Init+0x18>)
 81088de:	4805      	ldr	r0, [pc, #20]	@ (81088f4 <MX_FATFS_Init+0x1c>)
 81088e0:	f000 fa52 	bl	8108d88 <FATFS_LinkDriver>
 81088e4:	4603      	mov	r3, r0
 81088e6:	461a      	mov	r2, r3
 81088e8:	4b03      	ldr	r3, [pc, #12]	@ (81088f8 <MX_FATFS_Init+0x20>)
 81088ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 81088ec:	bf00      	nop
 81088ee:	bd80      	pop	{r7, pc}
 81088f0:	1000051c 	.word	0x1000051c
 81088f4:	0810c4bc 	.word	0x0810c4bc
 81088f8:	10000518 	.word	0x10000518

081088fc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 81088fc:	b580      	push	{r7, lr}
 81088fe:	b082      	sub	sp, #8
 8108900:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8108902:	2300      	movs	r3, #0
 8108904:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8108906:	f000 f871 	bl	81089ec <BSP_SD_IsDetected>
 810890a:	4603      	mov	r3, r0
 810890c:	2b01      	cmp	r3, #1
 810890e:	d001      	beq.n	8108914 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8108910:	2302      	movs	r3, #2
 8108912:	e012      	b.n	810893a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8108914:	480b      	ldr	r0, [pc, #44]	@ (8108944 <BSP_SD_Init+0x48>)
 8108916:	f7fd ff17 	bl	8106748 <HAL_SD_Init>
 810891a:	4603      	mov	r3, r0
 810891c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 810891e:	79fb      	ldrb	r3, [r7, #7]
 8108920:	2b00      	cmp	r3, #0
 8108922:	d109      	bne.n	8108938 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8108924:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8108928:	4806      	ldr	r0, [pc, #24]	@ (8108944 <BSP_SD_Init+0x48>)
 810892a:	f7fe fc0b 	bl	8107144 <HAL_SD_ConfigWideBusOperation>
 810892e:	4603      	mov	r3, r0
 8108930:	2b00      	cmp	r3, #0
 8108932:	d001      	beq.n	8108938 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8108934:	2301      	movs	r3, #1
 8108936:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8108938:	79fb      	ldrb	r3, [r7, #7]
}
 810893a:	4618      	mov	r0, r3
 810893c:	3708      	adds	r7, #8
 810893e:	46bd      	mov	sp, r7
 8108940:	bd80      	pop	{r7, pc}
 8108942:	bf00      	nop
 8108944:	100003f4 	.word	0x100003f4

08108948 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8108948:	b580      	push	{r7, lr}
 810894a:	b086      	sub	sp, #24
 810894c:	af00      	add	r7, sp, #0
 810894e:	60f8      	str	r0, [r7, #12]
 8108950:	60b9      	str	r1, [r7, #8]
 8108952:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8108954:	2300      	movs	r3, #0
 8108956:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8108958:	687b      	ldr	r3, [r7, #4]
 810895a:	68ba      	ldr	r2, [r7, #8]
 810895c:	68f9      	ldr	r1, [r7, #12]
 810895e:	4806      	ldr	r0, [pc, #24]	@ (8108978 <BSP_SD_ReadBlocks_DMA+0x30>)
 8108960:	f7fe f812 	bl	8106988 <HAL_SD_ReadBlocks_DMA>
 8108964:	4603      	mov	r3, r0
 8108966:	2b00      	cmp	r3, #0
 8108968:	d001      	beq.n	810896e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 810896a:	2301      	movs	r3, #1
 810896c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 810896e:	7dfb      	ldrb	r3, [r7, #23]
}
 8108970:	4618      	mov	r0, r3
 8108972:	3718      	adds	r7, #24
 8108974:	46bd      	mov	sp, r7
 8108976:	bd80      	pop	{r7, pc}
 8108978:	100003f4 	.word	0x100003f4

0810897c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 810897c:	b580      	push	{r7, lr}
 810897e:	b086      	sub	sp, #24
 8108980:	af00      	add	r7, sp, #0
 8108982:	60f8      	str	r0, [r7, #12]
 8108984:	60b9      	str	r1, [r7, #8]
 8108986:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8108988:	2300      	movs	r3, #0
 810898a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 810898c:	687b      	ldr	r3, [r7, #4]
 810898e:	68ba      	ldr	r2, [r7, #8]
 8108990:	68f9      	ldr	r1, [r7, #12]
 8108992:	4806      	ldr	r0, [pc, #24]	@ (81089ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8108994:	f7fe f8a0 	bl	8106ad8 <HAL_SD_WriteBlocks_DMA>
 8108998:	4603      	mov	r3, r0
 810899a:	2b00      	cmp	r3, #0
 810899c:	d001      	beq.n	81089a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 810899e:	2301      	movs	r3, #1
 81089a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 81089a2:	7dfb      	ldrb	r3, [r7, #23]
}
 81089a4:	4618      	mov	r0, r3
 81089a6:	3718      	adds	r7, #24
 81089a8:	46bd      	mov	sp, r7
 81089aa:	bd80      	pop	{r7, pc}
 81089ac:	100003f4 	.word	0x100003f4

081089b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 81089b0:	b580      	push	{r7, lr}
 81089b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 81089b4:	4805      	ldr	r0, [pc, #20]	@ (81089cc <BSP_SD_GetCardState+0x1c>)
 81089b6:	f7fe fcd7 	bl	8107368 <HAL_SD_GetCardState>
 81089ba:	4603      	mov	r3, r0
 81089bc:	2b04      	cmp	r3, #4
 81089be:	bf14      	ite	ne
 81089c0:	2301      	movne	r3, #1
 81089c2:	2300      	moveq	r3, #0
 81089c4:	b2db      	uxtb	r3, r3
}
 81089c6:	4618      	mov	r0, r3
 81089c8:	bd80      	pop	{r7, pc}
 81089ca:	bf00      	nop
 81089cc:	100003f4 	.word	0x100003f4

081089d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 81089d0:	b580      	push	{r7, lr}
 81089d2:	b082      	sub	sp, #8
 81089d4:	af00      	add	r7, sp, #0
 81089d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 81089d8:	6879      	ldr	r1, [r7, #4]
 81089da:	4803      	ldr	r0, [pc, #12]	@ (81089e8 <BSP_SD_GetCardInfo+0x18>)
 81089dc:	f7fe fb86 	bl	81070ec <HAL_SD_GetCardInfo>
}
 81089e0:	bf00      	nop
 81089e2:	3708      	adds	r7, #8
 81089e4:	46bd      	mov	sp, r7
 81089e6:	bd80      	pop	{r7, pc}
 81089e8:	100003f4 	.word	0x100003f4

081089ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 81089ec:	b480      	push	{r7}
 81089ee:	b083      	sub	sp, #12
 81089f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 81089f2:	2301      	movs	r3, #1
 81089f4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 81089f6:	79fb      	ldrb	r3, [r7, #7]
 81089f8:	b2db      	uxtb	r3, r3
}
 81089fa:	4618      	mov	r0, r3
 81089fc:	370c      	adds	r7, #12
 81089fe:	46bd      	mov	sp, r7
 8108a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a04:	4770      	bx	lr

08108a06 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8108a06:	b580      	push	{r7, lr}
 8108a08:	b084      	sub	sp, #16
 8108a0a:	af00      	add	r7, sp, #0
 8108a0c:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8108a0e:	f000 fa6b 	bl	8108ee8 <osKernelGetTickCount>
 8108a12:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8108a14:	e006      	b.n	8108a24 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8108a16:	f7ff ffcb 	bl	81089b0 <BSP_SD_GetCardState>
 8108a1a:	4603      	mov	r3, r0
 8108a1c:	2b00      	cmp	r3, #0
 8108a1e:	d101      	bne.n	8108a24 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8108a20:	2300      	movs	r3, #0
 8108a22:	e009      	b.n	8108a38 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8108a24:	f000 fa60 	bl	8108ee8 <osKernelGetTickCount>
 8108a28:	4602      	mov	r2, r0
 8108a2a:	68fb      	ldr	r3, [r7, #12]
 8108a2c:	1ad3      	subs	r3, r2, r3
 8108a2e:	687a      	ldr	r2, [r7, #4]
 8108a30:	429a      	cmp	r2, r3
 8108a32:	d8f0      	bhi.n	8108a16 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8108a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8108a38:	4618      	mov	r0, r3
 8108a3a:	3710      	adds	r7, #16
 8108a3c:	46bd      	mov	sp, r7
 8108a3e:	bd80      	pop	{r7, pc}

08108a40 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8108a40:	b580      	push	{r7, lr}
 8108a42:	b082      	sub	sp, #8
 8108a44:	af00      	add	r7, sp, #0
 8108a46:	4603      	mov	r3, r0
 8108a48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8108a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8108a78 <SD_CheckStatus+0x38>)
 8108a4c:	2201      	movs	r2, #1
 8108a4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8108a50:	f7ff ffae 	bl	81089b0 <BSP_SD_GetCardState>
 8108a54:	4603      	mov	r3, r0
 8108a56:	2b00      	cmp	r3, #0
 8108a58:	d107      	bne.n	8108a6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8108a5a:	4b07      	ldr	r3, [pc, #28]	@ (8108a78 <SD_CheckStatus+0x38>)
 8108a5c:	781b      	ldrb	r3, [r3, #0]
 8108a5e:	b2db      	uxtb	r3, r3
 8108a60:	f023 0301 	bic.w	r3, r3, #1
 8108a64:	b2da      	uxtb	r2, r3
 8108a66:	4b04      	ldr	r3, [pc, #16]	@ (8108a78 <SD_CheckStatus+0x38>)
 8108a68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8108a6a:	4b03      	ldr	r3, [pc, #12]	@ (8108a78 <SD_CheckStatus+0x38>)
 8108a6c:	781b      	ldrb	r3, [r3, #0]
 8108a6e:	b2db      	uxtb	r3, r3
}
 8108a70:	4618      	mov	r0, r3
 8108a72:	3708      	adds	r7, #8
 8108a74:	46bd      	mov	sp, r7
 8108a76:	bd80      	pop	{r7, pc}
 8108a78:	1000000d 	.word	0x1000000d

08108a7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8108a7c:	b580      	push	{r7, lr}
 8108a7e:	b082      	sub	sp, #8
 8108a80:	af00      	add	r7, sp, #0
 8108a82:	4603      	mov	r3, r0
 8108a84:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8108a86:	4b1c      	ldr	r3, [pc, #112]	@ (8108af8 <SD_initialize+0x7c>)
 8108a88:	2201      	movs	r2, #1
 8108a8a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8108a8c:	f000 f9e4 	bl	8108e58 <osKernelGetState>
 8108a90:	4603      	mov	r3, r0
 8108a92:	2b02      	cmp	r3, #2
 8108a94:	d129      	bne.n	8108aea <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8108a96:	f7ff ff31 	bl	81088fc <BSP_SD_Init>
 8108a9a:	4603      	mov	r3, r0
 8108a9c:	2b00      	cmp	r3, #0
 8108a9e:	d107      	bne.n	8108ab0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8108aa0:	79fb      	ldrb	r3, [r7, #7]
 8108aa2:	4618      	mov	r0, r3
 8108aa4:	f7ff ffcc 	bl	8108a40 <SD_CheckStatus>
 8108aa8:	4603      	mov	r3, r0
 8108aaa:	461a      	mov	r2, r3
 8108aac:	4b12      	ldr	r3, [pc, #72]	@ (8108af8 <SD_initialize+0x7c>)
 8108aae:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8108ab0:	4b11      	ldr	r3, [pc, #68]	@ (8108af8 <SD_initialize+0x7c>)
 8108ab2:	781b      	ldrb	r3, [r3, #0]
 8108ab4:	b2db      	uxtb	r3, r3
 8108ab6:	2b01      	cmp	r3, #1
 8108ab8:	d017      	beq.n	8108aea <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8108aba:	4b10      	ldr	r3, [pc, #64]	@ (8108afc <SD_initialize+0x80>)
 8108abc:	681b      	ldr	r3, [r3, #0]
 8108abe:	2b00      	cmp	r3, #0
 8108ac0:	d107      	bne.n	8108ad2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8108ac2:	2200      	movs	r2, #0
 8108ac4:	2102      	movs	r1, #2
 8108ac6:	200a      	movs	r0, #10
 8108ac8:	f000 fad0 	bl	810906c <osMessageQueueNew>
 8108acc:	4603      	mov	r3, r0
 8108ace:	4a0b      	ldr	r2, [pc, #44]	@ (8108afc <SD_initialize+0x80>)
 8108ad0:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8108ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8108afc <SD_initialize+0x80>)
 8108ad4:	681b      	ldr	r3, [r3, #0]
 8108ad6:	2b00      	cmp	r3, #0
 8108ad8:	d107      	bne.n	8108aea <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8108ada:	4b07      	ldr	r3, [pc, #28]	@ (8108af8 <SD_initialize+0x7c>)
 8108adc:	781b      	ldrb	r3, [r3, #0]
 8108ade:	b2db      	uxtb	r3, r3
 8108ae0:	f043 0301 	orr.w	r3, r3, #1
 8108ae4:	b2da      	uxtb	r2, r3
 8108ae6:	4b04      	ldr	r3, [pc, #16]	@ (8108af8 <SD_initialize+0x7c>)
 8108ae8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8108aea:	4b03      	ldr	r3, [pc, #12]	@ (8108af8 <SD_initialize+0x7c>)
 8108aec:	781b      	ldrb	r3, [r3, #0]
 8108aee:	b2db      	uxtb	r3, r3
}
 8108af0:	4618      	mov	r0, r3
 8108af2:	3708      	adds	r7, #8
 8108af4:	46bd      	mov	sp, r7
 8108af6:	bd80      	pop	{r7, pc}
 8108af8:	1000000d 	.word	0x1000000d
 8108afc:	10000520 	.word	0x10000520

08108b00 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8108b00:	b580      	push	{r7, lr}
 8108b02:	b082      	sub	sp, #8
 8108b04:	af00      	add	r7, sp, #0
 8108b06:	4603      	mov	r3, r0
 8108b08:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8108b0a:	79fb      	ldrb	r3, [r7, #7]
 8108b0c:	4618      	mov	r0, r3
 8108b0e:	f7ff ff97 	bl	8108a40 <SD_CheckStatus>
 8108b12:	4603      	mov	r3, r0
}
 8108b14:	4618      	mov	r0, r3
 8108b16:	3708      	adds	r7, #8
 8108b18:	46bd      	mov	sp, r7
 8108b1a:	bd80      	pop	{r7, pc}

08108b1c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8108b1c:	b580      	push	{r7, lr}
 8108b1e:	b088      	sub	sp, #32
 8108b20:	af00      	add	r7, sp, #0
 8108b22:	60b9      	str	r1, [r7, #8]
 8108b24:	607a      	str	r2, [r7, #4]
 8108b26:	603b      	str	r3, [r7, #0]
 8108b28:	4603      	mov	r3, r0
 8108b2a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8108b2c:	2301      	movs	r3, #1
 8108b2e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8108b30:	f247 5030 	movw	r0, #30000	@ 0x7530
 8108b34:	f7ff ff67 	bl	8108a06 <SD_CheckStatusWithTimeout>
 8108b38:	4603      	mov	r3, r0
 8108b3a:	2b00      	cmp	r3, #0
 8108b3c:	da01      	bge.n	8108b42 <SD_read+0x26>
  {
    return res;
 8108b3e:	7ffb      	ldrb	r3, [r7, #31]
 8108b40:	e02f      	b.n	8108ba2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8108b42:	683a      	ldr	r2, [r7, #0]
 8108b44:	6879      	ldr	r1, [r7, #4]
 8108b46:	68b8      	ldr	r0, [r7, #8]
 8108b48:	f7ff fefe 	bl	8108948 <BSP_SD_ReadBlocks_DMA>
 8108b4c:	4603      	mov	r3, r0
 8108b4e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8108b50:	7fbb      	ldrb	r3, [r7, #30]
 8108b52:	2b00      	cmp	r3, #0
 8108b54:	d124      	bne.n	8108ba0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8108b56:	4b15      	ldr	r3, [pc, #84]	@ (8108bac <SD_read+0x90>)
 8108b58:	6818      	ldr	r0, [r3, #0]
 8108b5a:	f107 0112 	add.w	r1, r7, #18
 8108b5e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8108b62:	2200      	movs	r2, #0
 8108b64:	f000 faf6 	bl	8109154 <osMessageQueueGet>
 8108b68:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8108b6a:	69bb      	ldr	r3, [r7, #24]
 8108b6c:	2b00      	cmp	r3, #0
 8108b6e:	d117      	bne.n	8108ba0 <SD_read+0x84>
 8108b70:	8a7b      	ldrh	r3, [r7, #18]
 8108b72:	2b01      	cmp	r3, #1
 8108b74:	d114      	bne.n	8108ba0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8108b76:	f000 f9b7 	bl	8108ee8 <osKernelGetTickCount>
 8108b7a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8108b7c:	e007      	b.n	8108b8e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8108b7e:	f7ff ff17 	bl	81089b0 <BSP_SD_GetCardState>
 8108b82:	4603      	mov	r3, r0
 8108b84:	2b00      	cmp	r3, #0
 8108b86:	d102      	bne.n	8108b8e <SD_read+0x72>
              {
                res = RES_OK;
 8108b88:	2300      	movs	r3, #0
 8108b8a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8108b8c:	e008      	b.n	8108ba0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8108b8e:	f000 f9ab 	bl	8108ee8 <osKernelGetTickCount>
 8108b92:	4602      	mov	r2, r0
 8108b94:	697b      	ldr	r3, [r7, #20]
 8108b96:	1ad3      	subs	r3, r2, r3
 8108b98:	f247 522f 	movw	r2, #29999	@ 0x752f
 8108b9c:	4293      	cmp	r3, r2
 8108b9e:	d9ee      	bls.n	8108b7e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8108ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8108ba2:	4618      	mov	r0, r3
 8108ba4:	3720      	adds	r7, #32
 8108ba6:	46bd      	mov	sp, r7
 8108ba8:	bd80      	pop	{r7, pc}
 8108baa:	bf00      	nop
 8108bac:	10000520 	.word	0x10000520

08108bb0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8108bb0:	b580      	push	{r7, lr}
 8108bb2:	b088      	sub	sp, #32
 8108bb4:	af00      	add	r7, sp, #0
 8108bb6:	60b9      	str	r1, [r7, #8]
 8108bb8:	607a      	str	r2, [r7, #4]
 8108bba:	603b      	str	r3, [r7, #0]
 8108bbc:	4603      	mov	r3, r0
 8108bbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8108bc0:	2301      	movs	r3, #1
 8108bc2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8108bc4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8108bc8:	f7ff ff1d 	bl	8108a06 <SD_CheckStatusWithTimeout>
 8108bcc:	4603      	mov	r3, r0
 8108bce:	2b00      	cmp	r3, #0
 8108bd0:	da01      	bge.n	8108bd6 <SD_write+0x26>
  {
    return res;
 8108bd2:	7ffb      	ldrb	r3, [r7, #31]
 8108bd4:	e02d      	b.n	8108c32 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8108bd6:	683a      	ldr	r2, [r7, #0]
 8108bd8:	6879      	ldr	r1, [r7, #4]
 8108bda:	68b8      	ldr	r0, [r7, #8]
 8108bdc:	f7ff fece 	bl	810897c <BSP_SD_WriteBlocks_DMA>
 8108be0:	4603      	mov	r3, r0
 8108be2:	2b00      	cmp	r3, #0
 8108be4:	d124      	bne.n	8108c30 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8108be6:	4b15      	ldr	r3, [pc, #84]	@ (8108c3c <SD_write+0x8c>)
 8108be8:	6818      	ldr	r0, [r3, #0]
 8108bea:	f107 0112 	add.w	r1, r7, #18
 8108bee:	f247 5330 	movw	r3, #30000	@ 0x7530
 8108bf2:	2200      	movs	r2, #0
 8108bf4:	f000 faae 	bl	8109154 <osMessageQueueGet>
 8108bf8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8108bfa:	69bb      	ldr	r3, [r7, #24]
 8108bfc:	2b00      	cmp	r3, #0
 8108bfe:	d117      	bne.n	8108c30 <SD_write+0x80>
 8108c00:	8a7b      	ldrh	r3, [r7, #18]
 8108c02:	2b02      	cmp	r3, #2
 8108c04:	d114      	bne.n	8108c30 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8108c06:	f000 f96f 	bl	8108ee8 <osKernelGetTickCount>
 8108c0a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8108c0c:	e007      	b.n	8108c1e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8108c0e:	f7ff fecf 	bl	81089b0 <BSP_SD_GetCardState>
 8108c12:	4603      	mov	r3, r0
 8108c14:	2b00      	cmp	r3, #0
 8108c16:	d102      	bne.n	8108c1e <SD_write+0x6e>
          {
            res = RES_OK;
 8108c18:	2300      	movs	r3, #0
 8108c1a:	77fb      	strb	r3, [r7, #31]
            break;
 8108c1c:	e008      	b.n	8108c30 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8108c1e:	f000 f963 	bl	8108ee8 <osKernelGetTickCount>
 8108c22:	4602      	mov	r2, r0
 8108c24:	697b      	ldr	r3, [r7, #20]
 8108c26:	1ad3      	subs	r3, r2, r3
 8108c28:	f247 522f 	movw	r2, #29999	@ 0x752f
 8108c2c:	4293      	cmp	r3, r2
 8108c2e:	d9ee      	bls.n	8108c0e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8108c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8108c32:	4618      	mov	r0, r3
 8108c34:	3720      	adds	r7, #32
 8108c36:	46bd      	mov	sp, r7
 8108c38:	bd80      	pop	{r7, pc}
 8108c3a:	bf00      	nop
 8108c3c:	10000520 	.word	0x10000520

08108c40 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8108c40:	b580      	push	{r7, lr}
 8108c42:	b08c      	sub	sp, #48	@ 0x30
 8108c44:	af00      	add	r7, sp, #0
 8108c46:	4603      	mov	r3, r0
 8108c48:	603a      	str	r2, [r7, #0]
 8108c4a:	71fb      	strb	r3, [r7, #7]
 8108c4c:	460b      	mov	r3, r1
 8108c4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8108c50:	2301      	movs	r3, #1
 8108c52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8108c56:	4b25      	ldr	r3, [pc, #148]	@ (8108cec <SD_ioctl+0xac>)
 8108c58:	781b      	ldrb	r3, [r3, #0]
 8108c5a:	b2db      	uxtb	r3, r3
 8108c5c:	f003 0301 	and.w	r3, r3, #1
 8108c60:	2b00      	cmp	r3, #0
 8108c62:	d001      	beq.n	8108c68 <SD_ioctl+0x28>
 8108c64:	2303      	movs	r3, #3
 8108c66:	e03c      	b.n	8108ce2 <SD_ioctl+0xa2>

  switch (cmd)
 8108c68:	79bb      	ldrb	r3, [r7, #6]
 8108c6a:	2b03      	cmp	r3, #3
 8108c6c:	d834      	bhi.n	8108cd8 <SD_ioctl+0x98>
 8108c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8108c74 <SD_ioctl+0x34>)
 8108c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c74:	08108c85 	.word	0x08108c85
 8108c78:	08108c8d 	.word	0x08108c8d
 8108c7c:	08108ca5 	.word	0x08108ca5
 8108c80:	08108cbf 	.word	0x08108cbf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8108c84:	2300      	movs	r3, #0
 8108c86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8108c8a:	e028      	b.n	8108cde <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8108c8c:	f107 0308 	add.w	r3, r7, #8
 8108c90:	4618      	mov	r0, r3
 8108c92:	f7ff fe9d 	bl	81089d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8108c96:	6a3a      	ldr	r2, [r7, #32]
 8108c98:	683b      	ldr	r3, [r7, #0]
 8108c9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8108c9c:	2300      	movs	r3, #0
 8108c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8108ca2:	e01c      	b.n	8108cde <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8108ca4:	f107 0308 	add.w	r3, r7, #8
 8108ca8:	4618      	mov	r0, r3
 8108caa:	f7ff fe91 	bl	81089d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8108cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108cb0:	b29a      	uxth	r2, r3
 8108cb2:	683b      	ldr	r3, [r7, #0]
 8108cb4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8108cb6:	2300      	movs	r3, #0
 8108cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8108cbc:	e00f      	b.n	8108cde <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8108cbe:	f107 0308 	add.w	r3, r7, #8
 8108cc2:	4618      	mov	r0, r3
 8108cc4:	f7ff fe84 	bl	81089d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8108cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108cca:	0a5a      	lsrs	r2, r3, #9
 8108ccc:	683b      	ldr	r3, [r7, #0]
 8108cce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8108cd0:	2300      	movs	r3, #0
 8108cd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8108cd6:	e002      	b.n	8108cde <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8108cd8:	2304      	movs	r3, #4
 8108cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8108cde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8108ce2:	4618      	mov	r0, r3
 8108ce4:	3730      	adds	r7, #48	@ 0x30
 8108ce6:	46bd      	mov	sp, r7
 8108ce8:	bd80      	pop	{r7, pc}
 8108cea:	bf00      	nop
 8108cec:	1000000d 	.word	0x1000000d

08108cf0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8108cf0:	b480      	push	{r7}
 8108cf2:	b087      	sub	sp, #28
 8108cf4:	af00      	add	r7, sp, #0
 8108cf6:	60f8      	str	r0, [r7, #12]
 8108cf8:	60b9      	str	r1, [r7, #8]
 8108cfa:	4613      	mov	r3, r2
 8108cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8108cfe:	2301      	movs	r3, #1
 8108d00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8108d02:	2300      	movs	r3, #0
 8108d04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8108d06:	4b1f      	ldr	r3, [pc, #124]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d08:	7a5b      	ldrb	r3, [r3, #9]
 8108d0a:	b2db      	uxtb	r3, r3
 8108d0c:	2b00      	cmp	r3, #0
 8108d0e:	d131      	bne.n	8108d74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8108d10:	4b1c      	ldr	r3, [pc, #112]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d12:	7a5b      	ldrb	r3, [r3, #9]
 8108d14:	b2db      	uxtb	r3, r3
 8108d16:	461a      	mov	r2, r3
 8108d18:	4b1a      	ldr	r3, [pc, #104]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d1a:	2100      	movs	r1, #0
 8108d1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8108d1e:	4b19      	ldr	r3, [pc, #100]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d20:	7a5b      	ldrb	r3, [r3, #9]
 8108d22:	b2db      	uxtb	r3, r3
 8108d24:	4a17      	ldr	r2, [pc, #92]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d26:	009b      	lsls	r3, r3, #2
 8108d28:	4413      	add	r3, r2
 8108d2a:	68fa      	ldr	r2, [r7, #12]
 8108d2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8108d2e:	4b15      	ldr	r3, [pc, #84]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d30:	7a5b      	ldrb	r3, [r3, #9]
 8108d32:	b2db      	uxtb	r3, r3
 8108d34:	461a      	mov	r2, r3
 8108d36:	4b13      	ldr	r3, [pc, #76]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d38:	4413      	add	r3, r2
 8108d3a:	79fa      	ldrb	r2, [r7, #7]
 8108d3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8108d3e:	4b11      	ldr	r3, [pc, #68]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d40:	7a5b      	ldrb	r3, [r3, #9]
 8108d42:	b2db      	uxtb	r3, r3
 8108d44:	1c5a      	adds	r2, r3, #1
 8108d46:	b2d1      	uxtb	r1, r2
 8108d48:	4a0e      	ldr	r2, [pc, #56]	@ (8108d84 <FATFS_LinkDriverEx+0x94>)
 8108d4a:	7251      	strb	r1, [r2, #9]
 8108d4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8108d4e:	7dbb      	ldrb	r3, [r7, #22]
 8108d50:	3330      	adds	r3, #48	@ 0x30
 8108d52:	b2da      	uxtb	r2, r3
 8108d54:	68bb      	ldr	r3, [r7, #8]
 8108d56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8108d58:	68bb      	ldr	r3, [r7, #8]
 8108d5a:	3301      	adds	r3, #1
 8108d5c:	223a      	movs	r2, #58	@ 0x3a
 8108d5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8108d60:	68bb      	ldr	r3, [r7, #8]
 8108d62:	3302      	adds	r3, #2
 8108d64:	222f      	movs	r2, #47	@ 0x2f
 8108d66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8108d68:	68bb      	ldr	r3, [r7, #8]
 8108d6a:	3303      	adds	r3, #3
 8108d6c:	2200      	movs	r2, #0
 8108d6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8108d70:	2300      	movs	r3, #0
 8108d72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8108d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8108d76:	4618      	mov	r0, r3
 8108d78:	371c      	adds	r7, #28
 8108d7a:	46bd      	mov	sp, r7
 8108d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d80:	4770      	bx	lr
 8108d82:	bf00      	nop
 8108d84:	10000524 	.word	0x10000524

08108d88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8108d88:	b580      	push	{r7, lr}
 8108d8a:	b082      	sub	sp, #8
 8108d8c:	af00      	add	r7, sp, #0
 8108d8e:	6078      	str	r0, [r7, #4]
 8108d90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8108d92:	2200      	movs	r2, #0
 8108d94:	6839      	ldr	r1, [r7, #0]
 8108d96:	6878      	ldr	r0, [r7, #4]
 8108d98:	f7ff ffaa 	bl	8108cf0 <FATFS_LinkDriverEx>
 8108d9c:	4603      	mov	r3, r0
}
 8108d9e:	4618      	mov	r0, r3
 8108da0:	3708      	adds	r7, #8
 8108da2:	46bd      	mov	sp, r7
 8108da4:	bd80      	pop	{r7, pc}
	...

08108da8 <__NVIC_SetPriority>:
{
 8108da8:	b480      	push	{r7}
 8108daa:	b083      	sub	sp, #12
 8108dac:	af00      	add	r7, sp, #0
 8108dae:	4603      	mov	r3, r0
 8108db0:	6039      	str	r1, [r7, #0]
 8108db2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108db8:	2b00      	cmp	r3, #0
 8108dba:	db0a      	blt.n	8108dd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108dbc:	683b      	ldr	r3, [r7, #0]
 8108dbe:	b2da      	uxtb	r2, r3
 8108dc0:	490c      	ldr	r1, [pc, #48]	@ (8108df4 <__NVIC_SetPriority+0x4c>)
 8108dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108dc6:	0112      	lsls	r2, r2, #4
 8108dc8:	b2d2      	uxtb	r2, r2
 8108dca:	440b      	add	r3, r1
 8108dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8108dd0:	e00a      	b.n	8108de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108dd2:	683b      	ldr	r3, [r7, #0]
 8108dd4:	b2da      	uxtb	r2, r3
 8108dd6:	4908      	ldr	r1, [pc, #32]	@ (8108df8 <__NVIC_SetPriority+0x50>)
 8108dd8:	88fb      	ldrh	r3, [r7, #6]
 8108dda:	f003 030f 	and.w	r3, r3, #15
 8108dde:	3b04      	subs	r3, #4
 8108de0:	0112      	lsls	r2, r2, #4
 8108de2:	b2d2      	uxtb	r2, r2
 8108de4:	440b      	add	r3, r1
 8108de6:	761a      	strb	r2, [r3, #24]
}
 8108de8:	bf00      	nop
 8108dea:	370c      	adds	r7, #12
 8108dec:	46bd      	mov	sp, r7
 8108dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108df2:	4770      	bx	lr
 8108df4:	e000e100 	.word	0xe000e100
 8108df8:	e000ed00 	.word	0xe000ed00

08108dfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8108dfc:	b580      	push	{r7, lr}
 8108dfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8108e00:	2100      	movs	r1, #0
 8108e02:	f06f 0004 	mvn.w	r0, #4
 8108e06:	f7ff ffcf 	bl	8108da8 <__NVIC_SetPriority>
#endif
}
 8108e0a:	bf00      	nop
 8108e0c:	bd80      	pop	{r7, pc}
	...

08108e10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8108e10:	b480      	push	{r7}
 8108e12:	b083      	sub	sp, #12
 8108e14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108e16:	f3ef 8305 	mrs	r3, IPSR
 8108e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8108e1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8108e1e:	2b00      	cmp	r3, #0
 8108e20:	d003      	beq.n	8108e2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8108e22:	f06f 0305 	mvn.w	r3, #5
 8108e26:	607b      	str	r3, [r7, #4]
 8108e28:	e00c      	b.n	8108e44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8108e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8108e54 <osKernelInitialize+0x44>)
 8108e2c:	681b      	ldr	r3, [r3, #0]
 8108e2e:	2b00      	cmp	r3, #0
 8108e30:	d105      	bne.n	8108e3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8108e32:	4b08      	ldr	r3, [pc, #32]	@ (8108e54 <osKernelInitialize+0x44>)
 8108e34:	2201      	movs	r2, #1
 8108e36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8108e38:	2300      	movs	r3, #0
 8108e3a:	607b      	str	r3, [r7, #4]
 8108e3c:	e002      	b.n	8108e44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8108e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8108e42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8108e44:	687b      	ldr	r3, [r7, #4]
}
 8108e46:	4618      	mov	r0, r3
 8108e48:	370c      	adds	r7, #12
 8108e4a:	46bd      	mov	sp, r7
 8108e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e50:	4770      	bx	lr
 8108e52:	bf00      	nop
 8108e54:	10000530 	.word	0x10000530

08108e58 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8108e58:	b580      	push	{r7, lr}
 8108e5a:	b082      	sub	sp, #8
 8108e5c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8108e5e:	f002 faf1 	bl	810b444 <xTaskGetSchedulerState>
 8108e62:	4603      	mov	r3, r0
 8108e64:	2b00      	cmp	r3, #0
 8108e66:	d004      	beq.n	8108e72 <osKernelGetState+0x1a>
 8108e68:	2b02      	cmp	r3, #2
 8108e6a:	d105      	bne.n	8108e78 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8108e6c:	2302      	movs	r3, #2
 8108e6e:	607b      	str	r3, [r7, #4]
      break;
 8108e70:	e00c      	b.n	8108e8c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8108e72:	2303      	movs	r3, #3
 8108e74:	607b      	str	r3, [r7, #4]
      break;
 8108e76:	e009      	b.n	8108e8c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8108e78:	4b07      	ldr	r3, [pc, #28]	@ (8108e98 <osKernelGetState+0x40>)
 8108e7a:	681b      	ldr	r3, [r3, #0]
 8108e7c:	2b01      	cmp	r3, #1
 8108e7e:	d102      	bne.n	8108e86 <osKernelGetState+0x2e>
        state = osKernelReady;
 8108e80:	2301      	movs	r3, #1
 8108e82:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8108e84:	e001      	b.n	8108e8a <osKernelGetState+0x32>
        state = osKernelInactive;
 8108e86:	2300      	movs	r3, #0
 8108e88:	607b      	str	r3, [r7, #4]
      break;
 8108e8a:	bf00      	nop
  }

  return (state);
 8108e8c:	687b      	ldr	r3, [r7, #4]
}
 8108e8e:	4618      	mov	r0, r3
 8108e90:	3708      	adds	r7, #8
 8108e92:	46bd      	mov	sp, r7
 8108e94:	bd80      	pop	{r7, pc}
 8108e96:	bf00      	nop
 8108e98:	10000530 	.word	0x10000530

08108e9c <osKernelStart>:

osStatus_t osKernelStart (void) {
 8108e9c:	b580      	push	{r7, lr}
 8108e9e:	b082      	sub	sp, #8
 8108ea0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108ea2:	f3ef 8305 	mrs	r3, IPSR
 8108ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8108ea8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8108eaa:	2b00      	cmp	r3, #0
 8108eac:	d003      	beq.n	8108eb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8108eae:	f06f 0305 	mvn.w	r3, #5
 8108eb2:	607b      	str	r3, [r7, #4]
 8108eb4:	e010      	b.n	8108ed8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8108eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8108ee4 <osKernelStart+0x48>)
 8108eb8:	681b      	ldr	r3, [r3, #0]
 8108eba:	2b01      	cmp	r3, #1
 8108ebc:	d109      	bne.n	8108ed2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8108ebe:	f7ff ff9d 	bl	8108dfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8108ec2:	4b08      	ldr	r3, [pc, #32]	@ (8108ee4 <osKernelStart+0x48>)
 8108ec4:	2202      	movs	r2, #2
 8108ec6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8108ec8:	f001 fe5c 	bl	810ab84 <vTaskStartScheduler>
      stat = osOK;
 8108ecc:	2300      	movs	r3, #0
 8108ece:	607b      	str	r3, [r7, #4]
 8108ed0:	e002      	b.n	8108ed8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8108ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8108ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8108ed8:	687b      	ldr	r3, [r7, #4]
}
 8108eda:	4618      	mov	r0, r3
 8108edc:	3708      	adds	r7, #8
 8108ede:	46bd      	mov	sp, r7
 8108ee0:	bd80      	pop	{r7, pc}
 8108ee2:	bf00      	nop
 8108ee4:	10000530 	.word	0x10000530

08108ee8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8108ee8:	b580      	push	{r7, lr}
 8108eea:	b082      	sub	sp, #8
 8108eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108eee:	f3ef 8305 	mrs	r3, IPSR
 8108ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8108ef4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8108ef6:	2b00      	cmp	r3, #0
 8108ef8:	d003      	beq.n	8108f02 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8108efa:	f001 ff67 	bl	810adcc <xTaskGetTickCountFromISR>
 8108efe:	6078      	str	r0, [r7, #4]
 8108f00:	e002      	b.n	8108f08 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8108f02:	f001 ff53 	bl	810adac <xTaskGetTickCount>
 8108f06:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8108f08:	687b      	ldr	r3, [r7, #4]
}
 8108f0a:	4618      	mov	r0, r3
 8108f0c:	3708      	adds	r7, #8
 8108f0e:	46bd      	mov	sp, r7
 8108f10:	bd80      	pop	{r7, pc}

08108f12 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8108f12:	b580      	push	{r7, lr}
 8108f14:	b08e      	sub	sp, #56	@ 0x38
 8108f16:	af04      	add	r7, sp, #16
 8108f18:	60f8      	str	r0, [r7, #12]
 8108f1a:	60b9      	str	r1, [r7, #8]
 8108f1c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8108f1e:	2300      	movs	r3, #0
 8108f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108f22:	f3ef 8305 	mrs	r3, IPSR
 8108f26:	617b      	str	r3, [r7, #20]
  return(result);
 8108f28:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8108f2a:	2b00      	cmp	r3, #0
 8108f2c:	d17e      	bne.n	810902c <osThreadNew+0x11a>
 8108f2e:	68fb      	ldr	r3, [r7, #12]
 8108f30:	2b00      	cmp	r3, #0
 8108f32:	d07b      	beq.n	810902c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8108f34:	2380      	movs	r3, #128	@ 0x80
 8108f36:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8108f38:	2318      	movs	r3, #24
 8108f3a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8108f3c:	2300      	movs	r3, #0
 8108f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8108f40:	f04f 33ff 	mov.w	r3, #4294967295
 8108f44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8108f46:	687b      	ldr	r3, [r7, #4]
 8108f48:	2b00      	cmp	r3, #0
 8108f4a:	d045      	beq.n	8108fd8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	681b      	ldr	r3, [r3, #0]
 8108f50:	2b00      	cmp	r3, #0
 8108f52:	d002      	beq.n	8108f5a <osThreadNew+0x48>
        name = attr->name;
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	681b      	ldr	r3, [r3, #0]
 8108f58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8108f5a:	687b      	ldr	r3, [r7, #4]
 8108f5c:	699b      	ldr	r3, [r3, #24]
 8108f5e:	2b00      	cmp	r3, #0
 8108f60:	d002      	beq.n	8108f68 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8108f62:	687b      	ldr	r3, [r7, #4]
 8108f64:	699b      	ldr	r3, [r3, #24]
 8108f66:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8108f68:	69fb      	ldr	r3, [r7, #28]
 8108f6a:	2b00      	cmp	r3, #0
 8108f6c:	d008      	beq.n	8108f80 <osThreadNew+0x6e>
 8108f6e:	69fb      	ldr	r3, [r7, #28]
 8108f70:	2b38      	cmp	r3, #56	@ 0x38
 8108f72:	d805      	bhi.n	8108f80 <osThreadNew+0x6e>
 8108f74:	687b      	ldr	r3, [r7, #4]
 8108f76:	685b      	ldr	r3, [r3, #4]
 8108f78:	f003 0301 	and.w	r3, r3, #1
 8108f7c:	2b00      	cmp	r3, #0
 8108f7e:	d001      	beq.n	8108f84 <osThreadNew+0x72>
        return (NULL);
 8108f80:	2300      	movs	r3, #0
 8108f82:	e054      	b.n	810902e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8108f84:	687b      	ldr	r3, [r7, #4]
 8108f86:	695b      	ldr	r3, [r3, #20]
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	d003      	beq.n	8108f94 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8108f8c:	687b      	ldr	r3, [r7, #4]
 8108f8e:	695b      	ldr	r3, [r3, #20]
 8108f90:	089b      	lsrs	r3, r3, #2
 8108f92:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	689b      	ldr	r3, [r3, #8]
 8108f98:	2b00      	cmp	r3, #0
 8108f9a:	d00e      	beq.n	8108fba <osThreadNew+0xa8>
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	68db      	ldr	r3, [r3, #12]
 8108fa0:	2b5b      	cmp	r3, #91	@ 0x5b
 8108fa2:	d90a      	bls.n	8108fba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8108fa4:	687b      	ldr	r3, [r7, #4]
 8108fa6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8108fa8:	2b00      	cmp	r3, #0
 8108faa:	d006      	beq.n	8108fba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8108fac:	687b      	ldr	r3, [r7, #4]
 8108fae:	695b      	ldr	r3, [r3, #20]
 8108fb0:	2b00      	cmp	r3, #0
 8108fb2:	d002      	beq.n	8108fba <osThreadNew+0xa8>
        mem = 1;
 8108fb4:	2301      	movs	r3, #1
 8108fb6:	61bb      	str	r3, [r7, #24]
 8108fb8:	e010      	b.n	8108fdc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8108fba:	687b      	ldr	r3, [r7, #4]
 8108fbc:	689b      	ldr	r3, [r3, #8]
 8108fbe:	2b00      	cmp	r3, #0
 8108fc0:	d10c      	bne.n	8108fdc <osThreadNew+0xca>
 8108fc2:	687b      	ldr	r3, [r7, #4]
 8108fc4:	68db      	ldr	r3, [r3, #12]
 8108fc6:	2b00      	cmp	r3, #0
 8108fc8:	d108      	bne.n	8108fdc <osThreadNew+0xca>
 8108fca:	687b      	ldr	r3, [r7, #4]
 8108fcc:	691b      	ldr	r3, [r3, #16]
 8108fce:	2b00      	cmp	r3, #0
 8108fd0:	d104      	bne.n	8108fdc <osThreadNew+0xca>
          mem = 0;
 8108fd2:	2300      	movs	r3, #0
 8108fd4:	61bb      	str	r3, [r7, #24]
 8108fd6:	e001      	b.n	8108fdc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8108fd8:	2300      	movs	r3, #0
 8108fda:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8108fdc:	69bb      	ldr	r3, [r7, #24]
 8108fde:	2b01      	cmp	r3, #1
 8108fe0:	d110      	bne.n	8109004 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8108fe2:	687b      	ldr	r3, [r7, #4]
 8108fe4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8108fe6:	687a      	ldr	r2, [r7, #4]
 8108fe8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8108fea:	9202      	str	r2, [sp, #8]
 8108fec:	9301      	str	r3, [sp, #4]
 8108fee:	69fb      	ldr	r3, [r7, #28]
 8108ff0:	9300      	str	r3, [sp, #0]
 8108ff2:	68bb      	ldr	r3, [r7, #8]
 8108ff4:	6a3a      	ldr	r2, [r7, #32]
 8108ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8108ff8:	68f8      	ldr	r0, [r7, #12]
 8108ffa:	f001 fbe7 	bl	810a7cc <xTaskCreateStatic>
 8108ffe:	4603      	mov	r3, r0
 8109000:	613b      	str	r3, [r7, #16]
 8109002:	e013      	b.n	810902c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8109004:	69bb      	ldr	r3, [r7, #24]
 8109006:	2b00      	cmp	r3, #0
 8109008:	d110      	bne.n	810902c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810900a:	6a3b      	ldr	r3, [r7, #32]
 810900c:	b29a      	uxth	r2, r3
 810900e:	f107 0310 	add.w	r3, r7, #16
 8109012:	9301      	str	r3, [sp, #4]
 8109014:	69fb      	ldr	r3, [r7, #28]
 8109016:	9300      	str	r3, [sp, #0]
 8109018:	68bb      	ldr	r3, [r7, #8]
 810901a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810901c:	68f8      	ldr	r0, [r7, #12]
 810901e:	f001 fc35 	bl	810a88c <xTaskCreate>
 8109022:	4603      	mov	r3, r0
 8109024:	2b01      	cmp	r3, #1
 8109026:	d001      	beq.n	810902c <osThreadNew+0x11a>
            hTask = NULL;
 8109028:	2300      	movs	r3, #0
 810902a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810902c:	693b      	ldr	r3, [r7, #16]
}
 810902e:	4618      	mov	r0, r3
 8109030:	3728      	adds	r7, #40	@ 0x28
 8109032:	46bd      	mov	sp, r7
 8109034:	bd80      	pop	{r7, pc}

08109036 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8109036:	b580      	push	{r7, lr}
 8109038:	b084      	sub	sp, #16
 810903a:	af00      	add	r7, sp, #0
 810903c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810903e:	f3ef 8305 	mrs	r3, IPSR
 8109042:	60bb      	str	r3, [r7, #8]
  return(result);
 8109044:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8109046:	2b00      	cmp	r3, #0
 8109048:	d003      	beq.n	8109052 <osDelay+0x1c>
    stat = osErrorISR;
 810904a:	f06f 0305 	mvn.w	r3, #5
 810904e:	60fb      	str	r3, [r7, #12]
 8109050:	e007      	b.n	8109062 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8109052:	2300      	movs	r3, #0
 8109054:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	2b00      	cmp	r3, #0
 810905a:	d002      	beq.n	8109062 <osDelay+0x2c>
      vTaskDelay(ticks);
 810905c:	6878      	ldr	r0, [r7, #4]
 810905e:	f001 fd5b 	bl	810ab18 <vTaskDelay>
    }
  }

  return (stat);
 8109062:	68fb      	ldr	r3, [r7, #12]
}
 8109064:	4618      	mov	r0, r3
 8109066:	3710      	adds	r7, #16
 8109068:	46bd      	mov	sp, r7
 810906a:	bd80      	pop	{r7, pc}

0810906c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 810906c:	b580      	push	{r7, lr}
 810906e:	b08a      	sub	sp, #40	@ 0x28
 8109070:	af02      	add	r7, sp, #8
 8109072:	60f8      	str	r0, [r7, #12]
 8109074:	60b9      	str	r1, [r7, #8]
 8109076:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8109078:	2300      	movs	r3, #0
 810907a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810907c:	f3ef 8305 	mrs	r3, IPSR
 8109080:	613b      	str	r3, [r7, #16]
  return(result);
 8109082:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8109084:	2b00      	cmp	r3, #0
 8109086:	d15f      	bne.n	8109148 <osMessageQueueNew+0xdc>
 8109088:	68fb      	ldr	r3, [r7, #12]
 810908a:	2b00      	cmp	r3, #0
 810908c:	d05c      	beq.n	8109148 <osMessageQueueNew+0xdc>
 810908e:	68bb      	ldr	r3, [r7, #8]
 8109090:	2b00      	cmp	r3, #0
 8109092:	d059      	beq.n	8109148 <osMessageQueueNew+0xdc>
    mem = -1;
 8109094:	f04f 33ff 	mov.w	r3, #4294967295
 8109098:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810909a:	687b      	ldr	r3, [r7, #4]
 810909c:	2b00      	cmp	r3, #0
 810909e:	d029      	beq.n	81090f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 81090a0:	687b      	ldr	r3, [r7, #4]
 81090a2:	689b      	ldr	r3, [r3, #8]
 81090a4:	2b00      	cmp	r3, #0
 81090a6:	d012      	beq.n	81090ce <osMessageQueueNew+0x62>
 81090a8:	687b      	ldr	r3, [r7, #4]
 81090aa:	68db      	ldr	r3, [r3, #12]
 81090ac:	2b4f      	cmp	r3, #79	@ 0x4f
 81090ae:	d90e      	bls.n	81090ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 81090b0:	687b      	ldr	r3, [r7, #4]
 81090b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 81090b4:	2b00      	cmp	r3, #0
 81090b6:	d00a      	beq.n	81090ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	695a      	ldr	r2, [r3, #20]
 81090bc:	68fb      	ldr	r3, [r7, #12]
 81090be:	68b9      	ldr	r1, [r7, #8]
 81090c0:	fb01 f303 	mul.w	r3, r1, r3
 81090c4:	429a      	cmp	r2, r3
 81090c6:	d302      	bcc.n	81090ce <osMessageQueueNew+0x62>
        mem = 1;
 81090c8:	2301      	movs	r3, #1
 81090ca:	61bb      	str	r3, [r7, #24]
 81090cc:	e014      	b.n	81090f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	689b      	ldr	r3, [r3, #8]
 81090d2:	2b00      	cmp	r3, #0
 81090d4:	d110      	bne.n	81090f8 <osMessageQueueNew+0x8c>
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	68db      	ldr	r3, [r3, #12]
 81090da:	2b00      	cmp	r3, #0
 81090dc:	d10c      	bne.n	81090f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 81090de:	687b      	ldr	r3, [r7, #4]
 81090e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 81090e2:	2b00      	cmp	r3, #0
 81090e4:	d108      	bne.n	81090f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	695b      	ldr	r3, [r3, #20]
 81090ea:	2b00      	cmp	r3, #0
 81090ec:	d104      	bne.n	81090f8 <osMessageQueueNew+0x8c>
          mem = 0;
 81090ee:	2300      	movs	r3, #0
 81090f0:	61bb      	str	r3, [r7, #24]
 81090f2:	e001      	b.n	81090f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 81090f4:	2300      	movs	r3, #0
 81090f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81090f8:	69bb      	ldr	r3, [r7, #24]
 81090fa:	2b01      	cmp	r3, #1
 81090fc:	d10b      	bne.n	8109116 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 81090fe:	687b      	ldr	r3, [r7, #4]
 8109100:	691a      	ldr	r2, [r3, #16]
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	689b      	ldr	r3, [r3, #8]
 8109106:	2100      	movs	r1, #0
 8109108:	9100      	str	r1, [sp, #0]
 810910a:	68b9      	ldr	r1, [r7, #8]
 810910c:	68f8      	ldr	r0, [r7, #12]
 810910e:	f000 fe0f 	bl	8109d30 <xQueueGenericCreateStatic>
 8109112:	61f8      	str	r0, [r7, #28]
 8109114:	e008      	b.n	8109128 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8109116:	69bb      	ldr	r3, [r7, #24]
 8109118:	2b00      	cmp	r3, #0
 810911a:	d105      	bne.n	8109128 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 810911c:	2200      	movs	r2, #0
 810911e:	68b9      	ldr	r1, [r7, #8]
 8109120:	68f8      	ldr	r0, [r7, #12]
 8109122:	f000 fe82 	bl	8109e2a <xQueueGenericCreate>
 8109126:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8109128:	69fb      	ldr	r3, [r7, #28]
 810912a:	2b00      	cmp	r3, #0
 810912c:	d00c      	beq.n	8109148 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810912e:	687b      	ldr	r3, [r7, #4]
 8109130:	2b00      	cmp	r3, #0
 8109132:	d003      	beq.n	810913c <osMessageQueueNew+0xd0>
        name = attr->name;
 8109134:	687b      	ldr	r3, [r7, #4]
 8109136:	681b      	ldr	r3, [r3, #0]
 8109138:	617b      	str	r3, [r7, #20]
 810913a:	e001      	b.n	8109140 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 810913c:	2300      	movs	r3, #0
 810913e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8109140:	6979      	ldr	r1, [r7, #20]
 8109142:	69f8      	ldr	r0, [r7, #28]
 8109144:	f001 fae4 	bl	810a710 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8109148:	69fb      	ldr	r3, [r7, #28]
}
 810914a:	4618      	mov	r0, r3
 810914c:	3720      	adds	r7, #32
 810914e:	46bd      	mov	sp, r7
 8109150:	bd80      	pop	{r7, pc}
	...

08109154 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8109154:	b580      	push	{r7, lr}
 8109156:	b088      	sub	sp, #32
 8109158:	af00      	add	r7, sp, #0
 810915a:	60f8      	str	r0, [r7, #12]
 810915c:	60b9      	str	r1, [r7, #8]
 810915e:	607a      	str	r2, [r7, #4]
 8109160:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8109162:	68fb      	ldr	r3, [r7, #12]
 8109164:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8109166:	2300      	movs	r3, #0
 8109168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810916a:	f3ef 8305 	mrs	r3, IPSR
 810916e:	617b      	str	r3, [r7, #20]
  return(result);
 8109170:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8109172:	2b00      	cmp	r3, #0
 8109174:	d028      	beq.n	81091c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8109176:	69bb      	ldr	r3, [r7, #24]
 8109178:	2b00      	cmp	r3, #0
 810917a:	d005      	beq.n	8109188 <osMessageQueueGet+0x34>
 810917c:	68bb      	ldr	r3, [r7, #8]
 810917e:	2b00      	cmp	r3, #0
 8109180:	d002      	beq.n	8109188 <osMessageQueueGet+0x34>
 8109182:	683b      	ldr	r3, [r7, #0]
 8109184:	2b00      	cmp	r3, #0
 8109186:	d003      	beq.n	8109190 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8109188:	f06f 0303 	mvn.w	r3, #3
 810918c:	61fb      	str	r3, [r7, #28]
 810918e:	e037      	b.n	8109200 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8109190:	2300      	movs	r3, #0
 8109192:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8109194:	f107 0310 	add.w	r3, r7, #16
 8109198:	461a      	mov	r2, r3
 810919a:	68b9      	ldr	r1, [r7, #8]
 810919c:	69b8      	ldr	r0, [r7, #24]
 810919e:	f001 f925 	bl	810a3ec <xQueueReceiveFromISR>
 81091a2:	4603      	mov	r3, r0
 81091a4:	2b01      	cmp	r3, #1
 81091a6:	d003      	beq.n	81091b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 81091a8:	f06f 0302 	mvn.w	r3, #2
 81091ac:	61fb      	str	r3, [r7, #28]
 81091ae:	e027      	b.n	8109200 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 81091b0:	693b      	ldr	r3, [r7, #16]
 81091b2:	2b00      	cmp	r3, #0
 81091b4:	d024      	beq.n	8109200 <osMessageQueueGet+0xac>
 81091b6:	4b15      	ldr	r3, [pc, #84]	@ (810920c <osMessageQueueGet+0xb8>)
 81091b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81091bc:	601a      	str	r2, [r3, #0]
 81091be:	f3bf 8f4f 	dsb	sy
 81091c2:	f3bf 8f6f 	isb	sy
 81091c6:	e01b      	b.n	8109200 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 81091c8:	69bb      	ldr	r3, [r7, #24]
 81091ca:	2b00      	cmp	r3, #0
 81091cc:	d002      	beq.n	81091d4 <osMessageQueueGet+0x80>
 81091ce:	68bb      	ldr	r3, [r7, #8]
 81091d0:	2b00      	cmp	r3, #0
 81091d2:	d103      	bne.n	81091dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 81091d4:	f06f 0303 	mvn.w	r3, #3
 81091d8:	61fb      	str	r3, [r7, #28]
 81091da:	e011      	b.n	8109200 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 81091dc:	683a      	ldr	r2, [r7, #0]
 81091de:	68b9      	ldr	r1, [r7, #8]
 81091e0:	69b8      	ldr	r0, [r7, #24]
 81091e2:	f001 f821 	bl	810a228 <xQueueReceive>
 81091e6:	4603      	mov	r3, r0
 81091e8:	2b01      	cmp	r3, #1
 81091ea:	d009      	beq.n	8109200 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 81091ec:	683b      	ldr	r3, [r7, #0]
 81091ee:	2b00      	cmp	r3, #0
 81091f0:	d003      	beq.n	81091fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 81091f2:	f06f 0301 	mvn.w	r3, #1
 81091f6:	61fb      	str	r3, [r7, #28]
 81091f8:	e002      	b.n	8109200 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 81091fa:	f06f 0302 	mvn.w	r3, #2
 81091fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8109200:	69fb      	ldr	r3, [r7, #28]
}
 8109202:	4618      	mov	r0, r3
 8109204:	3720      	adds	r7, #32
 8109206:	46bd      	mov	sp, r7
 8109208:	bd80      	pop	{r7, pc}
 810920a:	bf00      	nop
 810920c:	e000ed04 	.word	0xe000ed04

08109210 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8109210:	b480      	push	{r7}
 8109212:	b085      	sub	sp, #20
 8109214:	af00      	add	r7, sp, #0
 8109216:	60f8      	str	r0, [r7, #12]
 8109218:	60b9      	str	r1, [r7, #8]
 810921a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810921c:	68fb      	ldr	r3, [r7, #12]
 810921e:	4a07      	ldr	r2, [pc, #28]	@ (810923c <vApplicationGetIdleTaskMemory+0x2c>)
 8109220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8109222:	68bb      	ldr	r3, [r7, #8]
 8109224:	4a06      	ldr	r2, [pc, #24]	@ (8109240 <vApplicationGetIdleTaskMemory+0x30>)
 8109226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8109228:	687b      	ldr	r3, [r7, #4]
 810922a:	2280      	movs	r2, #128	@ 0x80
 810922c:	601a      	str	r2, [r3, #0]
}
 810922e:	bf00      	nop
 8109230:	3714      	adds	r7, #20
 8109232:	46bd      	mov	sp, r7
 8109234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109238:	4770      	bx	lr
 810923a:	bf00      	nop
 810923c:	10000534 	.word	0x10000534
 8109240:	10000590 	.word	0x10000590

08109244 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8109244:	b480      	push	{r7}
 8109246:	b085      	sub	sp, #20
 8109248:	af00      	add	r7, sp, #0
 810924a:	60f8      	str	r0, [r7, #12]
 810924c:	60b9      	str	r1, [r7, #8]
 810924e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8109250:	68fb      	ldr	r3, [r7, #12]
 8109252:	4a07      	ldr	r2, [pc, #28]	@ (8109270 <vApplicationGetTimerTaskMemory+0x2c>)
 8109254:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8109256:	68bb      	ldr	r3, [r7, #8]
 8109258:	4a06      	ldr	r2, [pc, #24]	@ (8109274 <vApplicationGetTimerTaskMemory+0x30>)
 810925a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810925c:	687b      	ldr	r3, [r7, #4]
 810925e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8109262:	601a      	str	r2, [r3, #0]
}
 8109264:	bf00      	nop
 8109266:	3714      	adds	r7, #20
 8109268:	46bd      	mov	sp, r7
 810926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810926e:	4770      	bx	lr
 8109270:	10000790 	.word	0x10000790
 8109274:	100007ec 	.word	0x100007ec

08109278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8109278:	b580      	push	{r7, lr}
 810927a:	b08a      	sub	sp, #40	@ 0x28
 810927c:	af00      	add	r7, sp, #0
 810927e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8109280:	2300      	movs	r3, #0
 8109282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8109284:	f001 fce6 	bl	810ac54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8109288:	4b5c      	ldr	r3, [pc, #368]	@ (81093fc <pvPortMalloc+0x184>)
 810928a:	681b      	ldr	r3, [r3, #0]
 810928c:	2b00      	cmp	r3, #0
 810928e:	d101      	bne.n	8109294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8109290:	f000 f924 	bl	81094dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8109294:	4b5a      	ldr	r3, [pc, #360]	@ (8109400 <pvPortMalloc+0x188>)
 8109296:	681a      	ldr	r2, [r3, #0]
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	4013      	ands	r3, r2
 810929c:	2b00      	cmp	r3, #0
 810929e:	f040 8095 	bne.w	81093cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	2b00      	cmp	r3, #0
 81092a6:	d01e      	beq.n	81092e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 81092a8:	2208      	movs	r2, #8
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	4413      	add	r3, r2
 81092ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81092b0:	687b      	ldr	r3, [r7, #4]
 81092b2:	f003 0307 	and.w	r3, r3, #7
 81092b6:	2b00      	cmp	r3, #0
 81092b8:	d015      	beq.n	81092e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81092ba:	687b      	ldr	r3, [r7, #4]
 81092bc:	f023 0307 	bic.w	r3, r3, #7
 81092c0:	3308      	adds	r3, #8
 81092c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	f003 0307 	and.w	r3, r3, #7
 81092ca:	2b00      	cmp	r3, #0
 81092cc:	d00b      	beq.n	81092e6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81092d2:	f383 8811 	msr	BASEPRI, r3
 81092d6:	f3bf 8f6f 	isb	sy
 81092da:	f3bf 8f4f 	dsb	sy
 81092de:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81092e0:	bf00      	nop
 81092e2:	bf00      	nop
 81092e4:	e7fd      	b.n	81092e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	2b00      	cmp	r3, #0
 81092ea:	d06f      	beq.n	81093cc <pvPortMalloc+0x154>
 81092ec:	4b45      	ldr	r3, [pc, #276]	@ (8109404 <pvPortMalloc+0x18c>)
 81092ee:	681b      	ldr	r3, [r3, #0]
 81092f0:	687a      	ldr	r2, [r7, #4]
 81092f2:	429a      	cmp	r2, r3
 81092f4:	d86a      	bhi.n	81093cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81092f6:	4b44      	ldr	r3, [pc, #272]	@ (8109408 <pvPortMalloc+0x190>)
 81092f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81092fa:	4b43      	ldr	r3, [pc, #268]	@ (8109408 <pvPortMalloc+0x190>)
 81092fc:	681b      	ldr	r3, [r3, #0]
 81092fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109300:	e004      	b.n	810930c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8109302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109304:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8109306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109308:	681b      	ldr	r3, [r3, #0]
 810930a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810930e:	685b      	ldr	r3, [r3, #4]
 8109310:	687a      	ldr	r2, [r7, #4]
 8109312:	429a      	cmp	r2, r3
 8109314:	d903      	bls.n	810931e <pvPortMalloc+0xa6>
 8109316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109318:	681b      	ldr	r3, [r3, #0]
 810931a:	2b00      	cmp	r3, #0
 810931c:	d1f1      	bne.n	8109302 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810931e:	4b37      	ldr	r3, [pc, #220]	@ (81093fc <pvPortMalloc+0x184>)
 8109320:	681b      	ldr	r3, [r3, #0]
 8109322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8109324:	429a      	cmp	r2, r3
 8109326:	d051      	beq.n	81093cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8109328:	6a3b      	ldr	r3, [r7, #32]
 810932a:	681b      	ldr	r3, [r3, #0]
 810932c:	2208      	movs	r2, #8
 810932e:	4413      	add	r3, r2
 8109330:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8109332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109334:	681a      	ldr	r2, [r3, #0]
 8109336:	6a3b      	ldr	r3, [r7, #32]
 8109338:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810933c:	685a      	ldr	r2, [r3, #4]
 810933e:	687b      	ldr	r3, [r7, #4]
 8109340:	1ad2      	subs	r2, r2, r3
 8109342:	2308      	movs	r3, #8
 8109344:	005b      	lsls	r3, r3, #1
 8109346:	429a      	cmp	r2, r3
 8109348:	d920      	bls.n	810938c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810934a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810934c:	687b      	ldr	r3, [r7, #4]
 810934e:	4413      	add	r3, r2
 8109350:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8109352:	69bb      	ldr	r3, [r7, #24]
 8109354:	f003 0307 	and.w	r3, r3, #7
 8109358:	2b00      	cmp	r3, #0
 810935a:	d00b      	beq.n	8109374 <pvPortMalloc+0xfc>
	__asm volatile
 810935c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109360:	f383 8811 	msr	BASEPRI, r3
 8109364:	f3bf 8f6f 	isb	sy
 8109368:	f3bf 8f4f 	dsb	sy
 810936c:	613b      	str	r3, [r7, #16]
}
 810936e:	bf00      	nop
 8109370:	bf00      	nop
 8109372:	e7fd      	b.n	8109370 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8109374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109376:	685a      	ldr	r2, [r3, #4]
 8109378:	687b      	ldr	r3, [r7, #4]
 810937a:	1ad2      	subs	r2, r2, r3
 810937c:	69bb      	ldr	r3, [r7, #24]
 810937e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8109380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109382:	687a      	ldr	r2, [r7, #4]
 8109384:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8109386:	69b8      	ldr	r0, [r7, #24]
 8109388:	f000 f90a 	bl	81095a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810938c:	4b1d      	ldr	r3, [pc, #116]	@ (8109404 <pvPortMalloc+0x18c>)
 810938e:	681a      	ldr	r2, [r3, #0]
 8109390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109392:	685b      	ldr	r3, [r3, #4]
 8109394:	1ad3      	subs	r3, r2, r3
 8109396:	4a1b      	ldr	r2, [pc, #108]	@ (8109404 <pvPortMalloc+0x18c>)
 8109398:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810939a:	4b1a      	ldr	r3, [pc, #104]	@ (8109404 <pvPortMalloc+0x18c>)
 810939c:	681a      	ldr	r2, [r3, #0]
 810939e:	4b1b      	ldr	r3, [pc, #108]	@ (810940c <pvPortMalloc+0x194>)
 81093a0:	681b      	ldr	r3, [r3, #0]
 81093a2:	429a      	cmp	r2, r3
 81093a4:	d203      	bcs.n	81093ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81093a6:	4b17      	ldr	r3, [pc, #92]	@ (8109404 <pvPortMalloc+0x18c>)
 81093a8:	681b      	ldr	r3, [r3, #0]
 81093aa:	4a18      	ldr	r2, [pc, #96]	@ (810940c <pvPortMalloc+0x194>)
 81093ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81093ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81093b0:	685a      	ldr	r2, [r3, #4]
 81093b2:	4b13      	ldr	r3, [pc, #76]	@ (8109400 <pvPortMalloc+0x188>)
 81093b4:	681b      	ldr	r3, [r3, #0]
 81093b6:	431a      	orrs	r2, r3
 81093b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81093ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81093be:	2200      	movs	r2, #0
 81093c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 81093c2:	4b13      	ldr	r3, [pc, #76]	@ (8109410 <pvPortMalloc+0x198>)
 81093c4:	681b      	ldr	r3, [r3, #0]
 81093c6:	3301      	adds	r3, #1
 81093c8:	4a11      	ldr	r2, [pc, #68]	@ (8109410 <pvPortMalloc+0x198>)
 81093ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81093cc:	f001 fc50 	bl	810ac70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81093d0:	69fb      	ldr	r3, [r7, #28]
 81093d2:	f003 0307 	and.w	r3, r3, #7
 81093d6:	2b00      	cmp	r3, #0
 81093d8:	d00b      	beq.n	81093f2 <pvPortMalloc+0x17a>
	__asm volatile
 81093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81093de:	f383 8811 	msr	BASEPRI, r3
 81093e2:	f3bf 8f6f 	isb	sy
 81093e6:	f3bf 8f4f 	dsb	sy
 81093ea:	60fb      	str	r3, [r7, #12]
}
 81093ec:	bf00      	nop
 81093ee:	bf00      	nop
 81093f0:	e7fd      	b.n	81093ee <pvPortMalloc+0x176>
	return pvReturn;
 81093f2:	69fb      	ldr	r3, [r7, #28]
}
 81093f4:	4618      	mov	r0, r3
 81093f6:	3728      	adds	r7, #40	@ 0x28
 81093f8:	46bd      	mov	sp, r7
 81093fa:	bd80      	pop	{r7, pc}
 81093fc:	100047f4 	.word	0x100047f4
 8109400:	10004808 	.word	0x10004808
 8109404:	100047f8 	.word	0x100047f8
 8109408:	100047ec 	.word	0x100047ec
 810940c:	100047fc 	.word	0x100047fc
 8109410:	10004800 	.word	0x10004800

08109414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8109414:	b580      	push	{r7, lr}
 8109416:	b086      	sub	sp, #24
 8109418:	af00      	add	r7, sp, #0
 810941a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810941c:	687b      	ldr	r3, [r7, #4]
 810941e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8109420:	687b      	ldr	r3, [r7, #4]
 8109422:	2b00      	cmp	r3, #0
 8109424:	d04f      	beq.n	81094c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8109426:	2308      	movs	r3, #8
 8109428:	425b      	negs	r3, r3
 810942a:	697a      	ldr	r2, [r7, #20]
 810942c:	4413      	add	r3, r2
 810942e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8109430:	697b      	ldr	r3, [r7, #20]
 8109432:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8109434:	693b      	ldr	r3, [r7, #16]
 8109436:	685a      	ldr	r2, [r3, #4]
 8109438:	4b25      	ldr	r3, [pc, #148]	@ (81094d0 <vPortFree+0xbc>)
 810943a:	681b      	ldr	r3, [r3, #0]
 810943c:	4013      	ands	r3, r2
 810943e:	2b00      	cmp	r3, #0
 8109440:	d10b      	bne.n	810945a <vPortFree+0x46>
	__asm volatile
 8109442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109446:	f383 8811 	msr	BASEPRI, r3
 810944a:	f3bf 8f6f 	isb	sy
 810944e:	f3bf 8f4f 	dsb	sy
 8109452:	60fb      	str	r3, [r7, #12]
}
 8109454:	bf00      	nop
 8109456:	bf00      	nop
 8109458:	e7fd      	b.n	8109456 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810945a:	693b      	ldr	r3, [r7, #16]
 810945c:	681b      	ldr	r3, [r3, #0]
 810945e:	2b00      	cmp	r3, #0
 8109460:	d00b      	beq.n	810947a <vPortFree+0x66>
	__asm volatile
 8109462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109466:	f383 8811 	msr	BASEPRI, r3
 810946a:	f3bf 8f6f 	isb	sy
 810946e:	f3bf 8f4f 	dsb	sy
 8109472:	60bb      	str	r3, [r7, #8]
}
 8109474:	bf00      	nop
 8109476:	bf00      	nop
 8109478:	e7fd      	b.n	8109476 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810947a:	693b      	ldr	r3, [r7, #16]
 810947c:	685a      	ldr	r2, [r3, #4]
 810947e:	4b14      	ldr	r3, [pc, #80]	@ (81094d0 <vPortFree+0xbc>)
 8109480:	681b      	ldr	r3, [r3, #0]
 8109482:	4013      	ands	r3, r2
 8109484:	2b00      	cmp	r3, #0
 8109486:	d01e      	beq.n	81094c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8109488:	693b      	ldr	r3, [r7, #16]
 810948a:	681b      	ldr	r3, [r3, #0]
 810948c:	2b00      	cmp	r3, #0
 810948e:	d11a      	bne.n	81094c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8109490:	693b      	ldr	r3, [r7, #16]
 8109492:	685a      	ldr	r2, [r3, #4]
 8109494:	4b0e      	ldr	r3, [pc, #56]	@ (81094d0 <vPortFree+0xbc>)
 8109496:	681b      	ldr	r3, [r3, #0]
 8109498:	43db      	mvns	r3, r3
 810949a:	401a      	ands	r2, r3
 810949c:	693b      	ldr	r3, [r7, #16]
 810949e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 81094a0:	f001 fbd8 	bl	810ac54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 81094a4:	693b      	ldr	r3, [r7, #16]
 81094a6:	685a      	ldr	r2, [r3, #4]
 81094a8:	4b0a      	ldr	r3, [pc, #40]	@ (81094d4 <vPortFree+0xc0>)
 81094aa:	681b      	ldr	r3, [r3, #0]
 81094ac:	4413      	add	r3, r2
 81094ae:	4a09      	ldr	r2, [pc, #36]	@ (81094d4 <vPortFree+0xc0>)
 81094b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 81094b2:	6938      	ldr	r0, [r7, #16]
 81094b4:	f000 f874 	bl	81095a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 81094b8:	4b07      	ldr	r3, [pc, #28]	@ (81094d8 <vPortFree+0xc4>)
 81094ba:	681b      	ldr	r3, [r3, #0]
 81094bc:	3301      	adds	r3, #1
 81094be:	4a06      	ldr	r2, [pc, #24]	@ (81094d8 <vPortFree+0xc4>)
 81094c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 81094c2:	f001 fbd5 	bl	810ac70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81094c6:	bf00      	nop
 81094c8:	3718      	adds	r7, #24
 81094ca:	46bd      	mov	sp, r7
 81094cc:	bd80      	pop	{r7, pc}
 81094ce:	bf00      	nop
 81094d0:	10004808 	.word	0x10004808
 81094d4:	100047f8 	.word	0x100047f8
 81094d8:	10004804 	.word	0x10004804

081094dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81094dc:	b480      	push	{r7}
 81094de:	b085      	sub	sp, #20
 81094e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81094e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 81094e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81094e8:	4b27      	ldr	r3, [pc, #156]	@ (8109588 <prvHeapInit+0xac>)
 81094ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81094ec:	68fb      	ldr	r3, [r7, #12]
 81094ee:	f003 0307 	and.w	r3, r3, #7
 81094f2:	2b00      	cmp	r3, #0
 81094f4:	d00c      	beq.n	8109510 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81094f6:	68fb      	ldr	r3, [r7, #12]
 81094f8:	3307      	adds	r3, #7
 81094fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81094fc:	68fb      	ldr	r3, [r7, #12]
 81094fe:	f023 0307 	bic.w	r3, r3, #7
 8109502:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8109504:	68ba      	ldr	r2, [r7, #8]
 8109506:	68fb      	ldr	r3, [r7, #12]
 8109508:	1ad3      	subs	r3, r2, r3
 810950a:	4a1f      	ldr	r2, [pc, #124]	@ (8109588 <prvHeapInit+0xac>)
 810950c:	4413      	add	r3, r2
 810950e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8109510:	68fb      	ldr	r3, [r7, #12]
 8109512:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8109514:	4a1d      	ldr	r2, [pc, #116]	@ (810958c <prvHeapInit+0xb0>)
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810951a:	4b1c      	ldr	r3, [pc, #112]	@ (810958c <prvHeapInit+0xb0>)
 810951c:	2200      	movs	r2, #0
 810951e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8109520:	687b      	ldr	r3, [r7, #4]
 8109522:	68ba      	ldr	r2, [r7, #8]
 8109524:	4413      	add	r3, r2
 8109526:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8109528:	2208      	movs	r2, #8
 810952a:	68fb      	ldr	r3, [r7, #12]
 810952c:	1a9b      	subs	r3, r3, r2
 810952e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109530:	68fb      	ldr	r3, [r7, #12]
 8109532:	f023 0307 	bic.w	r3, r3, #7
 8109536:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8109538:	68fb      	ldr	r3, [r7, #12]
 810953a:	4a15      	ldr	r2, [pc, #84]	@ (8109590 <prvHeapInit+0xb4>)
 810953c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810953e:	4b14      	ldr	r3, [pc, #80]	@ (8109590 <prvHeapInit+0xb4>)
 8109540:	681b      	ldr	r3, [r3, #0]
 8109542:	2200      	movs	r2, #0
 8109544:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8109546:	4b12      	ldr	r3, [pc, #72]	@ (8109590 <prvHeapInit+0xb4>)
 8109548:	681b      	ldr	r3, [r3, #0]
 810954a:	2200      	movs	r2, #0
 810954c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8109552:	683b      	ldr	r3, [r7, #0]
 8109554:	68fa      	ldr	r2, [r7, #12]
 8109556:	1ad2      	subs	r2, r2, r3
 8109558:	683b      	ldr	r3, [r7, #0]
 810955a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810955c:	4b0c      	ldr	r3, [pc, #48]	@ (8109590 <prvHeapInit+0xb4>)
 810955e:	681a      	ldr	r2, [r3, #0]
 8109560:	683b      	ldr	r3, [r7, #0]
 8109562:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109564:	683b      	ldr	r3, [r7, #0]
 8109566:	685b      	ldr	r3, [r3, #4]
 8109568:	4a0a      	ldr	r2, [pc, #40]	@ (8109594 <prvHeapInit+0xb8>)
 810956a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810956c:	683b      	ldr	r3, [r7, #0]
 810956e:	685b      	ldr	r3, [r3, #4]
 8109570:	4a09      	ldr	r2, [pc, #36]	@ (8109598 <prvHeapInit+0xbc>)
 8109572:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8109574:	4b09      	ldr	r3, [pc, #36]	@ (810959c <prvHeapInit+0xc0>)
 8109576:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810957a:	601a      	str	r2, [r3, #0]
}
 810957c:	bf00      	nop
 810957e:	3714      	adds	r7, #20
 8109580:	46bd      	mov	sp, r7
 8109582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109586:	4770      	bx	lr
 8109588:	10000bec 	.word	0x10000bec
 810958c:	100047ec 	.word	0x100047ec
 8109590:	100047f4 	.word	0x100047f4
 8109594:	100047fc 	.word	0x100047fc
 8109598:	100047f8 	.word	0x100047f8
 810959c:	10004808 	.word	0x10004808

081095a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 81095a0:	b480      	push	{r7}
 81095a2:	b085      	sub	sp, #20
 81095a4:	af00      	add	r7, sp, #0
 81095a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 81095a8:	4b28      	ldr	r3, [pc, #160]	@ (810964c <prvInsertBlockIntoFreeList+0xac>)
 81095aa:	60fb      	str	r3, [r7, #12]
 81095ac:	e002      	b.n	81095b4 <prvInsertBlockIntoFreeList+0x14>
 81095ae:	68fb      	ldr	r3, [r7, #12]
 81095b0:	681b      	ldr	r3, [r3, #0]
 81095b2:	60fb      	str	r3, [r7, #12]
 81095b4:	68fb      	ldr	r3, [r7, #12]
 81095b6:	681b      	ldr	r3, [r3, #0]
 81095b8:	687a      	ldr	r2, [r7, #4]
 81095ba:	429a      	cmp	r2, r3
 81095bc:	d8f7      	bhi.n	81095ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 81095be:	68fb      	ldr	r3, [r7, #12]
 81095c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 81095c2:	68fb      	ldr	r3, [r7, #12]
 81095c4:	685b      	ldr	r3, [r3, #4]
 81095c6:	68ba      	ldr	r2, [r7, #8]
 81095c8:	4413      	add	r3, r2
 81095ca:	687a      	ldr	r2, [r7, #4]
 81095cc:	429a      	cmp	r2, r3
 81095ce:	d108      	bne.n	81095e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81095d0:	68fb      	ldr	r3, [r7, #12]
 81095d2:	685a      	ldr	r2, [r3, #4]
 81095d4:	687b      	ldr	r3, [r7, #4]
 81095d6:	685b      	ldr	r3, [r3, #4]
 81095d8:	441a      	add	r2, r3
 81095da:	68fb      	ldr	r3, [r7, #12]
 81095dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81095de:	68fb      	ldr	r3, [r7, #12]
 81095e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81095e2:	687b      	ldr	r3, [r7, #4]
 81095e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81095e6:	687b      	ldr	r3, [r7, #4]
 81095e8:	685b      	ldr	r3, [r3, #4]
 81095ea:	68ba      	ldr	r2, [r7, #8]
 81095ec:	441a      	add	r2, r3
 81095ee:	68fb      	ldr	r3, [r7, #12]
 81095f0:	681b      	ldr	r3, [r3, #0]
 81095f2:	429a      	cmp	r2, r3
 81095f4:	d118      	bne.n	8109628 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81095f6:	68fb      	ldr	r3, [r7, #12]
 81095f8:	681a      	ldr	r2, [r3, #0]
 81095fa:	4b15      	ldr	r3, [pc, #84]	@ (8109650 <prvInsertBlockIntoFreeList+0xb0>)
 81095fc:	681b      	ldr	r3, [r3, #0]
 81095fe:	429a      	cmp	r2, r3
 8109600:	d00d      	beq.n	810961e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8109602:	687b      	ldr	r3, [r7, #4]
 8109604:	685a      	ldr	r2, [r3, #4]
 8109606:	68fb      	ldr	r3, [r7, #12]
 8109608:	681b      	ldr	r3, [r3, #0]
 810960a:	685b      	ldr	r3, [r3, #4]
 810960c:	441a      	add	r2, r3
 810960e:	687b      	ldr	r3, [r7, #4]
 8109610:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8109612:	68fb      	ldr	r3, [r7, #12]
 8109614:	681b      	ldr	r3, [r3, #0]
 8109616:	681a      	ldr	r2, [r3, #0]
 8109618:	687b      	ldr	r3, [r7, #4]
 810961a:	601a      	str	r2, [r3, #0]
 810961c:	e008      	b.n	8109630 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810961e:	4b0c      	ldr	r3, [pc, #48]	@ (8109650 <prvInsertBlockIntoFreeList+0xb0>)
 8109620:	681a      	ldr	r2, [r3, #0]
 8109622:	687b      	ldr	r3, [r7, #4]
 8109624:	601a      	str	r2, [r3, #0]
 8109626:	e003      	b.n	8109630 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8109628:	68fb      	ldr	r3, [r7, #12]
 810962a:	681a      	ldr	r2, [r3, #0]
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8109630:	68fa      	ldr	r2, [r7, #12]
 8109632:	687b      	ldr	r3, [r7, #4]
 8109634:	429a      	cmp	r2, r3
 8109636:	d002      	beq.n	810963e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8109638:	68fb      	ldr	r3, [r7, #12]
 810963a:	687a      	ldr	r2, [r7, #4]
 810963c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810963e:	bf00      	nop
 8109640:	3714      	adds	r7, #20
 8109642:	46bd      	mov	sp, r7
 8109644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109648:	4770      	bx	lr
 810964a:	bf00      	nop
 810964c:	100047ec 	.word	0x100047ec
 8109650:	100047f4 	.word	0x100047f4

08109654 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8109654:	b480      	push	{r7}
 8109656:	b083      	sub	sp, #12
 8109658:	af00      	add	r7, sp, #0
 810965a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810965c:	687b      	ldr	r3, [r7, #4]
 810965e:	f103 0208 	add.w	r2, r3, #8
 8109662:	687b      	ldr	r3, [r7, #4]
 8109664:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8109666:	687b      	ldr	r3, [r7, #4]
 8109668:	f04f 32ff 	mov.w	r2, #4294967295
 810966c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810966e:	687b      	ldr	r3, [r7, #4]
 8109670:	f103 0208 	add.w	r2, r3, #8
 8109674:	687b      	ldr	r3, [r7, #4]
 8109676:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	f103 0208 	add.w	r2, r3, #8
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	2200      	movs	r2, #0
 8109686:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8109688:	bf00      	nop
 810968a:	370c      	adds	r7, #12
 810968c:	46bd      	mov	sp, r7
 810968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109692:	4770      	bx	lr

08109694 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8109694:	b480      	push	{r7}
 8109696:	b083      	sub	sp, #12
 8109698:	af00      	add	r7, sp, #0
 810969a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	2200      	movs	r2, #0
 81096a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 81096a2:	bf00      	nop
 81096a4:	370c      	adds	r7, #12
 81096a6:	46bd      	mov	sp, r7
 81096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096ac:	4770      	bx	lr

081096ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81096ae:	b480      	push	{r7}
 81096b0:	b085      	sub	sp, #20
 81096b2:	af00      	add	r7, sp, #0
 81096b4:	6078      	str	r0, [r7, #4]
 81096b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 81096b8:	687b      	ldr	r3, [r7, #4]
 81096ba:	685b      	ldr	r3, [r3, #4]
 81096bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 81096be:	683b      	ldr	r3, [r7, #0]
 81096c0:	68fa      	ldr	r2, [r7, #12]
 81096c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 81096c4:	68fb      	ldr	r3, [r7, #12]
 81096c6:	689a      	ldr	r2, [r3, #8]
 81096c8:	683b      	ldr	r3, [r7, #0]
 81096ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 81096cc:	68fb      	ldr	r3, [r7, #12]
 81096ce:	689b      	ldr	r3, [r3, #8]
 81096d0:	683a      	ldr	r2, [r7, #0]
 81096d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81096d4:	68fb      	ldr	r3, [r7, #12]
 81096d6:	683a      	ldr	r2, [r7, #0]
 81096d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81096da:	683b      	ldr	r3, [r7, #0]
 81096dc:	687a      	ldr	r2, [r7, #4]
 81096de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81096e0:	687b      	ldr	r3, [r7, #4]
 81096e2:	681b      	ldr	r3, [r3, #0]
 81096e4:	1c5a      	adds	r2, r3, #1
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	601a      	str	r2, [r3, #0]
}
 81096ea:	bf00      	nop
 81096ec:	3714      	adds	r7, #20
 81096ee:	46bd      	mov	sp, r7
 81096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096f4:	4770      	bx	lr

081096f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81096f6:	b480      	push	{r7}
 81096f8:	b085      	sub	sp, #20
 81096fa:	af00      	add	r7, sp, #0
 81096fc:	6078      	str	r0, [r7, #4]
 81096fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8109700:	683b      	ldr	r3, [r7, #0]
 8109702:	681b      	ldr	r3, [r3, #0]
 8109704:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8109706:	68bb      	ldr	r3, [r7, #8]
 8109708:	f1b3 3fff 	cmp.w	r3, #4294967295
 810970c:	d103      	bne.n	8109716 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810970e:	687b      	ldr	r3, [r7, #4]
 8109710:	691b      	ldr	r3, [r3, #16]
 8109712:	60fb      	str	r3, [r7, #12]
 8109714:	e00c      	b.n	8109730 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	3308      	adds	r3, #8
 810971a:	60fb      	str	r3, [r7, #12]
 810971c:	e002      	b.n	8109724 <vListInsert+0x2e>
 810971e:	68fb      	ldr	r3, [r7, #12]
 8109720:	685b      	ldr	r3, [r3, #4]
 8109722:	60fb      	str	r3, [r7, #12]
 8109724:	68fb      	ldr	r3, [r7, #12]
 8109726:	685b      	ldr	r3, [r3, #4]
 8109728:	681b      	ldr	r3, [r3, #0]
 810972a:	68ba      	ldr	r2, [r7, #8]
 810972c:	429a      	cmp	r2, r3
 810972e:	d2f6      	bcs.n	810971e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8109730:	68fb      	ldr	r3, [r7, #12]
 8109732:	685a      	ldr	r2, [r3, #4]
 8109734:	683b      	ldr	r3, [r7, #0]
 8109736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8109738:	683b      	ldr	r3, [r7, #0]
 810973a:	685b      	ldr	r3, [r3, #4]
 810973c:	683a      	ldr	r2, [r7, #0]
 810973e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8109740:	683b      	ldr	r3, [r7, #0]
 8109742:	68fa      	ldr	r2, [r7, #12]
 8109744:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8109746:	68fb      	ldr	r3, [r7, #12]
 8109748:	683a      	ldr	r2, [r7, #0]
 810974a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810974c:	683b      	ldr	r3, [r7, #0]
 810974e:	687a      	ldr	r2, [r7, #4]
 8109750:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109752:	687b      	ldr	r3, [r7, #4]
 8109754:	681b      	ldr	r3, [r3, #0]
 8109756:	1c5a      	adds	r2, r3, #1
 8109758:	687b      	ldr	r3, [r7, #4]
 810975a:	601a      	str	r2, [r3, #0]
}
 810975c:	bf00      	nop
 810975e:	3714      	adds	r7, #20
 8109760:	46bd      	mov	sp, r7
 8109762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109766:	4770      	bx	lr

08109768 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8109768:	b480      	push	{r7}
 810976a:	b085      	sub	sp, #20
 810976c:	af00      	add	r7, sp, #0
 810976e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109770:	687b      	ldr	r3, [r7, #4]
 8109772:	691b      	ldr	r3, [r3, #16]
 8109774:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8109776:	687b      	ldr	r3, [r7, #4]
 8109778:	685b      	ldr	r3, [r3, #4]
 810977a:	687a      	ldr	r2, [r7, #4]
 810977c:	6892      	ldr	r2, [r2, #8]
 810977e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109780:	687b      	ldr	r3, [r7, #4]
 8109782:	689b      	ldr	r3, [r3, #8]
 8109784:	687a      	ldr	r2, [r7, #4]
 8109786:	6852      	ldr	r2, [r2, #4]
 8109788:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810978a:	68fb      	ldr	r3, [r7, #12]
 810978c:	685b      	ldr	r3, [r3, #4]
 810978e:	687a      	ldr	r2, [r7, #4]
 8109790:	429a      	cmp	r2, r3
 8109792:	d103      	bne.n	810979c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8109794:	687b      	ldr	r3, [r7, #4]
 8109796:	689a      	ldr	r2, [r3, #8]
 8109798:	68fb      	ldr	r3, [r7, #12]
 810979a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810979c:	687b      	ldr	r3, [r7, #4]
 810979e:	2200      	movs	r2, #0
 81097a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 81097a2:	68fb      	ldr	r3, [r7, #12]
 81097a4:	681b      	ldr	r3, [r3, #0]
 81097a6:	1e5a      	subs	r2, r3, #1
 81097a8:	68fb      	ldr	r3, [r7, #12]
 81097aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 81097ac:	68fb      	ldr	r3, [r7, #12]
 81097ae:	681b      	ldr	r3, [r3, #0]
}
 81097b0:	4618      	mov	r0, r3
 81097b2:	3714      	adds	r7, #20
 81097b4:	46bd      	mov	sp, r7
 81097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81097ba:	4770      	bx	lr

081097bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 81097bc:	b480      	push	{r7}
 81097be:	b085      	sub	sp, #20
 81097c0:	af00      	add	r7, sp, #0
 81097c2:	60f8      	str	r0, [r7, #12]
 81097c4:	60b9      	str	r1, [r7, #8]
 81097c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 81097c8:	68fb      	ldr	r3, [r7, #12]
 81097ca:	3b04      	subs	r3, #4
 81097cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 81097ce:	68fb      	ldr	r3, [r7, #12]
 81097d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 81097d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81097d6:	68fb      	ldr	r3, [r7, #12]
 81097d8:	3b04      	subs	r3, #4
 81097da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81097dc:	68bb      	ldr	r3, [r7, #8]
 81097de:	f023 0201 	bic.w	r2, r3, #1
 81097e2:	68fb      	ldr	r3, [r7, #12]
 81097e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81097e6:	68fb      	ldr	r3, [r7, #12]
 81097e8:	3b04      	subs	r3, #4
 81097ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81097ec:	4a0c      	ldr	r2, [pc, #48]	@ (8109820 <pxPortInitialiseStack+0x64>)
 81097ee:	68fb      	ldr	r3, [r7, #12]
 81097f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81097f2:	68fb      	ldr	r3, [r7, #12]
 81097f4:	3b14      	subs	r3, #20
 81097f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81097f8:	687a      	ldr	r2, [r7, #4]
 81097fa:	68fb      	ldr	r3, [r7, #12]
 81097fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81097fe:	68fb      	ldr	r3, [r7, #12]
 8109800:	3b04      	subs	r3, #4
 8109802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8109804:	68fb      	ldr	r3, [r7, #12]
 8109806:	f06f 0202 	mvn.w	r2, #2
 810980a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810980c:	68fb      	ldr	r3, [r7, #12]
 810980e:	3b20      	subs	r3, #32
 8109810:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8109812:	68fb      	ldr	r3, [r7, #12]
}
 8109814:	4618      	mov	r0, r3
 8109816:	3714      	adds	r7, #20
 8109818:	46bd      	mov	sp, r7
 810981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810981e:	4770      	bx	lr
 8109820:	08109825 	.word	0x08109825

08109824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8109824:	b480      	push	{r7}
 8109826:	b085      	sub	sp, #20
 8109828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810982a:	2300      	movs	r3, #0
 810982c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810982e:	4b13      	ldr	r3, [pc, #76]	@ (810987c <prvTaskExitError+0x58>)
 8109830:	681b      	ldr	r3, [r3, #0]
 8109832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109836:	d00b      	beq.n	8109850 <prvTaskExitError+0x2c>
	__asm volatile
 8109838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810983c:	f383 8811 	msr	BASEPRI, r3
 8109840:	f3bf 8f6f 	isb	sy
 8109844:	f3bf 8f4f 	dsb	sy
 8109848:	60fb      	str	r3, [r7, #12]
}
 810984a:	bf00      	nop
 810984c:	bf00      	nop
 810984e:	e7fd      	b.n	810984c <prvTaskExitError+0x28>
	__asm volatile
 8109850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109854:	f383 8811 	msr	BASEPRI, r3
 8109858:	f3bf 8f6f 	isb	sy
 810985c:	f3bf 8f4f 	dsb	sy
 8109860:	60bb      	str	r3, [r7, #8]
}
 8109862:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8109864:	bf00      	nop
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	2b00      	cmp	r3, #0
 810986a:	d0fc      	beq.n	8109866 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810986c:	bf00      	nop
 810986e:	bf00      	nop
 8109870:	3714      	adds	r7, #20
 8109872:	46bd      	mov	sp, r7
 8109874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109878:	4770      	bx	lr
 810987a:	bf00      	nop
 810987c:	10000010 	.word	0x10000010

08109880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8109880:	4b07      	ldr	r3, [pc, #28]	@ (81098a0 <pxCurrentTCBConst2>)
 8109882:	6819      	ldr	r1, [r3, #0]
 8109884:	6808      	ldr	r0, [r1, #0]
 8109886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810988a:	f380 8809 	msr	PSP, r0
 810988e:	f3bf 8f6f 	isb	sy
 8109892:	f04f 0000 	mov.w	r0, #0
 8109896:	f380 8811 	msr	BASEPRI, r0
 810989a:	4770      	bx	lr
 810989c:	f3af 8000 	nop.w

081098a0 <pxCurrentTCBConst2>:
 81098a0:	10004854 	.word	0x10004854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 81098a4:	bf00      	nop
 81098a6:	bf00      	nop

081098a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 81098a8:	4808      	ldr	r0, [pc, #32]	@ (81098cc <prvPortStartFirstTask+0x24>)
 81098aa:	6800      	ldr	r0, [r0, #0]
 81098ac:	6800      	ldr	r0, [r0, #0]
 81098ae:	f380 8808 	msr	MSP, r0
 81098b2:	f04f 0000 	mov.w	r0, #0
 81098b6:	f380 8814 	msr	CONTROL, r0
 81098ba:	b662      	cpsie	i
 81098bc:	b661      	cpsie	f
 81098be:	f3bf 8f4f 	dsb	sy
 81098c2:	f3bf 8f6f 	isb	sy
 81098c6:	df00      	svc	0
 81098c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 81098ca:	bf00      	nop
 81098cc:	e000ed08 	.word	0xe000ed08

081098d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81098d0:	b580      	push	{r7, lr}
 81098d2:	b086      	sub	sp, #24
 81098d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81098d6:	4b47      	ldr	r3, [pc, #284]	@ (81099f4 <xPortStartScheduler+0x124>)
 81098d8:	681b      	ldr	r3, [r3, #0]
 81098da:	4a47      	ldr	r2, [pc, #284]	@ (81099f8 <xPortStartScheduler+0x128>)
 81098dc:	4293      	cmp	r3, r2
 81098de:	d10b      	bne.n	81098f8 <xPortStartScheduler+0x28>
	__asm volatile
 81098e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81098e4:	f383 8811 	msr	BASEPRI, r3
 81098e8:	f3bf 8f6f 	isb	sy
 81098ec:	f3bf 8f4f 	dsb	sy
 81098f0:	613b      	str	r3, [r7, #16]
}
 81098f2:	bf00      	nop
 81098f4:	bf00      	nop
 81098f6:	e7fd      	b.n	81098f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81098f8:	4b3e      	ldr	r3, [pc, #248]	@ (81099f4 <xPortStartScheduler+0x124>)
 81098fa:	681b      	ldr	r3, [r3, #0]
 81098fc:	4a3f      	ldr	r2, [pc, #252]	@ (81099fc <xPortStartScheduler+0x12c>)
 81098fe:	4293      	cmp	r3, r2
 8109900:	d10b      	bne.n	810991a <xPortStartScheduler+0x4a>
	__asm volatile
 8109902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109906:	f383 8811 	msr	BASEPRI, r3
 810990a:	f3bf 8f6f 	isb	sy
 810990e:	f3bf 8f4f 	dsb	sy
 8109912:	60fb      	str	r3, [r7, #12]
}
 8109914:	bf00      	nop
 8109916:	bf00      	nop
 8109918:	e7fd      	b.n	8109916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810991a:	4b39      	ldr	r3, [pc, #228]	@ (8109a00 <xPortStartScheduler+0x130>)
 810991c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810991e:	697b      	ldr	r3, [r7, #20]
 8109920:	781b      	ldrb	r3, [r3, #0]
 8109922:	b2db      	uxtb	r3, r3
 8109924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8109926:	697b      	ldr	r3, [r7, #20]
 8109928:	22ff      	movs	r2, #255	@ 0xff
 810992a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810992c:	697b      	ldr	r3, [r7, #20]
 810992e:	781b      	ldrb	r3, [r3, #0]
 8109930:	b2db      	uxtb	r3, r3
 8109932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8109934:	78fb      	ldrb	r3, [r7, #3]
 8109936:	b2db      	uxtb	r3, r3
 8109938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810993c:	b2da      	uxtb	r2, r3
 810993e:	4b31      	ldr	r3, [pc, #196]	@ (8109a04 <xPortStartScheduler+0x134>)
 8109940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8109942:	4b31      	ldr	r3, [pc, #196]	@ (8109a08 <xPortStartScheduler+0x138>)
 8109944:	2207      	movs	r2, #7
 8109946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109948:	e009      	b.n	810995e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810994a:	4b2f      	ldr	r3, [pc, #188]	@ (8109a08 <xPortStartScheduler+0x138>)
 810994c:	681b      	ldr	r3, [r3, #0]
 810994e:	3b01      	subs	r3, #1
 8109950:	4a2d      	ldr	r2, [pc, #180]	@ (8109a08 <xPortStartScheduler+0x138>)
 8109952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8109954:	78fb      	ldrb	r3, [r7, #3]
 8109956:	b2db      	uxtb	r3, r3
 8109958:	005b      	lsls	r3, r3, #1
 810995a:	b2db      	uxtb	r3, r3
 810995c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810995e:	78fb      	ldrb	r3, [r7, #3]
 8109960:	b2db      	uxtb	r3, r3
 8109962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109966:	2b80      	cmp	r3, #128	@ 0x80
 8109968:	d0ef      	beq.n	810994a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810996a:	4b27      	ldr	r3, [pc, #156]	@ (8109a08 <xPortStartScheduler+0x138>)
 810996c:	681b      	ldr	r3, [r3, #0]
 810996e:	f1c3 0307 	rsb	r3, r3, #7
 8109972:	2b04      	cmp	r3, #4
 8109974:	d00b      	beq.n	810998e <xPortStartScheduler+0xbe>
	__asm volatile
 8109976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810997a:	f383 8811 	msr	BASEPRI, r3
 810997e:	f3bf 8f6f 	isb	sy
 8109982:	f3bf 8f4f 	dsb	sy
 8109986:	60bb      	str	r3, [r7, #8]
}
 8109988:	bf00      	nop
 810998a:	bf00      	nop
 810998c:	e7fd      	b.n	810998a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810998e:	4b1e      	ldr	r3, [pc, #120]	@ (8109a08 <xPortStartScheduler+0x138>)
 8109990:	681b      	ldr	r3, [r3, #0]
 8109992:	021b      	lsls	r3, r3, #8
 8109994:	4a1c      	ldr	r2, [pc, #112]	@ (8109a08 <xPortStartScheduler+0x138>)
 8109996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8109998:	4b1b      	ldr	r3, [pc, #108]	@ (8109a08 <xPortStartScheduler+0x138>)
 810999a:	681b      	ldr	r3, [r3, #0]
 810999c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 81099a0:	4a19      	ldr	r2, [pc, #100]	@ (8109a08 <xPortStartScheduler+0x138>)
 81099a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	b2da      	uxtb	r2, r3
 81099a8:	697b      	ldr	r3, [r7, #20]
 81099aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81099ac:	4b17      	ldr	r3, [pc, #92]	@ (8109a0c <xPortStartScheduler+0x13c>)
 81099ae:	681b      	ldr	r3, [r3, #0]
 81099b0:	4a16      	ldr	r2, [pc, #88]	@ (8109a0c <xPortStartScheduler+0x13c>)
 81099b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81099b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81099b8:	4b14      	ldr	r3, [pc, #80]	@ (8109a0c <xPortStartScheduler+0x13c>)
 81099ba:	681b      	ldr	r3, [r3, #0]
 81099bc:	4a13      	ldr	r2, [pc, #76]	@ (8109a0c <xPortStartScheduler+0x13c>)
 81099be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 81099c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81099c4:	f000 f8da 	bl	8109b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81099c8:	4b11      	ldr	r3, [pc, #68]	@ (8109a10 <xPortStartScheduler+0x140>)
 81099ca:	2200      	movs	r2, #0
 81099cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81099ce:	f000 f8f9 	bl	8109bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81099d2:	4b10      	ldr	r3, [pc, #64]	@ (8109a14 <xPortStartScheduler+0x144>)
 81099d4:	681b      	ldr	r3, [r3, #0]
 81099d6:	4a0f      	ldr	r2, [pc, #60]	@ (8109a14 <xPortStartScheduler+0x144>)
 81099d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 81099dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81099de:	f7ff ff63 	bl	81098a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81099e2:	f001 fabf 	bl	810af64 <vTaskSwitchContext>
	prvTaskExitError();
 81099e6:	f7ff ff1d 	bl	8109824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81099ea:	2300      	movs	r3, #0
}
 81099ec:	4618      	mov	r0, r3
 81099ee:	3718      	adds	r7, #24
 81099f0:	46bd      	mov	sp, r7
 81099f2:	bd80      	pop	{r7, pc}
 81099f4:	e000ed00 	.word	0xe000ed00
 81099f8:	410fc271 	.word	0x410fc271
 81099fc:	410fc270 	.word	0x410fc270
 8109a00:	e000e400 	.word	0xe000e400
 8109a04:	1000480c 	.word	0x1000480c
 8109a08:	10004810 	.word	0x10004810
 8109a0c:	e000ed20 	.word	0xe000ed20
 8109a10:	10000010 	.word	0x10000010
 8109a14:	e000ef34 	.word	0xe000ef34

08109a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8109a18:	b480      	push	{r7}
 8109a1a:	b083      	sub	sp, #12
 8109a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8109a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109a22:	f383 8811 	msr	BASEPRI, r3
 8109a26:	f3bf 8f6f 	isb	sy
 8109a2a:	f3bf 8f4f 	dsb	sy
 8109a2e:	607b      	str	r3, [r7, #4]
}
 8109a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8109a32:	4b10      	ldr	r3, [pc, #64]	@ (8109a74 <vPortEnterCritical+0x5c>)
 8109a34:	681b      	ldr	r3, [r3, #0]
 8109a36:	3301      	adds	r3, #1
 8109a38:	4a0e      	ldr	r2, [pc, #56]	@ (8109a74 <vPortEnterCritical+0x5c>)
 8109a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8109a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8109a74 <vPortEnterCritical+0x5c>)
 8109a3e:	681b      	ldr	r3, [r3, #0]
 8109a40:	2b01      	cmp	r3, #1
 8109a42:	d110      	bne.n	8109a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109a44:	4b0c      	ldr	r3, [pc, #48]	@ (8109a78 <vPortEnterCritical+0x60>)
 8109a46:	681b      	ldr	r3, [r3, #0]
 8109a48:	b2db      	uxtb	r3, r3
 8109a4a:	2b00      	cmp	r3, #0
 8109a4c:	d00b      	beq.n	8109a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8109a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109a52:	f383 8811 	msr	BASEPRI, r3
 8109a56:	f3bf 8f6f 	isb	sy
 8109a5a:	f3bf 8f4f 	dsb	sy
 8109a5e:	603b      	str	r3, [r7, #0]
}
 8109a60:	bf00      	nop
 8109a62:	bf00      	nop
 8109a64:	e7fd      	b.n	8109a62 <vPortEnterCritical+0x4a>
	}
}
 8109a66:	bf00      	nop
 8109a68:	370c      	adds	r7, #12
 8109a6a:	46bd      	mov	sp, r7
 8109a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a70:	4770      	bx	lr
 8109a72:	bf00      	nop
 8109a74:	10000010 	.word	0x10000010
 8109a78:	e000ed04 	.word	0xe000ed04

08109a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8109a7c:	b480      	push	{r7}
 8109a7e:	b083      	sub	sp, #12
 8109a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8109a82:	4b12      	ldr	r3, [pc, #72]	@ (8109acc <vPortExitCritical+0x50>)
 8109a84:	681b      	ldr	r3, [r3, #0]
 8109a86:	2b00      	cmp	r3, #0
 8109a88:	d10b      	bne.n	8109aa2 <vPortExitCritical+0x26>
	__asm volatile
 8109a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109a8e:	f383 8811 	msr	BASEPRI, r3
 8109a92:	f3bf 8f6f 	isb	sy
 8109a96:	f3bf 8f4f 	dsb	sy
 8109a9a:	607b      	str	r3, [r7, #4]
}
 8109a9c:	bf00      	nop
 8109a9e:	bf00      	nop
 8109aa0:	e7fd      	b.n	8109a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8109aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8109acc <vPortExitCritical+0x50>)
 8109aa4:	681b      	ldr	r3, [r3, #0]
 8109aa6:	3b01      	subs	r3, #1
 8109aa8:	4a08      	ldr	r2, [pc, #32]	@ (8109acc <vPortExitCritical+0x50>)
 8109aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8109aac:	4b07      	ldr	r3, [pc, #28]	@ (8109acc <vPortExitCritical+0x50>)
 8109aae:	681b      	ldr	r3, [r3, #0]
 8109ab0:	2b00      	cmp	r3, #0
 8109ab2:	d105      	bne.n	8109ac0 <vPortExitCritical+0x44>
 8109ab4:	2300      	movs	r3, #0
 8109ab6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8109ab8:	683b      	ldr	r3, [r7, #0]
 8109aba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8109abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8109ac0:	bf00      	nop
 8109ac2:	370c      	adds	r7, #12
 8109ac4:	46bd      	mov	sp, r7
 8109ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aca:	4770      	bx	lr
 8109acc:	10000010 	.word	0x10000010

08109ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8109ad0:	f3ef 8009 	mrs	r0, PSP
 8109ad4:	f3bf 8f6f 	isb	sy
 8109ad8:	4b15      	ldr	r3, [pc, #84]	@ (8109b30 <pxCurrentTCBConst>)
 8109ada:	681a      	ldr	r2, [r3, #0]
 8109adc:	f01e 0f10 	tst.w	lr, #16
 8109ae0:	bf08      	it	eq
 8109ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8109ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109aea:	6010      	str	r0, [r2, #0]
 8109aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8109af4:	f380 8811 	msr	BASEPRI, r0
 8109af8:	f3bf 8f4f 	dsb	sy
 8109afc:	f3bf 8f6f 	isb	sy
 8109b00:	f001 fa30 	bl	810af64 <vTaskSwitchContext>
 8109b04:	f04f 0000 	mov.w	r0, #0
 8109b08:	f380 8811 	msr	BASEPRI, r0
 8109b0c:	bc09      	pop	{r0, r3}
 8109b0e:	6819      	ldr	r1, [r3, #0]
 8109b10:	6808      	ldr	r0, [r1, #0]
 8109b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b16:	f01e 0f10 	tst.w	lr, #16
 8109b1a:	bf08      	it	eq
 8109b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109b20:	f380 8809 	msr	PSP, r0
 8109b24:	f3bf 8f6f 	isb	sy
 8109b28:	4770      	bx	lr
 8109b2a:	bf00      	nop
 8109b2c:	f3af 8000 	nop.w

08109b30 <pxCurrentTCBConst>:
 8109b30:	10004854 	.word	0x10004854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109b34:	bf00      	nop
 8109b36:	bf00      	nop

08109b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109b38:	b580      	push	{r7, lr}
 8109b3a:	b082      	sub	sp, #8
 8109b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8109b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109b42:	f383 8811 	msr	BASEPRI, r3
 8109b46:	f3bf 8f6f 	isb	sy
 8109b4a:	f3bf 8f4f 	dsb	sy
 8109b4e:	607b      	str	r3, [r7, #4]
}
 8109b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109b52:	f001 f94d 	bl	810adf0 <xTaskIncrementTick>
 8109b56:	4603      	mov	r3, r0
 8109b58:	2b00      	cmp	r3, #0
 8109b5a:	d003      	beq.n	8109b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8109b5c:	4b06      	ldr	r3, [pc, #24]	@ (8109b78 <xPortSysTickHandler+0x40>)
 8109b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109b62:	601a      	str	r2, [r3, #0]
 8109b64:	2300      	movs	r3, #0
 8109b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109b68:	683b      	ldr	r3, [r7, #0]
 8109b6a:	f383 8811 	msr	BASEPRI, r3
}
 8109b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8109b70:	bf00      	nop
 8109b72:	3708      	adds	r7, #8
 8109b74:	46bd      	mov	sp, r7
 8109b76:	bd80      	pop	{r7, pc}
 8109b78:	e000ed04 	.word	0xe000ed04

08109b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8109b7c:	b480      	push	{r7}
 8109b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8109b80:	4b0b      	ldr	r3, [pc, #44]	@ (8109bb0 <vPortSetupTimerInterrupt+0x34>)
 8109b82:	2200      	movs	r2, #0
 8109b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109b86:	4b0b      	ldr	r3, [pc, #44]	@ (8109bb4 <vPortSetupTimerInterrupt+0x38>)
 8109b88:	2200      	movs	r2, #0
 8109b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8109b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8109bb8 <vPortSetupTimerInterrupt+0x3c>)
 8109b8e:	681b      	ldr	r3, [r3, #0]
 8109b90:	4a0a      	ldr	r2, [pc, #40]	@ (8109bbc <vPortSetupTimerInterrupt+0x40>)
 8109b92:	fba2 2303 	umull	r2, r3, r2, r3
 8109b96:	099b      	lsrs	r3, r3, #6
 8109b98:	4a09      	ldr	r2, [pc, #36]	@ (8109bc0 <vPortSetupTimerInterrupt+0x44>)
 8109b9a:	3b01      	subs	r3, #1
 8109b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8109b9e:	4b04      	ldr	r3, [pc, #16]	@ (8109bb0 <vPortSetupTimerInterrupt+0x34>)
 8109ba0:	2207      	movs	r2, #7
 8109ba2:	601a      	str	r2, [r3, #0]
}
 8109ba4:	bf00      	nop
 8109ba6:	46bd      	mov	sp, r7
 8109ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bac:	4770      	bx	lr
 8109bae:	bf00      	nop
 8109bb0:	e000e010 	.word	0xe000e010
 8109bb4:	e000e018 	.word	0xe000e018
 8109bb8:	10000004 	.word	0x10000004
 8109bbc:	10624dd3 	.word	0x10624dd3
 8109bc0:	e000e014 	.word	0xe000e014

08109bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8109bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8109bd4 <vPortEnableVFP+0x10>
 8109bc8:	6801      	ldr	r1, [r0, #0]
 8109bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8109bce:	6001      	str	r1, [r0, #0]
 8109bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8109bd2:	bf00      	nop
 8109bd4:	e000ed88 	.word	0xe000ed88

08109bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8109bd8:	b480      	push	{r7}
 8109bda:	b085      	sub	sp, #20
 8109bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8109bde:	f3ef 8305 	mrs	r3, IPSR
 8109be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8109be4:	68fb      	ldr	r3, [r7, #12]
 8109be6:	2b0f      	cmp	r3, #15
 8109be8:	d915      	bls.n	8109c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8109bea:	4a18      	ldr	r2, [pc, #96]	@ (8109c4c <vPortValidateInterruptPriority+0x74>)
 8109bec:	68fb      	ldr	r3, [r7, #12]
 8109bee:	4413      	add	r3, r2
 8109bf0:	781b      	ldrb	r3, [r3, #0]
 8109bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8109bf4:	4b16      	ldr	r3, [pc, #88]	@ (8109c50 <vPortValidateInterruptPriority+0x78>)
 8109bf6:	781b      	ldrb	r3, [r3, #0]
 8109bf8:	7afa      	ldrb	r2, [r7, #11]
 8109bfa:	429a      	cmp	r2, r3
 8109bfc:	d20b      	bcs.n	8109c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8109bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109c02:	f383 8811 	msr	BASEPRI, r3
 8109c06:	f3bf 8f6f 	isb	sy
 8109c0a:	f3bf 8f4f 	dsb	sy
 8109c0e:	607b      	str	r3, [r7, #4]
}
 8109c10:	bf00      	nop
 8109c12:	bf00      	nop
 8109c14:	e7fd      	b.n	8109c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8109c16:	4b0f      	ldr	r3, [pc, #60]	@ (8109c54 <vPortValidateInterruptPriority+0x7c>)
 8109c18:	681b      	ldr	r3, [r3, #0]
 8109c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8109c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8109c58 <vPortValidateInterruptPriority+0x80>)
 8109c20:	681b      	ldr	r3, [r3, #0]
 8109c22:	429a      	cmp	r2, r3
 8109c24:	d90b      	bls.n	8109c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8109c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109c2a:	f383 8811 	msr	BASEPRI, r3
 8109c2e:	f3bf 8f6f 	isb	sy
 8109c32:	f3bf 8f4f 	dsb	sy
 8109c36:	603b      	str	r3, [r7, #0]
}
 8109c38:	bf00      	nop
 8109c3a:	bf00      	nop
 8109c3c:	e7fd      	b.n	8109c3a <vPortValidateInterruptPriority+0x62>
	}
 8109c3e:	bf00      	nop
 8109c40:	3714      	adds	r7, #20
 8109c42:	46bd      	mov	sp, r7
 8109c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c48:	4770      	bx	lr
 8109c4a:	bf00      	nop
 8109c4c:	e000e3f0 	.word	0xe000e3f0
 8109c50:	1000480c 	.word	0x1000480c
 8109c54:	e000ed0c 	.word	0xe000ed0c
 8109c58:	10004810 	.word	0x10004810

08109c5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8109c5c:	b580      	push	{r7, lr}
 8109c5e:	b084      	sub	sp, #16
 8109c60:	af00      	add	r7, sp, #0
 8109c62:	6078      	str	r0, [r7, #4]
 8109c64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8109c66:	687b      	ldr	r3, [r7, #4]
 8109c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8109c6a:	68fb      	ldr	r3, [r7, #12]
 8109c6c:	2b00      	cmp	r3, #0
 8109c6e:	d10b      	bne.n	8109c88 <xQueueGenericReset+0x2c>
	__asm volatile
 8109c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109c74:	f383 8811 	msr	BASEPRI, r3
 8109c78:	f3bf 8f6f 	isb	sy
 8109c7c:	f3bf 8f4f 	dsb	sy
 8109c80:	60bb      	str	r3, [r7, #8]
}
 8109c82:	bf00      	nop
 8109c84:	bf00      	nop
 8109c86:	e7fd      	b.n	8109c84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8109c88:	f7ff fec6 	bl	8109a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109c8c:	68fb      	ldr	r3, [r7, #12]
 8109c8e:	681a      	ldr	r2, [r3, #0]
 8109c90:	68fb      	ldr	r3, [r7, #12]
 8109c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109c94:	68f9      	ldr	r1, [r7, #12]
 8109c96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8109c98:	fb01 f303 	mul.w	r3, r1, r3
 8109c9c:	441a      	add	r2, r3
 8109c9e:	68fb      	ldr	r3, [r7, #12]
 8109ca0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8109ca2:	68fb      	ldr	r3, [r7, #12]
 8109ca4:	2200      	movs	r2, #0
 8109ca6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8109ca8:	68fb      	ldr	r3, [r7, #12]
 8109caa:	681a      	ldr	r2, [r3, #0]
 8109cac:	68fb      	ldr	r3, [r7, #12]
 8109cae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109cb0:	68fb      	ldr	r3, [r7, #12]
 8109cb2:	681a      	ldr	r2, [r3, #0]
 8109cb4:	68fb      	ldr	r3, [r7, #12]
 8109cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109cb8:	3b01      	subs	r3, #1
 8109cba:	68f9      	ldr	r1, [r7, #12]
 8109cbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8109cbe:	fb01 f303 	mul.w	r3, r1, r3
 8109cc2:	441a      	add	r2, r3
 8109cc4:	68fb      	ldr	r3, [r7, #12]
 8109cc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8109cc8:	68fb      	ldr	r3, [r7, #12]
 8109cca:	22ff      	movs	r2, #255	@ 0xff
 8109ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8109cd0:	68fb      	ldr	r3, [r7, #12]
 8109cd2:	22ff      	movs	r2, #255	@ 0xff
 8109cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8109cd8:	683b      	ldr	r3, [r7, #0]
 8109cda:	2b00      	cmp	r3, #0
 8109cdc:	d114      	bne.n	8109d08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109cde:	68fb      	ldr	r3, [r7, #12]
 8109ce0:	691b      	ldr	r3, [r3, #16]
 8109ce2:	2b00      	cmp	r3, #0
 8109ce4:	d01a      	beq.n	8109d1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109ce6:	68fb      	ldr	r3, [r7, #12]
 8109ce8:	3310      	adds	r3, #16
 8109cea:	4618      	mov	r0, r3
 8109cec:	f001 f9ea 	bl	810b0c4 <xTaskRemoveFromEventList>
 8109cf0:	4603      	mov	r3, r0
 8109cf2:	2b00      	cmp	r3, #0
 8109cf4:	d012      	beq.n	8109d1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8109cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8109d2c <xQueueGenericReset+0xd0>)
 8109cf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109cfc:	601a      	str	r2, [r3, #0]
 8109cfe:	f3bf 8f4f 	dsb	sy
 8109d02:	f3bf 8f6f 	isb	sy
 8109d06:	e009      	b.n	8109d1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8109d08:	68fb      	ldr	r3, [r7, #12]
 8109d0a:	3310      	adds	r3, #16
 8109d0c:	4618      	mov	r0, r3
 8109d0e:	f7ff fca1 	bl	8109654 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8109d12:	68fb      	ldr	r3, [r7, #12]
 8109d14:	3324      	adds	r3, #36	@ 0x24
 8109d16:	4618      	mov	r0, r3
 8109d18:	f7ff fc9c 	bl	8109654 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8109d1c:	f7ff feae 	bl	8109a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8109d20:	2301      	movs	r3, #1
}
 8109d22:	4618      	mov	r0, r3
 8109d24:	3710      	adds	r7, #16
 8109d26:	46bd      	mov	sp, r7
 8109d28:	bd80      	pop	{r7, pc}
 8109d2a:	bf00      	nop
 8109d2c:	e000ed04 	.word	0xe000ed04

08109d30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8109d30:	b580      	push	{r7, lr}
 8109d32:	b08e      	sub	sp, #56	@ 0x38
 8109d34:	af02      	add	r7, sp, #8
 8109d36:	60f8      	str	r0, [r7, #12]
 8109d38:	60b9      	str	r1, [r7, #8]
 8109d3a:	607a      	str	r2, [r7, #4]
 8109d3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109d3e:	68fb      	ldr	r3, [r7, #12]
 8109d40:	2b00      	cmp	r3, #0
 8109d42:	d10b      	bne.n	8109d5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8109d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109d48:	f383 8811 	msr	BASEPRI, r3
 8109d4c:	f3bf 8f6f 	isb	sy
 8109d50:	f3bf 8f4f 	dsb	sy
 8109d54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8109d56:	bf00      	nop
 8109d58:	bf00      	nop
 8109d5a:	e7fd      	b.n	8109d58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8109d5c:	683b      	ldr	r3, [r7, #0]
 8109d5e:	2b00      	cmp	r3, #0
 8109d60:	d10b      	bne.n	8109d7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8109d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109d66:	f383 8811 	msr	BASEPRI, r3
 8109d6a:	f3bf 8f6f 	isb	sy
 8109d6e:	f3bf 8f4f 	dsb	sy
 8109d72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8109d74:	bf00      	nop
 8109d76:	bf00      	nop
 8109d78:	e7fd      	b.n	8109d76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	2b00      	cmp	r3, #0
 8109d7e:	d002      	beq.n	8109d86 <xQueueGenericCreateStatic+0x56>
 8109d80:	68bb      	ldr	r3, [r7, #8]
 8109d82:	2b00      	cmp	r3, #0
 8109d84:	d001      	beq.n	8109d8a <xQueueGenericCreateStatic+0x5a>
 8109d86:	2301      	movs	r3, #1
 8109d88:	e000      	b.n	8109d8c <xQueueGenericCreateStatic+0x5c>
 8109d8a:	2300      	movs	r3, #0
 8109d8c:	2b00      	cmp	r3, #0
 8109d8e:	d10b      	bne.n	8109da8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8109d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109d94:	f383 8811 	msr	BASEPRI, r3
 8109d98:	f3bf 8f6f 	isb	sy
 8109d9c:	f3bf 8f4f 	dsb	sy
 8109da0:	623b      	str	r3, [r7, #32]
}
 8109da2:	bf00      	nop
 8109da4:	bf00      	nop
 8109da6:	e7fd      	b.n	8109da4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8109da8:	687b      	ldr	r3, [r7, #4]
 8109daa:	2b00      	cmp	r3, #0
 8109dac:	d102      	bne.n	8109db4 <xQueueGenericCreateStatic+0x84>
 8109dae:	68bb      	ldr	r3, [r7, #8]
 8109db0:	2b00      	cmp	r3, #0
 8109db2:	d101      	bne.n	8109db8 <xQueueGenericCreateStatic+0x88>
 8109db4:	2301      	movs	r3, #1
 8109db6:	e000      	b.n	8109dba <xQueueGenericCreateStatic+0x8a>
 8109db8:	2300      	movs	r3, #0
 8109dba:	2b00      	cmp	r3, #0
 8109dbc:	d10b      	bne.n	8109dd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8109dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109dc2:	f383 8811 	msr	BASEPRI, r3
 8109dc6:	f3bf 8f6f 	isb	sy
 8109dca:	f3bf 8f4f 	dsb	sy
 8109dce:	61fb      	str	r3, [r7, #28]
}
 8109dd0:	bf00      	nop
 8109dd2:	bf00      	nop
 8109dd4:	e7fd      	b.n	8109dd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8109dd6:	2350      	movs	r3, #80	@ 0x50
 8109dd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8109dda:	697b      	ldr	r3, [r7, #20]
 8109ddc:	2b50      	cmp	r3, #80	@ 0x50
 8109dde:	d00b      	beq.n	8109df8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8109de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109de4:	f383 8811 	msr	BASEPRI, r3
 8109de8:	f3bf 8f6f 	isb	sy
 8109dec:	f3bf 8f4f 	dsb	sy
 8109df0:	61bb      	str	r3, [r7, #24]
}
 8109df2:	bf00      	nop
 8109df4:	bf00      	nop
 8109df6:	e7fd      	b.n	8109df4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8109df8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109dfa:	683b      	ldr	r3, [r7, #0]
 8109dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8109dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109e00:	2b00      	cmp	r3, #0
 8109e02:	d00d      	beq.n	8109e20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8109e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109e06:	2201      	movs	r2, #1
 8109e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109e0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8109e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109e12:	9300      	str	r3, [sp, #0]
 8109e14:	4613      	mov	r3, r2
 8109e16:	687a      	ldr	r2, [r7, #4]
 8109e18:	68b9      	ldr	r1, [r7, #8]
 8109e1a:	68f8      	ldr	r0, [r7, #12]
 8109e1c:	f000 f840 	bl	8109ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8109e22:	4618      	mov	r0, r3
 8109e24:	3730      	adds	r7, #48	@ 0x30
 8109e26:	46bd      	mov	sp, r7
 8109e28:	bd80      	pop	{r7, pc}

08109e2a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8109e2a:	b580      	push	{r7, lr}
 8109e2c:	b08a      	sub	sp, #40	@ 0x28
 8109e2e:	af02      	add	r7, sp, #8
 8109e30:	60f8      	str	r0, [r7, #12]
 8109e32:	60b9      	str	r1, [r7, #8]
 8109e34:	4613      	mov	r3, r2
 8109e36:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8109e38:	68fb      	ldr	r3, [r7, #12]
 8109e3a:	2b00      	cmp	r3, #0
 8109e3c:	d10b      	bne.n	8109e56 <xQueueGenericCreate+0x2c>
	__asm volatile
 8109e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109e42:	f383 8811 	msr	BASEPRI, r3
 8109e46:	f3bf 8f6f 	isb	sy
 8109e4a:	f3bf 8f4f 	dsb	sy
 8109e4e:	613b      	str	r3, [r7, #16]
}
 8109e50:	bf00      	nop
 8109e52:	bf00      	nop
 8109e54:	e7fd      	b.n	8109e52 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109e56:	68fb      	ldr	r3, [r7, #12]
 8109e58:	68ba      	ldr	r2, [r7, #8]
 8109e5a:	fb02 f303 	mul.w	r3, r2, r3
 8109e5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8109e60:	69fb      	ldr	r3, [r7, #28]
 8109e62:	3350      	adds	r3, #80	@ 0x50
 8109e64:	4618      	mov	r0, r3
 8109e66:	f7ff fa07 	bl	8109278 <pvPortMalloc>
 8109e6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8109e6c:	69bb      	ldr	r3, [r7, #24]
 8109e6e:	2b00      	cmp	r3, #0
 8109e70:	d011      	beq.n	8109e96 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8109e72:	69bb      	ldr	r3, [r7, #24]
 8109e74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8109e76:	697b      	ldr	r3, [r7, #20]
 8109e78:	3350      	adds	r3, #80	@ 0x50
 8109e7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8109e7c:	69bb      	ldr	r3, [r7, #24]
 8109e7e:	2200      	movs	r2, #0
 8109e80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8109e84:	79fa      	ldrb	r2, [r7, #7]
 8109e86:	69bb      	ldr	r3, [r7, #24]
 8109e88:	9300      	str	r3, [sp, #0]
 8109e8a:	4613      	mov	r3, r2
 8109e8c:	697a      	ldr	r2, [r7, #20]
 8109e8e:	68b9      	ldr	r1, [r7, #8]
 8109e90:	68f8      	ldr	r0, [r7, #12]
 8109e92:	f000 f805 	bl	8109ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8109e96:	69bb      	ldr	r3, [r7, #24]
	}
 8109e98:	4618      	mov	r0, r3
 8109e9a:	3720      	adds	r7, #32
 8109e9c:	46bd      	mov	sp, r7
 8109e9e:	bd80      	pop	{r7, pc}

08109ea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8109ea0:	b580      	push	{r7, lr}
 8109ea2:	b084      	sub	sp, #16
 8109ea4:	af00      	add	r7, sp, #0
 8109ea6:	60f8      	str	r0, [r7, #12]
 8109ea8:	60b9      	str	r1, [r7, #8]
 8109eaa:	607a      	str	r2, [r7, #4]
 8109eac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8109eae:	68bb      	ldr	r3, [r7, #8]
 8109eb0:	2b00      	cmp	r3, #0
 8109eb2:	d103      	bne.n	8109ebc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8109eb4:	69bb      	ldr	r3, [r7, #24]
 8109eb6:	69ba      	ldr	r2, [r7, #24]
 8109eb8:	601a      	str	r2, [r3, #0]
 8109eba:	e002      	b.n	8109ec2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8109ebc:	69bb      	ldr	r3, [r7, #24]
 8109ebe:	687a      	ldr	r2, [r7, #4]
 8109ec0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8109ec2:	69bb      	ldr	r3, [r7, #24]
 8109ec4:	68fa      	ldr	r2, [r7, #12]
 8109ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8109ec8:	69bb      	ldr	r3, [r7, #24]
 8109eca:	68ba      	ldr	r2, [r7, #8]
 8109ecc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8109ece:	2101      	movs	r1, #1
 8109ed0:	69b8      	ldr	r0, [r7, #24]
 8109ed2:	f7ff fec3 	bl	8109c5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8109ed6:	69bb      	ldr	r3, [r7, #24]
 8109ed8:	78fa      	ldrb	r2, [r7, #3]
 8109eda:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8109ede:	bf00      	nop
 8109ee0:	3710      	adds	r7, #16
 8109ee2:	46bd      	mov	sp, r7
 8109ee4:	bd80      	pop	{r7, pc}
	...

08109ee8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8109ee8:	b580      	push	{r7, lr}
 8109eea:	b08e      	sub	sp, #56	@ 0x38
 8109eec:	af00      	add	r7, sp, #0
 8109eee:	60f8      	str	r0, [r7, #12]
 8109ef0:	60b9      	str	r1, [r7, #8]
 8109ef2:	607a      	str	r2, [r7, #4]
 8109ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8109ef6:	2300      	movs	r3, #0
 8109ef8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109efa:	68fb      	ldr	r3, [r7, #12]
 8109efc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8109efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f00:	2b00      	cmp	r3, #0
 8109f02:	d10b      	bne.n	8109f1c <xQueueGenericSend+0x34>
	__asm volatile
 8109f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109f08:	f383 8811 	msr	BASEPRI, r3
 8109f0c:	f3bf 8f6f 	isb	sy
 8109f10:	f3bf 8f4f 	dsb	sy
 8109f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8109f16:	bf00      	nop
 8109f18:	bf00      	nop
 8109f1a:	e7fd      	b.n	8109f18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8109f1c:	68bb      	ldr	r3, [r7, #8]
 8109f1e:	2b00      	cmp	r3, #0
 8109f20:	d103      	bne.n	8109f2a <xQueueGenericSend+0x42>
 8109f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109f26:	2b00      	cmp	r3, #0
 8109f28:	d101      	bne.n	8109f2e <xQueueGenericSend+0x46>
 8109f2a:	2301      	movs	r3, #1
 8109f2c:	e000      	b.n	8109f30 <xQueueGenericSend+0x48>
 8109f2e:	2300      	movs	r3, #0
 8109f30:	2b00      	cmp	r3, #0
 8109f32:	d10b      	bne.n	8109f4c <xQueueGenericSend+0x64>
	__asm volatile
 8109f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109f38:	f383 8811 	msr	BASEPRI, r3
 8109f3c:	f3bf 8f6f 	isb	sy
 8109f40:	f3bf 8f4f 	dsb	sy
 8109f44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8109f46:	bf00      	nop
 8109f48:	bf00      	nop
 8109f4a:	e7fd      	b.n	8109f48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8109f4c:	683b      	ldr	r3, [r7, #0]
 8109f4e:	2b02      	cmp	r3, #2
 8109f50:	d103      	bne.n	8109f5a <xQueueGenericSend+0x72>
 8109f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109f56:	2b01      	cmp	r3, #1
 8109f58:	d101      	bne.n	8109f5e <xQueueGenericSend+0x76>
 8109f5a:	2301      	movs	r3, #1
 8109f5c:	e000      	b.n	8109f60 <xQueueGenericSend+0x78>
 8109f5e:	2300      	movs	r3, #0
 8109f60:	2b00      	cmp	r3, #0
 8109f62:	d10b      	bne.n	8109f7c <xQueueGenericSend+0x94>
	__asm volatile
 8109f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109f68:	f383 8811 	msr	BASEPRI, r3
 8109f6c:	f3bf 8f6f 	isb	sy
 8109f70:	f3bf 8f4f 	dsb	sy
 8109f74:	623b      	str	r3, [r7, #32]
}
 8109f76:	bf00      	nop
 8109f78:	bf00      	nop
 8109f7a:	e7fd      	b.n	8109f78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8109f7c:	f001 fa62 	bl	810b444 <xTaskGetSchedulerState>
 8109f80:	4603      	mov	r3, r0
 8109f82:	2b00      	cmp	r3, #0
 8109f84:	d102      	bne.n	8109f8c <xQueueGenericSend+0xa4>
 8109f86:	687b      	ldr	r3, [r7, #4]
 8109f88:	2b00      	cmp	r3, #0
 8109f8a:	d101      	bne.n	8109f90 <xQueueGenericSend+0xa8>
 8109f8c:	2301      	movs	r3, #1
 8109f8e:	e000      	b.n	8109f92 <xQueueGenericSend+0xaa>
 8109f90:	2300      	movs	r3, #0
 8109f92:	2b00      	cmp	r3, #0
 8109f94:	d10b      	bne.n	8109fae <xQueueGenericSend+0xc6>
	__asm volatile
 8109f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8109f9a:	f383 8811 	msr	BASEPRI, r3
 8109f9e:	f3bf 8f6f 	isb	sy
 8109fa2:	f3bf 8f4f 	dsb	sy
 8109fa6:	61fb      	str	r3, [r7, #28]
}
 8109fa8:	bf00      	nop
 8109faa:	bf00      	nop
 8109fac:	e7fd      	b.n	8109faa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109fae:	f7ff fd33 	bl	8109a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8109fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8109fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109fba:	429a      	cmp	r2, r3
 8109fbc:	d302      	bcc.n	8109fc4 <xQueueGenericSend+0xdc>
 8109fbe:	683b      	ldr	r3, [r7, #0]
 8109fc0:	2b02      	cmp	r3, #2
 8109fc2:	d129      	bne.n	810a018 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8109fc4:	683a      	ldr	r2, [r7, #0]
 8109fc6:	68b9      	ldr	r1, [r7, #8]
 8109fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8109fca:	f000 fa91 	bl	810a4f0 <prvCopyDataToQueue>
 8109fce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109fd4:	2b00      	cmp	r3, #0
 8109fd6:	d010      	beq.n	8109ffa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109fda:	3324      	adds	r3, #36	@ 0x24
 8109fdc:	4618      	mov	r0, r3
 8109fde:	f001 f871 	bl	810b0c4 <xTaskRemoveFromEventList>
 8109fe2:	4603      	mov	r3, r0
 8109fe4:	2b00      	cmp	r3, #0
 8109fe6:	d013      	beq.n	810a010 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8109fe8:	4b3f      	ldr	r3, [pc, #252]	@ (810a0e8 <xQueueGenericSend+0x200>)
 8109fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8109fee:	601a      	str	r2, [r3, #0]
 8109ff0:	f3bf 8f4f 	dsb	sy
 8109ff4:	f3bf 8f6f 	isb	sy
 8109ff8:	e00a      	b.n	810a010 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8109ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109ffc:	2b00      	cmp	r3, #0
 8109ffe:	d007      	beq.n	810a010 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810a000:	4b39      	ldr	r3, [pc, #228]	@ (810a0e8 <xQueueGenericSend+0x200>)
 810a002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a006:	601a      	str	r2, [r3, #0]
 810a008:	f3bf 8f4f 	dsb	sy
 810a00c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810a010:	f7ff fd34 	bl	8109a7c <vPortExitCritical>
				return pdPASS;
 810a014:	2301      	movs	r3, #1
 810a016:	e063      	b.n	810a0e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a018:	687b      	ldr	r3, [r7, #4]
 810a01a:	2b00      	cmp	r3, #0
 810a01c:	d103      	bne.n	810a026 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810a01e:	f7ff fd2d 	bl	8109a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810a022:	2300      	movs	r3, #0
 810a024:	e05c      	b.n	810a0e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a028:	2b00      	cmp	r3, #0
 810a02a:	d106      	bne.n	810a03a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a02c:	f107 0314 	add.w	r3, r7, #20
 810a030:	4618      	mov	r0, r3
 810a032:	f001 f8ab 	bl	810b18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a036:	2301      	movs	r3, #1
 810a038:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a03a:	f7ff fd1f 	bl	8109a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a03e:	f000 fe09 	bl	810ac54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a042:	f7ff fce9 	bl	8109a18 <vPortEnterCritical>
 810a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810a04c:	b25b      	sxtb	r3, r3
 810a04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a052:	d103      	bne.n	810a05c <xQueueGenericSend+0x174>
 810a054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a056:	2200      	movs	r2, #0
 810a058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a05e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810a062:	b25b      	sxtb	r3, r3
 810a064:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a068:	d103      	bne.n	810a072 <xQueueGenericSend+0x18a>
 810a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a06c:	2200      	movs	r2, #0
 810a06e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a072:	f7ff fd03 	bl	8109a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a076:	1d3a      	adds	r2, r7, #4
 810a078:	f107 0314 	add.w	r3, r7, #20
 810a07c:	4611      	mov	r1, r2
 810a07e:	4618      	mov	r0, r3
 810a080:	f001 f89a 	bl	810b1b8 <xTaskCheckForTimeOut>
 810a084:	4603      	mov	r3, r0
 810a086:	2b00      	cmp	r3, #0
 810a088:	d124      	bne.n	810a0d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810a08a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a08c:	f000 fb28 	bl	810a6e0 <prvIsQueueFull>
 810a090:	4603      	mov	r3, r0
 810a092:	2b00      	cmp	r3, #0
 810a094:	d018      	beq.n	810a0c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a098:	3310      	adds	r3, #16
 810a09a:	687a      	ldr	r2, [r7, #4]
 810a09c:	4611      	mov	r1, r2
 810a09e:	4618      	mov	r0, r3
 810a0a0:	f000 ffbe 	bl	810b020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810a0a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a0a6:	f000 fab3 	bl	810a610 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810a0aa:	f000 fde1 	bl	810ac70 <xTaskResumeAll>
 810a0ae:	4603      	mov	r3, r0
 810a0b0:	2b00      	cmp	r3, #0
 810a0b2:	f47f af7c 	bne.w	8109fae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810a0b6:	4b0c      	ldr	r3, [pc, #48]	@ (810a0e8 <xQueueGenericSend+0x200>)
 810a0b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a0bc:	601a      	str	r2, [r3, #0]
 810a0be:	f3bf 8f4f 	dsb	sy
 810a0c2:	f3bf 8f6f 	isb	sy
 810a0c6:	e772      	b.n	8109fae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810a0c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a0ca:	f000 faa1 	bl	810a610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a0ce:	f000 fdcf 	bl	810ac70 <xTaskResumeAll>
 810a0d2:	e76c      	b.n	8109fae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810a0d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a0d6:	f000 fa9b 	bl	810a610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a0da:	f000 fdc9 	bl	810ac70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810a0de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810a0e0:	4618      	mov	r0, r3
 810a0e2:	3738      	adds	r7, #56	@ 0x38
 810a0e4:	46bd      	mov	sp, r7
 810a0e6:	bd80      	pop	{r7, pc}
 810a0e8:	e000ed04 	.word	0xe000ed04

0810a0ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810a0ec:	b580      	push	{r7, lr}
 810a0ee:	b090      	sub	sp, #64	@ 0x40
 810a0f0:	af00      	add	r7, sp, #0
 810a0f2:	60f8      	str	r0, [r7, #12]
 810a0f4:	60b9      	str	r1, [r7, #8]
 810a0f6:	607a      	str	r2, [r7, #4]
 810a0f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810a0fa:	68fb      	ldr	r3, [r7, #12]
 810a0fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a100:	2b00      	cmp	r3, #0
 810a102:	d10b      	bne.n	810a11c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810a104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a108:	f383 8811 	msr	BASEPRI, r3
 810a10c:	f3bf 8f6f 	isb	sy
 810a110:	f3bf 8f4f 	dsb	sy
 810a114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810a116:	bf00      	nop
 810a118:	bf00      	nop
 810a11a:	e7fd      	b.n	810a118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a11c:	68bb      	ldr	r3, [r7, #8]
 810a11e:	2b00      	cmp	r3, #0
 810a120:	d103      	bne.n	810a12a <xQueueGenericSendFromISR+0x3e>
 810a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a126:	2b00      	cmp	r3, #0
 810a128:	d101      	bne.n	810a12e <xQueueGenericSendFromISR+0x42>
 810a12a:	2301      	movs	r3, #1
 810a12c:	e000      	b.n	810a130 <xQueueGenericSendFromISR+0x44>
 810a12e:	2300      	movs	r3, #0
 810a130:	2b00      	cmp	r3, #0
 810a132:	d10b      	bne.n	810a14c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a138:	f383 8811 	msr	BASEPRI, r3
 810a13c:	f3bf 8f6f 	isb	sy
 810a140:	f3bf 8f4f 	dsb	sy
 810a144:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810a146:	bf00      	nop
 810a148:	bf00      	nop
 810a14a:	e7fd      	b.n	810a148 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810a14c:	683b      	ldr	r3, [r7, #0]
 810a14e:	2b02      	cmp	r3, #2
 810a150:	d103      	bne.n	810a15a <xQueueGenericSendFromISR+0x6e>
 810a152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a156:	2b01      	cmp	r3, #1
 810a158:	d101      	bne.n	810a15e <xQueueGenericSendFromISR+0x72>
 810a15a:	2301      	movs	r3, #1
 810a15c:	e000      	b.n	810a160 <xQueueGenericSendFromISR+0x74>
 810a15e:	2300      	movs	r3, #0
 810a160:	2b00      	cmp	r3, #0
 810a162:	d10b      	bne.n	810a17c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a168:	f383 8811 	msr	BASEPRI, r3
 810a16c:	f3bf 8f6f 	isb	sy
 810a170:	f3bf 8f4f 	dsb	sy
 810a174:	623b      	str	r3, [r7, #32]
}
 810a176:	bf00      	nop
 810a178:	bf00      	nop
 810a17a:	e7fd      	b.n	810a178 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a17c:	f7ff fd2c 	bl	8109bd8 <vPortValidateInterruptPriority>
	__asm volatile
 810a180:	f3ef 8211 	mrs	r2, BASEPRI
 810a184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a188:	f383 8811 	msr	BASEPRI, r3
 810a18c:	f3bf 8f6f 	isb	sy
 810a190:	f3bf 8f4f 	dsb	sy
 810a194:	61fa      	str	r2, [r7, #28]
 810a196:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810a198:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810a19a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810a19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a19e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810a1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a1a4:	429a      	cmp	r2, r3
 810a1a6:	d302      	bcc.n	810a1ae <xQueueGenericSendFromISR+0xc2>
 810a1a8:	683b      	ldr	r3, [r7, #0]
 810a1aa:	2b02      	cmp	r3, #2
 810a1ac:	d12f      	bne.n	810a20e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810a1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810a1b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810a1be:	683a      	ldr	r2, [r7, #0]
 810a1c0:	68b9      	ldr	r1, [r7, #8]
 810a1c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810a1c4:	f000 f994 	bl	810a4f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810a1c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810a1cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a1d0:	d112      	bne.n	810a1f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a1d6:	2b00      	cmp	r3, #0
 810a1d8:	d016      	beq.n	810a208 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a1dc:	3324      	adds	r3, #36	@ 0x24
 810a1de:	4618      	mov	r0, r3
 810a1e0:	f000 ff70 	bl	810b0c4 <xTaskRemoveFromEventList>
 810a1e4:	4603      	mov	r3, r0
 810a1e6:	2b00      	cmp	r3, #0
 810a1e8:	d00e      	beq.n	810a208 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810a1ea:	687b      	ldr	r3, [r7, #4]
 810a1ec:	2b00      	cmp	r3, #0
 810a1ee:	d00b      	beq.n	810a208 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810a1f0:	687b      	ldr	r3, [r7, #4]
 810a1f2:	2201      	movs	r2, #1
 810a1f4:	601a      	str	r2, [r3, #0]
 810a1f6:	e007      	b.n	810a208 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810a1f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810a1fc:	3301      	adds	r3, #1
 810a1fe:	b2db      	uxtb	r3, r3
 810a200:	b25a      	sxtb	r2, r3
 810a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810a208:	2301      	movs	r3, #1
 810a20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810a20c:	e001      	b.n	810a212 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810a20e:	2300      	movs	r3, #0
 810a210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810a212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a214:	617b      	str	r3, [r7, #20]
	__asm volatile
 810a216:	697b      	ldr	r3, [r7, #20]
 810a218:	f383 8811 	msr	BASEPRI, r3
}
 810a21c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810a220:	4618      	mov	r0, r3
 810a222:	3740      	adds	r7, #64	@ 0x40
 810a224:	46bd      	mov	sp, r7
 810a226:	bd80      	pop	{r7, pc}

0810a228 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810a228:	b580      	push	{r7, lr}
 810a22a:	b08c      	sub	sp, #48	@ 0x30
 810a22c:	af00      	add	r7, sp, #0
 810a22e:	60f8      	str	r0, [r7, #12]
 810a230:	60b9      	str	r1, [r7, #8]
 810a232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810a234:	2300      	movs	r3, #0
 810a236:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810a238:	68fb      	ldr	r3, [r7, #12]
 810a23a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a23e:	2b00      	cmp	r3, #0
 810a240:	d10b      	bne.n	810a25a <xQueueReceive+0x32>
	__asm volatile
 810a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a246:	f383 8811 	msr	BASEPRI, r3
 810a24a:	f3bf 8f6f 	isb	sy
 810a24e:	f3bf 8f4f 	dsb	sy
 810a252:	623b      	str	r3, [r7, #32]
}
 810a254:	bf00      	nop
 810a256:	bf00      	nop
 810a258:	e7fd      	b.n	810a256 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a25a:	68bb      	ldr	r3, [r7, #8]
 810a25c:	2b00      	cmp	r3, #0
 810a25e:	d103      	bne.n	810a268 <xQueueReceive+0x40>
 810a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a264:	2b00      	cmp	r3, #0
 810a266:	d101      	bne.n	810a26c <xQueueReceive+0x44>
 810a268:	2301      	movs	r3, #1
 810a26a:	e000      	b.n	810a26e <xQueueReceive+0x46>
 810a26c:	2300      	movs	r3, #0
 810a26e:	2b00      	cmp	r3, #0
 810a270:	d10b      	bne.n	810a28a <xQueueReceive+0x62>
	__asm volatile
 810a272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a276:	f383 8811 	msr	BASEPRI, r3
 810a27a:	f3bf 8f6f 	isb	sy
 810a27e:	f3bf 8f4f 	dsb	sy
 810a282:	61fb      	str	r3, [r7, #28]
}
 810a284:	bf00      	nop
 810a286:	bf00      	nop
 810a288:	e7fd      	b.n	810a286 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810a28a:	f001 f8db 	bl	810b444 <xTaskGetSchedulerState>
 810a28e:	4603      	mov	r3, r0
 810a290:	2b00      	cmp	r3, #0
 810a292:	d102      	bne.n	810a29a <xQueueReceive+0x72>
 810a294:	687b      	ldr	r3, [r7, #4]
 810a296:	2b00      	cmp	r3, #0
 810a298:	d101      	bne.n	810a29e <xQueueReceive+0x76>
 810a29a:	2301      	movs	r3, #1
 810a29c:	e000      	b.n	810a2a0 <xQueueReceive+0x78>
 810a29e:	2300      	movs	r3, #0
 810a2a0:	2b00      	cmp	r3, #0
 810a2a2:	d10b      	bne.n	810a2bc <xQueueReceive+0x94>
	__asm volatile
 810a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a2a8:	f383 8811 	msr	BASEPRI, r3
 810a2ac:	f3bf 8f6f 	isb	sy
 810a2b0:	f3bf 8f4f 	dsb	sy
 810a2b4:	61bb      	str	r3, [r7, #24]
}
 810a2b6:	bf00      	nop
 810a2b8:	bf00      	nop
 810a2ba:	e7fd      	b.n	810a2b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810a2bc:	f7ff fbac 	bl	8109a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a2c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a2c8:	2b00      	cmp	r3, #0
 810a2ca:	d01f      	beq.n	810a30c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810a2cc:	68b9      	ldr	r1, [r7, #8]
 810a2ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a2d0:	f000 f978 	bl	810a5c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a2d6:	1e5a      	subs	r2, r3, #1
 810a2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a2da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a2de:	691b      	ldr	r3, [r3, #16]
 810a2e0:	2b00      	cmp	r3, #0
 810a2e2:	d00f      	beq.n	810a304 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a2e6:	3310      	adds	r3, #16
 810a2e8:	4618      	mov	r0, r3
 810a2ea:	f000 feeb 	bl	810b0c4 <xTaskRemoveFromEventList>
 810a2ee:	4603      	mov	r3, r0
 810a2f0:	2b00      	cmp	r3, #0
 810a2f2:	d007      	beq.n	810a304 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810a2f4:	4b3c      	ldr	r3, [pc, #240]	@ (810a3e8 <xQueueReceive+0x1c0>)
 810a2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a2fa:	601a      	str	r2, [r3, #0]
 810a2fc:	f3bf 8f4f 	dsb	sy
 810a300:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810a304:	f7ff fbba 	bl	8109a7c <vPortExitCritical>
				return pdPASS;
 810a308:	2301      	movs	r3, #1
 810a30a:	e069      	b.n	810a3e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a30c:	687b      	ldr	r3, [r7, #4]
 810a30e:	2b00      	cmp	r3, #0
 810a310:	d103      	bne.n	810a31a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810a312:	f7ff fbb3 	bl	8109a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810a316:	2300      	movs	r3, #0
 810a318:	e062      	b.n	810a3e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a31c:	2b00      	cmp	r3, #0
 810a31e:	d106      	bne.n	810a32e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a320:	f107 0310 	add.w	r3, r7, #16
 810a324:	4618      	mov	r0, r3
 810a326:	f000 ff31 	bl	810b18c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a32a:	2301      	movs	r3, #1
 810a32c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a32e:	f7ff fba5 	bl	8109a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a332:	f000 fc8f 	bl	810ac54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a336:	f7ff fb6f 	bl	8109a18 <vPortEnterCritical>
 810a33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a33c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810a340:	b25b      	sxtb	r3, r3
 810a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a346:	d103      	bne.n	810a350 <xQueueReceive+0x128>
 810a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a34a:	2200      	movs	r2, #0
 810a34c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810a356:	b25b      	sxtb	r3, r3
 810a358:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a35c:	d103      	bne.n	810a366 <xQueueReceive+0x13e>
 810a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a360:	2200      	movs	r2, #0
 810a362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a366:	f7ff fb89 	bl	8109a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a36a:	1d3a      	adds	r2, r7, #4
 810a36c:	f107 0310 	add.w	r3, r7, #16
 810a370:	4611      	mov	r1, r2
 810a372:	4618      	mov	r0, r3
 810a374:	f000 ff20 	bl	810b1b8 <xTaskCheckForTimeOut>
 810a378:	4603      	mov	r3, r0
 810a37a:	2b00      	cmp	r3, #0
 810a37c:	d123      	bne.n	810a3c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a37e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a380:	f000 f998 	bl	810a6b4 <prvIsQueueEmpty>
 810a384:	4603      	mov	r3, r0
 810a386:	2b00      	cmp	r3, #0
 810a388:	d017      	beq.n	810a3ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a38c:	3324      	adds	r3, #36	@ 0x24
 810a38e:	687a      	ldr	r2, [r7, #4]
 810a390:	4611      	mov	r1, r2
 810a392:	4618      	mov	r0, r3
 810a394:	f000 fe44 	bl	810b020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810a398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a39a:	f000 f939 	bl	810a610 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810a39e:	f000 fc67 	bl	810ac70 <xTaskResumeAll>
 810a3a2:	4603      	mov	r3, r0
 810a3a4:	2b00      	cmp	r3, #0
 810a3a6:	d189      	bne.n	810a2bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810a3a8:	4b0f      	ldr	r3, [pc, #60]	@ (810a3e8 <xQueueReceive+0x1c0>)
 810a3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810a3ae:	601a      	str	r2, [r3, #0]
 810a3b0:	f3bf 8f4f 	dsb	sy
 810a3b4:	f3bf 8f6f 	isb	sy
 810a3b8:	e780      	b.n	810a2bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810a3ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a3bc:	f000 f928 	bl	810a610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a3c0:	f000 fc56 	bl	810ac70 <xTaskResumeAll>
 810a3c4:	e77a      	b.n	810a2bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810a3c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a3c8:	f000 f922 	bl	810a610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a3cc:	f000 fc50 	bl	810ac70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a3d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a3d2:	f000 f96f 	bl	810a6b4 <prvIsQueueEmpty>
 810a3d6:	4603      	mov	r3, r0
 810a3d8:	2b00      	cmp	r3, #0
 810a3da:	f43f af6f 	beq.w	810a2bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810a3de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810a3e0:	4618      	mov	r0, r3
 810a3e2:	3730      	adds	r7, #48	@ 0x30
 810a3e4:	46bd      	mov	sp, r7
 810a3e6:	bd80      	pop	{r7, pc}
 810a3e8:	e000ed04 	.word	0xe000ed04

0810a3ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810a3ec:	b580      	push	{r7, lr}
 810a3ee:	b08e      	sub	sp, #56	@ 0x38
 810a3f0:	af00      	add	r7, sp, #0
 810a3f2:	60f8      	str	r0, [r7, #12]
 810a3f4:	60b9      	str	r1, [r7, #8]
 810a3f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810a3f8:	68fb      	ldr	r3, [r7, #12]
 810a3fa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810a3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a3fe:	2b00      	cmp	r3, #0
 810a400:	d10b      	bne.n	810a41a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 810a402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a406:	f383 8811 	msr	BASEPRI, r3
 810a40a:	f3bf 8f6f 	isb	sy
 810a40e:	f3bf 8f4f 	dsb	sy
 810a412:	623b      	str	r3, [r7, #32]
}
 810a414:	bf00      	nop
 810a416:	bf00      	nop
 810a418:	e7fd      	b.n	810a416 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a41a:	68bb      	ldr	r3, [r7, #8]
 810a41c:	2b00      	cmp	r3, #0
 810a41e:	d103      	bne.n	810a428 <xQueueReceiveFromISR+0x3c>
 810a420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a424:	2b00      	cmp	r3, #0
 810a426:	d101      	bne.n	810a42c <xQueueReceiveFromISR+0x40>
 810a428:	2301      	movs	r3, #1
 810a42a:	e000      	b.n	810a42e <xQueueReceiveFromISR+0x42>
 810a42c:	2300      	movs	r3, #0
 810a42e:	2b00      	cmp	r3, #0
 810a430:	d10b      	bne.n	810a44a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 810a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a436:	f383 8811 	msr	BASEPRI, r3
 810a43a:	f3bf 8f6f 	isb	sy
 810a43e:	f3bf 8f4f 	dsb	sy
 810a442:	61fb      	str	r3, [r7, #28]
}
 810a444:	bf00      	nop
 810a446:	bf00      	nop
 810a448:	e7fd      	b.n	810a446 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a44a:	f7ff fbc5 	bl	8109bd8 <vPortValidateInterruptPriority>
	__asm volatile
 810a44e:	f3ef 8211 	mrs	r2, BASEPRI
 810a452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a456:	f383 8811 	msr	BASEPRI, r3
 810a45a:	f3bf 8f6f 	isb	sy
 810a45e:	f3bf 8f4f 	dsb	sy
 810a462:	61ba      	str	r2, [r7, #24]
 810a464:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810a466:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810a468:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a46e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a472:	2b00      	cmp	r3, #0
 810a474:	d02f      	beq.n	810a4d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810a47c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810a480:	68b9      	ldr	r1, [r7, #8]
 810a482:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a484:	f000 f89e 	bl	810a5c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810a488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a48a:	1e5a      	subs	r2, r3, #1
 810a48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a48e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810a490:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 810a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a498:	d112      	bne.n	810a4c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a49c:	691b      	ldr	r3, [r3, #16]
 810a49e:	2b00      	cmp	r3, #0
 810a4a0:	d016      	beq.n	810a4d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a4a4:	3310      	adds	r3, #16
 810a4a6:	4618      	mov	r0, r3
 810a4a8:	f000 fe0c 	bl	810b0c4 <xTaskRemoveFromEventList>
 810a4ac:	4603      	mov	r3, r0
 810a4ae:	2b00      	cmp	r3, #0
 810a4b0:	d00e      	beq.n	810a4d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810a4b2:	687b      	ldr	r3, [r7, #4]
 810a4b4:	2b00      	cmp	r3, #0
 810a4b6:	d00b      	beq.n	810a4d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810a4b8:	687b      	ldr	r3, [r7, #4]
 810a4ba:	2201      	movs	r2, #1
 810a4bc:	601a      	str	r2, [r3, #0]
 810a4be:	e007      	b.n	810a4d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810a4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810a4c4:	3301      	adds	r3, #1
 810a4c6:	b2db      	uxtb	r3, r3
 810a4c8:	b25a      	sxtb	r2, r3
 810a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a4cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 810a4d0:	2301      	movs	r3, #1
 810a4d2:	637b      	str	r3, [r7, #52]	@ 0x34
 810a4d4:	e001      	b.n	810a4da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 810a4d6:	2300      	movs	r3, #0
 810a4d8:	637b      	str	r3, [r7, #52]	@ 0x34
 810a4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a4dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 810a4de:	693b      	ldr	r3, [r7, #16]
 810a4e0:	f383 8811 	msr	BASEPRI, r3
}
 810a4e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a4e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810a4e8:	4618      	mov	r0, r3
 810a4ea:	3738      	adds	r7, #56	@ 0x38
 810a4ec:	46bd      	mov	sp, r7
 810a4ee:	bd80      	pop	{r7, pc}

0810a4f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810a4f0:	b580      	push	{r7, lr}
 810a4f2:	b086      	sub	sp, #24
 810a4f4:	af00      	add	r7, sp, #0
 810a4f6:	60f8      	str	r0, [r7, #12]
 810a4f8:	60b9      	str	r1, [r7, #8]
 810a4fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810a4fc:	2300      	movs	r3, #0
 810a4fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a500:	68fb      	ldr	r3, [r7, #12]
 810a502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a504:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810a506:	68fb      	ldr	r3, [r7, #12]
 810a508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a50a:	2b00      	cmp	r3, #0
 810a50c:	d10d      	bne.n	810a52a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810a50e:	68fb      	ldr	r3, [r7, #12]
 810a510:	681b      	ldr	r3, [r3, #0]
 810a512:	2b00      	cmp	r3, #0
 810a514:	d14d      	bne.n	810a5b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810a516:	68fb      	ldr	r3, [r7, #12]
 810a518:	689b      	ldr	r3, [r3, #8]
 810a51a:	4618      	mov	r0, r3
 810a51c:	f000 ffb0 	bl	810b480 <xTaskPriorityDisinherit>
 810a520:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810a522:	68fb      	ldr	r3, [r7, #12]
 810a524:	2200      	movs	r2, #0
 810a526:	609a      	str	r2, [r3, #8]
 810a528:	e043      	b.n	810a5b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810a52a:	687b      	ldr	r3, [r7, #4]
 810a52c:	2b00      	cmp	r3, #0
 810a52e:	d119      	bne.n	810a564 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a530:	68fb      	ldr	r3, [r7, #12]
 810a532:	6858      	ldr	r0, [r3, #4]
 810a534:	68fb      	ldr	r3, [r7, #12]
 810a536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a538:	461a      	mov	r2, r3
 810a53a:	68b9      	ldr	r1, [r7, #8]
 810a53c:	f001 ff46 	bl	810c3cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810a540:	68fb      	ldr	r3, [r7, #12]
 810a542:	685a      	ldr	r2, [r3, #4]
 810a544:	68fb      	ldr	r3, [r7, #12]
 810a546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a548:	441a      	add	r2, r3
 810a54a:	68fb      	ldr	r3, [r7, #12]
 810a54c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a54e:	68fb      	ldr	r3, [r7, #12]
 810a550:	685a      	ldr	r2, [r3, #4]
 810a552:	68fb      	ldr	r3, [r7, #12]
 810a554:	689b      	ldr	r3, [r3, #8]
 810a556:	429a      	cmp	r2, r3
 810a558:	d32b      	bcc.n	810a5b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810a55a:	68fb      	ldr	r3, [r7, #12]
 810a55c:	681a      	ldr	r2, [r3, #0]
 810a55e:	68fb      	ldr	r3, [r7, #12]
 810a560:	605a      	str	r2, [r3, #4]
 810a562:	e026      	b.n	810a5b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810a564:	68fb      	ldr	r3, [r7, #12]
 810a566:	68d8      	ldr	r0, [r3, #12]
 810a568:	68fb      	ldr	r3, [r7, #12]
 810a56a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a56c:	461a      	mov	r2, r3
 810a56e:	68b9      	ldr	r1, [r7, #8]
 810a570:	f001 ff2c 	bl	810c3cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810a574:	68fb      	ldr	r3, [r7, #12]
 810a576:	68da      	ldr	r2, [r3, #12]
 810a578:	68fb      	ldr	r3, [r7, #12]
 810a57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a57c:	425b      	negs	r3, r3
 810a57e:	441a      	add	r2, r3
 810a580:	68fb      	ldr	r3, [r7, #12]
 810a582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a584:	68fb      	ldr	r3, [r7, #12]
 810a586:	68da      	ldr	r2, [r3, #12]
 810a588:	68fb      	ldr	r3, [r7, #12]
 810a58a:	681b      	ldr	r3, [r3, #0]
 810a58c:	429a      	cmp	r2, r3
 810a58e:	d207      	bcs.n	810a5a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810a590:	68fb      	ldr	r3, [r7, #12]
 810a592:	689a      	ldr	r2, [r3, #8]
 810a594:	68fb      	ldr	r3, [r7, #12]
 810a596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a598:	425b      	negs	r3, r3
 810a59a:	441a      	add	r2, r3
 810a59c:	68fb      	ldr	r3, [r7, #12]
 810a59e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810a5a0:	687b      	ldr	r3, [r7, #4]
 810a5a2:	2b02      	cmp	r3, #2
 810a5a4:	d105      	bne.n	810a5b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a5a6:	693b      	ldr	r3, [r7, #16]
 810a5a8:	2b00      	cmp	r3, #0
 810a5aa:	d002      	beq.n	810a5b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810a5ac:	693b      	ldr	r3, [r7, #16]
 810a5ae:	3b01      	subs	r3, #1
 810a5b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810a5b2:	693b      	ldr	r3, [r7, #16]
 810a5b4:	1c5a      	adds	r2, r3, #1
 810a5b6:	68fb      	ldr	r3, [r7, #12]
 810a5b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810a5ba:	697b      	ldr	r3, [r7, #20]
}
 810a5bc:	4618      	mov	r0, r3
 810a5be:	3718      	adds	r7, #24
 810a5c0:	46bd      	mov	sp, r7
 810a5c2:	bd80      	pop	{r7, pc}

0810a5c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810a5c4:	b580      	push	{r7, lr}
 810a5c6:	b082      	sub	sp, #8
 810a5c8:	af00      	add	r7, sp, #0
 810a5ca:	6078      	str	r0, [r7, #4]
 810a5cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810a5ce:	687b      	ldr	r3, [r7, #4]
 810a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a5d2:	2b00      	cmp	r3, #0
 810a5d4:	d018      	beq.n	810a608 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810a5d6:	687b      	ldr	r3, [r7, #4]
 810a5d8:	68da      	ldr	r2, [r3, #12]
 810a5da:	687b      	ldr	r3, [r7, #4]
 810a5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a5de:	441a      	add	r2, r3
 810a5e0:	687b      	ldr	r3, [r7, #4]
 810a5e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	68da      	ldr	r2, [r3, #12]
 810a5e8:	687b      	ldr	r3, [r7, #4]
 810a5ea:	689b      	ldr	r3, [r3, #8]
 810a5ec:	429a      	cmp	r2, r3
 810a5ee:	d303      	bcc.n	810a5f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	681a      	ldr	r2, [r3, #0]
 810a5f4:	687b      	ldr	r3, [r7, #4]
 810a5f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a5f8:	687b      	ldr	r3, [r7, #4]
 810a5fa:	68d9      	ldr	r1, [r3, #12]
 810a5fc:	687b      	ldr	r3, [r7, #4]
 810a5fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810a600:	461a      	mov	r2, r3
 810a602:	6838      	ldr	r0, [r7, #0]
 810a604:	f001 fee2 	bl	810c3cc <memcpy>
	}
}
 810a608:	bf00      	nop
 810a60a:	3708      	adds	r7, #8
 810a60c:	46bd      	mov	sp, r7
 810a60e:	bd80      	pop	{r7, pc}

0810a610 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810a610:	b580      	push	{r7, lr}
 810a612:	b084      	sub	sp, #16
 810a614:	af00      	add	r7, sp, #0
 810a616:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810a618:	f7ff f9fe 	bl	8109a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810a61c:	687b      	ldr	r3, [r7, #4]
 810a61e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810a622:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a624:	e011      	b.n	810a64a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a62a:	2b00      	cmp	r3, #0
 810a62c:	d012      	beq.n	810a654 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a62e:	687b      	ldr	r3, [r7, #4]
 810a630:	3324      	adds	r3, #36	@ 0x24
 810a632:	4618      	mov	r0, r3
 810a634:	f000 fd46 	bl	810b0c4 <xTaskRemoveFromEventList>
 810a638:	4603      	mov	r3, r0
 810a63a:	2b00      	cmp	r3, #0
 810a63c:	d001      	beq.n	810a642 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810a63e:	f000 fe1f 	bl	810b280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810a642:	7bfb      	ldrb	r3, [r7, #15]
 810a644:	3b01      	subs	r3, #1
 810a646:	b2db      	uxtb	r3, r3
 810a648:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810a64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810a64e:	2b00      	cmp	r3, #0
 810a650:	dce9      	bgt.n	810a626 <prvUnlockQueue+0x16>
 810a652:	e000      	b.n	810a656 <prvUnlockQueue+0x46>
					break;
 810a654:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	22ff      	movs	r2, #255	@ 0xff
 810a65a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810a65e:	f7ff fa0d 	bl	8109a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810a662:	f7ff f9d9 	bl	8109a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810a666:	687b      	ldr	r3, [r7, #4]
 810a668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810a66c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a66e:	e011      	b.n	810a694 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a670:	687b      	ldr	r3, [r7, #4]
 810a672:	691b      	ldr	r3, [r3, #16]
 810a674:	2b00      	cmp	r3, #0
 810a676:	d012      	beq.n	810a69e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a678:	687b      	ldr	r3, [r7, #4]
 810a67a:	3310      	adds	r3, #16
 810a67c:	4618      	mov	r0, r3
 810a67e:	f000 fd21 	bl	810b0c4 <xTaskRemoveFromEventList>
 810a682:	4603      	mov	r3, r0
 810a684:	2b00      	cmp	r3, #0
 810a686:	d001      	beq.n	810a68c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810a688:	f000 fdfa 	bl	810b280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810a68c:	7bbb      	ldrb	r3, [r7, #14]
 810a68e:	3b01      	subs	r3, #1
 810a690:	b2db      	uxtb	r3, r3
 810a692:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810a694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810a698:	2b00      	cmp	r3, #0
 810a69a:	dce9      	bgt.n	810a670 <prvUnlockQueue+0x60>
 810a69c:	e000      	b.n	810a6a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810a69e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810a6a0:	687b      	ldr	r3, [r7, #4]
 810a6a2:	22ff      	movs	r2, #255	@ 0xff
 810a6a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810a6a8:	f7ff f9e8 	bl	8109a7c <vPortExitCritical>
}
 810a6ac:	bf00      	nop
 810a6ae:	3710      	adds	r7, #16
 810a6b0:	46bd      	mov	sp, r7
 810a6b2:	bd80      	pop	{r7, pc}

0810a6b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810a6b4:	b580      	push	{r7, lr}
 810a6b6:	b084      	sub	sp, #16
 810a6b8:	af00      	add	r7, sp, #0
 810a6ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a6bc:	f7ff f9ac 	bl	8109a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810a6c0:	687b      	ldr	r3, [r7, #4]
 810a6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a6c4:	2b00      	cmp	r3, #0
 810a6c6:	d102      	bne.n	810a6ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810a6c8:	2301      	movs	r3, #1
 810a6ca:	60fb      	str	r3, [r7, #12]
 810a6cc:	e001      	b.n	810a6d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810a6ce:	2300      	movs	r3, #0
 810a6d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a6d2:	f7ff f9d3 	bl	8109a7c <vPortExitCritical>

	return xReturn;
 810a6d6:	68fb      	ldr	r3, [r7, #12]
}
 810a6d8:	4618      	mov	r0, r3
 810a6da:	3710      	adds	r7, #16
 810a6dc:	46bd      	mov	sp, r7
 810a6de:	bd80      	pop	{r7, pc}

0810a6e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810a6e0:	b580      	push	{r7, lr}
 810a6e2:	b084      	sub	sp, #16
 810a6e4:	af00      	add	r7, sp, #0
 810a6e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810a6e8:	f7ff f996 	bl	8109a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810a6ec:	687b      	ldr	r3, [r7, #4]
 810a6ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a6f4:	429a      	cmp	r2, r3
 810a6f6:	d102      	bne.n	810a6fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810a6f8:	2301      	movs	r3, #1
 810a6fa:	60fb      	str	r3, [r7, #12]
 810a6fc:	e001      	b.n	810a702 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810a6fe:	2300      	movs	r3, #0
 810a700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810a702:	f7ff f9bb 	bl	8109a7c <vPortExitCritical>

	return xReturn;
 810a706:	68fb      	ldr	r3, [r7, #12]
}
 810a708:	4618      	mov	r0, r3
 810a70a:	3710      	adds	r7, #16
 810a70c:	46bd      	mov	sp, r7
 810a70e:	bd80      	pop	{r7, pc}

0810a710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810a710:	b480      	push	{r7}
 810a712:	b085      	sub	sp, #20
 810a714:	af00      	add	r7, sp, #0
 810a716:	6078      	str	r0, [r7, #4]
 810a718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810a71a:	2300      	movs	r3, #0
 810a71c:	60fb      	str	r3, [r7, #12]
 810a71e:	e014      	b.n	810a74a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810a720:	4a0f      	ldr	r2, [pc, #60]	@ (810a760 <vQueueAddToRegistry+0x50>)
 810a722:	68fb      	ldr	r3, [r7, #12]
 810a724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810a728:	2b00      	cmp	r3, #0
 810a72a:	d10b      	bne.n	810a744 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810a72c:	490c      	ldr	r1, [pc, #48]	@ (810a760 <vQueueAddToRegistry+0x50>)
 810a72e:	68fb      	ldr	r3, [r7, #12]
 810a730:	683a      	ldr	r2, [r7, #0]
 810a732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810a736:	4a0a      	ldr	r2, [pc, #40]	@ (810a760 <vQueueAddToRegistry+0x50>)
 810a738:	68fb      	ldr	r3, [r7, #12]
 810a73a:	00db      	lsls	r3, r3, #3
 810a73c:	4413      	add	r3, r2
 810a73e:	687a      	ldr	r2, [r7, #4]
 810a740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810a742:	e006      	b.n	810a752 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810a744:	68fb      	ldr	r3, [r7, #12]
 810a746:	3301      	adds	r3, #1
 810a748:	60fb      	str	r3, [r7, #12]
 810a74a:	68fb      	ldr	r3, [r7, #12]
 810a74c:	2b07      	cmp	r3, #7
 810a74e:	d9e7      	bls.n	810a720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810a750:	bf00      	nop
 810a752:	bf00      	nop
 810a754:	3714      	adds	r7, #20
 810a756:	46bd      	mov	sp, r7
 810a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a75c:	4770      	bx	lr
 810a75e:	bf00      	nop
 810a760:	10004814 	.word	0x10004814

0810a764 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810a764:	b580      	push	{r7, lr}
 810a766:	b086      	sub	sp, #24
 810a768:	af00      	add	r7, sp, #0
 810a76a:	60f8      	str	r0, [r7, #12]
 810a76c:	60b9      	str	r1, [r7, #8]
 810a76e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810a770:	68fb      	ldr	r3, [r7, #12]
 810a772:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810a774:	f7ff f950 	bl	8109a18 <vPortEnterCritical>
 810a778:	697b      	ldr	r3, [r7, #20]
 810a77a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810a77e:	b25b      	sxtb	r3, r3
 810a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a784:	d103      	bne.n	810a78e <vQueueWaitForMessageRestricted+0x2a>
 810a786:	697b      	ldr	r3, [r7, #20]
 810a788:	2200      	movs	r2, #0
 810a78a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a78e:	697b      	ldr	r3, [r7, #20]
 810a790:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810a794:	b25b      	sxtb	r3, r3
 810a796:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a79a:	d103      	bne.n	810a7a4 <vQueueWaitForMessageRestricted+0x40>
 810a79c:	697b      	ldr	r3, [r7, #20]
 810a79e:	2200      	movs	r2, #0
 810a7a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a7a4:	f7ff f96a 	bl	8109a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810a7a8:	697b      	ldr	r3, [r7, #20]
 810a7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a7ac:	2b00      	cmp	r3, #0
 810a7ae:	d106      	bne.n	810a7be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810a7b0:	697b      	ldr	r3, [r7, #20]
 810a7b2:	3324      	adds	r3, #36	@ 0x24
 810a7b4:	687a      	ldr	r2, [r7, #4]
 810a7b6:	68b9      	ldr	r1, [r7, #8]
 810a7b8:	4618      	mov	r0, r3
 810a7ba:	f000 fc57 	bl	810b06c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810a7be:	6978      	ldr	r0, [r7, #20]
 810a7c0:	f7ff ff26 	bl	810a610 <prvUnlockQueue>
	}
 810a7c4:	bf00      	nop
 810a7c6:	3718      	adds	r7, #24
 810a7c8:	46bd      	mov	sp, r7
 810a7ca:	bd80      	pop	{r7, pc}

0810a7cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810a7cc:	b580      	push	{r7, lr}
 810a7ce:	b08e      	sub	sp, #56	@ 0x38
 810a7d0:	af04      	add	r7, sp, #16
 810a7d2:	60f8      	str	r0, [r7, #12]
 810a7d4:	60b9      	str	r1, [r7, #8]
 810a7d6:	607a      	str	r2, [r7, #4]
 810a7d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810a7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a7dc:	2b00      	cmp	r3, #0
 810a7de:	d10b      	bne.n	810a7f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 810a7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a7e4:	f383 8811 	msr	BASEPRI, r3
 810a7e8:	f3bf 8f6f 	isb	sy
 810a7ec:	f3bf 8f4f 	dsb	sy
 810a7f0:	623b      	str	r3, [r7, #32]
}
 810a7f2:	bf00      	nop
 810a7f4:	bf00      	nop
 810a7f6:	e7fd      	b.n	810a7f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810a7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a7fa:	2b00      	cmp	r3, #0
 810a7fc:	d10b      	bne.n	810a816 <xTaskCreateStatic+0x4a>
	__asm volatile
 810a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a802:	f383 8811 	msr	BASEPRI, r3
 810a806:	f3bf 8f6f 	isb	sy
 810a80a:	f3bf 8f4f 	dsb	sy
 810a80e:	61fb      	str	r3, [r7, #28]
}
 810a810:	bf00      	nop
 810a812:	bf00      	nop
 810a814:	e7fd      	b.n	810a812 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810a816:	235c      	movs	r3, #92	@ 0x5c
 810a818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810a81a:	693b      	ldr	r3, [r7, #16]
 810a81c:	2b5c      	cmp	r3, #92	@ 0x5c
 810a81e:	d00b      	beq.n	810a838 <xTaskCreateStatic+0x6c>
	__asm volatile
 810a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a824:	f383 8811 	msr	BASEPRI, r3
 810a828:	f3bf 8f6f 	isb	sy
 810a82c:	f3bf 8f4f 	dsb	sy
 810a830:	61bb      	str	r3, [r7, #24]
}
 810a832:	bf00      	nop
 810a834:	bf00      	nop
 810a836:	e7fd      	b.n	810a834 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810a838:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810a83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a83c:	2b00      	cmp	r3, #0
 810a83e:	d01e      	beq.n	810a87e <xTaskCreateStatic+0xb2>
 810a840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a842:	2b00      	cmp	r3, #0
 810a844:	d01b      	beq.n	810a87e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a848:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810a84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a84c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a84e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a852:	2202      	movs	r2, #2
 810a854:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810a858:	2300      	movs	r3, #0
 810a85a:	9303      	str	r3, [sp, #12]
 810a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a85e:	9302      	str	r3, [sp, #8]
 810a860:	f107 0314 	add.w	r3, r7, #20
 810a864:	9301      	str	r3, [sp, #4]
 810a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a868:	9300      	str	r3, [sp, #0]
 810a86a:	683b      	ldr	r3, [r7, #0]
 810a86c:	687a      	ldr	r2, [r7, #4]
 810a86e:	68b9      	ldr	r1, [r7, #8]
 810a870:	68f8      	ldr	r0, [r7, #12]
 810a872:	f000 f850 	bl	810a916 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810a878:	f000 f8de 	bl	810aa38 <prvAddNewTaskToReadyList>
 810a87c:	e001      	b.n	810a882 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810a87e:	2300      	movs	r3, #0
 810a880:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810a882:	697b      	ldr	r3, [r7, #20]
	}
 810a884:	4618      	mov	r0, r3
 810a886:	3728      	adds	r7, #40	@ 0x28
 810a888:	46bd      	mov	sp, r7
 810a88a:	bd80      	pop	{r7, pc}

0810a88c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810a88c:	b580      	push	{r7, lr}
 810a88e:	b08c      	sub	sp, #48	@ 0x30
 810a890:	af04      	add	r7, sp, #16
 810a892:	60f8      	str	r0, [r7, #12]
 810a894:	60b9      	str	r1, [r7, #8]
 810a896:	603b      	str	r3, [r7, #0]
 810a898:	4613      	mov	r3, r2
 810a89a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810a89c:	88fb      	ldrh	r3, [r7, #6]
 810a89e:	009b      	lsls	r3, r3, #2
 810a8a0:	4618      	mov	r0, r3
 810a8a2:	f7fe fce9 	bl	8109278 <pvPortMalloc>
 810a8a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810a8a8:	697b      	ldr	r3, [r7, #20]
 810a8aa:	2b00      	cmp	r3, #0
 810a8ac:	d00e      	beq.n	810a8cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810a8ae:	205c      	movs	r0, #92	@ 0x5c
 810a8b0:	f7fe fce2 	bl	8109278 <pvPortMalloc>
 810a8b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810a8b6:	69fb      	ldr	r3, [r7, #28]
 810a8b8:	2b00      	cmp	r3, #0
 810a8ba:	d003      	beq.n	810a8c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810a8bc:	69fb      	ldr	r3, [r7, #28]
 810a8be:	697a      	ldr	r2, [r7, #20]
 810a8c0:	631a      	str	r2, [r3, #48]	@ 0x30
 810a8c2:	e005      	b.n	810a8d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810a8c4:	6978      	ldr	r0, [r7, #20]
 810a8c6:	f7fe fda5 	bl	8109414 <vPortFree>
 810a8ca:	e001      	b.n	810a8d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810a8cc:	2300      	movs	r3, #0
 810a8ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810a8d0:	69fb      	ldr	r3, [r7, #28]
 810a8d2:	2b00      	cmp	r3, #0
 810a8d4:	d017      	beq.n	810a906 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810a8d6:	69fb      	ldr	r3, [r7, #28]
 810a8d8:	2200      	movs	r2, #0
 810a8da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810a8de:	88fa      	ldrh	r2, [r7, #6]
 810a8e0:	2300      	movs	r3, #0
 810a8e2:	9303      	str	r3, [sp, #12]
 810a8e4:	69fb      	ldr	r3, [r7, #28]
 810a8e6:	9302      	str	r3, [sp, #8]
 810a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a8ea:	9301      	str	r3, [sp, #4]
 810a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a8ee:	9300      	str	r3, [sp, #0]
 810a8f0:	683b      	ldr	r3, [r7, #0]
 810a8f2:	68b9      	ldr	r1, [r7, #8]
 810a8f4:	68f8      	ldr	r0, [r7, #12]
 810a8f6:	f000 f80e 	bl	810a916 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810a8fa:	69f8      	ldr	r0, [r7, #28]
 810a8fc:	f000 f89c 	bl	810aa38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810a900:	2301      	movs	r3, #1
 810a902:	61bb      	str	r3, [r7, #24]
 810a904:	e002      	b.n	810a90c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810a906:	f04f 33ff 	mov.w	r3, #4294967295
 810a90a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810a90c:	69bb      	ldr	r3, [r7, #24]
	}
 810a90e:	4618      	mov	r0, r3
 810a910:	3720      	adds	r7, #32
 810a912:	46bd      	mov	sp, r7
 810a914:	bd80      	pop	{r7, pc}

0810a916 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810a916:	b580      	push	{r7, lr}
 810a918:	b088      	sub	sp, #32
 810a91a:	af00      	add	r7, sp, #0
 810a91c:	60f8      	str	r0, [r7, #12]
 810a91e:	60b9      	str	r1, [r7, #8]
 810a920:	607a      	str	r2, [r7, #4]
 810a922:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810a924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a926:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810a928:	687b      	ldr	r3, [r7, #4]
 810a92a:	009b      	lsls	r3, r3, #2
 810a92c:	461a      	mov	r2, r3
 810a92e:	21a5      	movs	r1, #165	@ 0xa5
 810a930:	f001 fd20 	bl	810c374 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810a934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810a938:	687b      	ldr	r3, [r7, #4]
 810a93a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810a93e:	3b01      	subs	r3, #1
 810a940:	009b      	lsls	r3, r3, #2
 810a942:	4413      	add	r3, r2
 810a944:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810a946:	69bb      	ldr	r3, [r7, #24]
 810a948:	f023 0307 	bic.w	r3, r3, #7
 810a94c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810a94e:	69bb      	ldr	r3, [r7, #24]
 810a950:	f003 0307 	and.w	r3, r3, #7
 810a954:	2b00      	cmp	r3, #0
 810a956:	d00b      	beq.n	810a970 <prvInitialiseNewTask+0x5a>
	__asm volatile
 810a958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810a95c:	f383 8811 	msr	BASEPRI, r3
 810a960:	f3bf 8f6f 	isb	sy
 810a964:	f3bf 8f4f 	dsb	sy
 810a968:	617b      	str	r3, [r7, #20]
}
 810a96a:	bf00      	nop
 810a96c:	bf00      	nop
 810a96e:	e7fd      	b.n	810a96c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810a970:	68bb      	ldr	r3, [r7, #8]
 810a972:	2b00      	cmp	r3, #0
 810a974:	d01f      	beq.n	810a9b6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a976:	2300      	movs	r3, #0
 810a978:	61fb      	str	r3, [r7, #28]
 810a97a:	e012      	b.n	810a9a2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810a97c:	68ba      	ldr	r2, [r7, #8]
 810a97e:	69fb      	ldr	r3, [r7, #28]
 810a980:	4413      	add	r3, r2
 810a982:	7819      	ldrb	r1, [r3, #0]
 810a984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a986:	69fb      	ldr	r3, [r7, #28]
 810a988:	4413      	add	r3, r2
 810a98a:	3334      	adds	r3, #52	@ 0x34
 810a98c:	460a      	mov	r2, r1
 810a98e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810a990:	68ba      	ldr	r2, [r7, #8]
 810a992:	69fb      	ldr	r3, [r7, #28]
 810a994:	4413      	add	r3, r2
 810a996:	781b      	ldrb	r3, [r3, #0]
 810a998:	2b00      	cmp	r3, #0
 810a99a:	d006      	beq.n	810a9aa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810a99c:	69fb      	ldr	r3, [r7, #28]
 810a99e:	3301      	adds	r3, #1
 810a9a0:	61fb      	str	r3, [r7, #28]
 810a9a2:	69fb      	ldr	r3, [r7, #28]
 810a9a4:	2b0f      	cmp	r3, #15
 810a9a6:	d9e9      	bls.n	810a97c <prvInitialiseNewTask+0x66>
 810a9a8:	e000      	b.n	810a9ac <prvInitialiseNewTask+0x96>
			{
				break;
 810a9aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9ae:	2200      	movs	r2, #0
 810a9b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810a9b4:	e003      	b.n	810a9be <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810a9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9b8:	2200      	movs	r2, #0
 810a9ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810a9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a9c0:	2b37      	cmp	r3, #55	@ 0x37
 810a9c2:	d901      	bls.n	810a9c8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810a9c4:	2337      	movs	r3, #55	@ 0x37
 810a9c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810a9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810a9cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810a9d2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810a9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9d6:	2200      	movs	r2, #0
 810a9d8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810a9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9dc:	3304      	adds	r3, #4
 810a9de:	4618      	mov	r0, r3
 810a9e0:	f7fe fe58 	bl	8109694 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810a9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9e6:	3318      	adds	r3, #24
 810a9e8:	4618      	mov	r0, r3
 810a9ea:	f7fe fe53 	bl	8109694 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a9f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a9f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a9fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810aa02:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810aa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa06:	2200      	movs	r2, #0
 810aa08:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810aa0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa0c:	2200      	movs	r2, #0
 810aa0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810aa12:	683a      	ldr	r2, [r7, #0]
 810aa14:	68f9      	ldr	r1, [r7, #12]
 810aa16:	69b8      	ldr	r0, [r7, #24]
 810aa18:	f7fe fed0 	bl	81097bc <pxPortInitialiseStack>
 810aa1c:	4602      	mov	r2, r0
 810aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810aa20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810aa22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810aa24:	2b00      	cmp	r3, #0
 810aa26:	d002      	beq.n	810aa2e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810aa2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810aa2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810aa2e:	bf00      	nop
 810aa30:	3720      	adds	r7, #32
 810aa32:	46bd      	mov	sp, r7
 810aa34:	bd80      	pop	{r7, pc}
	...

0810aa38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810aa38:	b580      	push	{r7, lr}
 810aa3a:	b082      	sub	sp, #8
 810aa3c:	af00      	add	r7, sp, #0
 810aa3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810aa40:	f7fe ffea 	bl	8109a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810aa44:	4b2d      	ldr	r3, [pc, #180]	@ (810aafc <prvAddNewTaskToReadyList+0xc4>)
 810aa46:	681b      	ldr	r3, [r3, #0]
 810aa48:	3301      	adds	r3, #1
 810aa4a:	4a2c      	ldr	r2, [pc, #176]	@ (810aafc <prvAddNewTaskToReadyList+0xc4>)
 810aa4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810aa4e:	4b2c      	ldr	r3, [pc, #176]	@ (810ab00 <prvAddNewTaskToReadyList+0xc8>)
 810aa50:	681b      	ldr	r3, [r3, #0]
 810aa52:	2b00      	cmp	r3, #0
 810aa54:	d109      	bne.n	810aa6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810aa56:	4a2a      	ldr	r2, [pc, #168]	@ (810ab00 <prvAddNewTaskToReadyList+0xc8>)
 810aa58:	687b      	ldr	r3, [r7, #4]
 810aa5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810aa5c:	4b27      	ldr	r3, [pc, #156]	@ (810aafc <prvAddNewTaskToReadyList+0xc4>)
 810aa5e:	681b      	ldr	r3, [r3, #0]
 810aa60:	2b01      	cmp	r3, #1
 810aa62:	d110      	bne.n	810aa86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810aa64:	f000 fc30 	bl	810b2c8 <prvInitialiseTaskLists>
 810aa68:	e00d      	b.n	810aa86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810aa6a:	4b26      	ldr	r3, [pc, #152]	@ (810ab04 <prvAddNewTaskToReadyList+0xcc>)
 810aa6c:	681b      	ldr	r3, [r3, #0]
 810aa6e:	2b00      	cmp	r3, #0
 810aa70:	d109      	bne.n	810aa86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810aa72:	4b23      	ldr	r3, [pc, #140]	@ (810ab00 <prvAddNewTaskToReadyList+0xc8>)
 810aa74:	681b      	ldr	r3, [r3, #0]
 810aa76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aa78:	687b      	ldr	r3, [r7, #4]
 810aa7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aa7c:	429a      	cmp	r2, r3
 810aa7e:	d802      	bhi.n	810aa86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810aa80:	4a1f      	ldr	r2, [pc, #124]	@ (810ab00 <prvAddNewTaskToReadyList+0xc8>)
 810aa82:	687b      	ldr	r3, [r7, #4]
 810aa84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810aa86:	4b20      	ldr	r3, [pc, #128]	@ (810ab08 <prvAddNewTaskToReadyList+0xd0>)
 810aa88:	681b      	ldr	r3, [r3, #0]
 810aa8a:	3301      	adds	r3, #1
 810aa8c:	4a1e      	ldr	r2, [pc, #120]	@ (810ab08 <prvAddNewTaskToReadyList+0xd0>)
 810aa8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810aa90:	4b1d      	ldr	r3, [pc, #116]	@ (810ab08 <prvAddNewTaskToReadyList+0xd0>)
 810aa92:	681a      	ldr	r2, [r3, #0]
 810aa94:	687b      	ldr	r3, [r7, #4]
 810aa96:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810aa98:	687b      	ldr	r3, [r7, #4]
 810aa9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aa9c:	4b1b      	ldr	r3, [pc, #108]	@ (810ab0c <prvAddNewTaskToReadyList+0xd4>)
 810aa9e:	681b      	ldr	r3, [r3, #0]
 810aaa0:	429a      	cmp	r2, r3
 810aaa2:	d903      	bls.n	810aaac <prvAddNewTaskToReadyList+0x74>
 810aaa4:	687b      	ldr	r3, [r7, #4]
 810aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aaa8:	4a18      	ldr	r2, [pc, #96]	@ (810ab0c <prvAddNewTaskToReadyList+0xd4>)
 810aaaa:	6013      	str	r3, [r2, #0]
 810aaac:	687b      	ldr	r3, [r7, #4]
 810aaae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aab0:	4613      	mov	r3, r2
 810aab2:	009b      	lsls	r3, r3, #2
 810aab4:	4413      	add	r3, r2
 810aab6:	009b      	lsls	r3, r3, #2
 810aab8:	4a15      	ldr	r2, [pc, #84]	@ (810ab10 <prvAddNewTaskToReadyList+0xd8>)
 810aaba:	441a      	add	r2, r3
 810aabc:	687b      	ldr	r3, [r7, #4]
 810aabe:	3304      	adds	r3, #4
 810aac0:	4619      	mov	r1, r3
 810aac2:	4610      	mov	r0, r2
 810aac4:	f7fe fdf3 	bl	81096ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810aac8:	f7fe ffd8 	bl	8109a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810aacc:	4b0d      	ldr	r3, [pc, #52]	@ (810ab04 <prvAddNewTaskToReadyList+0xcc>)
 810aace:	681b      	ldr	r3, [r3, #0]
 810aad0:	2b00      	cmp	r3, #0
 810aad2:	d00e      	beq.n	810aaf2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810aad4:	4b0a      	ldr	r3, [pc, #40]	@ (810ab00 <prvAddNewTaskToReadyList+0xc8>)
 810aad6:	681b      	ldr	r3, [r3, #0]
 810aad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aada:	687b      	ldr	r3, [r7, #4]
 810aadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aade:	429a      	cmp	r2, r3
 810aae0:	d207      	bcs.n	810aaf2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810aae2:	4b0c      	ldr	r3, [pc, #48]	@ (810ab14 <prvAddNewTaskToReadyList+0xdc>)
 810aae4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810aae8:	601a      	str	r2, [r3, #0]
 810aaea:	f3bf 8f4f 	dsb	sy
 810aaee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810aaf2:	bf00      	nop
 810aaf4:	3708      	adds	r7, #8
 810aaf6:	46bd      	mov	sp, r7
 810aaf8:	bd80      	pop	{r7, pc}
 810aafa:	bf00      	nop
 810aafc:	10004d28 	.word	0x10004d28
 810ab00:	10004854 	.word	0x10004854
 810ab04:	10004d34 	.word	0x10004d34
 810ab08:	10004d44 	.word	0x10004d44
 810ab0c:	10004d30 	.word	0x10004d30
 810ab10:	10004858 	.word	0x10004858
 810ab14:	e000ed04 	.word	0xe000ed04

0810ab18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810ab18:	b580      	push	{r7, lr}
 810ab1a:	b084      	sub	sp, #16
 810ab1c:	af00      	add	r7, sp, #0
 810ab1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810ab20:	2300      	movs	r3, #0
 810ab22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810ab24:	687b      	ldr	r3, [r7, #4]
 810ab26:	2b00      	cmp	r3, #0
 810ab28:	d018      	beq.n	810ab5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810ab2a:	4b14      	ldr	r3, [pc, #80]	@ (810ab7c <vTaskDelay+0x64>)
 810ab2c:	681b      	ldr	r3, [r3, #0]
 810ab2e:	2b00      	cmp	r3, #0
 810ab30:	d00b      	beq.n	810ab4a <vTaskDelay+0x32>
	__asm volatile
 810ab32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ab36:	f383 8811 	msr	BASEPRI, r3
 810ab3a:	f3bf 8f6f 	isb	sy
 810ab3e:	f3bf 8f4f 	dsb	sy
 810ab42:	60bb      	str	r3, [r7, #8]
}
 810ab44:	bf00      	nop
 810ab46:	bf00      	nop
 810ab48:	e7fd      	b.n	810ab46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810ab4a:	f000 f883 	bl	810ac54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810ab4e:	2100      	movs	r1, #0
 810ab50:	6878      	ldr	r0, [r7, #4]
 810ab52:	f000 fd05 	bl	810b560 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810ab56:	f000 f88b 	bl	810ac70 <xTaskResumeAll>
 810ab5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810ab5c:	68fb      	ldr	r3, [r7, #12]
 810ab5e:	2b00      	cmp	r3, #0
 810ab60:	d107      	bne.n	810ab72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810ab62:	4b07      	ldr	r3, [pc, #28]	@ (810ab80 <vTaskDelay+0x68>)
 810ab64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ab68:	601a      	str	r2, [r3, #0]
 810ab6a:	f3bf 8f4f 	dsb	sy
 810ab6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810ab72:	bf00      	nop
 810ab74:	3710      	adds	r7, #16
 810ab76:	46bd      	mov	sp, r7
 810ab78:	bd80      	pop	{r7, pc}
 810ab7a:	bf00      	nop
 810ab7c:	10004d50 	.word	0x10004d50
 810ab80:	e000ed04 	.word	0xe000ed04

0810ab84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810ab84:	b580      	push	{r7, lr}
 810ab86:	b08a      	sub	sp, #40	@ 0x28
 810ab88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810ab8a:	2300      	movs	r3, #0
 810ab8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810ab8e:	2300      	movs	r3, #0
 810ab90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810ab92:	463a      	mov	r2, r7
 810ab94:	1d39      	adds	r1, r7, #4
 810ab96:	f107 0308 	add.w	r3, r7, #8
 810ab9a:	4618      	mov	r0, r3
 810ab9c:	f7fe fb38 	bl	8109210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810aba0:	6839      	ldr	r1, [r7, #0]
 810aba2:	687b      	ldr	r3, [r7, #4]
 810aba4:	68ba      	ldr	r2, [r7, #8]
 810aba6:	9202      	str	r2, [sp, #8]
 810aba8:	9301      	str	r3, [sp, #4]
 810abaa:	2300      	movs	r3, #0
 810abac:	9300      	str	r3, [sp, #0]
 810abae:	2300      	movs	r3, #0
 810abb0:	460a      	mov	r2, r1
 810abb2:	4922      	ldr	r1, [pc, #136]	@ (810ac3c <vTaskStartScheduler+0xb8>)
 810abb4:	4822      	ldr	r0, [pc, #136]	@ (810ac40 <vTaskStartScheduler+0xbc>)
 810abb6:	f7ff fe09 	bl	810a7cc <xTaskCreateStatic>
 810abba:	4603      	mov	r3, r0
 810abbc:	4a21      	ldr	r2, [pc, #132]	@ (810ac44 <vTaskStartScheduler+0xc0>)
 810abbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810abc0:	4b20      	ldr	r3, [pc, #128]	@ (810ac44 <vTaskStartScheduler+0xc0>)
 810abc2:	681b      	ldr	r3, [r3, #0]
 810abc4:	2b00      	cmp	r3, #0
 810abc6:	d002      	beq.n	810abce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810abc8:	2301      	movs	r3, #1
 810abca:	617b      	str	r3, [r7, #20]
 810abcc:	e001      	b.n	810abd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810abce:	2300      	movs	r3, #0
 810abd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810abd2:	697b      	ldr	r3, [r7, #20]
 810abd4:	2b01      	cmp	r3, #1
 810abd6:	d102      	bne.n	810abde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810abd8:	f000 fd16 	bl	810b608 <xTimerCreateTimerTask>
 810abdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810abde:	697b      	ldr	r3, [r7, #20]
 810abe0:	2b01      	cmp	r3, #1
 810abe2:	d116      	bne.n	810ac12 <vTaskStartScheduler+0x8e>
	__asm volatile
 810abe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810abe8:	f383 8811 	msr	BASEPRI, r3
 810abec:	f3bf 8f6f 	isb	sy
 810abf0:	f3bf 8f4f 	dsb	sy
 810abf4:	613b      	str	r3, [r7, #16]
}
 810abf6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810abf8:	4b13      	ldr	r3, [pc, #76]	@ (810ac48 <vTaskStartScheduler+0xc4>)
 810abfa:	f04f 32ff 	mov.w	r2, #4294967295
 810abfe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810ac00:	4b12      	ldr	r3, [pc, #72]	@ (810ac4c <vTaskStartScheduler+0xc8>)
 810ac02:	2201      	movs	r2, #1
 810ac04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810ac06:	4b12      	ldr	r3, [pc, #72]	@ (810ac50 <vTaskStartScheduler+0xcc>)
 810ac08:	2200      	movs	r2, #0
 810ac0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810ac0c:	f7fe fe60 	bl	81098d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810ac10:	e00f      	b.n	810ac32 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810ac12:	697b      	ldr	r3, [r7, #20]
 810ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ac18:	d10b      	bne.n	810ac32 <vTaskStartScheduler+0xae>
	__asm volatile
 810ac1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ac1e:	f383 8811 	msr	BASEPRI, r3
 810ac22:	f3bf 8f6f 	isb	sy
 810ac26:	f3bf 8f4f 	dsb	sy
 810ac2a:	60fb      	str	r3, [r7, #12]
}
 810ac2c:	bf00      	nop
 810ac2e:	bf00      	nop
 810ac30:	e7fd      	b.n	810ac2e <vTaskStartScheduler+0xaa>
}
 810ac32:	bf00      	nop
 810ac34:	3718      	adds	r7, #24
 810ac36:	46bd      	mov	sp, r7
 810ac38:	bd80      	pop	{r7, pc}
 810ac3a:	bf00      	nop
 810ac3c:	0810c458 	.word	0x0810c458
 810ac40:	0810b299 	.word	0x0810b299
 810ac44:	10004d4c 	.word	0x10004d4c
 810ac48:	10004d48 	.word	0x10004d48
 810ac4c:	10004d34 	.word	0x10004d34
 810ac50:	10004d2c 	.word	0x10004d2c

0810ac54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810ac54:	b480      	push	{r7}
 810ac56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810ac58:	4b04      	ldr	r3, [pc, #16]	@ (810ac6c <vTaskSuspendAll+0x18>)
 810ac5a:	681b      	ldr	r3, [r3, #0]
 810ac5c:	3301      	adds	r3, #1
 810ac5e:	4a03      	ldr	r2, [pc, #12]	@ (810ac6c <vTaskSuspendAll+0x18>)
 810ac60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810ac62:	bf00      	nop
 810ac64:	46bd      	mov	sp, r7
 810ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac6a:	4770      	bx	lr
 810ac6c:	10004d50 	.word	0x10004d50

0810ac70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810ac70:	b580      	push	{r7, lr}
 810ac72:	b084      	sub	sp, #16
 810ac74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810ac76:	2300      	movs	r3, #0
 810ac78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810ac7a:	2300      	movs	r3, #0
 810ac7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810ac7e:	4b42      	ldr	r3, [pc, #264]	@ (810ad88 <xTaskResumeAll+0x118>)
 810ac80:	681b      	ldr	r3, [r3, #0]
 810ac82:	2b00      	cmp	r3, #0
 810ac84:	d10b      	bne.n	810ac9e <xTaskResumeAll+0x2e>
	__asm volatile
 810ac86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ac8a:	f383 8811 	msr	BASEPRI, r3
 810ac8e:	f3bf 8f6f 	isb	sy
 810ac92:	f3bf 8f4f 	dsb	sy
 810ac96:	603b      	str	r3, [r7, #0]
}
 810ac98:	bf00      	nop
 810ac9a:	bf00      	nop
 810ac9c:	e7fd      	b.n	810ac9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810ac9e:	f7fe febb 	bl	8109a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810aca2:	4b39      	ldr	r3, [pc, #228]	@ (810ad88 <xTaskResumeAll+0x118>)
 810aca4:	681b      	ldr	r3, [r3, #0]
 810aca6:	3b01      	subs	r3, #1
 810aca8:	4a37      	ldr	r2, [pc, #220]	@ (810ad88 <xTaskResumeAll+0x118>)
 810acaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810acac:	4b36      	ldr	r3, [pc, #216]	@ (810ad88 <xTaskResumeAll+0x118>)
 810acae:	681b      	ldr	r3, [r3, #0]
 810acb0:	2b00      	cmp	r3, #0
 810acb2:	d162      	bne.n	810ad7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810acb4:	4b35      	ldr	r3, [pc, #212]	@ (810ad8c <xTaskResumeAll+0x11c>)
 810acb6:	681b      	ldr	r3, [r3, #0]
 810acb8:	2b00      	cmp	r3, #0
 810acba:	d05e      	beq.n	810ad7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810acbc:	e02f      	b.n	810ad1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810acbe:	4b34      	ldr	r3, [pc, #208]	@ (810ad90 <xTaskResumeAll+0x120>)
 810acc0:	68db      	ldr	r3, [r3, #12]
 810acc2:	68db      	ldr	r3, [r3, #12]
 810acc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810acc6:	68fb      	ldr	r3, [r7, #12]
 810acc8:	3318      	adds	r3, #24
 810acca:	4618      	mov	r0, r3
 810accc:	f7fe fd4c 	bl	8109768 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810acd0:	68fb      	ldr	r3, [r7, #12]
 810acd2:	3304      	adds	r3, #4
 810acd4:	4618      	mov	r0, r3
 810acd6:	f7fe fd47 	bl	8109768 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810acda:	68fb      	ldr	r3, [r7, #12]
 810acdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810acde:	4b2d      	ldr	r3, [pc, #180]	@ (810ad94 <xTaskResumeAll+0x124>)
 810ace0:	681b      	ldr	r3, [r3, #0]
 810ace2:	429a      	cmp	r2, r3
 810ace4:	d903      	bls.n	810acee <xTaskResumeAll+0x7e>
 810ace6:	68fb      	ldr	r3, [r7, #12]
 810ace8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810acea:	4a2a      	ldr	r2, [pc, #168]	@ (810ad94 <xTaskResumeAll+0x124>)
 810acec:	6013      	str	r3, [r2, #0]
 810acee:	68fb      	ldr	r3, [r7, #12]
 810acf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810acf2:	4613      	mov	r3, r2
 810acf4:	009b      	lsls	r3, r3, #2
 810acf6:	4413      	add	r3, r2
 810acf8:	009b      	lsls	r3, r3, #2
 810acfa:	4a27      	ldr	r2, [pc, #156]	@ (810ad98 <xTaskResumeAll+0x128>)
 810acfc:	441a      	add	r2, r3
 810acfe:	68fb      	ldr	r3, [r7, #12]
 810ad00:	3304      	adds	r3, #4
 810ad02:	4619      	mov	r1, r3
 810ad04:	4610      	mov	r0, r2
 810ad06:	f7fe fcd2 	bl	81096ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810ad0a:	68fb      	ldr	r3, [r7, #12]
 810ad0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad0e:	4b23      	ldr	r3, [pc, #140]	@ (810ad9c <xTaskResumeAll+0x12c>)
 810ad10:	681b      	ldr	r3, [r3, #0]
 810ad12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ad14:	429a      	cmp	r2, r3
 810ad16:	d302      	bcc.n	810ad1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810ad18:	4b21      	ldr	r3, [pc, #132]	@ (810ada0 <xTaskResumeAll+0x130>)
 810ad1a:	2201      	movs	r2, #1
 810ad1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810ad1e:	4b1c      	ldr	r3, [pc, #112]	@ (810ad90 <xTaskResumeAll+0x120>)
 810ad20:	681b      	ldr	r3, [r3, #0]
 810ad22:	2b00      	cmp	r3, #0
 810ad24:	d1cb      	bne.n	810acbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810ad26:	68fb      	ldr	r3, [r7, #12]
 810ad28:	2b00      	cmp	r3, #0
 810ad2a:	d001      	beq.n	810ad30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810ad2c:	f000 fb6a 	bl	810b404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810ad30:	4b1c      	ldr	r3, [pc, #112]	@ (810ada4 <xTaskResumeAll+0x134>)
 810ad32:	681b      	ldr	r3, [r3, #0]
 810ad34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810ad36:	687b      	ldr	r3, [r7, #4]
 810ad38:	2b00      	cmp	r3, #0
 810ad3a:	d010      	beq.n	810ad5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810ad3c:	f000 f858 	bl	810adf0 <xTaskIncrementTick>
 810ad40:	4603      	mov	r3, r0
 810ad42:	2b00      	cmp	r3, #0
 810ad44:	d002      	beq.n	810ad4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810ad46:	4b16      	ldr	r3, [pc, #88]	@ (810ada0 <xTaskResumeAll+0x130>)
 810ad48:	2201      	movs	r2, #1
 810ad4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810ad4c:	687b      	ldr	r3, [r7, #4]
 810ad4e:	3b01      	subs	r3, #1
 810ad50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810ad52:	687b      	ldr	r3, [r7, #4]
 810ad54:	2b00      	cmp	r3, #0
 810ad56:	d1f1      	bne.n	810ad3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810ad58:	4b12      	ldr	r3, [pc, #72]	@ (810ada4 <xTaskResumeAll+0x134>)
 810ad5a:	2200      	movs	r2, #0
 810ad5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810ad5e:	4b10      	ldr	r3, [pc, #64]	@ (810ada0 <xTaskResumeAll+0x130>)
 810ad60:	681b      	ldr	r3, [r3, #0]
 810ad62:	2b00      	cmp	r3, #0
 810ad64:	d009      	beq.n	810ad7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810ad66:	2301      	movs	r3, #1
 810ad68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810ad6a:	4b0f      	ldr	r3, [pc, #60]	@ (810ada8 <xTaskResumeAll+0x138>)
 810ad6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ad70:	601a      	str	r2, [r3, #0]
 810ad72:	f3bf 8f4f 	dsb	sy
 810ad76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810ad7a:	f7fe fe7f 	bl	8109a7c <vPortExitCritical>

	return xAlreadyYielded;
 810ad7e:	68bb      	ldr	r3, [r7, #8]
}
 810ad80:	4618      	mov	r0, r3
 810ad82:	3710      	adds	r7, #16
 810ad84:	46bd      	mov	sp, r7
 810ad86:	bd80      	pop	{r7, pc}
 810ad88:	10004d50 	.word	0x10004d50
 810ad8c:	10004d28 	.word	0x10004d28
 810ad90:	10004ce8 	.word	0x10004ce8
 810ad94:	10004d30 	.word	0x10004d30
 810ad98:	10004858 	.word	0x10004858
 810ad9c:	10004854 	.word	0x10004854
 810ada0:	10004d3c 	.word	0x10004d3c
 810ada4:	10004d38 	.word	0x10004d38
 810ada8:	e000ed04 	.word	0xe000ed04

0810adac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810adac:	b480      	push	{r7}
 810adae:	b083      	sub	sp, #12
 810adb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810adb2:	4b05      	ldr	r3, [pc, #20]	@ (810adc8 <xTaskGetTickCount+0x1c>)
 810adb4:	681b      	ldr	r3, [r3, #0]
 810adb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810adb8:	687b      	ldr	r3, [r7, #4]
}
 810adba:	4618      	mov	r0, r3
 810adbc:	370c      	adds	r7, #12
 810adbe:	46bd      	mov	sp, r7
 810adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810adc4:	4770      	bx	lr
 810adc6:	bf00      	nop
 810adc8:	10004d2c 	.word	0x10004d2c

0810adcc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810adcc:	b580      	push	{r7, lr}
 810adce:	b082      	sub	sp, #8
 810add0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810add2:	f7fe ff01 	bl	8109bd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810add6:	2300      	movs	r3, #0
 810add8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810adda:	4b04      	ldr	r3, [pc, #16]	@ (810adec <xTaskGetTickCountFromISR+0x20>)
 810addc:	681b      	ldr	r3, [r3, #0]
 810adde:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810ade0:	683b      	ldr	r3, [r7, #0]
}
 810ade2:	4618      	mov	r0, r3
 810ade4:	3708      	adds	r7, #8
 810ade6:	46bd      	mov	sp, r7
 810ade8:	bd80      	pop	{r7, pc}
 810adea:	bf00      	nop
 810adec:	10004d2c 	.word	0x10004d2c

0810adf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810adf0:	b580      	push	{r7, lr}
 810adf2:	b086      	sub	sp, #24
 810adf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810adf6:	2300      	movs	r3, #0
 810adf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810adfa:	4b4f      	ldr	r3, [pc, #316]	@ (810af38 <xTaskIncrementTick+0x148>)
 810adfc:	681b      	ldr	r3, [r3, #0]
 810adfe:	2b00      	cmp	r3, #0
 810ae00:	f040 8090 	bne.w	810af24 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810ae04:	4b4d      	ldr	r3, [pc, #308]	@ (810af3c <xTaskIncrementTick+0x14c>)
 810ae06:	681b      	ldr	r3, [r3, #0]
 810ae08:	3301      	adds	r3, #1
 810ae0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810ae0c:	4a4b      	ldr	r2, [pc, #300]	@ (810af3c <xTaskIncrementTick+0x14c>)
 810ae0e:	693b      	ldr	r3, [r7, #16]
 810ae10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810ae12:	693b      	ldr	r3, [r7, #16]
 810ae14:	2b00      	cmp	r3, #0
 810ae16:	d121      	bne.n	810ae5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810ae18:	4b49      	ldr	r3, [pc, #292]	@ (810af40 <xTaskIncrementTick+0x150>)
 810ae1a:	681b      	ldr	r3, [r3, #0]
 810ae1c:	681b      	ldr	r3, [r3, #0]
 810ae1e:	2b00      	cmp	r3, #0
 810ae20:	d00b      	beq.n	810ae3a <xTaskIncrementTick+0x4a>
	__asm volatile
 810ae22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ae26:	f383 8811 	msr	BASEPRI, r3
 810ae2a:	f3bf 8f6f 	isb	sy
 810ae2e:	f3bf 8f4f 	dsb	sy
 810ae32:	603b      	str	r3, [r7, #0]
}
 810ae34:	bf00      	nop
 810ae36:	bf00      	nop
 810ae38:	e7fd      	b.n	810ae36 <xTaskIncrementTick+0x46>
 810ae3a:	4b41      	ldr	r3, [pc, #260]	@ (810af40 <xTaskIncrementTick+0x150>)
 810ae3c:	681b      	ldr	r3, [r3, #0]
 810ae3e:	60fb      	str	r3, [r7, #12]
 810ae40:	4b40      	ldr	r3, [pc, #256]	@ (810af44 <xTaskIncrementTick+0x154>)
 810ae42:	681b      	ldr	r3, [r3, #0]
 810ae44:	4a3e      	ldr	r2, [pc, #248]	@ (810af40 <xTaskIncrementTick+0x150>)
 810ae46:	6013      	str	r3, [r2, #0]
 810ae48:	4a3e      	ldr	r2, [pc, #248]	@ (810af44 <xTaskIncrementTick+0x154>)
 810ae4a:	68fb      	ldr	r3, [r7, #12]
 810ae4c:	6013      	str	r3, [r2, #0]
 810ae4e:	4b3e      	ldr	r3, [pc, #248]	@ (810af48 <xTaskIncrementTick+0x158>)
 810ae50:	681b      	ldr	r3, [r3, #0]
 810ae52:	3301      	adds	r3, #1
 810ae54:	4a3c      	ldr	r2, [pc, #240]	@ (810af48 <xTaskIncrementTick+0x158>)
 810ae56:	6013      	str	r3, [r2, #0]
 810ae58:	f000 fad4 	bl	810b404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810ae5c:	4b3b      	ldr	r3, [pc, #236]	@ (810af4c <xTaskIncrementTick+0x15c>)
 810ae5e:	681b      	ldr	r3, [r3, #0]
 810ae60:	693a      	ldr	r2, [r7, #16]
 810ae62:	429a      	cmp	r2, r3
 810ae64:	d349      	bcc.n	810aefa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810ae66:	4b36      	ldr	r3, [pc, #216]	@ (810af40 <xTaskIncrementTick+0x150>)
 810ae68:	681b      	ldr	r3, [r3, #0]
 810ae6a:	681b      	ldr	r3, [r3, #0]
 810ae6c:	2b00      	cmp	r3, #0
 810ae6e:	d104      	bne.n	810ae7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ae70:	4b36      	ldr	r3, [pc, #216]	@ (810af4c <xTaskIncrementTick+0x15c>)
 810ae72:	f04f 32ff 	mov.w	r2, #4294967295
 810ae76:	601a      	str	r2, [r3, #0]
					break;
 810ae78:	e03f      	b.n	810aefa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ae7a:	4b31      	ldr	r3, [pc, #196]	@ (810af40 <xTaskIncrementTick+0x150>)
 810ae7c:	681b      	ldr	r3, [r3, #0]
 810ae7e:	68db      	ldr	r3, [r3, #12]
 810ae80:	68db      	ldr	r3, [r3, #12]
 810ae82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810ae84:	68bb      	ldr	r3, [r7, #8]
 810ae86:	685b      	ldr	r3, [r3, #4]
 810ae88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810ae8a:	693a      	ldr	r2, [r7, #16]
 810ae8c:	687b      	ldr	r3, [r7, #4]
 810ae8e:	429a      	cmp	r2, r3
 810ae90:	d203      	bcs.n	810ae9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810ae92:	4a2e      	ldr	r2, [pc, #184]	@ (810af4c <xTaskIncrementTick+0x15c>)
 810ae94:	687b      	ldr	r3, [r7, #4]
 810ae96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810ae98:	e02f      	b.n	810aefa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810ae9a:	68bb      	ldr	r3, [r7, #8]
 810ae9c:	3304      	adds	r3, #4
 810ae9e:	4618      	mov	r0, r3
 810aea0:	f7fe fc62 	bl	8109768 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810aea4:	68bb      	ldr	r3, [r7, #8]
 810aea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810aea8:	2b00      	cmp	r3, #0
 810aeaa:	d004      	beq.n	810aeb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810aeac:	68bb      	ldr	r3, [r7, #8]
 810aeae:	3318      	adds	r3, #24
 810aeb0:	4618      	mov	r0, r3
 810aeb2:	f7fe fc59 	bl	8109768 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810aeb6:	68bb      	ldr	r3, [r7, #8]
 810aeb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aeba:	4b25      	ldr	r3, [pc, #148]	@ (810af50 <xTaskIncrementTick+0x160>)
 810aebc:	681b      	ldr	r3, [r3, #0]
 810aebe:	429a      	cmp	r2, r3
 810aec0:	d903      	bls.n	810aeca <xTaskIncrementTick+0xda>
 810aec2:	68bb      	ldr	r3, [r7, #8]
 810aec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aec6:	4a22      	ldr	r2, [pc, #136]	@ (810af50 <xTaskIncrementTick+0x160>)
 810aec8:	6013      	str	r3, [r2, #0]
 810aeca:	68bb      	ldr	r3, [r7, #8]
 810aecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aece:	4613      	mov	r3, r2
 810aed0:	009b      	lsls	r3, r3, #2
 810aed2:	4413      	add	r3, r2
 810aed4:	009b      	lsls	r3, r3, #2
 810aed6:	4a1f      	ldr	r2, [pc, #124]	@ (810af54 <xTaskIncrementTick+0x164>)
 810aed8:	441a      	add	r2, r3
 810aeda:	68bb      	ldr	r3, [r7, #8]
 810aedc:	3304      	adds	r3, #4
 810aede:	4619      	mov	r1, r3
 810aee0:	4610      	mov	r0, r2
 810aee2:	f7fe fbe4 	bl	81096ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810aee6:	68bb      	ldr	r3, [r7, #8]
 810aee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810aeea:	4b1b      	ldr	r3, [pc, #108]	@ (810af58 <xTaskIncrementTick+0x168>)
 810aeec:	681b      	ldr	r3, [r3, #0]
 810aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810aef0:	429a      	cmp	r2, r3
 810aef2:	d3b8      	bcc.n	810ae66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810aef4:	2301      	movs	r3, #1
 810aef6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810aef8:	e7b5      	b.n	810ae66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810aefa:	4b17      	ldr	r3, [pc, #92]	@ (810af58 <xTaskIncrementTick+0x168>)
 810aefc:	681b      	ldr	r3, [r3, #0]
 810aefe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810af00:	4914      	ldr	r1, [pc, #80]	@ (810af54 <xTaskIncrementTick+0x164>)
 810af02:	4613      	mov	r3, r2
 810af04:	009b      	lsls	r3, r3, #2
 810af06:	4413      	add	r3, r2
 810af08:	009b      	lsls	r3, r3, #2
 810af0a:	440b      	add	r3, r1
 810af0c:	681b      	ldr	r3, [r3, #0]
 810af0e:	2b01      	cmp	r3, #1
 810af10:	d901      	bls.n	810af16 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810af12:	2301      	movs	r3, #1
 810af14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810af16:	4b11      	ldr	r3, [pc, #68]	@ (810af5c <xTaskIncrementTick+0x16c>)
 810af18:	681b      	ldr	r3, [r3, #0]
 810af1a:	2b00      	cmp	r3, #0
 810af1c:	d007      	beq.n	810af2e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810af1e:	2301      	movs	r3, #1
 810af20:	617b      	str	r3, [r7, #20]
 810af22:	e004      	b.n	810af2e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810af24:	4b0e      	ldr	r3, [pc, #56]	@ (810af60 <xTaskIncrementTick+0x170>)
 810af26:	681b      	ldr	r3, [r3, #0]
 810af28:	3301      	adds	r3, #1
 810af2a:	4a0d      	ldr	r2, [pc, #52]	@ (810af60 <xTaskIncrementTick+0x170>)
 810af2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810af2e:	697b      	ldr	r3, [r7, #20]
}
 810af30:	4618      	mov	r0, r3
 810af32:	3718      	adds	r7, #24
 810af34:	46bd      	mov	sp, r7
 810af36:	bd80      	pop	{r7, pc}
 810af38:	10004d50 	.word	0x10004d50
 810af3c:	10004d2c 	.word	0x10004d2c
 810af40:	10004ce0 	.word	0x10004ce0
 810af44:	10004ce4 	.word	0x10004ce4
 810af48:	10004d40 	.word	0x10004d40
 810af4c:	10004d48 	.word	0x10004d48
 810af50:	10004d30 	.word	0x10004d30
 810af54:	10004858 	.word	0x10004858
 810af58:	10004854 	.word	0x10004854
 810af5c:	10004d3c 	.word	0x10004d3c
 810af60:	10004d38 	.word	0x10004d38

0810af64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810af64:	b480      	push	{r7}
 810af66:	b085      	sub	sp, #20
 810af68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810af6a:	4b28      	ldr	r3, [pc, #160]	@ (810b00c <vTaskSwitchContext+0xa8>)
 810af6c:	681b      	ldr	r3, [r3, #0]
 810af6e:	2b00      	cmp	r3, #0
 810af70:	d003      	beq.n	810af7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810af72:	4b27      	ldr	r3, [pc, #156]	@ (810b010 <vTaskSwitchContext+0xac>)
 810af74:	2201      	movs	r2, #1
 810af76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810af78:	e042      	b.n	810b000 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 810af7a:	4b25      	ldr	r3, [pc, #148]	@ (810b010 <vTaskSwitchContext+0xac>)
 810af7c:	2200      	movs	r2, #0
 810af7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810af80:	4b24      	ldr	r3, [pc, #144]	@ (810b014 <vTaskSwitchContext+0xb0>)
 810af82:	681b      	ldr	r3, [r3, #0]
 810af84:	60fb      	str	r3, [r7, #12]
 810af86:	e011      	b.n	810afac <vTaskSwitchContext+0x48>
 810af88:	68fb      	ldr	r3, [r7, #12]
 810af8a:	2b00      	cmp	r3, #0
 810af8c:	d10b      	bne.n	810afa6 <vTaskSwitchContext+0x42>
	__asm volatile
 810af8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810af92:	f383 8811 	msr	BASEPRI, r3
 810af96:	f3bf 8f6f 	isb	sy
 810af9a:	f3bf 8f4f 	dsb	sy
 810af9e:	607b      	str	r3, [r7, #4]
}
 810afa0:	bf00      	nop
 810afa2:	bf00      	nop
 810afa4:	e7fd      	b.n	810afa2 <vTaskSwitchContext+0x3e>
 810afa6:	68fb      	ldr	r3, [r7, #12]
 810afa8:	3b01      	subs	r3, #1
 810afaa:	60fb      	str	r3, [r7, #12]
 810afac:	491a      	ldr	r1, [pc, #104]	@ (810b018 <vTaskSwitchContext+0xb4>)
 810afae:	68fa      	ldr	r2, [r7, #12]
 810afb0:	4613      	mov	r3, r2
 810afb2:	009b      	lsls	r3, r3, #2
 810afb4:	4413      	add	r3, r2
 810afb6:	009b      	lsls	r3, r3, #2
 810afb8:	440b      	add	r3, r1
 810afba:	681b      	ldr	r3, [r3, #0]
 810afbc:	2b00      	cmp	r3, #0
 810afbe:	d0e3      	beq.n	810af88 <vTaskSwitchContext+0x24>
 810afc0:	68fa      	ldr	r2, [r7, #12]
 810afc2:	4613      	mov	r3, r2
 810afc4:	009b      	lsls	r3, r3, #2
 810afc6:	4413      	add	r3, r2
 810afc8:	009b      	lsls	r3, r3, #2
 810afca:	4a13      	ldr	r2, [pc, #76]	@ (810b018 <vTaskSwitchContext+0xb4>)
 810afcc:	4413      	add	r3, r2
 810afce:	60bb      	str	r3, [r7, #8]
 810afd0:	68bb      	ldr	r3, [r7, #8]
 810afd2:	685b      	ldr	r3, [r3, #4]
 810afd4:	685a      	ldr	r2, [r3, #4]
 810afd6:	68bb      	ldr	r3, [r7, #8]
 810afd8:	605a      	str	r2, [r3, #4]
 810afda:	68bb      	ldr	r3, [r7, #8]
 810afdc:	685a      	ldr	r2, [r3, #4]
 810afde:	68bb      	ldr	r3, [r7, #8]
 810afe0:	3308      	adds	r3, #8
 810afe2:	429a      	cmp	r2, r3
 810afe4:	d104      	bne.n	810aff0 <vTaskSwitchContext+0x8c>
 810afe6:	68bb      	ldr	r3, [r7, #8]
 810afe8:	685b      	ldr	r3, [r3, #4]
 810afea:	685a      	ldr	r2, [r3, #4]
 810afec:	68bb      	ldr	r3, [r7, #8]
 810afee:	605a      	str	r2, [r3, #4]
 810aff0:	68bb      	ldr	r3, [r7, #8]
 810aff2:	685b      	ldr	r3, [r3, #4]
 810aff4:	68db      	ldr	r3, [r3, #12]
 810aff6:	4a09      	ldr	r2, [pc, #36]	@ (810b01c <vTaskSwitchContext+0xb8>)
 810aff8:	6013      	str	r3, [r2, #0]
 810affa:	4a06      	ldr	r2, [pc, #24]	@ (810b014 <vTaskSwitchContext+0xb0>)
 810affc:	68fb      	ldr	r3, [r7, #12]
 810affe:	6013      	str	r3, [r2, #0]
}
 810b000:	bf00      	nop
 810b002:	3714      	adds	r7, #20
 810b004:	46bd      	mov	sp, r7
 810b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b00a:	4770      	bx	lr
 810b00c:	10004d50 	.word	0x10004d50
 810b010:	10004d3c 	.word	0x10004d3c
 810b014:	10004d30 	.word	0x10004d30
 810b018:	10004858 	.word	0x10004858
 810b01c:	10004854 	.word	0x10004854

0810b020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810b020:	b580      	push	{r7, lr}
 810b022:	b084      	sub	sp, #16
 810b024:	af00      	add	r7, sp, #0
 810b026:	6078      	str	r0, [r7, #4]
 810b028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810b02a:	687b      	ldr	r3, [r7, #4]
 810b02c:	2b00      	cmp	r3, #0
 810b02e:	d10b      	bne.n	810b048 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810b030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b034:	f383 8811 	msr	BASEPRI, r3
 810b038:	f3bf 8f6f 	isb	sy
 810b03c:	f3bf 8f4f 	dsb	sy
 810b040:	60fb      	str	r3, [r7, #12]
}
 810b042:	bf00      	nop
 810b044:	bf00      	nop
 810b046:	e7fd      	b.n	810b044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810b048:	4b07      	ldr	r3, [pc, #28]	@ (810b068 <vTaskPlaceOnEventList+0x48>)
 810b04a:	681b      	ldr	r3, [r3, #0]
 810b04c:	3318      	adds	r3, #24
 810b04e:	4619      	mov	r1, r3
 810b050:	6878      	ldr	r0, [r7, #4]
 810b052:	f7fe fb50 	bl	81096f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810b056:	2101      	movs	r1, #1
 810b058:	6838      	ldr	r0, [r7, #0]
 810b05a:	f000 fa81 	bl	810b560 <prvAddCurrentTaskToDelayedList>
}
 810b05e:	bf00      	nop
 810b060:	3710      	adds	r7, #16
 810b062:	46bd      	mov	sp, r7
 810b064:	bd80      	pop	{r7, pc}
 810b066:	bf00      	nop
 810b068:	10004854 	.word	0x10004854

0810b06c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810b06c:	b580      	push	{r7, lr}
 810b06e:	b086      	sub	sp, #24
 810b070:	af00      	add	r7, sp, #0
 810b072:	60f8      	str	r0, [r7, #12]
 810b074:	60b9      	str	r1, [r7, #8]
 810b076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810b078:	68fb      	ldr	r3, [r7, #12]
 810b07a:	2b00      	cmp	r3, #0
 810b07c:	d10b      	bne.n	810b096 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b082:	f383 8811 	msr	BASEPRI, r3
 810b086:	f3bf 8f6f 	isb	sy
 810b08a:	f3bf 8f4f 	dsb	sy
 810b08e:	617b      	str	r3, [r7, #20]
}
 810b090:	bf00      	nop
 810b092:	bf00      	nop
 810b094:	e7fd      	b.n	810b092 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810b096:	4b0a      	ldr	r3, [pc, #40]	@ (810b0c0 <vTaskPlaceOnEventListRestricted+0x54>)
 810b098:	681b      	ldr	r3, [r3, #0]
 810b09a:	3318      	adds	r3, #24
 810b09c:	4619      	mov	r1, r3
 810b09e:	68f8      	ldr	r0, [r7, #12]
 810b0a0:	f7fe fb05 	bl	81096ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810b0a4:	687b      	ldr	r3, [r7, #4]
 810b0a6:	2b00      	cmp	r3, #0
 810b0a8:	d002      	beq.n	810b0b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 810b0ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810b0b0:	6879      	ldr	r1, [r7, #4]
 810b0b2:	68b8      	ldr	r0, [r7, #8]
 810b0b4:	f000 fa54 	bl	810b560 <prvAddCurrentTaskToDelayedList>
	}
 810b0b8:	bf00      	nop
 810b0ba:	3718      	adds	r7, #24
 810b0bc:	46bd      	mov	sp, r7
 810b0be:	bd80      	pop	{r7, pc}
 810b0c0:	10004854 	.word	0x10004854

0810b0c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810b0c4:	b580      	push	{r7, lr}
 810b0c6:	b086      	sub	sp, #24
 810b0c8:	af00      	add	r7, sp, #0
 810b0ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b0cc:	687b      	ldr	r3, [r7, #4]
 810b0ce:	68db      	ldr	r3, [r3, #12]
 810b0d0:	68db      	ldr	r3, [r3, #12]
 810b0d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810b0d4:	693b      	ldr	r3, [r7, #16]
 810b0d6:	2b00      	cmp	r3, #0
 810b0d8:	d10b      	bne.n	810b0f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810b0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b0de:	f383 8811 	msr	BASEPRI, r3
 810b0e2:	f3bf 8f6f 	isb	sy
 810b0e6:	f3bf 8f4f 	dsb	sy
 810b0ea:	60fb      	str	r3, [r7, #12]
}
 810b0ec:	bf00      	nop
 810b0ee:	bf00      	nop
 810b0f0:	e7fd      	b.n	810b0ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810b0f2:	693b      	ldr	r3, [r7, #16]
 810b0f4:	3318      	adds	r3, #24
 810b0f6:	4618      	mov	r0, r3
 810b0f8:	f7fe fb36 	bl	8109768 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b0fc:	4b1d      	ldr	r3, [pc, #116]	@ (810b174 <xTaskRemoveFromEventList+0xb0>)
 810b0fe:	681b      	ldr	r3, [r3, #0]
 810b100:	2b00      	cmp	r3, #0
 810b102:	d11d      	bne.n	810b140 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810b104:	693b      	ldr	r3, [r7, #16]
 810b106:	3304      	adds	r3, #4
 810b108:	4618      	mov	r0, r3
 810b10a:	f7fe fb2d 	bl	8109768 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810b10e:	693b      	ldr	r3, [r7, #16]
 810b110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b112:	4b19      	ldr	r3, [pc, #100]	@ (810b178 <xTaskRemoveFromEventList+0xb4>)
 810b114:	681b      	ldr	r3, [r3, #0]
 810b116:	429a      	cmp	r2, r3
 810b118:	d903      	bls.n	810b122 <xTaskRemoveFromEventList+0x5e>
 810b11a:	693b      	ldr	r3, [r7, #16]
 810b11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b11e:	4a16      	ldr	r2, [pc, #88]	@ (810b178 <xTaskRemoveFromEventList+0xb4>)
 810b120:	6013      	str	r3, [r2, #0]
 810b122:	693b      	ldr	r3, [r7, #16]
 810b124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b126:	4613      	mov	r3, r2
 810b128:	009b      	lsls	r3, r3, #2
 810b12a:	4413      	add	r3, r2
 810b12c:	009b      	lsls	r3, r3, #2
 810b12e:	4a13      	ldr	r2, [pc, #76]	@ (810b17c <xTaskRemoveFromEventList+0xb8>)
 810b130:	441a      	add	r2, r3
 810b132:	693b      	ldr	r3, [r7, #16]
 810b134:	3304      	adds	r3, #4
 810b136:	4619      	mov	r1, r3
 810b138:	4610      	mov	r0, r2
 810b13a:	f7fe fab8 	bl	81096ae <vListInsertEnd>
 810b13e:	e005      	b.n	810b14c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810b140:	693b      	ldr	r3, [r7, #16]
 810b142:	3318      	adds	r3, #24
 810b144:	4619      	mov	r1, r3
 810b146:	480e      	ldr	r0, [pc, #56]	@ (810b180 <xTaskRemoveFromEventList+0xbc>)
 810b148:	f7fe fab1 	bl	81096ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810b14c:	693b      	ldr	r3, [r7, #16]
 810b14e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b150:	4b0c      	ldr	r3, [pc, #48]	@ (810b184 <xTaskRemoveFromEventList+0xc0>)
 810b152:	681b      	ldr	r3, [r3, #0]
 810b154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b156:	429a      	cmp	r2, r3
 810b158:	d905      	bls.n	810b166 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810b15a:	2301      	movs	r3, #1
 810b15c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810b15e:	4b0a      	ldr	r3, [pc, #40]	@ (810b188 <xTaskRemoveFromEventList+0xc4>)
 810b160:	2201      	movs	r2, #1
 810b162:	601a      	str	r2, [r3, #0]
 810b164:	e001      	b.n	810b16a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810b166:	2300      	movs	r3, #0
 810b168:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810b16a:	697b      	ldr	r3, [r7, #20]
}
 810b16c:	4618      	mov	r0, r3
 810b16e:	3718      	adds	r7, #24
 810b170:	46bd      	mov	sp, r7
 810b172:	bd80      	pop	{r7, pc}
 810b174:	10004d50 	.word	0x10004d50
 810b178:	10004d30 	.word	0x10004d30
 810b17c:	10004858 	.word	0x10004858
 810b180:	10004ce8 	.word	0x10004ce8
 810b184:	10004854 	.word	0x10004854
 810b188:	10004d3c 	.word	0x10004d3c

0810b18c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810b18c:	b480      	push	{r7}
 810b18e:	b083      	sub	sp, #12
 810b190:	af00      	add	r7, sp, #0
 810b192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810b194:	4b06      	ldr	r3, [pc, #24]	@ (810b1b0 <vTaskInternalSetTimeOutState+0x24>)
 810b196:	681a      	ldr	r2, [r3, #0]
 810b198:	687b      	ldr	r3, [r7, #4]
 810b19a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810b19c:	4b05      	ldr	r3, [pc, #20]	@ (810b1b4 <vTaskInternalSetTimeOutState+0x28>)
 810b19e:	681a      	ldr	r2, [r3, #0]
 810b1a0:	687b      	ldr	r3, [r7, #4]
 810b1a2:	605a      	str	r2, [r3, #4]
}
 810b1a4:	bf00      	nop
 810b1a6:	370c      	adds	r7, #12
 810b1a8:	46bd      	mov	sp, r7
 810b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1ae:	4770      	bx	lr
 810b1b0:	10004d40 	.word	0x10004d40
 810b1b4:	10004d2c 	.word	0x10004d2c

0810b1b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810b1b8:	b580      	push	{r7, lr}
 810b1ba:	b088      	sub	sp, #32
 810b1bc:	af00      	add	r7, sp, #0
 810b1be:	6078      	str	r0, [r7, #4]
 810b1c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810b1c2:	687b      	ldr	r3, [r7, #4]
 810b1c4:	2b00      	cmp	r3, #0
 810b1c6:	d10b      	bne.n	810b1e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810b1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b1cc:	f383 8811 	msr	BASEPRI, r3
 810b1d0:	f3bf 8f6f 	isb	sy
 810b1d4:	f3bf 8f4f 	dsb	sy
 810b1d8:	613b      	str	r3, [r7, #16]
}
 810b1da:	bf00      	nop
 810b1dc:	bf00      	nop
 810b1de:	e7fd      	b.n	810b1dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810b1e0:	683b      	ldr	r3, [r7, #0]
 810b1e2:	2b00      	cmp	r3, #0
 810b1e4:	d10b      	bne.n	810b1fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810b1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b1ea:	f383 8811 	msr	BASEPRI, r3
 810b1ee:	f3bf 8f6f 	isb	sy
 810b1f2:	f3bf 8f4f 	dsb	sy
 810b1f6:	60fb      	str	r3, [r7, #12]
}
 810b1f8:	bf00      	nop
 810b1fa:	bf00      	nop
 810b1fc:	e7fd      	b.n	810b1fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810b1fe:	f7fe fc0b 	bl	8109a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810b202:	4b1d      	ldr	r3, [pc, #116]	@ (810b278 <xTaskCheckForTimeOut+0xc0>)
 810b204:	681b      	ldr	r3, [r3, #0]
 810b206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810b208:	687b      	ldr	r3, [r7, #4]
 810b20a:	685b      	ldr	r3, [r3, #4]
 810b20c:	69ba      	ldr	r2, [r7, #24]
 810b20e:	1ad3      	subs	r3, r2, r3
 810b210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810b212:	683b      	ldr	r3, [r7, #0]
 810b214:	681b      	ldr	r3, [r3, #0]
 810b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b21a:	d102      	bne.n	810b222 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810b21c:	2300      	movs	r3, #0
 810b21e:	61fb      	str	r3, [r7, #28]
 810b220:	e023      	b.n	810b26a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810b222:	687b      	ldr	r3, [r7, #4]
 810b224:	681a      	ldr	r2, [r3, #0]
 810b226:	4b15      	ldr	r3, [pc, #84]	@ (810b27c <xTaskCheckForTimeOut+0xc4>)
 810b228:	681b      	ldr	r3, [r3, #0]
 810b22a:	429a      	cmp	r2, r3
 810b22c:	d007      	beq.n	810b23e <xTaskCheckForTimeOut+0x86>
 810b22e:	687b      	ldr	r3, [r7, #4]
 810b230:	685b      	ldr	r3, [r3, #4]
 810b232:	69ba      	ldr	r2, [r7, #24]
 810b234:	429a      	cmp	r2, r3
 810b236:	d302      	bcc.n	810b23e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810b238:	2301      	movs	r3, #1
 810b23a:	61fb      	str	r3, [r7, #28]
 810b23c:	e015      	b.n	810b26a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810b23e:	683b      	ldr	r3, [r7, #0]
 810b240:	681b      	ldr	r3, [r3, #0]
 810b242:	697a      	ldr	r2, [r7, #20]
 810b244:	429a      	cmp	r2, r3
 810b246:	d20b      	bcs.n	810b260 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810b248:	683b      	ldr	r3, [r7, #0]
 810b24a:	681a      	ldr	r2, [r3, #0]
 810b24c:	697b      	ldr	r3, [r7, #20]
 810b24e:	1ad2      	subs	r2, r2, r3
 810b250:	683b      	ldr	r3, [r7, #0]
 810b252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810b254:	6878      	ldr	r0, [r7, #4]
 810b256:	f7ff ff99 	bl	810b18c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810b25a:	2300      	movs	r3, #0
 810b25c:	61fb      	str	r3, [r7, #28]
 810b25e:	e004      	b.n	810b26a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810b260:	683b      	ldr	r3, [r7, #0]
 810b262:	2200      	movs	r2, #0
 810b264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810b266:	2301      	movs	r3, #1
 810b268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810b26a:	f7fe fc07 	bl	8109a7c <vPortExitCritical>

	return xReturn;
 810b26e:	69fb      	ldr	r3, [r7, #28]
}
 810b270:	4618      	mov	r0, r3
 810b272:	3720      	adds	r7, #32
 810b274:	46bd      	mov	sp, r7
 810b276:	bd80      	pop	{r7, pc}
 810b278:	10004d2c 	.word	0x10004d2c
 810b27c:	10004d40 	.word	0x10004d40

0810b280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810b280:	b480      	push	{r7}
 810b282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810b284:	4b03      	ldr	r3, [pc, #12]	@ (810b294 <vTaskMissedYield+0x14>)
 810b286:	2201      	movs	r2, #1
 810b288:	601a      	str	r2, [r3, #0]
}
 810b28a:	bf00      	nop
 810b28c:	46bd      	mov	sp, r7
 810b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b292:	4770      	bx	lr
 810b294:	10004d3c 	.word	0x10004d3c

0810b298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810b298:	b580      	push	{r7, lr}
 810b29a:	b082      	sub	sp, #8
 810b29c:	af00      	add	r7, sp, #0
 810b29e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810b2a0:	f000 f852 	bl	810b348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810b2a4:	4b06      	ldr	r3, [pc, #24]	@ (810b2c0 <prvIdleTask+0x28>)
 810b2a6:	681b      	ldr	r3, [r3, #0]
 810b2a8:	2b01      	cmp	r3, #1
 810b2aa:	d9f9      	bls.n	810b2a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 810b2ac:	4b05      	ldr	r3, [pc, #20]	@ (810b2c4 <prvIdleTask+0x2c>)
 810b2ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810b2b2:	601a      	str	r2, [r3, #0]
 810b2b4:	f3bf 8f4f 	dsb	sy
 810b2b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810b2bc:	e7f0      	b.n	810b2a0 <prvIdleTask+0x8>
 810b2be:	bf00      	nop
 810b2c0:	10004858 	.word	0x10004858
 810b2c4:	e000ed04 	.word	0xe000ed04

0810b2c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810b2c8:	b580      	push	{r7, lr}
 810b2ca:	b082      	sub	sp, #8
 810b2cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b2ce:	2300      	movs	r3, #0
 810b2d0:	607b      	str	r3, [r7, #4]
 810b2d2:	e00c      	b.n	810b2ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810b2d4:	687a      	ldr	r2, [r7, #4]
 810b2d6:	4613      	mov	r3, r2
 810b2d8:	009b      	lsls	r3, r3, #2
 810b2da:	4413      	add	r3, r2
 810b2dc:	009b      	lsls	r3, r3, #2
 810b2de:	4a12      	ldr	r2, [pc, #72]	@ (810b328 <prvInitialiseTaskLists+0x60>)
 810b2e0:	4413      	add	r3, r2
 810b2e2:	4618      	mov	r0, r3
 810b2e4:	f7fe f9b6 	bl	8109654 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b2e8:	687b      	ldr	r3, [r7, #4]
 810b2ea:	3301      	adds	r3, #1
 810b2ec:	607b      	str	r3, [r7, #4]
 810b2ee:	687b      	ldr	r3, [r7, #4]
 810b2f0:	2b37      	cmp	r3, #55	@ 0x37
 810b2f2:	d9ef      	bls.n	810b2d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810b2f4:	480d      	ldr	r0, [pc, #52]	@ (810b32c <prvInitialiseTaskLists+0x64>)
 810b2f6:	f7fe f9ad 	bl	8109654 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810b2fa:	480d      	ldr	r0, [pc, #52]	@ (810b330 <prvInitialiseTaskLists+0x68>)
 810b2fc:	f7fe f9aa 	bl	8109654 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810b300:	480c      	ldr	r0, [pc, #48]	@ (810b334 <prvInitialiseTaskLists+0x6c>)
 810b302:	f7fe f9a7 	bl	8109654 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810b306:	480c      	ldr	r0, [pc, #48]	@ (810b338 <prvInitialiseTaskLists+0x70>)
 810b308:	f7fe f9a4 	bl	8109654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810b30c:	480b      	ldr	r0, [pc, #44]	@ (810b33c <prvInitialiseTaskLists+0x74>)
 810b30e:	f7fe f9a1 	bl	8109654 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810b312:	4b0b      	ldr	r3, [pc, #44]	@ (810b340 <prvInitialiseTaskLists+0x78>)
 810b314:	4a05      	ldr	r2, [pc, #20]	@ (810b32c <prvInitialiseTaskLists+0x64>)
 810b316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810b318:	4b0a      	ldr	r3, [pc, #40]	@ (810b344 <prvInitialiseTaskLists+0x7c>)
 810b31a:	4a05      	ldr	r2, [pc, #20]	@ (810b330 <prvInitialiseTaskLists+0x68>)
 810b31c:	601a      	str	r2, [r3, #0]
}
 810b31e:	bf00      	nop
 810b320:	3708      	adds	r7, #8
 810b322:	46bd      	mov	sp, r7
 810b324:	bd80      	pop	{r7, pc}
 810b326:	bf00      	nop
 810b328:	10004858 	.word	0x10004858
 810b32c:	10004cb8 	.word	0x10004cb8
 810b330:	10004ccc 	.word	0x10004ccc
 810b334:	10004ce8 	.word	0x10004ce8
 810b338:	10004cfc 	.word	0x10004cfc
 810b33c:	10004d14 	.word	0x10004d14
 810b340:	10004ce0 	.word	0x10004ce0
 810b344:	10004ce4 	.word	0x10004ce4

0810b348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810b348:	b580      	push	{r7, lr}
 810b34a:	b082      	sub	sp, #8
 810b34c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b34e:	e019      	b.n	810b384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810b350:	f7fe fb62 	bl	8109a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b354:	4b10      	ldr	r3, [pc, #64]	@ (810b398 <prvCheckTasksWaitingTermination+0x50>)
 810b356:	68db      	ldr	r3, [r3, #12]
 810b358:	68db      	ldr	r3, [r3, #12]
 810b35a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b35c:	687b      	ldr	r3, [r7, #4]
 810b35e:	3304      	adds	r3, #4
 810b360:	4618      	mov	r0, r3
 810b362:	f7fe fa01 	bl	8109768 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810b366:	4b0d      	ldr	r3, [pc, #52]	@ (810b39c <prvCheckTasksWaitingTermination+0x54>)
 810b368:	681b      	ldr	r3, [r3, #0]
 810b36a:	3b01      	subs	r3, #1
 810b36c:	4a0b      	ldr	r2, [pc, #44]	@ (810b39c <prvCheckTasksWaitingTermination+0x54>)
 810b36e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810b370:	4b0b      	ldr	r3, [pc, #44]	@ (810b3a0 <prvCheckTasksWaitingTermination+0x58>)
 810b372:	681b      	ldr	r3, [r3, #0]
 810b374:	3b01      	subs	r3, #1
 810b376:	4a0a      	ldr	r2, [pc, #40]	@ (810b3a0 <prvCheckTasksWaitingTermination+0x58>)
 810b378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810b37a:	f7fe fb7f 	bl	8109a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810b37e:	6878      	ldr	r0, [r7, #4]
 810b380:	f000 f810 	bl	810b3a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b384:	4b06      	ldr	r3, [pc, #24]	@ (810b3a0 <prvCheckTasksWaitingTermination+0x58>)
 810b386:	681b      	ldr	r3, [r3, #0]
 810b388:	2b00      	cmp	r3, #0
 810b38a:	d1e1      	bne.n	810b350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810b38c:	bf00      	nop
 810b38e:	bf00      	nop
 810b390:	3708      	adds	r7, #8
 810b392:	46bd      	mov	sp, r7
 810b394:	bd80      	pop	{r7, pc}
 810b396:	bf00      	nop
 810b398:	10004cfc 	.word	0x10004cfc
 810b39c:	10004d28 	.word	0x10004d28
 810b3a0:	10004d10 	.word	0x10004d10

0810b3a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810b3a4:	b580      	push	{r7, lr}
 810b3a6:	b084      	sub	sp, #16
 810b3a8:	af00      	add	r7, sp, #0
 810b3aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810b3ac:	687b      	ldr	r3, [r7, #4]
 810b3ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810b3b2:	2b00      	cmp	r3, #0
 810b3b4:	d108      	bne.n	810b3c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810b3b6:	687b      	ldr	r3, [r7, #4]
 810b3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810b3ba:	4618      	mov	r0, r3
 810b3bc:	f7fe f82a 	bl	8109414 <vPortFree>
				vPortFree( pxTCB );
 810b3c0:	6878      	ldr	r0, [r7, #4]
 810b3c2:	f7fe f827 	bl	8109414 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810b3c6:	e019      	b.n	810b3fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810b3c8:	687b      	ldr	r3, [r7, #4]
 810b3ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810b3ce:	2b01      	cmp	r3, #1
 810b3d0:	d103      	bne.n	810b3da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810b3d2:	6878      	ldr	r0, [r7, #4]
 810b3d4:	f7fe f81e 	bl	8109414 <vPortFree>
	}
 810b3d8:	e010      	b.n	810b3fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810b3da:	687b      	ldr	r3, [r7, #4]
 810b3dc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 810b3e0:	2b02      	cmp	r3, #2
 810b3e2:	d00b      	beq.n	810b3fc <prvDeleteTCB+0x58>
	__asm volatile
 810b3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b3e8:	f383 8811 	msr	BASEPRI, r3
 810b3ec:	f3bf 8f6f 	isb	sy
 810b3f0:	f3bf 8f4f 	dsb	sy
 810b3f4:	60fb      	str	r3, [r7, #12]
}
 810b3f6:	bf00      	nop
 810b3f8:	bf00      	nop
 810b3fa:	e7fd      	b.n	810b3f8 <prvDeleteTCB+0x54>
	}
 810b3fc:	bf00      	nop
 810b3fe:	3710      	adds	r7, #16
 810b400:	46bd      	mov	sp, r7
 810b402:	bd80      	pop	{r7, pc}

0810b404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810b404:	b480      	push	{r7}
 810b406:	b083      	sub	sp, #12
 810b408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b40a:	4b0c      	ldr	r3, [pc, #48]	@ (810b43c <prvResetNextTaskUnblockTime+0x38>)
 810b40c:	681b      	ldr	r3, [r3, #0]
 810b40e:	681b      	ldr	r3, [r3, #0]
 810b410:	2b00      	cmp	r3, #0
 810b412:	d104      	bne.n	810b41e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810b414:	4b0a      	ldr	r3, [pc, #40]	@ (810b440 <prvResetNextTaskUnblockTime+0x3c>)
 810b416:	f04f 32ff 	mov.w	r2, #4294967295
 810b41a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810b41c:	e008      	b.n	810b430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b41e:	4b07      	ldr	r3, [pc, #28]	@ (810b43c <prvResetNextTaskUnblockTime+0x38>)
 810b420:	681b      	ldr	r3, [r3, #0]
 810b422:	68db      	ldr	r3, [r3, #12]
 810b424:	68db      	ldr	r3, [r3, #12]
 810b426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810b428:	687b      	ldr	r3, [r7, #4]
 810b42a:	685b      	ldr	r3, [r3, #4]
 810b42c:	4a04      	ldr	r2, [pc, #16]	@ (810b440 <prvResetNextTaskUnblockTime+0x3c>)
 810b42e:	6013      	str	r3, [r2, #0]
}
 810b430:	bf00      	nop
 810b432:	370c      	adds	r7, #12
 810b434:	46bd      	mov	sp, r7
 810b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b43a:	4770      	bx	lr
 810b43c:	10004ce0 	.word	0x10004ce0
 810b440:	10004d48 	.word	0x10004d48

0810b444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810b444:	b480      	push	{r7}
 810b446:	b083      	sub	sp, #12
 810b448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810b44a:	4b0b      	ldr	r3, [pc, #44]	@ (810b478 <xTaskGetSchedulerState+0x34>)
 810b44c:	681b      	ldr	r3, [r3, #0]
 810b44e:	2b00      	cmp	r3, #0
 810b450:	d102      	bne.n	810b458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810b452:	2301      	movs	r3, #1
 810b454:	607b      	str	r3, [r7, #4]
 810b456:	e008      	b.n	810b46a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b458:	4b08      	ldr	r3, [pc, #32]	@ (810b47c <xTaskGetSchedulerState+0x38>)
 810b45a:	681b      	ldr	r3, [r3, #0]
 810b45c:	2b00      	cmp	r3, #0
 810b45e:	d102      	bne.n	810b466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810b460:	2302      	movs	r3, #2
 810b462:	607b      	str	r3, [r7, #4]
 810b464:	e001      	b.n	810b46a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810b466:	2300      	movs	r3, #0
 810b468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810b46a:	687b      	ldr	r3, [r7, #4]
	}
 810b46c:	4618      	mov	r0, r3
 810b46e:	370c      	adds	r7, #12
 810b470:	46bd      	mov	sp, r7
 810b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b476:	4770      	bx	lr
 810b478:	10004d34 	.word	0x10004d34
 810b47c:	10004d50 	.word	0x10004d50

0810b480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810b480:	b580      	push	{r7, lr}
 810b482:	b086      	sub	sp, #24
 810b484:	af00      	add	r7, sp, #0
 810b486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810b488:	687b      	ldr	r3, [r7, #4]
 810b48a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810b48c:	2300      	movs	r3, #0
 810b48e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810b490:	687b      	ldr	r3, [r7, #4]
 810b492:	2b00      	cmp	r3, #0
 810b494:	d058      	beq.n	810b548 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810b496:	4b2f      	ldr	r3, [pc, #188]	@ (810b554 <xTaskPriorityDisinherit+0xd4>)
 810b498:	681b      	ldr	r3, [r3, #0]
 810b49a:	693a      	ldr	r2, [r7, #16]
 810b49c:	429a      	cmp	r2, r3
 810b49e:	d00b      	beq.n	810b4b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810b4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b4a4:	f383 8811 	msr	BASEPRI, r3
 810b4a8:	f3bf 8f6f 	isb	sy
 810b4ac:	f3bf 8f4f 	dsb	sy
 810b4b0:	60fb      	str	r3, [r7, #12]
}
 810b4b2:	bf00      	nop
 810b4b4:	bf00      	nop
 810b4b6:	e7fd      	b.n	810b4b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810b4b8:	693b      	ldr	r3, [r7, #16]
 810b4ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b4bc:	2b00      	cmp	r3, #0
 810b4be:	d10b      	bne.n	810b4d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810b4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b4c4:	f383 8811 	msr	BASEPRI, r3
 810b4c8:	f3bf 8f6f 	isb	sy
 810b4cc:	f3bf 8f4f 	dsb	sy
 810b4d0:	60bb      	str	r3, [r7, #8]
}
 810b4d2:	bf00      	nop
 810b4d4:	bf00      	nop
 810b4d6:	e7fd      	b.n	810b4d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810b4d8:	693b      	ldr	r3, [r7, #16]
 810b4da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b4dc:	1e5a      	subs	r2, r3, #1
 810b4de:	693b      	ldr	r3, [r7, #16]
 810b4e0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810b4e2:	693b      	ldr	r3, [r7, #16]
 810b4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b4e6:	693b      	ldr	r3, [r7, #16]
 810b4e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810b4ea:	429a      	cmp	r2, r3
 810b4ec:	d02c      	beq.n	810b548 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810b4ee:	693b      	ldr	r3, [r7, #16]
 810b4f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810b4f2:	2b00      	cmp	r3, #0
 810b4f4:	d128      	bne.n	810b548 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b4f6:	693b      	ldr	r3, [r7, #16]
 810b4f8:	3304      	adds	r3, #4
 810b4fa:	4618      	mov	r0, r3
 810b4fc:	f7fe f934 	bl	8109768 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810b500:	693b      	ldr	r3, [r7, #16]
 810b502:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810b504:	693b      	ldr	r3, [r7, #16]
 810b506:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b508:	693b      	ldr	r3, [r7, #16]
 810b50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b50c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810b510:	693b      	ldr	r3, [r7, #16]
 810b512:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810b514:	693b      	ldr	r3, [r7, #16]
 810b516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b518:	4b0f      	ldr	r3, [pc, #60]	@ (810b558 <xTaskPriorityDisinherit+0xd8>)
 810b51a:	681b      	ldr	r3, [r3, #0]
 810b51c:	429a      	cmp	r2, r3
 810b51e:	d903      	bls.n	810b528 <xTaskPriorityDisinherit+0xa8>
 810b520:	693b      	ldr	r3, [r7, #16]
 810b522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b524:	4a0c      	ldr	r2, [pc, #48]	@ (810b558 <xTaskPriorityDisinherit+0xd8>)
 810b526:	6013      	str	r3, [r2, #0]
 810b528:	693b      	ldr	r3, [r7, #16]
 810b52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810b52c:	4613      	mov	r3, r2
 810b52e:	009b      	lsls	r3, r3, #2
 810b530:	4413      	add	r3, r2
 810b532:	009b      	lsls	r3, r3, #2
 810b534:	4a09      	ldr	r2, [pc, #36]	@ (810b55c <xTaskPriorityDisinherit+0xdc>)
 810b536:	441a      	add	r2, r3
 810b538:	693b      	ldr	r3, [r7, #16]
 810b53a:	3304      	adds	r3, #4
 810b53c:	4619      	mov	r1, r3
 810b53e:	4610      	mov	r0, r2
 810b540:	f7fe f8b5 	bl	81096ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810b544:	2301      	movs	r3, #1
 810b546:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810b548:	697b      	ldr	r3, [r7, #20]
	}
 810b54a:	4618      	mov	r0, r3
 810b54c:	3718      	adds	r7, #24
 810b54e:	46bd      	mov	sp, r7
 810b550:	bd80      	pop	{r7, pc}
 810b552:	bf00      	nop
 810b554:	10004854 	.word	0x10004854
 810b558:	10004d30 	.word	0x10004d30
 810b55c:	10004858 	.word	0x10004858

0810b560 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810b560:	b580      	push	{r7, lr}
 810b562:	b084      	sub	sp, #16
 810b564:	af00      	add	r7, sp, #0
 810b566:	6078      	str	r0, [r7, #4]
 810b568:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810b56a:	4b21      	ldr	r3, [pc, #132]	@ (810b5f0 <prvAddCurrentTaskToDelayedList+0x90>)
 810b56c:	681b      	ldr	r3, [r3, #0]
 810b56e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b570:	4b20      	ldr	r3, [pc, #128]	@ (810b5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b572:	681b      	ldr	r3, [r3, #0]
 810b574:	3304      	adds	r3, #4
 810b576:	4618      	mov	r0, r3
 810b578:	f7fe f8f6 	bl	8109768 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810b57c:	687b      	ldr	r3, [r7, #4]
 810b57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b582:	d10a      	bne.n	810b59a <prvAddCurrentTaskToDelayedList+0x3a>
 810b584:	683b      	ldr	r3, [r7, #0]
 810b586:	2b00      	cmp	r3, #0
 810b588:	d007      	beq.n	810b59a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b58a:	4b1a      	ldr	r3, [pc, #104]	@ (810b5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b58c:	681b      	ldr	r3, [r3, #0]
 810b58e:	3304      	adds	r3, #4
 810b590:	4619      	mov	r1, r3
 810b592:	4819      	ldr	r0, [pc, #100]	@ (810b5f8 <prvAddCurrentTaskToDelayedList+0x98>)
 810b594:	f7fe f88b 	bl	81096ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810b598:	e026      	b.n	810b5e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810b59a:	68fa      	ldr	r2, [r7, #12]
 810b59c:	687b      	ldr	r3, [r7, #4]
 810b59e:	4413      	add	r3, r2
 810b5a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810b5a2:	4b14      	ldr	r3, [pc, #80]	@ (810b5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b5a4:	681b      	ldr	r3, [r3, #0]
 810b5a6:	68ba      	ldr	r2, [r7, #8]
 810b5a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810b5aa:	68ba      	ldr	r2, [r7, #8]
 810b5ac:	68fb      	ldr	r3, [r7, #12]
 810b5ae:	429a      	cmp	r2, r3
 810b5b0:	d209      	bcs.n	810b5c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b5b2:	4b12      	ldr	r3, [pc, #72]	@ (810b5fc <prvAddCurrentTaskToDelayedList+0x9c>)
 810b5b4:	681a      	ldr	r2, [r3, #0]
 810b5b6:	4b0f      	ldr	r3, [pc, #60]	@ (810b5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b5b8:	681b      	ldr	r3, [r3, #0]
 810b5ba:	3304      	adds	r3, #4
 810b5bc:	4619      	mov	r1, r3
 810b5be:	4610      	mov	r0, r2
 810b5c0:	f7fe f899 	bl	81096f6 <vListInsert>
}
 810b5c4:	e010      	b.n	810b5e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b5c6:	4b0e      	ldr	r3, [pc, #56]	@ (810b600 <prvAddCurrentTaskToDelayedList+0xa0>)
 810b5c8:	681a      	ldr	r2, [r3, #0]
 810b5ca:	4b0a      	ldr	r3, [pc, #40]	@ (810b5f4 <prvAddCurrentTaskToDelayedList+0x94>)
 810b5cc:	681b      	ldr	r3, [r3, #0]
 810b5ce:	3304      	adds	r3, #4
 810b5d0:	4619      	mov	r1, r3
 810b5d2:	4610      	mov	r0, r2
 810b5d4:	f7fe f88f 	bl	81096f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810b5d8:	4b0a      	ldr	r3, [pc, #40]	@ (810b604 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b5da:	681b      	ldr	r3, [r3, #0]
 810b5dc:	68ba      	ldr	r2, [r7, #8]
 810b5de:	429a      	cmp	r2, r3
 810b5e0:	d202      	bcs.n	810b5e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810b5e2:	4a08      	ldr	r2, [pc, #32]	@ (810b604 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b5e4:	68bb      	ldr	r3, [r7, #8]
 810b5e6:	6013      	str	r3, [r2, #0]
}
 810b5e8:	bf00      	nop
 810b5ea:	3710      	adds	r7, #16
 810b5ec:	46bd      	mov	sp, r7
 810b5ee:	bd80      	pop	{r7, pc}
 810b5f0:	10004d2c 	.word	0x10004d2c
 810b5f4:	10004854 	.word	0x10004854
 810b5f8:	10004d14 	.word	0x10004d14
 810b5fc:	10004ce4 	.word	0x10004ce4
 810b600:	10004ce0 	.word	0x10004ce0
 810b604:	10004d48 	.word	0x10004d48

0810b608 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810b608:	b580      	push	{r7, lr}
 810b60a:	b08a      	sub	sp, #40	@ 0x28
 810b60c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810b60e:	2300      	movs	r3, #0
 810b610:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810b612:	f000 fb13 	bl	810bc3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810b616:	4b1d      	ldr	r3, [pc, #116]	@ (810b68c <xTimerCreateTimerTask+0x84>)
 810b618:	681b      	ldr	r3, [r3, #0]
 810b61a:	2b00      	cmp	r3, #0
 810b61c:	d021      	beq.n	810b662 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810b61e:	2300      	movs	r3, #0
 810b620:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810b622:	2300      	movs	r3, #0
 810b624:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810b626:	1d3a      	adds	r2, r7, #4
 810b628:	f107 0108 	add.w	r1, r7, #8
 810b62c:	f107 030c 	add.w	r3, r7, #12
 810b630:	4618      	mov	r0, r3
 810b632:	f7fd fe07 	bl	8109244 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810b636:	6879      	ldr	r1, [r7, #4]
 810b638:	68bb      	ldr	r3, [r7, #8]
 810b63a:	68fa      	ldr	r2, [r7, #12]
 810b63c:	9202      	str	r2, [sp, #8]
 810b63e:	9301      	str	r3, [sp, #4]
 810b640:	2302      	movs	r3, #2
 810b642:	9300      	str	r3, [sp, #0]
 810b644:	2300      	movs	r3, #0
 810b646:	460a      	mov	r2, r1
 810b648:	4911      	ldr	r1, [pc, #68]	@ (810b690 <xTimerCreateTimerTask+0x88>)
 810b64a:	4812      	ldr	r0, [pc, #72]	@ (810b694 <xTimerCreateTimerTask+0x8c>)
 810b64c:	f7ff f8be 	bl	810a7cc <xTaskCreateStatic>
 810b650:	4603      	mov	r3, r0
 810b652:	4a11      	ldr	r2, [pc, #68]	@ (810b698 <xTimerCreateTimerTask+0x90>)
 810b654:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810b656:	4b10      	ldr	r3, [pc, #64]	@ (810b698 <xTimerCreateTimerTask+0x90>)
 810b658:	681b      	ldr	r3, [r3, #0]
 810b65a:	2b00      	cmp	r3, #0
 810b65c:	d001      	beq.n	810b662 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810b65e:	2301      	movs	r3, #1
 810b660:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810b662:	697b      	ldr	r3, [r7, #20]
 810b664:	2b00      	cmp	r3, #0
 810b666:	d10b      	bne.n	810b680 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810b668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b66c:	f383 8811 	msr	BASEPRI, r3
 810b670:	f3bf 8f6f 	isb	sy
 810b674:	f3bf 8f4f 	dsb	sy
 810b678:	613b      	str	r3, [r7, #16]
}
 810b67a:	bf00      	nop
 810b67c:	bf00      	nop
 810b67e:	e7fd      	b.n	810b67c <xTimerCreateTimerTask+0x74>
	return xReturn;
 810b680:	697b      	ldr	r3, [r7, #20]
}
 810b682:	4618      	mov	r0, r3
 810b684:	3718      	adds	r7, #24
 810b686:	46bd      	mov	sp, r7
 810b688:	bd80      	pop	{r7, pc}
 810b68a:	bf00      	nop
 810b68c:	10004d84 	.word	0x10004d84
 810b690:	0810c460 	.word	0x0810c460
 810b694:	0810b7d5 	.word	0x0810b7d5
 810b698:	10004d88 	.word	0x10004d88

0810b69c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810b69c:	b580      	push	{r7, lr}
 810b69e:	b08a      	sub	sp, #40	@ 0x28
 810b6a0:	af00      	add	r7, sp, #0
 810b6a2:	60f8      	str	r0, [r7, #12]
 810b6a4:	60b9      	str	r1, [r7, #8]
 810b6a6:	607a      	str	r2, [r7, #4]
 810b6a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810b6aa:	2300      	movs	r3, #0
 810b6ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810b6ae:	68fb      	ldr	r3, [r7, #12]
 810b6b0:	2b00      	cmp	r3, #0
 810b6b2:	d10b      	bne.n	810b6cc <xTimerGenericCommand+0x30>
	__asm volatile
 810b6b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b6b8:	f383 8811 	msr	BASEPRI, r3
 810b6bc:	f3bf 8f6f 	isb	sy
 810b6c0:	f3bf 8f4f 	dsb	sy
 810b6c4:	623b      	str	r3, [r7, #32]
}
 810b6c6:	bf00      	nop
 810b6c8:	bf00      	nop
 810b6ca:	e7fd      	b.n	810b6c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810b6cc:	4b19      	ldr	r3, [pc, #100]	@ (810b734 <xTimerGenericCommand+0x98>)
 810b6ce:	681b      	ldr	r3, [r3, #0]
 810b6d0:	2b00      	cmp	r3, #0
 810b6d2:	d02a      	beq.n	810b72a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810b6d4:	68bb      	ldr	r3, [r7, #8]
 810b6d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810b6d8:	687b      	ldr	r3, [r7, #4]
 810b6da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810b6dc:	68fb      	ldr	r3, [r7, #12]
 810b6de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810b6e0:	68bb      	ldr	r3, [r7, #8]
 810b6e2:	2b05      	cmp	r3, #5
 810b6e4:	dc18      	bgt.n	810b718 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810b6e6:	f7ff fead 	bl	810b444 <xTaskGetSchedulerState>
 810b6ea:	4603      	mov	r3, r0
 810b6ec:	2b02      	cmp	r3, #2
 810b6ee:	d109      	bne.n	810b704 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810b6f0:	4b10      	ldr	r3, [pc, #64]	@ (810b734 <xTimerGenericCommand+0x98>)
 810b6f2:	6818      	ldr	r0, [r3, #0]
 810b6f4:	f107 0110 	add.w	r1, r7, #16
 810b6f8:	2300      	movs	r3, #0
 810b6fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b6fc:	f7fe fbf4 	bl	8109ee8 <xQueueGenericSend>
 810b700:	6278      	str	r0, [r7, #36]	@ 0x24
 810b702:	e012      	b.n	810b72a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810b704:	4b0b      	ldr	r3, [pc, #44]	@ (810b734 <xTimerGenericCommand+0x98>)
 810b706:	6818      	ldr	r0, [r3, #0]
 810b708:	f107 0110 	add.w	r1, r7, #16
 810b70c:	2300      	movs	r3, #0
 810b70e:	2200      	movs	r2, #0
 810b710:	f7fe fbea 	bl	8109ee8 <xQueueGenericSend>
 810b714:	6278      	str	r0, [r7, #36]	@ 0x24
 810b716:	e008      	b.n	810b72a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810b718:	4b06      	ldr	r3, [pc, #24]	@ (810b734 <xTimerGenericCommand+0x98>)
 810b71a:	6818      	ldr	r0, [r3, #0]
 810b71c:	f107 0110 	add.w	r1, r7, #16
 810b720:	2300      	movs	r3, #0
 810b722:	683a      	ldr	r2, [r7, #0]
 810b724:	f7fe fce2 	bl	810a0ec <xQueueGenericSendFromISR>
 810b728:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810b72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810b72c:	4618      	mov	r0, r3
 810b72e:	3728      	adds	r7, #40	@ 0x28
 810b730:	46bd      	mov	sp, r7
 810b732:	bd80      	pop	{r7, pc}
 810b734:	10004d84 	.word	0x10004d84

0810b738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810b738:	b580      	push	{r7, lr}
 810b73a:	b088      	sub	sp, #32
 810b73c:	af02      	add	r7, sp, #8
 810b73e:	6078      	str	r0, [r7, #4]
 810b740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b742:	4b23      	ldr	r3, [pc, #140]	@ (810b7d0 <prvProcessExpiredTimer+0x98>)
 810b744:	681b      	ldr	r3, [r3, #0]
 810b746:	68db      	ldr	r3, [r3, #12]
 810b748:	68db      	ldr	r3, [r3, #12]
 810b74a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b74c:	697b      	ldr	r3, [r7, #20]
 810b74e:	3304      	adds	r3, #4
 810b750:	4618      	mov	r0, r3
 810b752:	f7fe f809 	bl	8109768 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810b756:	697b      	ldr	r3, [r7, #20]
 810b758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b75c:	f003 0304 	and.w	r3, r3, #4
 810b760:	2b00      	cmp	r3, #0
 810b762:	d023      	beq.n	810b7ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810b764:	697b      	ldr	r3, [r7, #20]
 810b766:	699a      	ldr	r2, [r3, #24]
 810b768:	687b      	ldr	r3, [r7, #4]
 810b76a:	18d1      	adds	r1, r2, r3
 810b76c:	687b      	ldr	r3, [r7, #4]
 810b76e:	683a      	ldr	r2, [r7, #0]
 810b770:	6978      	ldr	r0, [r7, #20]
 810b772:	f000 f8d5 	bl	810b920 <prvInsertTimerInActiveList>
 810b776:	4603      	mov	r3, r0
 810b778:	2b00      	cmp	r3, #0
 810b77a:	d020      	beq.n	810b7be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810b77c:	2300      	movs	r3, #0
 810b77e:	9300      	str	r3, [sp, #0]
 810b780:	2300      	movs	r3, #0
 810b782:	687a      	ldr	r2, [r7, #4]
 810b784:	2100      	movs	r1, #0
 810b786:	6978      	ldr	r0, [r7, #20]
 810b788:	f7ff ff88 	bl	810b69c <xTimerGenericCommand>
 810b78c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810b78e:	693b      	ldr	r3, [r7, #16]
 810b790:	2b00      	cmp	r3, #0
 810b792:	d114      	bne.n	810b7be <prvProcessExpiredTimer+0x86>
	__asm volatile
 810b794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b798:	f383 8811 	msr	BASEPRI, r3
 810b79c:	f3bf 8f6f 	isb	sy
 810b7a0:	f3bf 8f4f 	dsb	sy
 810b7a4:	60fb      	str	r3, [r7, #12]
}
 810b7a6:	bf00      	nop
 810b7a8:	bf00      	nop
 810b7aa:	e7fd      	b.n	810b7a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810b7ac:	697b      	ldr	r3, [r7, #20]
 810b7ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810b7b2:	f023 0301 	bic.w	r3, r3, #1
 810b7b6:	b2da      	uxtb	r2, r3
 810b7b8:	697b      	ldr	r3, [r7, #20]
 810b7ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810b7be:	697b      	ldr	r3, [r7, #20]
 810b7c0:	6a1b      	ldr	r3, [r3, #32]
 810b7c2:	6978      	ldr	r0, [r7, #20]
 810b7c4:	4798      	blx	r3
}
 810b7c6:	bf00      	nop
 810b7c8:	3718      	adds	r7, #24
 810b7ca:	46bd      	mov	sp, r7
 810b7cc:	bd80      	pop	{r7, pc}
 810b7ce:	bf00      	nop
 810b7d0:	10004d7c 	.word	0x10004d7c

0810b7d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810b7d4:	b580      	push	{r7, lr}
 810b7d6:	b084      	sub	sp, #16
 810b7d8:	af00      	add	r7, sp, #0
 810b7da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b7dc:	f107 0308 	add.w	r3, r7, #8
 810b7e0:	4618      	mov	r0, r3
 810b7e2:	f000 f859 	bl	810b898 <prvGetNextExpireTime>
 810b7e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810b7e8:	68bb      	ldr	r3, [r7, #8]
 810b7ea:	4619      	mov	r1, r3
 810b7ec:	68f8      	ldr	r0, [r7, #12]
 810b7ee:	f000 f805 	bl	810b7fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810b7f2:	f000 f8d7 	bl	810b9a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810b7f6:	bf00      	nop
 810b7f8:	e7f0      	b.n	810b7dc <prvTimerTask+0x8>
	...

0810b7fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810b7fc:	b580      	push	{r7, lr}
 810b7fe:	b084      	sub	sp, #16
 810b800:	af00      	add	r7, sp, #0
 810b802:	6078      	str	r0, [r7, #4]
 810b804:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810b806:	f7ff fa25 	bl	810ac54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810b80a:	f107 0308 	add.w	r3, r7, #8
 810b80e:	4618      	mov	r0, r3
 810b810:	f000 f866 	bl	810b8e0 <prvSampleTimeNow>
 810b814:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810b816:	68bb      	ldr	r3, [r7, #8]
 810b818:	2b00      	cmp	r3, #0
 810b81a:	d130      	bne.n	810b87e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810b81c:	683b      	ldr	r3, [r7, #0]
 810b81e:	2b00      	cmp	r3, #0
 810b820:	d10a      	bne.n	810b838 <prvProcessTimerOrBlockTask+0x3c>
 810b822:	687a      	ldr	r2, [r7, #4]
 810b824:	68fb      	ldr	r3, [r7, #12]
 810b826:	429a      	cmp	r2, r3
 810b828:	d806      	bhi.n	810b838 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810b82a:	f7ff fa21 	bl	810ac70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810b82e:	68f9      	ldr	r1, [r7, #12]
 810b830:	6878      	ldr	r0, [r7, #4]
 810b832:	f7ff ff81 	bl	810b738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810b836:	e024      	b.n	810b882 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810b838:	683b      	ldr	r3, [r7, #0]
 810b83a:	2b00      	cmp	r3, #0
 810b83c:	d008      	beq.n	810b850 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810b83e:	4b13      	ldr	r3, [pc, #76]	@ (810b88c <prvProcessTimerOrBlockTask+0x90>)
 810b840:	681b      	ldr	r3, [r3, #0]
 810b842:	681b      	ldr	r3, [r3, #0]
 810b844:	2b00      	cmp	r3, #0
 810b846:	d101      	bne.n	810b84c <prvProcessTimerOrBlockTask+0x50>
 810b848:	2301      	movs	r3, #1
 810b84a:	e000      	b.n	810b84e <prvProcessTimerOrBlockTask+0x52>
 810b84c:	2300      	movs	r3, #0
 810b84e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810b850:	4b0f      	ldr	r3, [pc, #60]	@ (810b890 <prvProcessTimerOrBlockTask+0x94>)
 810b852:	6818      	ldr	r0, [r3, #0]
 810b854:	687a      	ldr	r2, [r7, #4]
 810b856:	68fb      	ldr	r3, [r7, #12]
 810b858:	1ad3      	subs	r3, r2, r3
 810b85a:	683a      	ldr	r2, [r7, #0]
 810b85c:	4619      	mov	r1, r3
 810b85e:	f7fe ff81 	bl	810a764 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810b862:	f7ff fa05 	bl	810ac70 <xTaskResumeAll>
 810b866:	4603      	mov	r3, r0
 810b868:	2b00      	cmp	r3, #0
 810b86a:	d10a      	bne.n	810b882 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810b86c:	4b09      	ldr	r3, [pc, #36]	@ (810b894 <prvProcessTimerOrBlockTask+0x98>)
 810b86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810b872:	601a      	str	r2, [r3, #0]
 810b874:	f3bf 8f4f 	dsb	sy
 810b878:	f3bf 8f6f 	isb	sy
}
 810b87c:	e001      	b.n	810b882 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810b87e:	f7ff f9f7 	bl	810ac70 <xTaskResumeAll>
}
 810b882:	bf00      	nop
 810b884:	3710      	adds	r7, #16
 810b886:	46bd      	mov	sp, r7
 810b888:	bd80      	pop	{r7, pc}
 810b88a:	bf00      	nop
 810b88c:	10004d80 	.word	0x10004d80
 810b890:	10004d84 	.word	0x10004d84
 810b894:	e000ed04 	.word	0xe000ed04

0810b898 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810b898:	b480      	push	{r7}
 810b89a:	b085      	sub	sp, #20
 810b89c:	af00      	add	r7, sp, #0
 810b89e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810b8a0:	4b0e      	ldr	r3, [pc, #56]	@ (810b8dc <prvGetNextExpireTime+0x44>)
 810b8a2:	681b      	ldr	r3, [r3, #0]
 810b8a4:	681b      	ldr	r3, [r3, #0]
 810b8a6:	2b00      	cmp	r3, #0
 810b8a8:	d101      	bne.n	810b8ae <prvGetNextExpireTime+0x16>
 810b8aa:	2201      	movs	r2, #1
 810b8ac:	e000      	b.n	810b8b0 <prvGetNextExpireTime+0x18>
 810b8ae:	2200      	movs	r2, #0
 810b8b0:	687b      	ldr	r3, [r7, #4]
 810b8b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810b8b4:	687b      	ldr	r3, [r7, #4]
 810b8b6:	681b      	ldr	r3, [r3, #0]
 810b8b8:	2b00      	cmp	r3, #0
 810b8ba:	d105      	bne.n	810b8c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810b8bc:	4b07      	ldr	r3, [pc, #28]	@ (810b8dc <prvGetNextExpireTime+0x44>)
 810b8be:	681b      	ldr	r3, [r3, #0]
 810b8c0:	68db      	ldr	r3, [r3, #12]
 810b8c2:	681b      	ldr	r3, [r3, #0]
 810b8c4:	60fb      	str	r3, [r7, #12]
 810b8c6:	e001      	b.n	810b8cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810b8c8:	2300      	movs	r3, #0
 810b8ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810b8cc:	68fb      	ldr	r3, [r7, #12]
}
 810b8ce:	4618      	mov	r0, r3
 810b8d0:	3714      	adds	r7, #20
 810b8d2:	46bd      	mov	sp, r7
 810b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8d8:	4770      	bx	lr
 810b8da:	bf00      	nop
 810b8dc:	10004d7c 	.word	0x10004d7c

0810b8e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810b8e0:	b580      	push	{r7, lr}
 810b8e2:	b084      	sub	sp, #16
 810b8e4:	af00      	add	r7, sp, #0
 810b8e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810b8e8:	f7ff fa60 	bl	810adac <xTaskGetTickCount>
 810b8ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810b8ee:	4b0b      	ldr	r3, [pc, #44]	@ (810b91c <prvSampleTimeNow+0x3c>)
 810b8f0:	681b      	ldr	r3, [r3, #0]
 810b8f2:	68fa      	ldr	r2, [r7, #12]
 810b8f4:	429a      	cmp	r2, r3
 810b8f6:	d205      	bcs.n	810b904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810b8f8:	f000 f93a 	bl	810bb70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810b8fc:	687b      	ldr	r3, [r7, #4]
 810b8fe:	2201      	movs	r2, #1
 810b900:	601a      	str	r2, [r3, #0]
 810b902:	e002      	b.n	810b90a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810b904:	687b      	ldr	r3, [r7, #4]
 810b906:	2200      	movs	r2, #0
 810b908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810b90a:	4a04      	ldr	r2, [pc, #16]	@ (810b91c <prvSampleTimeNow+0x3c>)
 810b90c:	68fb      	ldr	r3, [r7, #12]
 810b90e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810b910:	68fb      	ldr	r3, [r7, #12]
}
 810b912:	4618      	mov	r0, r3
 810b914:	3710      	adds	r7, #16
 810b916:	46bd      	mov	sp, r7
 810b918:	bd80      	pop	{r7, pc}
 810b91a:	bf00      	nop
 810b91c:	10004d8c 	.word	0x10004d8c

0810b920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810b920:	b580      	push	{r7, lr}
 810b922:	b086      	sub	sp, #24
 810b924:	af00      	add	r7, sp, #0
 810b926:	60f8      	str	r0, [r7, #12]
 810b928:	60b9      	str	r1, [r7, #8]
 810b92a:	607a      	str	r2, [r7, #4]
 810b92c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810b92e:	2300      	movs	r3, #0
 810b930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810b932:	68fb      	ldr	r3, [r7, #12]
 810b934:	68ba      	ldr	r2, [r7, #8]
 810b936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810b938:	68fb      	ldr	r3, [r7, #12]
 810b93a:	68fa      	ldr	r2, [r7, #12]
 810b93c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810b93e:	68ba      	ldr	r2, [r7, #8]
 810b940:	687b      	ldr	r3, [r7, #4]
 810b942:	429a      	cmp	r2, r3
 810b944:	d812      	bhi.n	810b96c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b946:	687a      	ldr	r2, [r7, #4]
 810b948:	683b      	ldr	r3, [r7, #0]
 810b94a:	1ad2      	subs	r2, r2, r3
 810b94c:	68fb      	ldr	r3, [r7, #12]
 810b94e:	699b      	ldr	r3, [r3, #24]
 810b950:	429a      	cmp	r2, r3
 810b952:	d302      	bcc.n	810b95a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810b954:	2301      	movs	r3, #1
 810b956:	617b      	str	r3, [r7, #20]
 810b958:	e01b      	b.n	810b992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810b95a:	4b10      	ldr	r3, [pc, #64]	@ (810b99c <prvInsertTimerInActiveList+0x7c>)
 810b95c:	681a      	ldr	r2, [r3, #0]
 810b95e:	68fb      	ldr	r3, [r7, #12]
 810b960:	3304      	adds	r3, #4
 810b962:	4619      	mov	r1, r3
 810b964:	4610      	mov	r0, r2
 810b966:	f7fd fec6 	bl	81096f6 <vListInsert>
 810b96a:	e012      	b.n	810b992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810b96c:	687a      	ldr	r2, [r7, #4]
 810b96e:	683b      	ldr	r3, [r7, #0]
 810b970:	429a      	cmp	r2, r3
 810b972:	d206      	bcs.n	810b982 <prvInsertTimerInActiveList+0x62>
 810b974:	68ba      	ldr	r2, [r7, #8]
 810b976:	683b      	ldr	r3, [r7, #0]
 810b978:	429a      	cmp	r2, r3
 810b97a:	d302      	bcc.n	810b982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810b97c:	2301      	movs	r3, #1
 810b97e:	617b      	str	r3, [r7, #20]
 810b980:	e007      	b.n	810b992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810b982:	4b07      	ldr	r3, [pc, #28]	@ (810b9a0 <prvInsertTimerInActiveList+0x80>)
 810b984:	681a      	ldr	r2, [r3, #0]
 810b986:	68fb      	ldr	r3, [r7, #12]
 810b988:	3304      	adds	r3, #4
 810b98a:	4619      	mov	r1, r3
 810b98c:	4610      	mov	r0, r2
 810b98e:	f7fd feb2 	bl	81096f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810b992:	697b      	ldr	r3, [r7, #20]
}
 810b994:	4618      	mov	r0, r3
 810b996:	3718      	adds	r7, #24
 810b998:	46bd      	mov	sp, r7
 810b99a:	bd80      	pop	{r7, pc}
 810b99c:	10004d80 	.word	0x10004d80
 810b9a0:	10004d7c 	.word	0x10004d7c

0810b9a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810b9a4:	b580      	push	{r7, lr}
 810b9a6:	b08e      	sub	sp, #56	@ 0x38
 810b9a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810b9aa:	e0ce      	b.n	810bb4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810b9ac:	687b      	ldr	r3, [r7, #4]
 810b9ae:	2b00      	cmp	r3, #0
 810b9b0:	da19      	bge.n	810b9e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810b9b2:	1d3b      	adds	r3, r7, #4
 810b9b4:	3304      	adds	r3, #4
 810b9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810b9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b9ba:	2b00      	cmp	r3, #0
 810b9bc:	d10b      	bne.n	810b9d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 810b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810b9c2:	f383 8811 	msr	BASEPRI, r3
 810b9c6:	f3bf 8f6f 	isb	sy
 810b9ca:	f3bf 8f4f 	dsb	sy
 810b9ce:	61fb      	str	r3, [r7, #28]
}
 810b9d0:	bf00      	nop
 810b9d2:	bf00      	nop
 810b9d4:	e7fd      	b.n	810b9d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810b9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b9d8:	681b      	ldr	r3, [r3, #0]
 810b9da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b9dc:	6850      	ldr	r0, [r2, #4]
 810b9de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b9e0:	6892      	ldr	r2, [r2, #8]
 810b9e2:	4611      	mov	r1, r2
 810b9e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810b9e6:	687b      	ldr	r3, [r7, #4]
 810b9e8:	2b00      	cmp	r3, #0
 810b9ea:	f2c0 80ae 	blt.w	810bb4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810b9ee:	68fb      	ldr	r3, [r7, #12]
 810b9f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810b9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9f4:	695b      	ldr	r3, [r3, #20]
 810b9f6:	2b00      	cmp	r3, #0
 810b9f8:	d004      	beq.n	810ba04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810b9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9fc:	3304      	adds	r3, #4
 810b9fe:	4618      	mov	r0, r3
 810ba00:	f7fd feb2 	bl	8109768 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810ba04:	463b      	mov	r3, r7
 810ba06:	4618      	mov	r0, r3
 810ba08:	f7ff ff6a 	bl	810b8e0 <prvSampleTimeNow>
 810ba0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810ba0e:	687b      	ldr	r3, [r7, #4]
 810ba10:	2b09      	cmp	r3, #9
 810ba12:	f200 8097 	bhi.w	810bb44 <prvProcessReceivedCommands+0x1a0>
 810ba16:	a201      	add	r2, pc, #4	@ (adr r2, 810ba1c <prvProcessReceivedCommands+0x78>)
 810ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ba1c:	0810ba45 	.word	0x0810ba45
 810ba20:	0810ba45 	.word	0x0810ba45
 810ba24:	0810ba45 	.word	0x0810ba45
 810ba28:	0810babb 	.word	0x0810babb
 810ba2c:	0810bacf 	.word	0x0810bacf
 810ba30:	0810bb1b 	.word	0x0810bb1b
 810ba34:	0810ba45 	.word	0x0810ba45
 810ba38:	0810ba45 	.word	0x0810ba45
 810ba3c:	0810babb 	.word	0x0810babb
 810ba40:	0810bacf 	.word	0x0810bacf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ba4a:	f043 0301 	orr.w	r3, r3, #1
 810ba4e:	b2da      	uxtb	r2, r3
 810ba50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810ba56:	68ba      	ldr	r2, [r7, #8]
 810ba58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba5a:	699b      	ldr	r3, [r3, #24]
 810ba5c:	18d1      	adds	r1, r2, r3
 810ba5e:	68bb      	ldr	r3, [r7, #8]
 810ba60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ba62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ba64:	f7ff ff5c 	bl	810b920 <prvInsertTimerInActiveList>
 810ba68:	4603      	mov	r3, r0
 810ba6a:	2b00      	cmp	r3, #0
 810ba6c:	d06c      	beq.n	810bb48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810ba6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba70:	6a1b      	ldr	r3, [r3, #32]
 810ba72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ba74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810ba76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ba7c:	f003 0304 	and.w	r3, r3, #4
 810ba80:	2b00      	cmp	r3, #0
 810ba82:	d061      	beq.n	810bb48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810ba84:	68ba      	ldr	r2, [r7, #8]
 810ba86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ba88:	699b      	ldr	r3, [r3, #24]
 810ba8a:	441a      	add	r2, r3
 810ba8c:	2300      	movs	r3, #0
 810ba8e:	9300      	str	r3, [sp, #0]
 810ba90:	2300      	movs	r3, #0
 810ba92:	2100      	movs	r1, #0
 810ba94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ba96:	f7ff fe01 	bl	810b69c <xTimerGenericCommand>
 810ba9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810ba9c:	6a3b      	ldr	r3, [r7, #32]
 810ba9e:	2b00      	cmp	r3, #0
 810baa0:	d152      	bne.n	810bb48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810baa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810baa6:	f383 8811 	msr	BASEPRI, r3
 810baaa:	f3bf 8f6f 	isb	sy
 810baae:	f3bf 8f4f 	dsb	sy
 810bab2:	61bb      	str	r3, [r7, #24]
}
 810bab4:	bf00      	nop
 810bab6:	bf00      	nop
 810bab8:	e7fd      	b.n	810bab6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810baba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810babc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810bac0:	f023 0301 	bic.w	r3, r3, #1
 810bac4:	b2da      	uxtb	r2, r3
 810bac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810bacc:	e03d      	b.n	810bb4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810bad4:	f043 0301 	orr.w	r3, r3, #1
 810bad8:	b2da      	uxtb	r2, r3
 810bada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810badc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810bae0:	68ba      	ldr	r2, [r7, #8]
 810bae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bae4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bae8:	699b      	ldr	r3, [r3, #24]
 810baea:	2b00      	cmp	r3, #0
 810baec:	d10b      	bne.n	810bb06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 810baee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810baf2:	f383 8811 	msr	BASEPRI, r3
 810baf6:	f3bf 8f6f 	isb	sy
 810bafa:	f3bf 8f4f 	dsb	sy
 810bafe:	617b      	str	r3, [r7, #20]
}
 810bb00:	bf00      	nop
 810bb02:	bf00      	nop
 810bb04:	e7fd      	b.n	810bb02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810bb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb08:	699a      	ldr	r2, [r3, #24]
 810bb0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bb0c:	18d1      	adds	r1, r2, r3
 810bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bb10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810bb12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810bb14:	f7ff ff04 	bl	810b920 <prvInsertTimerInActiveList>
					break;
 810bb18:	e017      	b.n	810bb4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810bb1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810bb20:	f003 0302 	and.w	r3, r3, #2
 810bb24:	2b00      	cmp	r3, #0
 810bb26:	d103      	bne.n	810bb30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810bb28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810bb2a:	f7fd fc73 	bl	8109414 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810bb2e:	e00c      	b.n	810bb4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810bb30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810bb36:	f023 0301 	bic.w	r3, r3, #1
 810bb3a:	b2da      	uxtb	r2, r3
 810bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810bb42:	e002      	b.n	810bb4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810bb44:	bf00      	nop
 810bb46:	e000      	b.n	810bb4a <prvProcessReceivedCommands+0x1a6>
					break;
 810bb48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810bb4a:	4b08      	ldr	r3, [pc, #32]	@ (810bb6c <prvProcessReceivedCommands+0x1c8>)
 810bb4c:	681b      	ldr	r3, [r3, #0]
 810bb4e:	1d39      	adds	r1, r7, #4
 810bb50:	2200      	movs	r2, #0
 810bb52:	4618      	mov	r0, r3
 810bb54:	f7fe fb68 	bl	810a228 <xQueueReceive>
 810bb58:	4603      	mov	r3, r0
 810bb5a:	2b00      	cmp	r3, #0
 810bb5c:	f47f af26 	bne.w	810b9ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810bb60:	bf00      	nop
 810bb62:	bf00      	nop
 810bb64:	3730      	adds	r7, #48	@ 0x30
 810bb66:	46bd      	mov	sp, r7
 810bb68:	bd80      	pop	{r7, pc}
 810bb6a:	bf00      	nop
 810bb6c:	10004d84 	.word	0x10004d84

0810bb70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810bb70:	b580      	push	{r7, lr}
 810bb72:	b088      	sub	sp, #32
 810bb74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810bb76:	e049      	b.n	810bc0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810bb78:	4b2e      	ldr	r3, [pc, #184]	@ (810bc34 <prvSwitchTimerLists+0xc4>)
 810bb7a:	681b      	ldr	r3, [r3, #0]
 810bb7c:	68db      	ldr	r3, [r3, #12]
 810bb7e:	681b      	ldr	r3, [r3, #0]
 810bb80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bb82:	4b2c      	ldr	r3, [pc, #176]	@ (810bc34 <prvSwitchTimerLists+0xc4>)
 810bb84:	681b      	ldr	r3, [r3, #0]
 810bb86:	68db      	ldr	r3, [r3, #12]
 810bb88:	68db      	ldr	r3, [r3, #12]
 810bb8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810bb8c:	68fb      	ldr	r3, [r7, #12]
 810bb8e:	3304      	adds	r3, #4
 810bb90:	4618      	mov	r0, r3
 810bb92:	f7fd fde9 	bl	8109768 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810bb96:	68fb      	ldr	r3, [r7, #12]
 810bb98:	6a1b      	ldr	r3, [r3, #32]
 810bb9a:	68f8      	ldr	r0, [r7, #12]
 810bb9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810bb9e:	68fb      	ldr	r3, [r7, #12]
 810bba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810bba4:	f003 0304 	and.w	r3, r3, #4
 810bba8:	2b00      	cmp	r3, #0
 810bbaa:	d02f      	beq.n	810bc0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810bbac:	68fb      	ldr	r3, [r7, #12]
 810bbae:	699b      	ldr	r3, [r3, #24]
 810bbb0:	693a      	ldr	r2, [r7, #16]
 810bbb2:	4413      	add	r3, r2
 810bbb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810bbb6:	68ba      	ldr	r2, [r7, #8]
 810bbb8:	693b      	ldr	r3, [r7, #16]
 810bbba:	429a      	cmp	r2, r3
 810bbbc:	d90e      	bls.n	810bbdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810bbbe:	68fb      	ldr	r3, [r7, #12]
 810bbc0:	68ba      	ldr	r2, [r7, #8]
 810bbc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810bbc4:	68fb      	ldr	r3, [r7, #12]
 810bbc6:	68fa      	ldr	r2, [r7, #12]
 810bbc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810bbca:	4b1a      	ldr	r3, [pc, #104]	@ (810bc34 <prvSwitchTimerLists+0xc4>)
 810bbcc:	681a      	ldr	r2, [r3, #0]
 810bbce:	68fb      	ldr	r3, [r7, #12]
 810bbd0:	3304      	adds	r3, #4
 810bbd2:	4619      	mov	r1, r3
 810bbd4:	4610      	mov	r0, r2
 810bbd6:	f7fd fd8e 	bl	81096f6 <vListInsert>
 810bbda:	e017      	b.n	810bc0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810bbdc:	2300      	movs	r3, #0
 810bbde:	9300      	str	r3, [sp, #0]
 810bbe0:	2300      	movs	r3, #0
 810bbe2:	693a      	ldr	r2, [r7, #16]
 810bbe4:	2100      	movs	r1, #0
 810bbe6:	68f8      	ldr	r0, [r7, #12]
 810bbe8:	f7ff fd58 	bl	810b69c <xTimerGenericCommand>
 810bbec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810bbee:	687b      	ldr	r3, [r7, #4]
 810bbf0:	2b00      	cmp	r3, #0
 810bbf2:	d10b      	bne.n	810bc0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 810bbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810bbf8:	f383 8811 	msr	BASEPRI, r3
 810bbfc:	f3bf 8f6f 	isb	sy
 810bc00:	f3bf 8f4f 	dsb	sy
 810bc04:	603b      	str	r3, [r7, #0]
}
 810bc06:	bf00      	nop
 810bc08:	bf00      	nop
 810bc0a:	e7fd      	b.n	810bc08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810bc0c:	4b09      	ldr	r3, [pc, #36]	@ (810bc34 <prvSwitchTimerLists+0xc4>)
 810bc0e:	681b      	ldr	r3, [r3, #0]
 810bc10:	681b      	ldr	r3, [r3, #0]
 810bc12:	2b00      	cmp	r3, #0
 810bc14:	d1b0      	bne.n	810bb78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810bc16:	4b07      	ldr	r3, [pc, #28]	@ (810bc34 <prvSwitchTimerLists+0xc4>)
 810bc18:	681b      	ldr	r3, [r3, #0]
 810bc1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810bc1c:	4b06      	ldr	r3, [pc, #24]	@ (810bc38 <prvSwitchTimerLists+0xc8>)
 810bc1e:	681b      	ldr	r3, [r3, #0]
 810bc20:	4a04      	ldr	r2, [pc, #16]	@ (810bc34 <prvSwitchTimerLists+0xc4>)
 810bc22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810bc24:	4a04      	ldr	r2, [pc, #16]	@ (810bc38 <prvSwitchTimerLists+0xc8>)
 810bc26:	697b      	ldr	r3, [r7, #20]
 810bc28:	6013      	str	r3, [r2, #0]
}
 810bc2a:	bf00      	nop
 810bc2c:	3718      	adds	r7, #24
 810bc2e:	46bd      	mov	sp, r7
 810bc30:	bd80      	pop	{r7, pc}
 810bc32:	bf00      	nop
 810bc34:	10004d7c 	.word	0x10004d7c
 810bc38:	10004d80 	.word	0x10004d80

0810bc3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810bc3c:	b580      	push	{r7, lr}
 810bc3e:	b082      	sub	sp, #8
 810bc40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810bc42:	f7fd fee9 	bl	8109a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810bc46:	4b15      	ldr	r3, [pc, #84]	@ (810bc9c <prvCheckForValidListAndQueue+0x60>)
 810bc48:	681b      	ldr	r3, [r3, #0]
 810bc4a:	2b00      	cmp	r3, #0
 810bc4c:	d120      	bne.n	810bc90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810bc4e:	4814      	ldr	r0, [pc, #80]	@ (810bca0 <prvCheckForValidListAndQueue+0x64>)
 810bc50:	f7fd fd00 	bl	8109654 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810bc54:	4813      	ldr	r0, [pc, #76]	@ (810bca4 <prvCheckForValidListAndQueue+0x68>)
 810bc56:	f7fd fcfd 	bl	8109654 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810bc5a:	4b13      	ldr	r3, [pc, #76]	@ (810bca8 <prvCheckForValidListAndQueue+0x6c>)
 810bc5c:	4a10      	ldr	r2, [pc, #64]	@ (810bca0 <prvCheckForValidListAndQueue+0x64>)
 810bc5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810bc60:	4b12      	ldr	r3, [pc, #72]	@ (810bcac <prvCheckForValidListAndQueue+0x70>)
 810bc62:	4a10      	ldr	r2, [pc, #64]	@ (810bca4 <prvCheckForValidListAndQueue+0x68>)
 810bc64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810bc66:	2300      	movs	r3, #0
 810bc68:	9300      	str	r3, [sp, #0]
 810bc6a:	4b11      	ldr	r3, [pc, #68]	@ (810bcb0 <prvCheckForValidListAndQueue+0x74>)
 810bc6c:	4a11      	ldr	r2, [pc, #68]	@ (810bcb4 <prvCheckForValidListAndQueue+0x78>)
 810bc6e:	2110      	movs	r1, #16
 810bc70:	200a      	movs	r0, #10
 810bc72:	f7fe f85d 	bl	8109d30 <xQueueGenericCreateStatic>
 810bc76:	4603      	mov	r3, r0
 810bc78:	4a08      	ldr	r2, [pc, #32]	@ (810bc9c <prvCheckForValidListAndQueue+0x60>)
 810bc7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810bc7c:	4b07      	ldr	r3, [pc, #28]	@ (810bc9c <prvCheckForValidListAndQueue+0x60>)
 810bc7e:	681b      	ldr	r3, [r3, #0]
 810bc80:	2b00      	cmp	r3, #0
 810bc82:	d005      	beq.n	810bc90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810bc84:	4b05      	ldr	r3, [pc, #20]	@ (810bc9c <prvCheckForValidListAndQueue+0x60>)
 810bc86:	681b      	ldr	r3, [r3, #0]
 810bc88:	490b      	ldr	r1, [pc, #44]	@ (810bcb8 <prvCheckForValidListAndQueue+0x7c>)
 810bc8a:	4618      	mov	r0, r3
 810bc8c:	f7fe fd40 	bl	810a710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810bc90:	f7fd fef4 	bl	8109a7c <vPortExitCritical>
}
 810bc94:	bf00      	nop
 810bc96:	46bd      	mov	sp, r7
 810bc98:	bd80      	pop	{r7, pc}
 810bc9a:	bf00      	nop
 810bc9c:	10004d84 	.word	0x10004d84
 810bca0:	10004d54 	.word	0x10004d54
 810bca4:	10004d68 	.word	0x10004d68
 810bca8:	10004d7c 	.word	0x10004d7c
 810bcac:	10004d80 	.word	0x10004d80
 810bcb0:	10004e30 	.word	0x10004e30
 810bcb4:	10004d90 	.word	0x10004d90
 810bcb8:	0810c468 	.word	0x0810c468

0810bcbc <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 810bcbc:	b580      	push	{r7, lr}
 810bcbe:	b084      	sub	sp, #16
 810bcc0:	af00      	add	r7, sp, #0
 810bcc2:	6078      	str	r0, [r7, #4]
 810bcc4:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810bcc6:	2300      	movs	r3, #0
 810bcc8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 810bcca:	2300      	movs	r3, #0
 810bccc:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 810bcce:	201f      	movs	r0, #31
 810bcd0:	f7f7 fd4e 	bl	8103770 <HAL_HSEM_FastTake>
 810bcd4:	4603      	mov	r3, r0
 810bcd6:	2b00      	cmp	r3, #0
 810bcd8:	d1f9      	bne.n	810bcce <ResMgr_Init+0x12>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 810bcda:	4b43      	ldr	r3, [pc, #268]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bcdc:	f8d3 31fc 	ldr.w	r3, [r3, #508]	@ 0x1fc
 810bce0:	2b5a      	cmp	r3, #90	@ 0x5a
 810bce2:	d062      	beq.n	810bdaa <ResMgr_Init+0xee>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810bce4:	e05a      	b.n	810bd9c <ResMgr_Init+0xe0>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 810bce6:	4a41      	ldr	r2, [pc, #260]	@ (810bdec <ResMgr_Init+0x130>)
 810bce8:	68bb      	ldr	r3, [r7, #8]
 810bcea:	4413      	add	r3, r2
 810bcec:	781b      	ldrb	r3, [r3, #0]
 810bcee:	2b00      	cmp	r3, #0
 810bcf0:	d02a      	beq.n	810bd48 <ResMgr_Init+0x8c>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 810bcf2:	493d      	ldr	r1, [pc, #244]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bcf4:	68ba      	ldr	r2, [r7, #8]
 810bcf6:	4613      	mov	r3, r2
 810bcf8:	009b      	lsls	r3, r3, #2
 810bcfa:	4413      	add	r3, r2
 810bcfc:	009b      	lsls	r3, r3, #2
 810bcfe:	440b      	add	r3, r1
 810bd00:	3308      	adds	r3, #8
 810bd02:	2201      	movs	r2, #1
 810bd04:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 810bd06:	4a39      	ldr	r2, [pc, #228]	@ (810bdec <ResMgr_Init+0x130>)
 810bd08:	68bb      	ldr	r3, [r7, #8]
 810bd0a:	4413      	add	r3, r2
 810bd0c:	781b      	ldrb	r3, [r3, #0]
 810bd0e:	2b01      	cmp	r3, #1
 810bd10:	d109      	bne.n	810bd26 <ResMgr_Init+0x6a>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 810bd12:	4935      	ldr	r1, [pc, #212]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bd14:	68ba      	ldr	r2, [r7, #8]
 810bd16:	4613      	mov	r3, r2
 810bd18:	009b      	lsls	r3, r3, #2
 810bd1a:	4413      	add	r3, r2
 810bd1c:	009b      	lsls	r3, r3, #2
 810bd1e:	440b      	add	r3, r1
 810bd20:	3304      	adds	r3, #4
 810bd22:	2208      	movs	r2, #8
 810bd24:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 810bd26:	4a31      	ldr	r2, [pc, #196]	@ (810bdec <ResMgr_Init+0x130>)
 810bd28:	68bb      	ldr	r3, [r7, #8]
 810bd2a:	4413      	add	r3, r2
 810bd2c:	781b      	ldrb	r3, [r3, #0]
 810bd2e:	2b02      	cmp	r3, #2
 810bd30:	d11e      	bne.n	810bd70 <ResMgr_Init+0xb4>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 810bd32:	492d      	ldr	r1, [pc, #180]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bd34:	68ba      	ldr	r2, [r7, #8]
 810bd36:	4613      	mov	r3, r2
 810bd38:	009b      	lsls	r3, r3, #2
 810bd3a:	4413      	add	r3, r2
 810bd3c:	009b      	lsls	r3, r3, #2
 810bd3e:	440b      	add	r3, r1
 810bd40:	3304      	adds	r3, #4
 810bd42:	2210      	movs	r2, #16
 810bd44:	601a      	str	r2, [r3, #0]
 810bd46:	e013      	b.n	810bd70 <ResMgr_Init+0xb4>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 810bd48:	4927      	ldr	r1, [pc, #156]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bd4a:	68ba      	ldr	r2, [r7, #8]
 810bd4c:	4613      	mov	r3, r2
 810bd4e:	009b      	lsls	r3, r3, #2
 810bd50:	4413      	add	r3, r2
 810bd52:	009b      	lsls	r3, r3, #2
 810bd54:	440b      	add	r3, r1
 810bd56:	3308      	adds	r3, #8
 810bd58:	2200      	movs	r2, #0
 810bd5a:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 810bd5c:	4922      	ldr	r1, [pc, #136]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bd5e:	68ba      	ldr	r2, [r7, #8]
 810bd60:	4613      	mov	r3, r2
 810bd62:	009b      	lsls	r3, r3, #2
 810bd64:	4413      	add	r3, r2
 810bd66:	009b      	lsls	r3, r3, #2
 810bd68:	440b      	add	r3, r1
 810bd6a:	3304      	adds	r3, #4
 810bd6c:	2200      	movs	r2, #0
 810bd6e:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 810bd70:	491d      	ldr	r1, [pc, #116]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bd72:	68ba      	ldr	r2, [r7, #8]
 810bd74:	4613      	mov	r3, r2
 810bd76:	009b      	lsls	r3, r3, #2
 810bd78:	4413      	add	r3, r2
 810bd7a:	009b      	lsls	r3, r3, #2
 810bd7c:	440b      	add	r3, r1
 810bd7e:	2200      	movs	r2, #0
 810bd80:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 810bd82:	4919      	ldr	r1, [pc, #100]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bd84:	68ba      	ldr	r2, [r7, #8]
 810bd86:	4613      	mov	r3, r2
 810bd88:	009b      	lsls	r3, r3, #2
 810bd8a:	4413      	add	r3, r2
 810bd8c:	009b      	lsls	r3, r3, #2
 810bd8e:	440b      	add	r3, r1
 810bd90:	3310      	adds	r3, #16
 810bd92:	2200      	movs	r2, #0
 810bd94:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 810bd96:	68bb      	ldr	r3, [r7, #8]
 810bd98:	3301      	adds	r3, #1
 810bd9a:	60bb      	str	r3, [r7, #8]
 810bd9c:	68bb      	ldr	r3, [r7, #8]
 810bd9e:	2b19      	cmp	r3, #25
 810bda0:	d9a1      	bls.n	810bce6 <ResMgr_Init+0x2a>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 810bda2:	4b11      	ldr	r3, [pc, #68]	@ (810bde8 <ResMgr_Init+0x12c>)
 810bda4:	225a      	movs	r2, #90	@ 0x5a
 810bda6:	f8c3 21fc 	str.w	r2, [r3, #508]	@ 0x1fc
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 810bdaa:	2100      	movs	r1, #0
 810bdac:	201f      	movs	r0, #31
 810bdae:	f7f7 fcf9 	bl	81037a4 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 810bdb2:	687b      	ldr	r3, [r7, #4]
 810bdb4:	2b00      	cmp	r3, #0
 810bdb6:	d102      	bne.n	810bdbe <ResMgr_Init+0x102>
 810bdb8:	683b      	ldr	r3, [r7, #0]
 810bdba:	2b00      	cmp	r3, #0
 810bdbc:	d00c      	beq.n	810bdd8 <ResMgr_Init+0x11c>
  {
    ResMgrSendMsgFunct = SendFunct;
 810bdbe:	4a0c      	ldr	r2, [pc, #48]	@ (810bdf0 <ResMgr_Init+0x134>)
 810bdc0:	687b      	ldr	r3, [r7, #4]
 810bdc2:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 810bdc4:	4a0b      	ldr	r2, [pc, #44]	@ (810bdf4 <ResMgr_Init+0x138>)
 810bdc6:	683b      	ldr	r3, [r7, #0]
 810bdc8:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 810bdca:	4b0a      	ldr	r3, [pc, #40]	@ (810bdf4 <ResMgr_Init+0x138>)
 810bdcc:	681b      	ldr	r3, [r3, #0]
 810bdce:	2100      	movs	r1, #0
 810bdd0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 810bdd4:	4798      	blx	r3
 810bdd6:	e001      	b.n	810bddc <ResMgr_Init+0x120>
  }
  else
  {
    ret = RESMGR_ERROR;
 810bdd8:	2301      	movs	r3, #1
 810bdda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 810bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 810bdde:	4618      	mov	r0, r3
 810bde0:	3710      	adds	r7, #16
 810bde2:	46bd      	mov	sp, r7
 810bde4:	bd80      	pop	{r7, pc}
 810bde6:	bf00      	nop
 810bde8:	1000001c 	.word	0x1000001c
 810bdec:	0810c4d0 	.word	0x0810c4d0
 810bdf0:	10004e80 	.word	0x10004e80
 810bdf4:	10004e84 	.word	0x10004e84

0810bdf8 <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 810bdf8:	b580      	push	{r7, lr}
 810bdfa:	b086      	sub	sp, #24
 810bdfc:	af00      	add	r7, sp, #0
 810bdfe:	60f8      	str	r0, [r7, #12]
 810be00:	60b9      	str	r1, [r7, #8]
 810be02:	607a      	str	r2, [r7, #4]
 810be04:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810be06:	2300      	movs	r3, #0
 810be08:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 810be0a:	68fb      	ldr	r3, [r7, #12]
 810be0c:	2b19      	cmp	r3, #25
 810be0e:	f200 80f5 	bhi.w	810bffc <ResMgr_Request+0x204>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 810be12:	201f      	movs	r0, #31
 810be14:	f7f7 fcac 	bl	8103770 <HAL_HSEM_FastTake>
 810be18:	4603      	mov	r3, r0
 810be1a:	2b00      	cmp	r3, #0
 810be1c:	d1f9      	bne.n	810be12 <ResMgr_Request+0x1a>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810be1e:	497b      	ldr	r1, [pc, #492]	@ (810c00c <ResMgr_Request+0x214>)
 810be20:	68fa      	ldr	r2, [r7, #12]
 810be22:	4613      	mov	r3, r2
 810be24:	009b      	lsls	r3, r3, #2
 810be26:	4413      	add	r3, r2
 810be28:	009b      	lsls	r3, r3, #2
 810be2a:	440b      	add	r3, r1
 810be2c:	3308      	adds	r3, #8
 810be2e:	681b      	ldr	r3, [r3, #0]
 810be30:	2b00      	cmp	r3, #0
 810be32:	d019      	beq.n	810be68 <ResMgr_Request+0x70>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810be34:	4975      	ldr	r1, [pc, #468]	@ (810c00c <ResMgr_Request+0x214>)
 810be36:	68fa      	ldr	r2, [r7, #12]
 810be38:	4613      	mov	r3, r2
 810be3a:	009b      	lsls	r3, r3, #2
 810be3c:	4413      	add	r3, r2
 810be3e:	009b      	lsls	r3, r3, #2
 810be40:	440b      	add	r3, r1
 810be42:	3308      	adds	r3, #8
 810be44:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810be46:	2b01      	cmp	r3, #1
 810be48:	d165      	bne.n	810bf16 <ResMgr_Request+0x11e>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 810be4a:	4970      	ldr	r1, [pc, #448]	@ (810c00c <ResMgr_Request+0x214>)
 810be4c:	68fa      	ldr	r2, [r7, #12]
 810be4e:	4613      	mov	r3, r2
 810be50:	009b      	lsls	r3, r3, #2
 810be52:	4413      	add	r3, r2
 810be54:	009b      	lsls	r3, r3, #2
 810be56:	440b      	add	r3, r1
 810be58:	3304      	adds	r3, #4
 810be5a:	681a      	ldr	r2, [r3, #0]
 810be5c:	68bb      	ldr	r3, [r7, #8]
 810be5e:	4053      	eors	r3, r2
 810be60:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810be64:	2b00      	cmp	r3, #0
 810be66:	d156      	bne.n	810bf16 <ResMgr_Request+0x11e>
    {

      if(phandle != NULL)
 810be68:	683b      	ldr	r3, [r7, #0]
 810be6a:	2b00      	cmp	r3, #0
 810be6c:	d02c      	beq.n	810bec8 <ResMgr_Request+0xd0>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810be6e:	68bb      	ldr	r3, [r7, #8]
 810be70:	f003 0301 	and.w	r3, r3, #1
 810be74:	2b00      	cmp	r3, #0
 810be76:	d01d      	beq.n	810beb4 <ResMgr_Request+0xbc>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810be78:	4964      	ldr	r1, [pc, #400]	@ (810c00c <ResMgr_Request+0x214>)
 810be7a:	68fa      	ldr	r2, [r7, #12]
 810be7c:	4613      	mov	r3, r2
 810be7e:	009b      	lsls	r3, r3, #2
 810be80:	4413      	add	r3, r2
 810be82:	009b      	lsls	r3, r3, #2
 810be84:	440b      	add	r3, r1
 810be86:	3310      	adds	r3, #16
 810be88:	681b      	ldr	r3, [r3, #0]
 810be8a:	2b00      	cmp	r3, #0
 810be8c:	d00c      	beq.n	810bea8 <ResMgr_Request+0xb0>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 810be8e:	495f      	ldr	r1, [pc, #380]	@ (810c00c <ResMgr_Request+0x214>)
 810be90:	68fa      	ldr	r2, [r7, #12]
 810be92:	4613      	mov	r3, r2
 810be94:	009b      	lsls	r3, r3, #2
 810be96:	4413      	add	r3, r2
 810be98:	009b      	lsls	r3, r3, #2
 810be9a:	440b      	add	r3, r1
 810be9c:	3310      	adds	r3, #16
 810be9e:	681b      	ldr	r3, [r3, #0]
 810bea0:	461a      	mov	r2, r3
 810bea2:	683b      	ldr	r3, [r7, #0]
 810bea4:	601a      	str	r2, [r3, #0]
 810bea6:	e00f      	b.n	810bec8 <ResMgr_Request+0xd0>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 810bea8:	2100      	movs	r1, #0
 810beaa:	201f      	movs	r0, #31
 810beac:	f7f7 fc7a 	bl	81037a4 <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 810beb0:	2301      	movs	r3, #1
 810beb2:	e0a6      	b.n	810c002 <ResMgr_Request+0x20a>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810beb4:	4955      	ldr	r1, [pc, #340]	@ (810c00c <ResMgr_Request+0x214>)
 810beb6:	68fa      	ldr	r2, [r7, #12]
 810beb8:	4613      	mov	r3, r2
 810beba:	009b      	lsls	r3, r3, #2
 810bebc:	4413      	add	r3, r2
 810bebe:	009b      	lsls	r3, r3, #2
 810bec0:	440b      	add	r3, r1
 810bec2:	3310      	adds	r3, #16
 810bec4:	683a      	ldr	r2, [r7, #0]
 810bec6:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 810bec8:	68bb      	ldr	r3, [r7, #8]
 810beca:	f023 0306 	bic.w	r3, r3, #6
 810bece:	f043 0102 	orr.w	r1, r3, #2
 810bed2:	484e      	ldr	r0, [pc, #312]	@ (810c00c <ResMgr_Request+0x214>)
 810bed4:	68fa      	ldr	r2, [r7, #12]
 810bed6:	4613      	mov	r3, r2
 810bed8:	009b      	lsls	r3, r3, #2
 810beda:	4413      	add	r3, r2
 810bedc:	009b      	lsls	r3, r3, #2
 810bede:	4403      	add	r3, r0
 810bee0:	3304      	adds	r3, #4
 810bee2:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 810bee4:	4949      	ldr	r1, [pc, #292]	@ (810c00c <ResMgr_Request+0x214>)
 810bee6:	68fa      	ldr	r2, [r7, #12]
 810bee8:	4613      	mov	r3, r2
 810beea:	009b      	lsls	r3, r3, #2
 810beec:	4413      	add	r3, r2
 810beee:	009b      	lsls	r3, r3, #2
 810bef0:	440b      	add	r3, r1
 810bef2:	3308      	adds	r3, #8
 810bef4:	2201      	movs	r2, #1
 810bef6:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 810bef8:	2100      	movs	r1, #0
 810befa:	201f      	movs	r0, #31
 810befc:	f7f7 fc52 	bl	81037a4 <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 810bf00:	4b43      	ldr	r3, [pc, #268]	@ (810c010 <ResMgr_Request+0x218>)
 810bf02:	681b      	ldr	r3, [r3, #0]
 810bf04:	2101      	movs	r1, #1
 810bf06:	68f8      	ldr	r0, [r7, #12]
 810bf08:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 810bf0a:	4b42      	ldr	r3, [pc, #264]	@ (810c014 <ResMgr_Request+0x21c>)
 810bf0c:	681b      	ldr	r3, [r3, #0]
 810bf0e:	2111      	movs	r1, #17
 810bf10:	68f8      	ldr	r0, [r7, #12]
 810bf12:	4798      	blx	r3
 810bf14:	e074      	b.n	810c000 <ResMgr_Request+0x208>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 810bf16:	2302      	movs	r3, #2
 810bf18:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 810bf1a:	68bb      	ldr	r3, [r7, #8]
 810bf1c:	f003 0306 	and.w	r3, r3, #6
 810bf20:	2b02      	cmp	r3, #2
 810bf22:	d10e      	bne.n	810bf42 <ResMgr_Request+0x14a>
      {
        RESMGR_TBL_UNLOCK(id);
 810bf24:	2100      	movs	r1, #0
 810bf26:	201f      	movs	r0, #31
 810bf28:	f7f7 fc3c 	bl	81037a4 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 810bf2c:	4b38      	ldr	r3, [pc, #224]	@ (810c010 <ResMgr_Request+0x218>)
 810bf2e:	681b      	ldr	r3, [r3, #0]
 810bf30:	2105      	movs	r1, #5
 810bf32:	68f8      	ldr	r0, [r7, #12]
 810bf34:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 810bf36:	4b37      	ldr	r3, [pc, #220]	@ (810c014 <ResMgr_Request+0x21c>)
 810bf38:	681b      	ldr	r3, [r3, #0]
 810bf3a:	2115      	movs	r1, #21
 810bf3c:	68f8      	ldr	r0, [r7, #12]
 810bf3e:	4798      	blx	r3
 810bf40:	e05e      	b.n	810c000 <ResMgr_Request+0x208>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 810bf42:	68bb      	ldr	r3, [r7, #8]
 810bf44:	f003 0306 	and.w	r3, r3, #6
 810bf48:	2b04      	cmp	r3, #4
 810bf4a:	d154      	bne.n	810bff6 <ResMgr_Request+0x1fe>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810bf4c:	492f      	ldr	r1, [pc, #188]	@ (810c00c <ResMgr_Request+0x214>)
 810bf4e:	68fa      	ldr	r2, [r7, #12]
 810bf50:	4613      	mov	r3, r2
 810bf52:	009b      	lsls	r3, r3, #2
 810bf54:	4413      	add	r3, r2
 810bf56:	009b      	lsls	r3, r3, #2
 810bf58:	440b      	add	r3, r1
 810bf5a:	3304      	adds	r3, #4
 810bf5c:	681b      	ldr	r3, [r3, #0]
 810bf5e:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810bf62:	68bb      	ldr	r3, [r7, #8]
 810bf64:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810bf68:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 810bf6a:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810bf6e:	4827      	ldr	r0, [pc, #156]	@ (810c00c <ResMgr_Request+0x214>)
 810bf70:	68fa      	ldr	r2, [r7, #12]
 810bf72:	4613      	mov	r3, r2
 810bf74:	009b      	lsls	r3, r3, #2
 810bf76:	4413      	add	r3, r2
 810bf78:	009b      	lsls	r3, r3, #2
 810bf7a:	4403      	add	r3, r0
 810bf7c:	3304      	adds	r3, #4
 810bf7e:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 810bf80:	683b      	ldr	r3, [r7, #0]
 810bf82:	2b00      	cmp	r3, #0
 810bf84:	d028      	beq.n	810bfd8 <ResMgr_Request+0x1e0>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810bf86:	68bb      	ldr	r3, [r7, #8]
 810bf88:	f003 0301 	and.w	r3, r3, #1
 810bf8c:	2b00      	cmp	r3, #0
 810bf8e:	d019      	beq.n	810bfc4 <ResMgr_Request+0x1cc>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810bf90:	491e      	ldr	r1, [pc, #120]	@ (810c00c <ResMgr_Request+0x214>)
 810bf92:	68fa      	ldr	r2, [r7, #12]
 810bf94:	4613      	mov	r3, r2
 810bf96:	009b      	lsls	r3, r3, #2
 810bf98:	4413      	add	r3, r2
 810bf9a:	009b      	lsls	r3, r3, #2
 810bf9c:	440b      	add	r3, r1
 810bf9e:	3310      	adds	r3, #16
 810bfa0:	681b      	ldr	r3, [r3, #0]
 810bfa2:	2b00      	cmp	r3, #0
 810bfa4:	d00c      	beq.n	810bfc0 <ResMgr_Request+0x1c8>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 810bfa6:	4919      	ldr	r1, [pc, #100]	@ (810c00c <ResMgr_Request+0x214>)
 810bfa8:	68fa      	ldr	r2, [r7, #12]
 810bfaa:	4613      	mov	r3, r2
 810bfac:	009b      	lsls	r3, r3, #2
 810bfae:	4413      	add	r3, r2
 810bfb0:	009b      	lsls	r3, r3, #2
 810bfb2:	440b      	add	r3, r1
 810bfb4:	3310      	adds	r3, #16
 810bfb6:	681b      	ldr	r3, [r3, #0]
 810bfb8:	461a      	mov	r2, r3
 810bfba:	683b      	ldr	r3, [r7, #0]
 810bfbc:	601a      	str	r2, [r3, #0]
 810bfbe:	e00b      	b.n	810bfd8 <ResMgr_Request+0x1e0>
            }
            else
            {
              return  RESMGR_ERROR;
 810bfc0:	2301      	movs	r3, #1
 810bfc2:	e01e      	b.n	810c002 <ResMgr_Request+0x20a>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 810bfc4:	4911      	ldr	r1, [pc, #68]	@ (810c00c <ResMgr_Request+0x214>)
 810bfc6:	68fa      	ldr	r2, [r7, #12]
 810bfc8:	4613      	mov	r3, r2
 810bfca:	009b      	lsls	r3, r3, #2
 810bfcc:	4413      	add	r3, r2
 810bfce:	009b      	lsls	r3, r3, #2
 810bfd0:	440b      	add	r3, r1
 810bfd2:	3310      	adds	r3, #16
 810bfd4:	683a      	ldr	r2, [r7, #0]
 810bfd6:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 810bfd8:	2100      	movs	r1, #0
 810bfda:	201f      	movs	r0, #31
 810bfdc:	f7f7 fbe2 	bl	81037a4 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 810bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (810c010 <ResMgr_Request+0x218>)
 810bfe2:	681b      	ldr	r3, [r3, #0]
 810bfe4:	2104      	movs	r1, #4
 810bfe6:	68f8      	ldr	r0, [r7, #12]
 810bfe8:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 810bfea:	4b0a      	ldr	r3, [pc, #40]	@ (810c014 <ResMgr_Request+0x21c>)
 810bfec:	681b      	ldr	r3, [r3, #0]
 810bfee:	2114      	movs	r1, #20
 810bff0:	68f8      	ldr	r0, [r7, #12]
 810bff2:	4798      	blx	r3
 810bff4:	e004      	b.n	810c000 <ResMgr_Request+0x208>
      }
      else
      {
        ret = RESMGR_ERROR;
 810bff6:	2301      	movs	r3, #1
 810bff8:	75fb      	strb	r3, [r7, #23]
 810bffa:	e001      	b.n	810c000 <ResMgr_Request+0x208>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 810bffc:	2301      	movs	r3, #1
 810bffe:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 810c000:	7dfb      	ldrb	r3, [r7, #23]
}
 810c002:	4618      	mov	r0, r3
 810c004:	3718      	adds	r7, #24
 810c006:	46bd      	mov	sp, r7
 810c008:	bd80      	pop	{r7, pc}
 810c00a:	bf00      	nop
 810c00c:	1000001c 	.word	0x1000001c
 810c010:	10004e80 	.word	0x10004e80
 810c014:	10004e84 	.word	0x10004e84

0810c018 <coCommTaskSet>:
 810c018:	2801      	cmp	r0, #1
 810c01a:	d006      	beq.n	810c02a <coCommTaskSet+0x12>
 810c01c:	2802      	cmp	r0, #2
 810c01e:	d007      	beq.n	810c030 <coCommTaskSet+0x18>
 810c020:	b910      	cbnz	r0, 810c028 <coCommTaskSet+0x10>
 810c022:	4b04      	ldr	r3, [pc, #16]	@ (810c034 <coCommTaskSet+0x1c>)
 810c024:	2201      	movs	r2, #1
 810c026:	701a      	strb	r2, [r3, #0]
 810c028:	4770      	bx	lr
 810c02a:	4b03      	ldr	r3, [pc, #12]	@ (810c038 <coCommTaskSet+0x20>)
 810c02c:	7018      	strb	r0, [r3, #0]
 810c02e:	4770      	bx	lr
 810c030:	4b02      	ldr	r3, [pc, #8]	@ (810c03c <coCommTaskSet+0x24>)
 810c032:	e7f7      	b.n	810c024 <coCommTaskSet+0xc>
 810c034:	10004e8a 	.word	0x10004e8a
 810c038:	10004e89 	.word	0x10004e89
 810c03c:	10004e88 	.word	0x10004e88

0810c040 <coQueueReceiveBufferIsFilled>:
 810c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c042:	4b1a      	ldr	r3, [pc, #104]	@ (810c0ac <coQueueReceiveBufferIsFilled+0x6c>)
 810c044:	7958      	ldrb	r0, [r3, #5]
 810c046:	2801      	cmp	r0, #1
 810c048:	d105      	bne.n	810c056 <coQueueReceiveBufferIsFilled+0x16>
 810c04a:	2202      	movs	r2, #2
 810c04c:	715a      	strb	r2, [r3, #5]
 810c04e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810c052:	f7ff bfe1 	b.w	810c018 <coCommTaskSet>
 810c056:	2803      	cmp	r0, #3
 810c058:	d103      	bne.n	810c062 <coQueueReceiveBufferIsFilled+0x22>
 810c05a:	2204      	movs	r2, #4
 810c05c:	715a      	strb	r2, [r3, #5]
 810c05e:	2001      	movs	r0, #1
 810c060:	e7f5      	b.n	810c04e <coQueueReceiveBufferIsFilled+0xe>
 810c062:	4b13      	ldr	r3, [pc, #76]	@ (810c0b0 <coQueueReceiveBufferIsFilled+0x70>)
 810c064:	4d13      	ldr	r5, [pc, #76]	@ (810c0b4 <coQueueReceiveBufferIsFilled+0x74>)
 810c066:	881e      	ldrh	r6, [r3, #0]
 810c068:	7b2b      	ldrb	r3, [r5, #12]
 810c06a:	2b01      	cmp	r3, #1
 810c06c:	d115      	bne.n	810c09a <coQueueReceiveBufferIsFilled+0x5a>
 810c06e:	8928      	ldrh	r0, [r5, #8]
 810c070:	f1a6 0408 	sub.w	r4, r6, #8
 810c074:	4b10      	ldr	r3, [pc, #64]	@ (810c0b8 <coQueueReceiveBufferIsFilled+0x78>)
 810c076:	f105 010d 	add.w	r1, r5, #13
 810c07a:	1a24      	subs	r4, r4, r0
 810c07c:	3008      	adds	r0, #8
 810c07e:	681f      	ldr	r7, [r3, #0]
 810c080:	b2a4      	uxth	r4, r4
 810c082:	4438      	add	r0, r7
 810c084:	4622      	mov	r2, r4
 810c086:	f000 f9a1 	bl	810c3cc <memcpy>
 810c08a:	896a      	ldrh	r2, [r5, #10]
 810c08c:	f104 010d 	add.w	r1, r4, #13
 810c090:	4638      	mov	r0, r7
 810c092:	3201      	adds	r2, #1
 810c094:	4429      	add	r1, r5
 810c096:	f000 f999 	bl	810c3cc <memcpy>
 810c09a:	896b      	ldrh	r3, [r5, #10]
 810c09c:	4a07      	ldr	r2, [pc, #28]	@ (810c0bc <coQueueReceiveBufferIsFilled+0x7c>)
 810c09e:	3301      	adds	r3, #1
 810c0a0:	b29b      	uxth	r3, r3
 810c0a2:	42b3      	cmp	r3, r6
 810c0a4:	bf28      	it	cs
 810c0a6:	2300      	movcs	r3, #0
 810c0a8:	8013      	strh	r3, [r2, #0]
 810c0aa:	e7d8      	b.n	810c05e <coQueueReceiveBufferIsFilled+0x1e>
 810c0ac:	10004eb4 	.word	0x10004eb4
 810c0b0:	10004eb0 	.word	0x10004eb0
 810c0b4:	10004e94 	.word	0x10004e94
 810c0b8:	10004e8c 	.word	0x10004e8c
 810c0bc:	10004eb2 	.word	0x10004eb2

0810c0c0 <coQueueGetReceiveBuffer>:
 810c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c0c2:	460c      	mov	r4, r1
 810c0c4:	4935      	ldr	r1, [pc, #212]	@ (810c19c <coQueueGetReceiveBuffer+0xdc>)
 810c0c6:	4605      	mov	r5, r0
 810c0c8:	680b      	ldr	r3, [r1, #0]
 810c0ca:	4283      	cmp	r3, r0
 810c0cc:	d110      	bne.n	810c0f0 <coQueueGetReceiveBuffer+0x30>
 810c0ce:	7988      	ldrb	r0, [r1, #6]
 810c0d0:	f002 030a 	and.w	r3, r2, #10
 810c0d4:	4298      	cmp	r0, r3
 810c0d6:	d10b      	bne.n	810c0f0 <coQueueGetReceiveBuffer+0x30>
 810c0d8:	b924      	cbnz	r4, 810c0e4 <coQueueGetReceiveBuffer+0x24>
 810c0da:	2301      	movs	r3, #1
 810c0dc:	714b      	strb	r3, [r1, #5]
 810c0de:	f7ff ffaf 	bl	810c040 <coQueueReceiveBufferIsFilled>
 810c0e2:	e027      	b.n	810c134 <coQueueGetReceiveBuffer+0x74>
 810c0e4:	2c01      	cmp	r4, #1
 810c0e6:	d103      	bne.n	810c0f0 <coQueueGetReceiveBuffer+0x30>
 810c0e8:	2303      	movs	r3, #3
 810c0ea:	1d08      	adds	r0, r1, #4
 810c0ec:	714b      	strb	r3, [r1, #5]
 810c0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c0f0:	492b      	ldr	r1, [pc, #172]	@ (810c1a0 <coQueueGetReceiveBuffer+0xe0>)
 810c0f2:	f012 0f08 	tst.w	r2, #8
 810c0f6:	4b2b      	ldr	r3, [pc, #172]	@ (810c1a4 <coQueueGetReceiveBuffer+0xe4>)
 810c0f8:	f04f 0700 	mov.w	r7, #0
 810c0fc:	8808      	ldrh	r0, [r1, #0]
 810c0fe:	492a      	ldr	r1, [pc, #168]	@ (810c1a8 <coQueueGetReceiveBuffer+0xe8>)
 810c100:	bf18      	it	ne
 810c102:	463c      	movne	r4, r7
 810c104:	f100 0c08 	add.w	ip, r0, #8
 810c108:	601d      	str	r5, [r3, #0]
 810c10a:	880d      	ldrh	r5, [r1, #0]
 810c10c:	f104 0608 	add.w	r6, r4, #8
 810c110:	4926      	ldr	r1, [pc, #152]	@ (810c1ac <coQueueGetReceiveBuffer+0xec>)
 810c112:	45ac      	cmp	ip, r5
 810c114:	715a      	strb	r2, [r3, #5]
 810c116:	8809      	ldrh	r1, [r1, #0]
 810c118:	b2a2      	uxth	r2, r4
 810c11a:	731f      	strb	r7, [r3, #12]
 810c11c:	711c      	strb	r4, [r3, #4]
 810c11e:	8118      	strh	r0, [r3, #8]
 810c120:	d90a      	bls.n	810c138 <coQueueGetReceiveBuffer+0x78>
 810c122:	3207      	adds	r2, #7
 810c124:	811f      	strh	r7, [r3, #8]
 810c126:	b292      	uxth	r2, r2
 810c128:	815a      	strh	r2, [r3, #10]
 810c12a:	428a      	cmp	r2, r1
 810c12c:	d312      	bcc.n	810c154 <coQueueGetReceiveBuffer+0x94>
 810c12e:	4b20      	ldr	r3, [pc, #128]	@ (810c1b0 <coQueueGetReceiveBuffer+0xf0>)
 810c130:	2201      	movs	r2, #1
 810c132:	701a      	strb	r2, [r3, #0]
 810c134:	2000      	movs	r0, #0
 810c136:	e7da      	b.n	810c0ee <coQueueGetReceiveBuffer+0x2e>
 810c138:	1e42      	subs	r2, r0, #1
 810c13a:	4432      	add	r2, r6
 810c13c:	b292      	uxth	r2, r2
 810c13e:	4295      	cmp	r5, r2
 810c140:	815a      	strh	r2, [r3, #10]
 810c142:	d805      	bhi.n	810c150 <coQueueGetReceiveBuffer+0x90>
 810c144:	1b52      	subs	r2, r2, r5
 810c146:	4288      	cmp	r0, r1
 810c148:	b292      	uxth	r2, r2
 810c14a:	815a      	strh	r2, [r3, #10]
 810c14c:	d2ed      	bcs.n	810c12a <coQueueGetReceiveBuffer+0x6a>
 810c14e:	e7ee      	b.n	810c12e <coQueueGetReceiveBuffer+0x6e>
 810c150:	4288      	cmp	r0, r1
 810c152:	d3ea      	bcc.n	810c12a <coQueueGetReceiveBuffer+0x6a>
 810c154:	895a      	ldrh	r2, [r3, #10]
 810c156:	3201      	adds	r2, #1
 810c158:	b292      	uxth	r2, r2
 810c15a:	4295      	cmp	r5, r2
 810c15c:	bf98      	it	ls
 810c15e:	2200      	movls	r2, #0
 810c160:	428a      	cmp	r2, r1
 810c162:	d0e4      	beq.n	810c12e <coQueueGetReceiveBuffer+0x6e>
 810c164:	4a13      	ldr	r2, [pc, #76]	@ (810c1b4 <coQueueGetReceiveBuffer+0xf4>)
 810c166:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 810c16a:	6817      	ldr	r7, [r2, #0]
 810c16c:	4a0d      	ldr	r2, [pc, #52]	@ (810c1a4 <coQueueGetReceiveBuffer+0xe4>)
 810c16e:	eb07 0e0c 	add.w	lr, r7, ip
 810c172:	ca03      	ldmia	r2!, {r0, r1}
 810c174:	f847 000c 	str.w	r0, [r7, ip]
 810c178:	f8ce 1004 	str.w	r1, [lr, #4]
 810c17c:	2c00      	cmp	r4, #0
 810c17e:	d0ae      	beq.n	810c0de <coQueueGetReceiveBuffer+0x1e>
 810c180:	8918      	ldrh	r0, [r3, #8]
 810c182:	4406      	add	r6, r0
 810c184:	42ae      	cmp	r6, r5
 810c186:	bfcd      	iteet	gt
 810c188:	2101      	movgt	r1, #1
 810c18a:	2200      	movle	r2, #0
 810c18c:	3008      	addle	r0, #8
 810c18e:	1d50      	addgt	r0, r2, #5
 810c190:	bfce      	itee	gt
 810c192:	7319      	strbgt	r1, [r3, #12]
 810c194:	19c0      	addle	r0, r0, r7
 810c196:	731a      	strble	r2, [r3, #12]
 810c198:	e7a9      	b.n	810c0ee <coQueueGetReceiveBuffer+0x2e>
 810c19a:	bf00      	nop
 810c19c:	10004eb4 	.word	0x10004eb4
 810c1a0:	10004eb2 	.word	0x10004eb2
 810c1a4:	10004e94 	.word	0x10004e94
 810c1a8:	10004eb0 	.word	0x10004eb0
 810c1ac:	10004eae 	.word	0x10004eae
 810c1b0:	10004eac 	.word	0x10004eac
 810c1b4:	10004e8c 	.word	0x10004e8c

0810c1b8 <coQueueGetNextTransmitMessage>:
 810c1b8:	4b09      	ldr	r3, [pc, #36]	@ (810c1e0 <coQueueGetNextTransmitMessage+0x28>)
 810c1ba:	781b      	ldrb	r3, [r3, #0]
 810c1bc:	2b01      	cmp	r3, #1
 810c1be:	d10c      	bne.n	810c1da <coQueueGetNextTransmitMessage+0x22>
 810c1c0:	4b08      	ldr	r3, [pc, #32]	@ (810c1e4 <coQueueGetNextTransmitMessage+0x2c>)
 810c1c2:	6818      	ldr	r0, [r3, #0]
 810c1c4:	b900      	cbnz	r0, 810c1c8 <coQueueGetNextTransmitMessage+0x10>
 810c1c6:	4770      	bx	lr
 810c1c8:	7d83      	ldrb	r3, [r0, #22]
 810c1ca:	2b02      	cmp	r3, #2
 810c1cc:	d103      	bne.n	810c1d6 <coQueueGetNextTransmitMessage+0x1e>
 810c1ce:	2303      	movs	r3, #3
 810c1d0:	6000      	str	r0, [r0, #0]
 810c1d2:	7583      	strb	r3, [r0, #22]
 810c1d4:	4770      	bx	lr
 810c1d6:	6980      	ldr	r0, [r0, #24]
 810c1d8:	e7f4      	b.n	810c1c4 <coQueueGetNextTransmitMessage+0xc>
 810c1da:	2000      	movs	r0, #0
 810c1dc:	4770      	bx	lr
 810c1de:	bf00      	nop
 810c1e0:	10000014 	.word	0x10000014
 810c1e4:	10004e90 	.word	0x10004e90

0810c1e8 <coQueueMsgTransmitted>:
 810c1e8:	6803      	ldr	r3, [r0, #0]
 810c1ea:	2204      	movs	r2, #4
 810c1ec:	759a      	strb	r2, [r3, #22]
 810c1ee:	4770      	bx	lr

0810c1f0 <codrvCanTransmitInterrupt>:
 810c1f0:	4b28      	ldr	r3, [pc, #160]	@ (810c294 <codrvCanTransmitInterrupt+0xa4>)
 810c1f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 810c1f4:	781b      	ldrb	r3, [r3, #0]
 810c1f6:	b08d      	sub	sp, #52	@ 0x34
 810c1f8:	2b00      	cmp	r3, #0
 810c1fa:	d03e      	beq.n	810c27a <codrvCanTransmitInterrupt+0x8a>
 810c1fc:	4e26      	ldr	r6, [pc, #152]	@ (810c298 <codrvCanTransmitInterrupt+0xa8>)
 810c1fe:	6833      	ldr	r3, [r6, #0]
 810c200:	b913      	cbnz	r3, 810c208 <codrvCanTransmitInterrupt+0x18>
 810c202:	f7ff ffd9 	bl	810c1b8 <coQueueGetNextTransmitMessage>
 810c206:	6030      	str	r0, [r6, #0]
 810c208:	6834      	ldr	r4, [r6, #0]
 810c20a:	2c00      	cmp	r4, #0
 810c20c:	d035      	beq.n	810c27a <codrvCanTransmitInterrupt+0x8a>
 810c20e:	4a23      	ldr	r2, [pc, #140]	@ (810c29c <codrvCanTransmitInterrupt+0xac>)
 810c210:	ab01      	add	r3, sp, #4
 810c212:	4f23      	ldr	r7, [pc, #140]	@ (810c2a0 <codrvCanTransmitInterrupt+0xb0>)
 810c214:	6810      	ldr	r0, [r2, #0]
 810c216:	6851      	ldr	r1, [r2, #4]
 810c218:	c303      	stmia	r3!, {r0, r1}
 810c21a:	2100      	movs	r1, #0
 810c21c:	6838      	ldr	r0, [r7, #0]
 810c21e:	f7f6 fbc9 	bl	81029b4 <HAL_FDCAN_IsTxBufferMessagePending>
 810c222:	4605      	mov	r5, r0
 810c224:	bb48      	cbnz	r0, 810c27a <codrvCanTransmitInterrupt+0x8a>
 810c226:	2224      	movs	r2, #36	@ 0x24
 810c228:	4601      	mov	r1, r0
 810c22a:	a803      	add	r0, sp, #12
 810c22c:	f000 f8a2 	bl	810c374 <memset>
 810c230:	7aa3      	ldrb	r3, [r4, #10]
 810c232:	075a      	lsls	r2, r3, #29
 810c234:	bf42      	ittt	mi
 810c236:	f44f 1280 	movmi.w	r2, #1048576	@ 0x100000
 810c23a:	f44f 1000 	movmi.w	r0, #2097152	@ 0x200000
 810c23e:	e9cd 2008 	strdmi	r2, r0, [sp, #32]
 810c242:	6862      	ldr	r2, [r4, #4]
 810c244:	9203      	str	r2, [sp, #12]
 810c246:	7ae2      	ldrb	r2, [r4, #11]
 810c248:	0411      	lsls	r1, r2, #16
 810c24a:	9106      	str	r1, [sp, #24]
 810c24c:	0799      	lsls	r1, r3, #30
 810c24e:	bf44      	itt	mi
 810c250:	f04f 4180 	movmi.w	r1, #1073741824	@ 0x40000000
 810c254:	9104      	strmi	r1, [sp, #16]
 810c256:	071b      	lsls	r3, r3, #28
 810c258:	d417      	bmi.n	810c28a <codrvCanTransmitInterrupt+0x9a>
 810c25a:	340c      	adds	r4, #12
 810c25c:	ab01      	add	r3, sp, #4
 810c25e:	b2e9      	uxtb	r1, r5
 810c260:	4291      	cmp	r1, r2
 810c262:	d30c      	bcc.n	810c27e <codrvCanTransmitInterrupt+0x8e>
 810c264:	aa01      	add	r2, sp, #4
 810c266:	a903      	add	r1, sp, #12
 810c268:	6838      	ldr	r0, [r7, #0]
 810c26a:	f7f6 f98b 	bl	8102584 <HAL_FDCAN_AddMessageToTxFifoQ>
 810c26e:	4604      	mov	r4, r0
 810c270:	b918      	cbnz	r0, 810c27a <codrvCanTransmitInterrupt+0x8a>
 810c272:	6830      	ldr	r0, [r6, #0]
 810c274:	f7ff ffb8 	bl	810c1e8 <coQueueMsgTransmitted>
 810c278:	6034      	str	r4, [r6, #0]
 810c27a:	b00d      	add	sp, #52	@ 0x34
 810c27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810c27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810c282:	3501      	adds	r5, #1
 810c284:	f803 1b01 	strb.w	r1, [r3], #1
 810c288:	e7e9      	b.n	810c25e <codrvCanTransmitInterrupt+0x6e>
 810c28a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 810c28e:	9305      	str	r3, [sp, #20]
 810c290:	e7e8      	b.n	810c264 <codrvCanTransmitInterrupt+0x74>
 810c292:	bf00      	nop
 810c294:	10004ebc 	.word	0x10004ebc
 810c298:	10004ec0 	.word	0x10004ec0
 810c29c:	0810c46d 	.word	0x0810c46d
 810c2a0:	10000018 	.word	0x10000018

0810c2a4 <codrvCanReceiveInterrupt>:
 810c2a4:	b530      	push	{r4, r5, lr}
 810c2a6:	4c1b      	ldr	r4, [pc, #108]	@ (810c314 <codrvCanReceiveInterrupt+0x70>)
 810c2a8:	b09b      	sub	sp, #108	@ 0x6c
 810c2aa:	466a      	mov	r2, sp
 810c2ac:	ab0a      	add	r3, sp, #40	@ 0x28
 810c2ae:	2140      	movs	r1, #64	@ 0x40
 810c2b0:	6820      	ldr	r0, [r4, #0]
 810c2b2:	f7f6 f9c3 	bl	810263c <HAL_FDCAN_GetRxMessage>
 810c2b6:	4602      	mov	r2, r0
 810c2b8:	b108      	cbz	r0, 810c2be <codrvCanReceiveInterrupt+0x1a>
 810c2ba:	b01b      	add	sp, #108	@ 0x6c
 810c2bc:	bd30      	pop	{r4, r5, pc}
 810c2be:	f89d 500e 	ldrb.w	r5, [sp, #14]
 810c2c2:	9b06      	ldr	r3, [sp, #24]
 810c2c4:	2d08      	cmp	r5, #8
 810c2c6:	9800      	ldr	r0, [sp, #0]
 810c2c8:	bf28      	it	cs
 810c2ca:	2508      	movcs	r5, #8
 810c2cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810c2d0:	9b01      	ldr	r3, [sp, #4]
 810c2d2:	bf08      	it	eq
 810c2d4:	2204      	moveq	r2, #4
 810c2d6:	4629      	mov	r1, r5
 810c2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810c2dc:	9b02      	ldr	r3, [sp, #8]
 810c2de:	bf04      	itt	eq
 810c2e0:	f042 0202 	orreq.w	r2, r2, #2
 810c2e4:	b2d2      	uxtbeq	r2, r2
 810c2e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810c2ea:	bf04      	itt	eq
 810c2ec:	f042 0208 	orreq.w	r2, r2, #8
 810c2f0:	b2d2      	uxtbeq	r2, r2
 810c2f2:	f7ff fee5 	bl	810c0c0 <coQueueGetReceiveBuffer>
 810c2f6:	2800      	cmp	r0, #0
 810c2f8:	d0d7      	beq.n	810c2aa <codrvCanReceiveInterrupt+0x6>
 810c2fa:	ab0a      	add	r3, sp, #40	@ 0x28
 810c2fc:	4405      	add	r5, r0
 810c2fe:	42a8      	cmp	r0, r5
 810c300:	d102      	bne.n	810c308 <codrvCanReceiveInterrupt+0x64>
 810c302:	f7ff fe9d 	bl	810c040 <coQueueReceiveBufferIsFilled>
 810c306:	e7d0      	b.n	810c2aa <codrvCanReceiveInterrupt+0x6>
 810c308:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c30c:	f800 2b01 	strb.w	r2, [r0], #1
 810c310:	e7f5      	b.n	810c2fe <codrvCanReceiveInterrupt+0x5a>
 810c312:	bf00      	nop
 810c314:	10000018 	.word	0x10000018

0810c318 <codrvCanErrorInterrupt>:
 810c318:	b500      	push	{lr}
 810c31a:	4b0b      	ldr	r3, [pc, #44]	@ (810c348 <codrvCanErrorInterrupt+0x30>)
 810c31c:	b08d      	sub	sp, #52	@ 0x34
 810c31e:	6818      	ldr	r0, [r3, #0]
 810c320:	a901      	add	r1, sp, #4
 810c322:	f7f6 faf7 	bl	8102914 <HAL_FDCAN_GetProtocolStatus>
 810c326:	b928      	cbnz	r0, 810c334 <codrvCanErrorInterrupt+0x1c>
 810c328:	f000 f820 	bl	810c36c <codrvCanErrorGetFlags>
 810c32c:	9a06      	ldr	r2, [sp, #24]
 810c32e:	2301      	movs	r3, #1
 810c330:	b11a      	cbz	r2, 810c33a <codrvCanErrorInterrupt+0x22>
 810c332:	70c3      	strb	r3, [r0, #3]
 810c334:	b00d      	add	sp, #52	@ 0x34
 810c336:	f85d fb04 	ldr.w	pc, [sp], #4
 810c33a:	9a04      	ldr	r2, [sp, #16]
 810c33c:	b10a      	cbz	r2, 810c342 <codrvCanErrorInterrupt+0x2a>
 810c33e:	7043      	strb	r3, [r0, #1]
 810c340:	e7f8      	b.n	810c334 <codrvCanErrorInterrupt+0x1c>
 810c342:	7083      	strb	r3, [r0, #2]
 810c344:	e7f6      	b.n	810c334 <codrvCanErrorInterrupt+0x1c>
 810c346:	bf00      	nop
 810c348:	10000018 	.word	0x10000018

0810c34c <FDCAN1_IT0_IRQHandler>:
 810c34c:	b508      	push	{r3, lr}
 810c34e:	f7ff ff4f 	bl	810c1f0 <codrvCanTransmitInterrupt>
 810c352:	f7ff ffa7 	bl	810c2a4 <codrvCanReceiveInterrupt>
 810c356:	f7ff ffdf 	bl	810c318 <codrvCanErrorInterrupt>
 810c35a:	4b03      	ldr	r3, [pc, #12]	@ (810c368 <FDCAN1_IT0_IRQHandler+0x1c>)
 810c35c:	6818      	ldr	r0, [r3, #0]
 810c35e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810c362:	f7f6 bb3d 	b.w	81029e0 <HAL_FDCAN_IRQHandler>
 810c366:	bf00      	nop
 810c368:	10000018 	.word	0x10000018

0810c36c <codrvCanErrorGetFlags>:
 810c36c:	4800      	ldr	r0, [pc, #0]	@ (810c370 <codrvCanErrorGetFlags+0x4>)
 810c36e:	4770      	bx	lr
 810c370:	10004ec4 	.word	0x10004ec4

0810c374 <memset>:
 810c374:	4402      	add	r2, r0
 810c376:	4603      	mov	r3, r0
 810c378:	4293      	cmp	r3, r2
 810c37a:	d100      	bne.n	810c37e <memset+0xa>
 810c37c:	4770      	bx	lr
 810c37e:	f803 1b01 	strb.w	r1, [r3], #1
 810c382:	e7f9      	b.n	810c378 <memset+0x4>

0810c384 <__libc_init_array>:
 810c384:	b570      	push	{r4, r5, r6, lr}
 810c386:	4d0d      	ldr	r5, [pc, #52]	@ (810c3bc <__libc_init_array+0x38>)
 810c388:	4c0d      	ldr	r4, [pc, #52]	@ (810c3c0 <__libc_init_array+0x3c>)
 810c38a:	1b64      	subs	r4, r4, r5
 810c38c:	10a4      	asrs	r4, r4, #2
 810c38e:	2600      	movs	r6, #0
 810c390:	42a6      	cmp	r6, r4
 810c392:	d109      	bne.n	810c3a8 <__libc_init_array+0x24>
 810c394:	4d0b      	ldr	r5, [pc, #44]	@ (810c3c4 <__libc_init_array+0x40>)
 810c396:	4c0c      	ldr	r4, [pc, #48]	@ (810c3c8 <__libc_init_array+0x44>)
 810c398:	f000 f826 	bl	810c3e8 <_init>
 810c39c:	1b64      	subs	r4, r4, r5
 810c39e:	10a4      	asrs	r4, r4, #2
 810c3a0:	2600      	movs	r6, #0
 810c3a2:	42a6      	cmp	r6, r4
 810c3a4:	d105      	bne.n	810c3b2 <__libc_init_array+0x2e>
 810c3a6:	bd70      	pop	{r4, r5, r6, pc}
 810c3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 810c3ac:	4798      	blx	r3
 810c3ae:	3601      	adds	r6, #1
 810c3b0:	e7ee      	b.n	810c390 <__libc_init_array+0xc>
 810c3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 810c3b6:	4798      	blx	r3
 810c3b8:	3601      	adds	r6, #1
 810c3ba:	e7f2      	b.n	810c3a2 <__libc_init_array+0x1e>
 810c3bc:	0810c4ec 	.word	0x0810c4ec
 810c3c0:	0810c4ec 	.word	0x0810c4ec
 810c3c4:	0810c4ec 	.word	0x0810c4ec
 810c3c8:	0810c4f0 	.word	0x0810c4f0

0810c3cc <memcpy>:
 810c3cc:	440a      	add	r2, r1
 810c3ce:	4291      	cmp	r1, r2
 810c3d0:	f100 33ff 	add.w	r3, r0, #4294967295
 810c3d4:	d100      	bne.n	810c3d8 <memcpy+0xc>
 810c3d6:	4770      	bx	lr
 810c3d8:	b510      	push	{r4, lr}
 810c3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 810c3e2:	4291      	cmp	r1, r2
 810c3e4:	d1f9      	bne.n	810c3da <memcpy+0xe>
 810c3e6:	bd10      	pop	{r4, pc}

0810c3e8 <_init>:
 810c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c3ea:	bf00      	nop
 810c3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c3ee:	bc08      	pop	{r3}
 810c3f0:	469e      	mov	lr, r3
 810c3f2:	4770      	bx	lr

0810c3f4 <_fini>:
 810c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c3f6:	bf00      	nop
 810c3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c3fa:	bc08      	pop	{r3}
 810c3fc:	469e      	mov	lr, r3
 810c3fe:	4770      	bx	lr
